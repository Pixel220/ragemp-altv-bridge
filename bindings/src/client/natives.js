
import * as natives from 'natives';
import * as alt from 'alt-client';
import mp from '../shared/mp.js';
if (!mp.game2) mp.game2 = {};
const hashes = {};

if (!mp.Ped) mp.Ped = {};
if (!mp.Ped.prototype) mp.Ped.prototype = {};
if (!mp.Player) mp.Player = {};
if (!mp.Player.prototype) mp.Player.prototype = {};
if (!mp.Object) mp.Object = {};
if (!mp.Object.prototype) mp.Object.prototype = {};
if (!mp.Blip) mp.Blip = {};
if (!mp.Blip.prototype) mp.Blip.prototype = {};
if (!mp.Vehicle) mp.Vehicle = {};
if (!mp.Vehicle.prototype) mp.Vehicle.prototype = {};
if (!mp.Checkpoint) mp.Checkpoint = {};
if (!mp.Checkpoint.prototype) mp.Checkpoint.prototype = {};
if (!mp.Camera) mp.Camera = {};
if (!mp.Camera.prototype) mp.Camera.prototype = {};
if (!mp.game2.system) mp.game2.system = {};
mp.game2.system.wait = function (ms) {
    let $res = natives.wait(ms);
};
mp.game2.system.startNewScript = function (scriptName, stackSize) {
    let $res = natives.startNewScript(scriptName, stackSize);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.startNewScriptWithArgs = function (scriptName, argCount, stackSize) {
    let $res = natives.startNewScriptWithArgs(scriptName, 0, argCount, stackSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.args = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.system.startNewScriptWithNameHash = function (scriptHash, stackSize) {
    let $res = natives.startNewScriptWithNameHash(scriptHash, stackSize);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.startNewStreamedScript = function (scriptHash, stackSize) {
    let $res = natives.startNewScriptWithNameHash(scriptHash, stackSize);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.startNewScriptWithNameHashAndArgs = function (scriptHash, argCount, stackSize) {
    let $res = natives.startNewScriptWithNameHashAndArgs(scriptHash, 0, argCount, stackSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.args = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.system.startNewStreamedScriptWithArgs = function (scriptHash, argCount, stackSize) {
    let $res = natives.startNewScriptWithNameHashAndArgs(scriptHash, 0, argCount, stackSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.args = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.system.timera = function () {
    let $res = natives.timera();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.timerb = function () {
    let $res = natives.timerb();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.settimera = function (value) {
    let $res = natives.settimera(value);
};
mp.game2.system.settimerb = function (value) {
    let $res = natives.settimerb(value);
};
mp.game2.system.timestep = function () {
    let $res = natives.timestep();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.sin = function (value) {
    let $res = natives.sin(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.cos = function (value) {
    let $res = natives.cos(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.sqrt = function (value) {
    let $res = natives.sqrt(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.pow = function (base, exponent) {
    let $res = natives.pow(base, exponent);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.log10 = function (value) {
    let $res = natives.log10(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.vmag = function (x, y, z) {
    let $res = natives.vmag(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.vmag2 = function (x, y, z) {
    let $res = natives.vmag2(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.vdist = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.vdist(x1, y1, z1, x2, y2, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.vdist2 = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.vdist2(x1, y1, z1, x2, y2, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.shiftLeft = function (value, bitShift) {
    let $res = natives.shiftLeft(value, bitShift);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.shiftRight = function (value, bitShift) {
    let $res = natives.shiftRight(value, bitShift);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.floor = function (value) {
    let $res = natives.floor(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.ceil = function (value) {
    let $res = natives.ceil(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.round = function (value) {
    let $res = natives.round(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.toFloat = function (value) {
    let $res = natives.toFloat(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.system.setThreadPriority = function (priority) {
    let $res = natives.setThisThreadPriority(priority);
};
if (!mp.game2.app) mp.game2.app = {};
mp.game2.app.dataValid = function () {
    let $res = natives.appDataValid();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.app.getInt = function (property) {
    let $res = natives.appGetInt(property);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.app.appGetInt = function (property) {
    let $res = natives.appGetInt(property);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.app.getFloat = function (property) {
    let $res = natives.appGetFloat(property);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.app.appGetFloat = function (property) {
    let $res = natives.appGetFloat(property);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.app.getString = function (property) {
    let $res = natives.appGetString(property);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.app.appGetString = function (property) {
    let $res = natives.appGetString(property);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.app.setInt = function (property, value) {
    let $res = natives.appSetInt(property, value);
};
mp.game2.app.appSetInt = function (property, value) {
    let $res = natives.appSetInt(property, value);
};
mp.game2.app.setFloat = function (property, value) {
    let $res = natives.appSetFloat(property, value);
};
mp.game2.app.appSetFloat = function (property, value) {
    let $res = natives.appSetFloat(property, value);
};
mp.game2.app.setString = function (property, value) {
    let $res = natives.appSetString(property, value);
};
mp.game2.app.appSetString = function (property, value) {
    let $res = natives.appSetString(property, value);
};
mp.game2.app.setApp = function (appName) {
    let $res = natives.appSetApp(appName);
};
mp.game2.app.appSetApp = function (appName) {
    let $res = natives.appSetApp(appName);
};
mp.game2.app.setBlock = function (blockName) {
    let $res = natives.appSetBlock(blockName);
};
mp.game2.app.appSetBlock = function (blockName) {
    let $res = natives.appSetBlock(blockName);
};
mp.game2.app.clearBlock = function () {
    let $res = natives.appClearBlock();
};
mp.game2.app.closeApp = function () {
    let $res = natives.appCloseApp();
};
mp.game2.app.closeBlock = function () {
    let $res = natives.appCloseBlock();
};
mp.game2.app.hasLinkedSocialClubAccount = function () {
    let $res = natives.appHasLinkedSocialClubAccount();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.app.hasSyncedData = function (appName) {
    let $res = natives.appHasSyncedData(appName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.app.appHasSyncedData = function (appName) {
    let $res = natives.appHasSyncedData(appName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.app.saveData = function () {
    let $res = natives.appSaveData();
};
mp.game2.app.getDeletedFileStatus = function () {
    let $res = natives.appGetDeletedFileStatus();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.app.deleteAppData = function (appName) {
    let $res = natives.appDeleteAppData(appName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.app.appDeleteAppData = function (appName) {
    let $res = natives.appDeleteAppData(appName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedRingtonePlaying = function () {
    let $res = natives.isPedRingtonePlaying(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedRingtonePlaying = function () {
    let $res = natives.isPedRingtonePlaying(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.stopPedRingtone = function () {
    let $res = natives.stopPedRingtone(this.handle);
};
mp.Ped.prototype.stopPedRingtone = function () {
    let $res = natives.stopPedRingtone(this.handle);
};
mp.Player.prototype.interruptConversationAndPause = function (p1, p2) {
    let $res = natives.interruptConversationAndPause(this.handle, p1, p2);
};
mp.Ped.prototype.interruptConversationAndPause = function (p1, p2) {
    let $res = natives.interruptConversationAndPause(this.handle, p1, p2);
};
mp.Player.prototype.playPedAmbientSpeechNative = function (speechName, speechParam, p3) {
    let $res = natives.playPedAmbientSpeechNative(this.handle, speechName, speechParam, p3 | 0);
};
mp.Ped.prototype.playPedAmbientSpeechNative = function (speechName, speechParam, p3) {
    let $res = natives.playPedAmbientSpeechNative(this.handle, speechName, speechParam, p3 | 0);
};
mp.Player.prototype.playPedAmbientSpeechAndCloneNative = function (speechName, speechParam, p3) {
    let $res = natives.playPedAmbientSpeechAndCloneNative(this.handle, speechName, speechParam, p3 | 0);
};
mp.Ped.prototype.playPedAmbientSpeechAndCloneNative = function (speechName, speechParam, p3) {
    let $res = natives.playPedAmbientSpeechAndCloneNative(this.handle, speechName, speechParam, p3 | 0);
};
mp.Player.prototype.playPedAmbientSpeechWithVoiceNative = function (speechName, voiceName, speechParam, p4) {
    let $res = natives.playPedAmbientSpeechWithVoiceNative(this.handle, speechName, voiceName, speechParam, p4 | 0);
};
mp.Ped.prototype.playPedAmbientSpeechWithVoiceNative = function (speechName, voiceName, speechParam, p4) {
    let $res = natives.playPedAmbientSpeechWithVoiceNative(this.handle, speechName, voiceName, speechParam, p4 | 0);
};
mp.Player.prototype.setPlayerAngry = function (toggle) {
    let $res = natives.setPlayerAngry(this.handle, toggle | 0);
};
mp.Ped.prototype.setPlayerAngry = function (toggle) {
    let $res = natives.setPlayerAngry(this.handle, toggle | 0);
};
mp.Player.prototype.playPain = function (painID, p1, p3) {
    let $res = natives.playPain(this.handle, painID, p1, p3 | 0);
};
mp.Ped.prototype.playPain = function (painID, p1, p3) {
    let $res = natives.playPain(this.handle, painID, p1, p3 | 0);
};
mp.Player.prototype.setAmbientVoiceName = function (name) {
    let $res = natives.setAmbientVoiceName(this.handle, name);
};
mp.Ped.prototype.setAmbientVoiceName = function (name) {
    let $res = natives.setAmbientVoiceName(this.handle, name);
};
mp.Player.prototype.setAmbientVoiceNameHash = function (hash) {
    let $res = natives.setAmbientVoiceNameHash(this.handle, hash);
};
mp.Ped.prototype.setAmbientVoiceNameHash = function (hash) {
    let $res = natives.setAmbientVoiceNameHash(this.handle, hash);
};
mp.Player.prototype.getAmbientVoiceNameHash = function () {
    let $res = natives.getAmbientVoiceNameHash(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAmbientVoiceNameHash = function () {
    let $res = natives.getAmbientVoiceNameHash(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setPedScream = function () {
    let $res = natives.setPedVoiceFull(this.handle);
};
mp.Ped.prototype.setPedScream = function () {
    let $res = natives.setPedVoiceFull(this.handle);
};
mp.Player.prototype.setPedVoiceGroup = function (voiceGroupHash) {
    let $res = natives.setPedVoiceGroup(this.handle, voiceGroupHash);
};
mp.Ped.prototype.setPedVoiceGroup = function (voiceGroupHash) {
    let $res = natives.setPedVoiceGroup(this.handle, voiceGroupHash);
};
mp.Player.prototype.setPedGender = function (p1) {
    let $res = natives.setPedGender(this.handle, p1 | 0);
};
mp.Ped.prototype.setPedGender = function (p1) {
    let $res = natives.setPedGender(this.handle, p1 | 0);
};
mp.Player.prototype.stopCurrentPlayingSpeech = function () {
    let $res = natives.stopCurrentPlayingSpeech(this.handle);
};
mp.Ped.prototype.stopCurrentPlayingSpeech = function () {
    let $res = natives.stopCurrentPlayingSpeech(this.handle);
};
mp.Player.prototype.stopCurrentPlayingAmbientSpeech = function () {
    let $res = natives.stopCurrentPlayingAmbientSpeech(this.handle);
};
mp.Ped.prototype.stopCurrentPlayingAmbientSpeech = function () {
    let $res = natives.stopCurrentPlayingAmbientSpeech(this.handle);
};
mp.Player.prototype.isAmbientSpeechPlaying = function () {
    let $res = natives.isAmbientSpeechPlaying(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAmbientSpeechPlaying = function () {
    let $res = natives.isAmbientSpeechPlaying(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAnySpeechPlaying = function () {
    let $res = natives.isAnySpeechPlaying(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAnySpeechPlaying = function () {
    let $res = natives.isAnySpeechPlaying(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.canPedSpeak = function (speechName, unk) {
    let $res = natives.doesContextExistForThisPed(this.handle, speechName, unk | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.canPedSpeak = function (speechName, unk) {
    let $res = natives.doesContextExistForThisPed(this.handle, speechName, unk | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedInCurrentConversation = function () {
    let $res = natives.isPedInCurrentConversation(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedInCurrentConversation = function () {
    let $res = natives.isPedInCurrentConversation(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setPedIsDrunk = function (toggle) {
    let $res = natives.setPedIsDrunk(this.handle, toggle | 0);
};
mp.Ped.prototype.setPedIsDrunk = function (toggle) {
    let $res = natives.setPedIsDrunk(this.handle, toggle | 0);
};
mp.Player.prototype.playAnimalVocalization = function (p1, speechName) {
    let $res = natives.playAnimalVocalization(this.handle, p1, speechName);
};
mp.Ped.prototype.playAnimalVocalization = function (p1, speechName) {
    let $res = natives.playAnimalVocalization(this.handle, p1, speechName);
};
mp.Player.prototype.isAnimalVocalizationPlaying = function () {
    let $res = natives.isAnimalVocalizationPlaying(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAnimalVocalizationPlaying = function () {
    let $res = natives.isAnimalVocalizationPlaying(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setAnimalMood = function (mood) {
    let $res = natives.setAnimalMood(this.handle, mood);
};
mp.Ped.prototype.setAnimalMood = function (mood) {
    let $res = natives.setAnimalMood(this.handle, mood);
};
mp.Vehicle.prototype.setVehRadioStation = function (radioStation) {
    let $res = natives.setVehRadioStation(this.handle, radioStation);
};
mp.Vehicle.prototype.setVehHasRadioOverride = function () {
    let $res = natives.setVehHasNormalRadio(this.handle);
};
mp.Vehicle.prototype.isVehicleRadioEnabled = function () {
    let $res = natives.isVehicleRadioOn(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setVehicleRadioLoud = function (toggle) {
    let $res = natives.setVehicleRadioLoud(this.handle, toggle | 0);
};
mp.Vehicle.prototype.isVehicleRadioLoud = function () {
    let $res = natives.canVehicleReceiveCbRadio(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setVehicleRadioEnabled = function (toggle) {
    let $res = natives.setVehicleRadioEnabled(this.handle, toggle | 0);
};
mp.Vehicle.prototype.blipSiren = function () {
    let $res = natives.blipSiren(this.handle);
};
mp.Vehicle.prototype.overrideVehHorn = function (override, hornHash) {
    let $res = natives.overrideVehHorn(this.handle, override | 0, hornHash);
};
mp.Vehicle.prototype.isHornActive = function () {
    let $res = natives.isHornActive(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.playStreamFromPed = function () {
    let $res = natives.playStreamFromPed(this.handle);
};
mp.Ped.prototype.playStreamFromPed = function () {
    let $res = natives.playStreamFromPed(this.handle);
};
mp.Vehicle.prototype.playStreamFromVehicle = function () {
    let $res = natives.playStreamFromVehicle(this.handle);
};
mp.Object.prototype.playStreamFromObject = function () {
    let $res = natives.playStreamFromObject(this.handle);
};
mp.Player.prototype.stopPedSpeaking = function (shaking) {
    let $res = natives.stopPedSpeaking(this.handle, shaking | 0);
};
mp.Ped.prototype.stopPedSpeaking = function (shaking) {
    let $res = natives.stopPedSpeaking(this.handle, shaking | 0);
};
mp.Player.prototype.disablePedPain = function (toggle) {
    let $res = natives.disablePedPainAudio(this.handle, toggle | 0);
};
mp.Ped.prototype.disablePedPain = function (toggle) {
    let $res = natives.disablePedPainAudio(this.handle, toggle | 0);
};
mp.Player.prototype.isAmbientSpeechDisabled = function () {
    let $res = natives.isAmbientSpeechDisabled(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAmbientSpeechDisabled = function () {
    let $res = natives.isAmbientSpeechDisabled(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setSirenWithNoDriver = function (toggle) {
    let $res = natives.setSirenWithNoDriver(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setSirenKeepOn = function (toggle) {
    let $res = natives.setSirenBypassMpDriverCheck(this.handle, toggle | 0);
};
mp.Vehicle.prototype.triggerSiren = function () {
    let $res = natives.triggerSirenAudio(this.handle);
};
mp.Vehicle.prototype.setHornPermanentlyOn = function () {
    let $res = natives.setHornPermanentlyOn(this.handle);
};
mp.Vehicle.prototype.setHornEnabled = function (toggle) {
    let $res = natives.setHornEnabled(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setVehiclePriority = function (p1) {
    let $res = natives.setAudioVehiclePriority(this.handle, p1);
};
mp.Vehicle.prototype.setHornPermanentlyOnTime = function (time) {
    let $res = natives.setHornPermanentlyOnTime(this.handle, time);
};
mp.Vehicle.prototype.useSirenAsHorn = function (toggle) {
    let $res = natives.useSirenAsHorn(this.handle, toggle | 0);
};
mp.Vehicle.prototype.forceVehicleEngine = function (audioName) {
    let $res = natives.forceUseAudioGameObject(this.handle, audioName);
};
mp.Vehicle.prototype.setVehicleStartupRevSound = function (p1, p2) {
    let $res = natives.setVehicleStartupRevSound(this.handle, p1, p2);
};
mp.Vehicle.prototype.resetVehicleStartupRevSound = function () {
    let $res = natives.resetVehicleStartupRevSound(this.handle);
};
mp.Vehicle.prototype.isVehicleAudiblyDamaged = function () {
    let $res = natives.isVehicleAudiblyDamaged(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setVehicleEngineDamageFactor = function (damageFactor) {
    let $res = natives.setVehicleAudioEngineDamageFactor(this.handle, damageFactor);
};
mp.Vehicle.prototype.setVehicleBodyDamageFactor = function (intensity) {
    let $res = natives.setVehicleAudioBodyDamageFactor(this.handle, intensity);
};
mp.Vehicle.prototype.enableVehicleFanbeltDamage = function (toggle) {
    let $res = natives.enableVehicleFanbeltDamage(this.handle, toggle | 0);
};
mp.Vehicle.prototype.enableVehicleExhaustPops = function (toggle) {
    let $res = natives.enableVehicleExhaustPops(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setVehicleBoostActive = function (toggle) {
    let $res = natives.setVehicleBoostActive(this.handle, toggle | 0);
};
mp.Vehicle.prototype.playVehicleDoorOpenSound = function (doorId) {
    let $res = natives.playVehicleDoorOpenSound(this.handle, doorId);
};
mp.Vehicle.prototype.playVehicleDoorCloseSound = function (doorId) {
    let $res = natives.playVehicleDoorCloseSound(this.handle, doorId);
};
mp.Vehicle.prototype.enableStallWarningSounds = function (toggle) {
    let $res = natives.enableStallWarningSounds(this.handle, toggle | 0);
};
mp.Player.prototype.addEntityToMixGroup = function (groupName, p2) {
    let $res = natives.addEntityToAudioMixGroup(this.handle, groupName, p2);
};
mp.Ped.prototype.addEntityToMixGroup = function (groupName, p2) {
    let $res = natives.addEntityToAudioMixGroup(this.handle, groupName, p2);
};
mp.Object.prototype.addEntityToMixGroup = function (groupName, p2) {
    let $res = natives.addEntityToAudioMixGroup(this.handle, groupName, p2);
};
mp.Vehicle.prototype.addEntityToMixGroup = function (groupName, p2) {
    let $res = natives.addEntityToAudioMixGroup(this.handle, groupName, p2);
};
mp.Player.prototype.removeEntityFromMixGroup = function (p1) {
    let $res = natives.removeEntityFromAudioMixGroup(this.handle, p1);
};
mp.Ped.prototype.removeEntityFromMixGroup = function (p1) {
    let $res = natives.removeEntityFromAudioMixGroup(this.handle, p1);
};
mp.Object.prototype.removeEntityFromMixGroup = function (p1) {
    let $res = natives.removeEntityFromAudioMixGroup(this.handle, p1);
};
mp.Vehicle.prototype.removeEntityFromMixGroup = function (p1) {
    let $res = natives.removeEntityFromAudioMixGroup(this.handle, p1);
};
mp.Vehicle.prototype.getVehicleDefaultHorn = function () {
    let $res = natives.getVehicleDefaultHorn(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getVehicleDefaultHornIgnoreMods = function () {
    let $res = natives.getVehicleDefaultHornIgnoreMods(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.resetPedFlags = function () {
    let $res = natives.resetPedAudioFlags(this.handle);
};
mp.Ped.prototype.resetPedFlags = function () {
    let $res = natives.resetPedAudioFlags(this.handle);
};
mp.Player.prototype.setPedFootstepLoud = function (toggle) {
    let $res = natives.setPedFootstepsEventsEnabled(this.handle, toggle | 0);
};
mp.Ped.prototype.setPedFootstepLoud = function (toggle) {
    let $res = natives.setPedFootstepsEventsEnabled(this.handle, toggle | 0);
};
mp.Player.prototype.setPedFootstepQuiet = function (toggle) {
    let $res = natives.setPedClothEventsEnabled(this.handle, toggle | 0);
};
mp.Ped.prototype.setPedFootstepQuiet = function (toggle) {
    let $res = natives.setPedClothEventsEnabled(this.handle, toggle | 0);
};
mp.Player.prototype.requestTennisBanks = function () {
    let $res = natives.requestTennisBanks(this.handle);
};
mp.Ped.prototype.requestTennisBanks = function () {
    let $res = natives.requestTennisBanks(this.handle);
};
mp.Vehicle.prototype.getVehicleDefaultHornVariation = function () {
    let $res = natives.getVehicleHornSoundIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setVehicleHornVariation = function (value) {
    let $res = natives.setVehicleHornSoundIndex(this.handle, value);
};
if (!mp.game2.audio) mp.game2.audio = {};
mp.game2.audio.playPedRingtone = function (ringtoneName, ped, p2) {
    let $res = natives.playPedRingtone(ringtoneName, ped, p2 | 0);
};
mp.game2.audio.isPedRingtonePlaying = function (ped) {
    let $res = natives.isPedRingtonePlaying(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.stopPedRingtone = function (ped) {
    let $res = natives.stopPedRingtone(ped);
};
mp.game2.audio.isMobilePhoneCallOngoing = function () {
    let $res = natives.isMobilePhoneCallOngoing();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.createNewScriptedConversation = function () {
    let $res = natives.createNewScriptedConversation();
};
mp.game2.audio.addLineToConversation = function (index, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    let $res = natives.addLineToConversation(index, p1, p2, p3, p4, p5 | 0, p6 | 0, p7 | 0, p8 | 0, p9, p10 | 0, p11 | 0, p12 | 0);
};
mp.game2.audio.addPedToConversation = function (index, ped, p2) {
    let $res = natives.addPedToConversation(index, ped, p2);
};
mp.game2.audio.setMicrophonePosition = function (p0, x1, y1, z1, x2, y2, z2, x3, y3, z3) {
    let $res = natives.setMicrophonePosition(p0 | 0, x1, y1, z1, x2, y2, z2, x3, y3, z3);
};
mp.game2.audio.startScriptPhoneConversation = function (p0, p1) {
    let $res = natives.startScriptPhoneConversation(p0 | 0, p1 | 0);
};
mp.game2.audio.preloadScriptPhoneConversation = function (p0, p1) {
    let $res = natives.preloadScriptPhoneConversation(p0 | 0, p1 | 0);
};
mp.game2.audio.startScriptConversation = function (p0, p1, p2, p3) {
    let $res = natives.startScriptConversation(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
};
mp.game2.audio.preloadScriptConversation = function (p0, p1, p2, p3) {
    let $res = natives.preloadScriptConversation(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
};
mp.game2.audio.startPreloadedConversation = function () {
    let $res = natives.startPreloadedConversation();
};
mp.game2.audio.getIsPreloadedConversationReady = function () {
    let $res = natives.getIsPreloadedConversationReady();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isScriptedConversationOngoing = function () {
    let $res = natives.isScriptedConversationOngoing();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isScriptedConversationLoaded = function () {
    let $res = natives.isScriptedConversationLoaded();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.getCurrentScriptedConversationLine = function () {
    let $res = natives.getCurrentScriptedConversationLine();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.pauseScriptedConversation = function (p0) {
    let $res = natives.pauseScriptedConversation(p0 | 0);
};
mp.game2.audio.restartScriptedConversation = function () {
    let $res = natives.restartScriptedConversation();
};
mp.game2.audio.stopScriptedConversation = function (p0) {
    let $res = natives.stopScriptedConversation(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.skipToNextScriptedConversationLine = function () {
    let $res = natives.skipToNextScriptedConversationLine();
};
mp.game2.audio.interruptConversation = function (p0) {
    let $res = natives.interruptConversation(p0, null, null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    return $resObj;
};
mp.game2.audio.interruptConversationAndPause = function (ped, p1, p2) {
    let $res = natives.interruptConversationAndPause(ped, p1, p2);
};
mp.game2.audio.registerScriptWith = function (p0) {
    let $res = natives.registerScriptWithAudio(p0);
};
mp.game2.audio.registerScriptWithAudio = function (p0) {
    let $res = natives.registerScriptWithAudio(p0);
};
mp.game2.audio.unregisterScriptWith = function () {
    let $res = natives.unregisterScriptWithAudio();
};
mp.game2.audio.requestMissionBank = function (p0, p1, p2) {
    let $res = natives.requestMissionAudioBank(p0, p1 | 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.requestMissionAudioBank = function (p0, p1, p2) {
    let $res = natives.requestMissionAudioBank(p0, p1 | 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.requestAmbientBank = function (p0, p1, p2) {
    let $res = natives.requestAmbientAudioBank(p0, p1 | 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.requestAmbientAudioBank = function (p0, p1, p2) {
    let $res = natives.requestAmbientAudioBank(p0, p1 | 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.requestScriptBank = function (p0, p1, p2) {
    let $res = natives.requestScriptAudioBank(p0, p1 | 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.requestScriptAudioBank = function (p0, p1, p2) {
    let $res = natives.requestScriptAudioBank(p0, p1 | 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.hintAmbientBank = function (p0, p1, p2) {
    let $res = natives.hintAmbientAudioBank(p0, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.hintAmbientAudioBank = function (p0, p1, p2) {
    let $res = natives.hintAmbientAudioBank(p0, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.hintScriptBank = function (p0, p1, p2) {
    let $res = natives.hintScriptAudioBank(p0, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.hintScriptAudioBank = function (p0, p1, p2) {
    let $res = natives.hintScriptAudioBank(p0, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.releaseMissionBank = function () {
    let $res = natives.releaseMissionAudioBank();
};
mp.game2.audio.releaseAmbientBank = function () {
    let $res = natives.releaseAmbientAudioBank();
};
mp.game2.audio.releaseNamedScriptBank = function (audioBank) {
    let $res = natives.releaseNamedScriptAudioBank(audioBank);
};
mp.game2.audio.releaseNamedScriptAudioBank = function (audioBank) {
    let $res = natives.releaseNamedScriptAudioBank(audioBank);
};
mp.game2.audio.releaseScriptBank = function () {
    let $res = natives.releaseScriptAudioBank();
};
mp.game2.audio.getSoundId = function () {
    let $res = natives.getSoundId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.releaseSoundId = function (soundId) {
    let $res = natives.releaseSoundId(soundId);
};
mp.game2.audio.playSound = function (soundId, audioName, audioRef, p3, p4, p5) {
    let $res = natives.playSound(soundId, audioName, audioRef, p3 | 0, p4, p5 | 0);
};
mp.game2.audio.playSoundFrontend = function (soundId, audioName, audioRef, p3) {
    let $res = natives.playSoundFrontend(soundId, audioName, audioRef, p3 | 0);
};
mp.game2.audio.playDeferredSoundFrontend = function (soundName, soundsetName) {
    let $res = natives.playDeferredSoundFrontend(soundName, soundsetName);
};
mp.game2.audio.playSoundFromEntity = function (soundId, audioName, entity, audioRef, isNetwork, p5) {
    let $res = natives.playSoundFromEntity(soundId, audioName, entity, audioRef, isNetwork | 0, p5);
};
mp.game2.audio.playSoundFromCoord = function (soundId, audioName, x, y, z, audioRef, isNetwork, range, p8) {
    let $res = natives.playSoundFromCoord(soundId, audioName, x, y, z, audioRef, isNetwork | 0, range, p8 | 0);
};
mp.game2.audio.stopSound = function (soundId) {
    let $res = natives.stopSound(soundId);
};
mp.game2.audio.getNetworkIdFromSoundId = function (soundId) {
    let $res = natives.getNetworkIdFromSoundId(soundId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.getSoundIdFromNetworkId = function (netId) {
    let $res = natives.getSoundIdFromNetworkId(netId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.setVariableOnSound = function (soundId, p2) {
    let $res = natives.setVariableOnSound(soundId, null, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $resObj.p1;
};
mp.game2.audio.setVariableOnStream = function (p0, p1) {
    let $res = natives.setVariableOnStream(p0, p1);
};
mp.game2.audio.overrideUnderwaterStream = function (p1) {
    let $res = natives.overrideUnderwaterStream(null, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.audio.setVariableOnUnderWaterStream = function (variableName, value) {
    let $res = natives.setVariableOnUnderWaterStream(variableName, value);
};
mp.game2.audio.hasSoundFinished = function (soundId) {
    let $res = natives.hasSoundFinished(soundId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.playPedAmbientSpeechNative = function (ped, speechName, speechParam, p3) {
    let $res = natives.playPedAmbientSpeechNative(ped, speechName, speechParam, p3 | 0);
};
mp.game2.audio.playPedAmbientSpeechAndCloneNative = function (ped, speechName, speechParam, p3) {
    let $res = natives.playPedAmbientSpeechAndCloneNative(ped, speechName, speechParam, p3 | 0);
};
mp.game2.audio.playPedAmbientSpeechWithVoiceNative = function (ped, speechName, voiceName, speechParam, p4) {
    let $res = natives.playPedAmbientSpeechWithVoiceNative(ped, speechName, voiceName, speechParam, p4 | 0);
};
mp.game2.audio.playAmbientSpeechWithVoice = function (ped, speechName, voiceName, speechParam, p4) {
    let $res = natives.playPedAmbientSpeechWithVoiceNative(ped, speechName, voiceName, speechParam, p4 | 0);
};
mp.game2.audio.playAmbientSpeechFromPositionNative = function (speechName, voiceName, x, y, z, speechParam) {
    let $res = natives.playAmbientSpeechFromPositionNative(speechName, voiceName, x, y, z, speechParam);
};
mp.game2.audio.playAmbientSpeechAtCoords = function (speechName, voiceName, x, y, z, speechParam) {
    let $res = natives.playAmbientSpeechFromPositionNative(speechName, voiceName, x, y, z, speechParam);
};
mp.game2.audio.overrideTrevorRage = function (voiceEffect) {
    let $res = natives.overrideTrevorRage(voiceEffect);
};
mp.game2.audio.resetTrevorRage = function () {
    let $res = natives.resetTrevorRage();
};
mp.game2.audio.setPlayerAngry = function (ped, toggle) {
    let $res = natives.setPlayerAngry(ped, toggle | 0);
};
mp.game2.audio.playPain = function (ped, painID, p1, p3) {
    let $res = natives.playPain(ped, painID, p1, p3 | 0);
};
mp.game2.audio.releaseWeapon = function () {
    let $res = natives.releaseWeaponAudio();
};
mp.game2.audio.activateSlowmoMode = function (p0) {
    let $res = natives.activateAudioSlowmoMode(p0);
};
mp.game2.audio.deactivateSlowmoMode = function (p0) {
    let $res = natives.deactivateAudioSlowmoMode(p0);
};
mp.game2.audio.setAmbientVoiceName = function (ped, name) {
    let $res = natives.setAmbientVoiceName(ped, name);
};
mp.game2.audio.setAmbientVoiceNameHash = function (ped, hash) {
    let $res = natives.setAmbientVoiceNameHash(ped, hash);
};
mp.game2.audio.getAmbientVoiceNameHash = function (ped) {
    let $res = natives.getAmbientVoiceNameHash(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.setPedScream = function (ped) {
    let $res = natives.setPedVoiceFull(ped);
};
mp.game2.audio.setPedVoiceGroup = function (ped, voiceGroupHash) {
    let $res = natives.setPedVoiceGroup(ped, voiceGroupHash);
};
mp.game2.audio.setPedGender = function (ped, p1) {
    let $res = natives.setPedGender(ped, p1 | 0);
};
mp.game2.audio.stopCurrentPlayingSpeech = function (ped) {
    let $res = natives.stopCurrentPlayingSpeech(ped);
};
mp.game2.audio.stopCurrentPlayingAmbientSpeech = function (ped) {
    let $res = natives.stopCurrentPlayingAmbientSpeech(ped);
};
mp.game2.audio.isAmbientSpeechPlaying = function (ped) {
    let $res = natives.isAmbientSpeechPlaying(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isScriptedSpeechPlaying = function (p0) {
    let $res = natives.isScriptedSpeechPlaying(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isAnySpeechPlaying = function (ped) {
    let $res = natives.isAnySpeechPlaying(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.canPedSpeak = function (ped, speechName, unk) {
    let $res = natives.doesContextExistForThisPed(ped, speechName, unk | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isPedInCurrentConversation = function (ped) {
    let $res = natives.isPedInCurrentConversation(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setPedIsDrunk = function (ped, toggle) {
    let $res = natives.setPedIsDrunk(ped, toggle | 0);
};
mp.game2.audio.playAnimalVocalization = function (pedHandle, p1, speechName) {
    let $res = natives.playAnimalVocalization(pedHandle, p1, speechName);
};
mp.game2.audio.isAnimalVocalizationPlaying = function (pedHandle) {
    let $res = natives.isAnimalVocalizationPlaying(pedHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setAnimalMood = function (animal, mood) {
    let $res = natives.setAnimalMood(animal, mood);
};
mp.game2.audio.isMobilePhoneRadioActive = function () {
    let $res = natives.isMobilePhoneRadioActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setMobilePhoneRadioState = function (state) {
    let $res = natives.setMobilePhoneRadioState(state | 0);
};
mp.game2.audio.getPlayerRadioStationIndex = function () {
    let $res = natives.getPlayerRadioStationIndex();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.getPlayerRadioStationName = function () {
    let $res = natives.getPlayerRadioStationName();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.getRadioStationName = function (radioStation) {
    let $res = natives.getRadioStationName(radioStation);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.getPlayerRadioStationGenre = function () {
    let $res = natives.getPlayerRadioStationGenre();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.isRadioRetuning = function () {
    let $res = natives.isRadioRetuning();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isRadioFadedOut = function () {
    let $res = natives.isRadioFadedOut();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setRadioToStationName = function (stationName) {
    let $res = natives.setRadioToStationName(stationName);
};
mp.game2.audio.setVehRadioStation = function (vehicle, radioStation) {
    let $res = natives.setVehRadioStation(vehicle, radioStation);
};
mp.game2.audio.setVehHasRadioOverride = function (vehicle) {
    let $res = natives.setVehHasNormalRadio(vehicle);
};
mp.game2.audio.isVehicleRadioEnabled = function (vehicle) {
    let $res = natives.isVehicleRadioOn(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setEmitterRadioStation = function (emitterName, radioStation) {
    let $res = natives.setEmitterRadioStation(emitterName, radioStation, 0);
};
mp.game2.audio.setStaticEmitterEnabled = function (emitterName, toggle) {
    let $res = natives.setStaticEmitterEnabled(emitterName, toggle | 0);
};
mp.game2.audio.linkStaticEmitterToEntity = function (emitterName, entity) {
    let $res = natives.linkStaticEmitterToEntity(emitterName, entity);
};
mp.game2.audio.setRadioToStationIndex = function (radioStation) {
    let $res = natives.setRadioToStationIndex(radioStation);
};
mp.game2.audio.setFrontendRadioActive = function (active) {
    let $res = natives.setFrontendRadioActive(active | 0);
};
mp.game2.audio.unlockMissionNewsStory = function (newsStory) {
    let $res = natives.unlockMissionNewsStory(newsStory);
};
mp.game2.audio.isMissionNewsStoryUnlocked = function (newsStory) {
    let $res = natives.isMissionNewsStoryUnlocked(newsStory);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.getNumberOfPassengerVoiceVariations = function (newsStory) {
    let $res = natives.isMissionNewsStoryUnlocked(newsStory);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.getAudibleMusicTrackTextId = function () {
    let $res = natives.getAudibleMusicTrackTextId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.playEndCreditsMusic = function (play) {
    let $res = natives.playEndCreditsMusic(play | 0);
};
mp.game2.audio.skipRadioForward = function () {
    let $res = natives.skipRadioForward();
};
mp.game2.audio.freezeRadioStation = function (radioStation) {
    let $res = natives.freezeRadioStation(radioStation);
};
mp.game2.audio.unfreezeRadioStation = function (radioStation) {
    let $res = natives.unfreezeRadioStation(radioStation);
};
mp.game2.audio.setRadioAutoUnfreeze = function (toggle) {
    let $res = natives.setRadioAutoUnfreeze(toggle | 0);
};
mp.game2.audio.setInitialPlayerStation = function (radioStation) {
    let $res = natives.setInitialPlayerStation(radioStation);
};
mp.game2.audio.setUserRadioControlEnabled = function (toggle) {
    let $res = natives.setUserRadioControlEnabled(toggle | 0);
};
mp.game2.audio.setRadioTrack = function (radioStation, radioTrack) {
    let $res = natives.setRadioTrack(radioStation, radioTrack);
};
mp.game2.audio.setRadioTrackMix = function (radioStationName, mixName, p2) {
    let $res = natives.setRadioTrackWithStartOffset(radioStationName, mixName, p2);
};
mp.game2.audio.setVehicleRadioLoud = function (vehicle, toggle) {
    let $res = natives.setVehicleRadioLoud(vehicle, toggle | 0);
};
mp.game2.audio.isVehicleRadioLoud = function (vehicle) {
    let $res = natives.canVehicleReceiveCbRadio(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setMobileRadioEnabledDuringGameplay = function (toggle) {
    let $res = natives.setMobileRadioEnabledDuringGameplay(toggle | 0);
};
mp.game2.audio.doesPlayerVehHaveRadio = function () {
    let $res = natives.doesPlayerVehHaveRadio();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isPlayerVehRadioEnable = function () {
    let $res = natives.isPlayerVehRadioEnable();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setVehicleRadioEnabled = function (vehicle, toggle) {
    let $res = natives.setVehicleRadioEnabled(vehicle, toggle | 0);
};
mp.game2.audio.setCustomRadioTrackList = function (radioStation, trackListName, p2) {
    let $res = natives.setCustomRadioTrackList(radioStation, trackListName, p2 | 0);
};
mp.game2.audio.clearCustomRadioTrackList = function (radioStation) {
    let $res = natives.clearCustomRadioTrackList(radioStation);
};
mp.game2.audio.getNumUnlockedRadioStations = function () {
    let $res = natives.getNumUnlockedRadioStations();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.findRadioStationIndex = function (stationNameHash) {
    let $res = natives.findRadioStationIndex(stationNameHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.setRadioStationMusicOnly = function (radioStation, toggle) {
    let $res = natives.setRadioStationMusicOnly(radioStation, toggle | 0);
};
mp.game2.audio.setRadioFrontendFadeTime = function (fadeTime) {
    let $res = natives.setRadioFrontendFadeTime(fadeTime);
};
mp.game2.audio.unlockRadioStationTrackList = function (radioStation, trackListName) {
    let $res = natives.unlockRadioStationTrackList(radioStation, trackListName);
};
mp.game2.audio.lockRadioStationTrackList = function (radioStation, trackListName) {
    let $res = natives.lockRadioStationTrackList(radioStation, trackListName);
};
mp.game2.audio.updateLsur = function (enableMixes) {
    let $res = natives.updateUnlockableDjRadioTracks(enableMixes | 0);
};
mp.game2.audio.lockRadioStation = function (radioStationName, toggle) {
    let $res = natives.lockRadioStation(radioStationName, toggle | 0);
};
mp.game2.audio.setRadioStationIsVisible = function (radioStation, toggle) {
    let $res = natives.setRadioStationAsFavourite(radioStation, toggle | 0);
};
mp.game2.audio.forceRadioTrackListPosition = function (radioStation, trackListName, milliseconds) {
    let $res = natives.forceMusicTrackList(radioStation, trackListName, milliseconds);
};
mp.game2.audio.getCurrentRadioStationHash = function (radioStationName) {
    let $res = natives.getCurrentTrackPlayTime(radioStationName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.setAmbientZoneState = function (zoneName, p1, p2) {
    let $res = natives.setAmbientZoneState(zoneName, p1 | 0, p2 | 0);
};
mp.game2.audio.clearAmbientZoneState = function (zoneName, p1) {
    let $res = natives.clearAmbientZoneState(zoneName, p1 | 0);
};
mp.game2.audio.setAmbientZoneListState = function (p1, p2) {
    let $res = natives.setAmbientZoneListState(null, p1 | 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.audio.clearAmbientZoneListState = function (p1) {
    let $res = natives.clearAmbientZoneListState(null, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.audio.setAmbientZoneStatePersistent = function (ambientZone, p1, p2) {
    let $res = natives.setAmbientZoneStatePersistent(ambientZone, p1 | 0, p2 | 0);
};
mp.game2.audio.setAmbientZoneListStatePersistent = function (ambientZone, p1, p2) {
    let $res = natives.setAmbientZoneListStatePersistent(ambientZone, p1 | 0, p2 | 0);
};
mp.game2.audio.isAmbientZoneEnabled = function (ambientZone) {
    let $res = natives.isAmbientZoneEnabled(ambientZone);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setCutsceneOverride = function (name) {
    let $res = natives.setCutsceneAudioOverride(name);
};
mp.game2.audio.setCutsceneAudioOverride = function (name) {
    let $res = natives.setCutsceneAudioOverride(name);
};
mp.game2.audio.setVariableOnCutscene = function (variableName, value) {
    let $res = natives.setVariableOnSynchSceneAudio(variableName, value);
};
mp.game2.audio.getPlayerHeadsetSoundAlternate = function (variableName, value) {
    let $res = natives.setVariableOnSynchSceneAudio(variableName, value);
};
mp.game2.audio.playPoliceReport = function (name, p1) {
    let $res = natives.playPoliceReport(name, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.cancelCurrentPoliceReport = function () {
    let $res = natives.cancelAllPoliceReports();
};
mp.game2.audio.blipSiren = function (vehicle) {
    let $res = natives.blipSiren(vehicle);
};
mp.game2.audio.overrideVehHorn = function (vehicle, override, hornHash) {
    let $res = natives.overrideVehHorn(vehicle, override | 0, hornHash);
};
mp.game2.audio.isHornActive = function (vehicle) {
    let $res = natives.isHornActive(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setAggressiveHorns = function (toggle) {
    let $res = natives.setAggressiveHorns(toggle | 0);
};
mp.game2.audio.isStreamPlaying = function () {
    let $res = natives.isStreamPlaying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.getStreamPlayTime = function () {
    let $res = natives.getStreamPlayTime();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.loadStream = function (streamName, soundSet) {
    let $res = natives.loadStream(streamName, soundSet);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.loadStreamWithStartOffset = function (streamName, startOffset, soundSet) {
    let $res = natives.loadStreamWithStartOffset(streamName, startOffset, soundSet);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.playStreamFromPed = function (ped) {
    let $res = natives.playStreamFromPed(ped);
};
mp.game2.audio.playStreamFromVehicle = function (vehicle) {
    let $res = natives.playStreamFromVehicle(vehicle);
};
mp.game2.audio.playStreamFromObject = function (object) {
    let $res = natives.playStreamFromObject(object);
};
mp.game2.audio.playStreamFrontend = function () {
    let $res = natives.playStreamFrontend();
};
mp.game2.audio.playStreamFromPosition = function (x, y, z) {
    let $res = natives.playStreamFromPosition(x, y, z);
};
mp.game2.audio.specialFrontendEqual = function (x, y, z) {
    let $res = natives.playStreamFromPosition(x, y, z);
};
mp.game2.audio.stopStream = function () {
    let $res = natives.stopStream();
};
mp.game2.audio.stopPedSpeaking = function (ped, shaking) {
    let $res = natives.stopPedSpeaking(ped, shaking | 0);
};
mp.game2.audio.disablePedPain = function (ped, toggle) {
    let $res = natives.disablePedPainAudio(ped, toggle | 0);
};
mp.game2.audio.isAmbientSpeechDisabled = function (ped) {
    let $res = natives.isAmbientSpeechDisabled(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setSirenWithNoDriver = function (vehicle, toggle) {
    let $res = natives.setSirenWithNoDriver(vehicle, toggle | 0);
};
mp.game2.audio.setSirenKeepOn = function (vehicle, toggle) {
    let $res = natives.setSirenBypassMpDriverCheck(vehicle, toggle | 0);
};
mp.game2.audio.triggerSiren = function (vehicle) {
    let $res = natives.triggerSirenAudio(vehicle);
};
mp.game2.audio.setHornPermanentlyOn = function (vehicle) {
    let $res = natives.setHornPermanentlyOn(vehicle);
};
mp.game2.audio.setHornEnabled = function (vehicle, toggle) {
    let $res = natives.setHornEnabled(vehicle, toggle | 0);
};
mp.game2.audio.setVehiclePriority = function (vehicle, p1) {
    let $res = natives.setAudioVehiclePriority(vehicle, p1);
};
mp.game2.audio.setHornPermanentlyOnTime = function (vehicle, time) {
    let $res = natives.setHornPermanentlyOnTime(vehicle, time);
};
mp.game2.audio.useSirenAsHorn = function (vehicle, toggle) {
    let $res = natives.useSirenAsHorn(vehicle, toggle | 0);
};
mp.game2.audio.forceVehicleEngine = function (vehicle, audioName) {
    let $res = natives.forceUseAudioGameObject(vehicle, audioName);
};
mp.game2.audio.preloadVehicle = function (vehicleModel) {
    let $res = natives.preloadVehicleAudioBank(vehicleModel);
};
mp.game2.audio.setVehicleStartupRevSound = function (vehicle, p1, p2) {
    let $res = natives.setVehicleStartupRevSound(vehicle, p1, p2);
};
mp.game2.audio.resetVehicleStartupRevSound = function (vehicle) {
    let $res = natives.resetVehicleStartupRevSound(vehicle);
};
mp.game2.audio.isVehicleAudiblyDamaged = function (vehicle) {
    let $res = natives.isVehicleAudiblyDamaged(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setVehicleEngineDamageFactor = function (vehicle, damageFactor) {
    let $res = natives.setVehicleAudioEngineDamageFactor(vehicle, damageFactor);
};
mp.game2.audio.setVehicleBodyDamageFactor = function (vehicle, intensity) {
    let $res = natives.setVehicleAudioBodyDamageFactor(vehicle, intensity);
};
mp.game2.audio.enableVehicleFanbeltDamage = function (vehicle, toggle) {
    let $res = natives.enableVehicleFanbeltDamage(vehicle, toggle | 0);
};
mp.game2.audio.enableVehicleExhaustPops = function (vehicle, toggle) {
    let $res = natives.enableVehicleExhaustPops(vehicle, toggle | 0);
};
mp.game2.audio.setVehicleBoostActive = function (vehicle, toggle) {
    let $res = natives.setVehicleBoostActive(vehicle, toggle | 0);
};
mp.game2.audio.setScriptUpdateDoor = function (doorHash, toggle) {
    let $res = natives.setScriptUpdateDoorAudio(doorHash, toggle | 0);
};
mp.game2.audio.playVehicleDoorOpenSound = function (vehicle, doorId) {
    let $res = natives.playVehicleDoorOpenSound(vehicle, doorId);
};
mp.game2.audio.playVehicleDoorCloseSound = function (vehicle, doorId) {
    let $res = natives.playVehicleDoorCloseSound(vehicle, doorId);
};
mp.game2.audio.enableStallWarningSounds = function (vehicle, toggle) {
    let $res = natives.enableStallWarningSounds(vehicle, toggle | 0);
};
mp.game2.audio.isGameInControlOfMusic = function () {
    let $res = natives.isGameInControlOfMusic();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setGpsActive = function (active) {
    let $res = natives.setGpsActive(active | 0);
};
mp.game2.audio.playMissionComplete = function (audioName) {
    let $res = natives.playMissionCompleteAudio(audioName);
};
mp.game2.audio.playMissionCompleteAudio = function (audioName) {
    let $res = natives.playMissionCompleteAudio(audioName);
};
mp.game2.audio.isMissionCompletePlaying = function () {
    let $res = natives.isMissionCompletePlaying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isMissionCompleteReadyForUi = function () {
    let $res = natives.isMissionCompleteReadyForUi();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.blockDeathJingle = function (toggle) {
    let $res = natives.blockDeathJingle(toggle | 0);
};
mp.game2.audio.startScene = function (scene) {
    let $res = natives.startAudioScene(scene);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.startAudioScene = function (scene) {
    let $res = natives.startAudioScene(scene);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.stopScene = function (scene) {
    let $res = natives.stopAudioScene(scene);
};
mp.game2.audio.stopAudioScene = function (scene) {
    let $res = natives.stopAudioScene(scene);
};
mp.game2.audio.stopScenes = function () {
    let $res = natives.stopAudioScenes();
};
mp.game2.audio.isSceneActive = function (scene) {
    let $res = natives.isAudioSceneActive(scene);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isAudioSceneActive = function (scene) {
    let $res = natives.isAudioSceneActive(scene);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setSceneVariable = function (scene, variable, value) {
    let $res = natives.setAudioSceneVariable(scene, variable, value);
};
mp.game2.audio.setAudioSceneVariable = function (scene, variable, value) {
    let $res = natives.setAudioSceneVariable(scene, variable, value);
};
mp.game2.audio.setScriptCleanupTime = function (time) {
    let $res = natives.setAudioScriptCleanupTime(time);
};
mp.game2.audio.addEntityToMixGroup = function (entity, groupName, p2) {
    let $res = natives.addEntityToAudioMixGroup(entity, groupName, p2);
};
mp.game2.audio.removeEntityFromMixGroup = function (entity, p1) {
    let $res = natives.removeEntityFromAudioMixGroup(entity, p1);
};
mp.game2.audio.isScriptedMusicPlaying = function () {
    let $res = natives.audioIsMusicPlaying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isScriptedMusicPlaying2 = function () {
    let $res = natives.audioIsScriptedMusicPlaying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.prepareMusicEvent = function (eventName) {
    let $res = natives.prepareMusicEvent(eventName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.cancelMusicEvent = function (eventName) {
    let $res = natives.cancelMusicEvent(eventName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.triggerMusicEvent = function (eventName) {
    let $res = natives.triggerMusicEvent(eventName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.isMusicOneshotPlaying = function () {
    let $res = natives.isMusicOneshotPlaying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.getMusicPlaytime = function () {
    let $res = natives.getMusicPlaytime();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.recordBrokenGlass = function (x, y, z, radius) {
    let $res = natives.recordBrokenGlass(x, y, z, radius);
};
mp.game2.audio.clearAllBrokenGlass = function () {
    let $res = natives.clearAllBrokenGlass();
};
mp.game2.audio.forcePedPanicWalla = function () {
    let $res = natives.forcePedPanicWalla();
};
mp.game2.audio.prepareAlarm = function (alarmName) {
    let $res = natives.prepareAlarm(alarmName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.startAlarm = function (alarmName, p2) {
    let $res = natives.startAlarm(alarmName, p2 | 0);
};
mp.game2.audio.stopAlarm = function (alarmName, toggle) {
    let $res = natives.stopAlarm(alarmName, toggle | 0);
};
mp.game2.audio.stopAllAlarms = function (stop) {
    let $res = natives.stopAllAlarms(stop | 0);
};
mp.game2.audio.isAlarmPlaying = function (alarmName) {
    let $res = natives.isAlarmPlaying(alarmName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.getVehicleDefaultHorn = function (vehicle) {
    let $res = natives.getVehicleDefaultHorn(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.getVehicleDefaultHornIgnoreMods = function (vehicle) {
    let $res = natives.getVehicleDefaultHornIgnoreMods(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.resetPedFlags = function (ped) {
    let $res = natives.resetPedAudioFlags(ped);
};
mp.game2.audio.resetPedAudioFlags = function (ped) {
    let $res = natives.resetPedAudioFlags(ped);
};
mp.game2.audio.setPedFootstepLoud = function (ped, toggle) {
    let $res = natives.setPedFootstepsEventsEnabled(ped, toggle | 0);
};
mp.game2.audio.setPedFootstepQuiet = function (ped, toggle) {
    let $res = natives.setPedClothEventsEnabled(ped, toggle | 0);
};
mp.game2.audio.overridePlayerGroundMaterial = function (hash, toggle) {
    let $res = natives.overridePlayerGroundMaterial(hash, toggle | 0);
};
mp.game2.audio.overrideMicrophoneSettings = function (hash, toggle) {
    let $res = natives.overrideMicrophoneSettings(hash, toggle | 0);
};
mp.game2.audio.freezeMicrophone = function () {
    let $res = natives.freezeMicrophone();
};
mp.game2.audio.distantCopCarSirens = function (value) {
    let $res = natives.distantCopCarSirens(value | 0);
};
mp.game2.audio.setFlag = function (flagName, toggle) {
    let $res = natives.setAudioFlag(flagName, toggle | 0);
};
mp.game2.audio.setAudioFlag = function (flagName, toggle) {
    let $res = natives.setAudioFlag(flagName, toggle | 0);
};
mp.game2.audio.prepareSynchronizedEvent = function (p0, p1) {
    let $res = natives.prepareSynchronizedAudioEvent(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.prepareSynchronizedAudioEvent = function (p0, p1) {
    let $res = natives.prepareSynchronizedAudioEvent(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.prepareSynchronizedEventForScene = function (p0) {
    let $res = natives.prepareSynchronizedAudioEventForScene(p0, null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.audio.prepareSynchronizedAudioEventForScene = function (p0) {
    let $res = natives.prepareSynchronizedAudioEventForScene(p0, null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.audio.playSynchronizedEvent = function (p0) {
    let $res = natives.playSynchronizedAudioEvent(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.playSynchronizedAudioEvent = function (p0) {
    let $res = natives.playSynchronizedAudioEvent(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.stopSynchronizedEvent = function (p0) {
    let $res = natives.stopSynchronizedAudioEvent(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.stopSynchronizedAudioEvent = function (p0) {
    let $res = natives.stopSynchronizedAudioEvent(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.setSynchronizedEventPositionThisFrame = function (p0, p1) {
    let $res = natives.initSynchSceneAudioWithEntity(p0, p1);
};
mp.game2.audio.setSynchronizedAudioEventPositionThisFrame = function (p0, p1) {
    let $res = natives.initSynchSceneAudioWithEntity(p0, p1);
};
mp.game2.audio.setSpecialEffectMode = function (mode) {
    let $res = natives.setAudioSpecialEffectMode(mode);
};
mp.game2.audio.setPortalSettingsOverride = function (p0, p1) {
    let $res = natives.setPortalSettingsOverride(p0, p1);
};
mp.game2.audio.removePortalSettingsOverride = function (p0) {
    let $res = natives.removePortalSettingsOverride(p0);
};
mp.game2.audio.getMusicVolSlider = function () {
    let $res = natives.getMusicVolSlider();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.requestTennisBanks = function (ped) {
    let $res = natives.requestTennisBanks(ped);
};
mp.game2.audio.unrequestTennisBanks = function () {
    let $res = natives.unrequestTennisBanks();
};
mp.game2.audio.stopCutscene = function () {
    let $res = natives.stopCutsceneAudio();
};
mp.game2.audio.hasMultiplayerDataLoaded = function () {
    let $res = natives.hasLoadedMpDataSet();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.hasMultiplayerDataUnloaded = function () {
    let $res = natives.hasLoadedSpDataSet();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.getVehicleDefaultHornVariation = function (vehicle) {
    let $res = natives.getVehicleHornSoundIndex(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.setVehicleHornVariation = function (vehicle, value) {
    let $res = natives.setVehicleHornSoundIndex(vehicle, value);
};
if (!mp.game2.audio) mp.game2.audio = {};
if (!mp.game2.audio.unk) mp.game2.audio.unk = {};
mp.game2.audio.unk._0xC8B1B2425604CDD0 = function () {
    let $res = natives.isMobileInterferenceActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.audio.unk._0x33E3C6C6F2F0B506 = function (p0, p1, p2, p3) {
    let $res = natives.setPositionForNullConvPed(p0, p1, p2, p3);
};
mp.game2.audio.unk._0x892B6AB8F33606F5 = function (p0, entity) {
    let $res = natives.setEntityForNullConvPed(p0, entity);
};
mp.game2.audio.unk._0x0B568201DD99F0EB = function (p0) {
    let $res = natives.setConversationAudioControlledByAnim(p0 | 0);
};
mp.game2.audio.unk._0x61631F5DF50D1C34 = function (p0) {
    let $res = natives.setConversationAudioPlaceholder(p0 | 0);
};
mp.game2.audio.unk._0xAA19F5572C38B564 = function () {
    let $res = natives.getVariationChosenForScriptedLine(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.audio.unk._0xB542DE8C3D1CB210 = function (p0) {
    let $res = natives.setNoDuckingForConversation(p0 | 0);
};
mp.game2.audio.unk._0x40763EA7B9B783E7 = function (p0, p1, p2) {
    let $res = natives.hintMissionAudioBank(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.unk._0x19AF7ED9B9D23058 = function () {
    let $res = natives.unhintAmbientAudioBank();
};
mp.game2.audio.unk._0x9AC92EED5E4793AB = function () {
    let $res = natives.unhintScriptAudioBank();
};
mp.game2.audio.unk._0x11579D940949C49E = function (p0) {
    let $res = natives.unhintNamedScriptAudioBank(p0);
};
mp.game2.audio.unk._0x5B9853296731E88D = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.playSoundFromEntityHash(p0, p1, p2, p3, p4, p5);
};
mp.game2.audio.unk._0x7EC3C679D0E7E46B = function (p0, p1, p2, p3) {
    let $res = natives.updateSoundCoord(p0, p1, p2, p3);
};
mp.game2.audio.unk._0x1B7ABE26CBCBF8C7 = function (ped, p1, p2) {
    let $res = natives.setPedRaceAndVoiceGroup(ped, p1, p2);
};
mp.game2.audio.unk._0x30CA2EF91D15ADF8 = function () {
    let $res = natives.isAnyPositionalSpeechPlaying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.unk._0xFF266D1D0EB1195D = function () {
    let $res = natives.setRadioRetuneUp();
};
mp.game2.audio.unk._0xDD6BCF9E94425DF9 = function () {
    let $res = natives.setRadioRetuneDown();
};
mp.game2.audio.unk._0xC1805D05E6D4FE10 = function (vehicle) {
    let $res = natives.setVehForcedRadioThisFrame(vehicle);
};
mp.game2.audio.unk._0x55ECF4D13D9903B0 = function (p0, p1, p2, p3) {
    let $res = natives.setNextRadioTrack(p0, p1, p2, p3);
};
mp.game2.audio.unk._0xDA07819E452FFE8F = function (p0) {
    let $res = natives.setPositionedPlayerVehicleRadioEmitterEnabled(p0);
};
mp.game2.audio.unk._0xC64A06D939F826F5 = function () {
    let $res = natives.getNextAudibleBeat(0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1];
    $resObj.p1 = $res[2];
    $resObj.p2 = $res[3];
    $resObj.result = $res[1] == 1;
    return $resObj;
};
mp.game2.audio.unk._0x34D66BC058019CE0 = function (radioStationName) {
    let $res = natives.getCurrentTrackSoundName(radioStationName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.audio.unk._0xF3365489E0DD50F9 = function (vehicle, toggle) {
    let $res = natives.setVehicleMissileWarningEnabled(vehicle, toggle | 0);
};
mp.game2.audio.unk._0x5D2BFAAB8D956E0E = function () {
    let $res = natives.refreshClosestOceanShoreline();
};
mp.game2.audio.unk._0x02E93C796ABD3A97 = function (p0) {
    let $res = natives.setRadioPositionAudioMute(p0 | 0);
};
mp.game2.audio.unk._0x58BB377BEC7CD5F4 = function (p0, p1) {
    let $res = natives.setVehicleConversationsPersist(p0 | 0, p1 | 0);
};
mp.game2.audio.unk._0x9BD7BD55E4533183 = function (p0, p1, p2) {
    let $res = natives.setVehicleConversationsPersistNew(p0, p1, p2);
};
mp.game2.audio.unk._0xF8AD2EED7C47E8FE = function (ped, p1, p2) {
    let $res = natives.blockAllSpeechFromPed(ped, p1 | 0, p2 | 0);
};
mp.game2.audio.unk._0xAB6781A5F3101470 = function (p0, p1) {
    let $res = natives.stopPedSpeakingSynced(p0, p1);
};
mp.game2.audio.unk._0xA8A7D434AFB4B97B = function (p0, p1) {
    let $res = natives.blockSpeechContextGroup(p0, p1);
};
mp.game2.audio.unk._0x2ACABED337622DF2 = function (p0) {
    let $res = natives.unblockSpeechContextGroup(p0);
};
mp.game2.audio.unk._0x97FFB4ADEED08066 = function (p0, p1) {
    let $res = natives.setVehicleForceReverseWarning(p0, p1);
};
mp.game2.audio.unk._0x6FDDAD856E36988A = function (vehicle, toggle) {
    let $res = natives.setPlayerVehicleAlarmAudioActive(vehicle, toggle | 0);
};
mp.game2.audio.unk._0x159B7318403A1CD8 = function (p0) {
    let $res = natives.setGlobalRadioSignalLevel(p0);
};
mp.game2.audio.unk._0x70B8EC8FC108A634 = function (p0, p1) {
    let $res = natives.scriptOverridesWindElevation(p0 | 0, p1);
};
mp.game2.audio.unk._0x149AEE66F0CB3A99 = function (p0, p1) {
    let $res = natives.setPedWallaDensity(p0, p1);
};
mp.game2.audio.unk._0x8BF907833BE275DE = function (p0, p1) {
    let $res = natives.setPedInteriorWallaDensity(p0, p1);
};
mp.game2.audio.unk._0xBF4DC1784BE94DFA = function (ped, p1, hash) {
    let $res = natives.useFootstepScriptSweeteners(ped, p1 | 0, hash);
};
mp.game2.audio.unk._0x43FA0DFC5DF87815 = function (vehicle, p1) {
    let $res = natives.setSirenCanBeControlledByAudio(vehicle, p1 | 0);
};
mp.game2.audio.unk._0xB81CF134AEB56FFB = function () {
    let $res = natives.enableStuntJumpAudio();
};
mp.game2.audio.unk._0xC8EDE9BDBCCBA6D4 = function (p1, p2, p3) {
    let $res = natives.initSynchSceneAudioWithPosition(null, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.audio.unk._0xE4E6DD5566D28C82 = function () {
    let $res = natives.stopSmokeGrenadeExplosionSounds();
};
mp.game2.audio.unk._0xBEF34B1D9624D5DD = function (p0) {
    let $res = natives.setSkipMinigunSpinUpAudio(p0 | 0);
};
mp.Object.prototype.isObjectWithinActivationRange = function () {
    let $res = natives.isObjectWithinBrainActivationRange(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.brain) mp.game2.brain = {};
mp.game2.brain.addScriptToRandomPed = function (name, model, p2, p3) {
    let $res = natives.addScriptToRandomPed(name, model, p2, p3);
};
mp.game2.brain.registerObjectScript = function (scriptName, modelHash, p2, activationRange, p4, p5) {
    let $res = natives.registerObjectScriptBrain(scriptName, modelHash, p2, activationRange, p4, p5);
};
mp.game2.brain.registerObjectScriptBrain = function (scriptName, modelHash, p2, activationRange, p4, p5) {
    let $res = natives.registerObjectScriptBrain(scriptName, modelHash, p2, activationRange, p4, p5);
};
mp.game2.brain.isObjectWithinActivationRange = function (object) {
    let $res = natives.isObjectWithinBrainActivationRange(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.brain.isObjectWithinBrainActivationRange = function (object) {
    let $res = natives.isObjectWithinBrainActivationRange(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.brain.registerWorldPointScript = function (scriptName, activationRange, p2) {
    let $res = natives.registerWorldPointScriptBrain(scriptName, activationRange, p2);
};
mp.game2.brain.registerWorldPointScriptBrain = function (scriptName, activationRange, p2) {
    let $res = natives.registerWorldPointScriptBrain(scriptName, activationRange, p2);
};
mp.game2.brain.isWorldPointWithinActivationRange = function () {
    let $res = natives.isWorldPointWithinBrainActivationRange();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.brain.enableScriptSet = function (brainSet) {
    let $res = natives.enableScriptBrainSet(brainSet);
};
mp.game2.brain.enableScriptBrainSet = function (brainSet) {
    let $res = natives.enableScriptBrainSet(brainSet);
};
mp.game2.brain.disableScriptSet = function (brainSet) {
    let $res = natives.disableScriptBrainSet(brainSet);
};
mp.game2.brain.disableScriptBrainSet = function (brainSet) {
    let $res = natives.disableScriptBrainSet(brainSet);
};
if (!mp.game2.brain) mp.game2.brain = {};
if (!mp.game2.brain.unk) mp.game2.brain.unk = {};
mp.game2.brain.unk._0x0B40ED49D7D6FF84 = function () {
    let $res = natives.reactivateAllWorldBrainsThatAreWaitingTillOutOfRange();
};
mp.game2.brain.unk._0x4D953DF78EBF8158 = function () {
    let $res = natives.reactivateAllObjectBrainsThatAreWaitingTillOutOfRange();
};
mp.game2.brain.unk._0x6D6840CEE8845831 = function (scriptName) {
    let $res = natives.reactivateNamedWorldBrainsWaitingTillOutOfRange(scriptName);
};
mp.game2.brain.unk._0x6E91B04E08773030 = function (scriptName) {
    let $res = natives.reactivateNamedObjectBrainsWaitingTillOutOfRange(scriptName);
};
mp.Camera.prototype.doesExist = function () {
    let $res = natives.doesCamExist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Camera.prototype.setActive = function (active) {
    let $res = natives.setCamActive(this.handle, active | 0);
};
mp.Camera.prototype.isActive = function () {
    let $res = natives.isCamActive(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Camera.prototype.isRendering = function () {
    let $res = natives.isCamRendering(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Camera.prototype.getCoord = function () {
    let $res = natives.getCamCoord(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Camera.prototype.getRot = function (rotationOrder) {
    let $res = natives.getCamRot(this.handle, rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Camera.prototype.getFov = function () {
    let $res = natives.getCamFov(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Camera.prototype.getNearClip = function () {
    let $res = natives.getCamNearClip(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Camera.prototype.getFarClip = function () {
    let $res = natives.getCamFarClip(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Camera.prototype.getFarDof = function () {
    let $res = natives.getCamFarDof(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Camera.prototype.setParams = function (posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11) {
    let $res = natives.setCamParams(this.handle, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11);
};
mp.Camera.prototype.setCoord = function (posX, posY, posZ) {
    let $res = natives.setCamCoord(this.handle, posX, posY, posZ);
};
mp.Camera.prototype.setRot = function (rotX, rotY, rotZ, rotationOrder) {
    let $res = natives.setCamRot(this.handle, rotX, rotY, rotZ, rotationOrder);
};
mp.Camera.prototype.setFov = function (fieldOfView) {
    let $res = natives.setCamFov(this.handle, fieldOfView);
};
mp.Camera.prototype.setNearClip = function (nearClip) {
    let $res = natives.setCamNearClip(this.handle, nearClip);
};
mp.Camera.prototype.setFarClip = function (farClip) {
    let $res = natives.setCamFarClip(this.handle, farClip);
};
mp.Camera.prototype.setMotionBlurStrength = function (strength) {
    let $res = natives.setCamMotionBlurStrength(this.handle, strength);
};
mp.Camera.prototype.setNearDof = function (nearDOF) {
    let $res = natives.setCamNearDof(this.handle, nearDOF);
};
mp.Camera.prototype.setFarDof = function (farDOF) {
    let $res = natives.setCamFarDof(this.handle, farDOF);
};
mp.Camera.prototype.setDofStrength = function (dofStrength) {
    let $res = natives.setCamDofStrength(this.handle, dofStrength);
};
mp.Camera.prototype.setDofPlanes = function (p1, p2, p3, p4) {
    let $res = natives.setCamDofPlanes(this.handle, p1, p2, p3, p4);
};
mp.Camera.prototype.setUseShallowDofMode = function (toggle) {
    let $res = natives.setCamUseShallowDofMode(this.handle, toggle | 0);
};
mp.Camera.prototype.setDofFnumberOfLens = function (p1) {
    let $res = natives.setCamDofFnumberOfLens(this.handle, p1);
};
mp.Camera.prototype.setDofFocalLengthMultiplier = function (multiplier) {
    let $res = natives.setCamDofFocalLengthMultiplier(this.handle, multiplier);
};
mp.Camera.prototype.setDofFocusDistanceBias = function (p1) {
    let $res = natives.setCamDofFocusDistanceBias(this.handle, p1);
};
mp.Camera.prototype.setDofMaxNearInFocusDistance = function (p1) {
    let $res = natives.setCamDofMaxNearInFocusDistance(this.handle, p1);
};
mp.Camera.prototype.setDofMaxNearInFocusDistanceBlendLevel = function (p1) {
    let $res = natives.setCamDofMaxNearInFocusDistanceBlendLevel(this.handle, p1);
};
mp.Camera.prototype.attachToEntity = function (entity, xOffset, yOffset, zOffset, isRelative) {
    let $res = natives.attachCamToEntity(this.handle, entity, xOffset, yOffset, zOffset, isRelative | 0);
};
mp.Camera.prototype.attachToPedBone = function (ped, boneIndex, x, y, z, heading) {
    let $res = natives.attachCamToPedBone(this.handle, ped, boneIndex, x, y, z, heading | 0);
};
mp.Camera.prototype.attachToPedBone2 = function (ped, boneIndex, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.hardAttachCamToPedBone(this.handle, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9 | 0);
};
mp.Camera.prototype.attachToVehicleBone = function (vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection) {
    let $res = natives.attachCamToVehicleBone(this.handle, vehicle, boneIndex, relativeRotation | 0, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection | 0);
};
mp.Camera.prototype.detach = function () {
    let $res = natives.detachCam(this.handle);
};
mp.Camera.prototype.setInheritRollVehicle = function (p1) {
    let $res = natives.setCamInheritRollVehicle(this.handle, p1 | 0);
};
mp.Camera.prototype.pointAtCoord = function (x, y, z) {
    let $res = natives.pointCamAtCoord(this.handle, x, y, z);
};
mp.Camera.prototype.pointAtEntity = function (entity, p2, p3, p4, p5) {
    let $res = natives.pointCamAtEntity(this.handle, entity, p2, p3, p4, p5 | 0);
};
mp.Camera.prototype.pointAtPedBone = function (ped, boneIndex, x, y, z, p6) {
    let $res = natives.pointCamAtPedBone(this.handle, ped, boneIndex, x, y, z, p6 | 0);
};
mp.Camera.prototype.stopPointing = function () {
    let $res = natives.stopCamPointing(this.handle);
};
mp.Camera.prototype.setAffectsAiming = function (toggle) {
    let $res = natives.setCamAffectsAiming(this.handle, toggle | 0);
};
mp.Camera.prototype.setDebugName = function (name) {
    let $res = natives.setCamDebugName(this.handle, name);
};
mp.Camera.prototype.addSplineNode = function (x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder) {
    let $res = natives.addCamSplineNode(this.handle, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder);
};
mp.Camera.prototype.addSplineNode = function (x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder) {
    let $res = natives.addCamSplineNode(this.handle, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder);
};
mp.Camera.prototype.addSplineNodeUsingCameraFrame = function (cam2, p2, p3) {
    let $res = natives.addCamSplineNodeUsingCameraFrame(this.handle, cam2, p2, p3);
};
mp.Camera.prototype.addSplineNodeUsingCamera = function (cam2, p2, p3) {
    let $res = natives.addCamSplineNodeUsingCamera(this.handle, cam2, p2, p3);
};
mp.Camera.prototype.addSplineNodeUsingGameplayFrame = function (p1, p2) {
    let $res = natives.addCamSplineNodeUsingGameplayFrame(this.handle, p1, p2);
};
mp.Camera.prototype.setSplinePhase = function (p1) {
    let $res = natives.setCamSplinePhase(this.handle, p1);
};
mp.Camera.prototype.getSplinePhase = function () {
    let $res = natives.getCamSplinePhase(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Camera.prototype.getSplineNodePhase = function () {
    let $res = natives.getCamSplineNodePhase(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Camera.prototype.setSplineDuration = function (timeDuration) {
    let $res = natives.setCamSplineDuration(this.handle, timeDuration);
};
mp.Camera.prototype.setSplineSmoothingStyle = function (smoothingStyle) {
    let $res = natives.setCamSplineSmoothingStyle(this.handle, smoothingStyle);
};
mp.Camera.prototype.getSplineNodeIndex = function () {
    let $res = natives.getCamSplineNodeIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Camera.prototype.setSplineNodeEase = function (easingFunction, p2, p3) {
    let $res = natives.setCamSplineNodeEase(this.handle, easingFunction, p2, p3);
};
mp.Camera.prototype.setSplineNodeVelocityScale = function (p1, scale) {
    let $res = natives.setCamSplineNodeVelocityScale(this.handle, p1, scale);
};
mp.Camera.prototype.overrideSplineVelocity = function (p1, p2, p3) {
    let $res = natives.overrideCamSplineVelocity(this.handle, p1, p2, p3);
};
mp.Camera.prototype.overrideSplineMotionBlur = function (p1, p2, p3) {
    let $res = natives.overrideCamSplineMotionBlur(this.handle, p1, p2, p3);
};
mp.Camera.prototype.setSplineNodeExtraFlags = function (p1, flags) {
    let $res = natives.setCamSplineNodeExtraFlags(this.handle, p1, flags);
};
mp.Camera.prototype.isSplinePaused = function () {
    let $res = natives.isCamSplinePaused(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Camera.prototype.setActiveWithInterp = function (camFrom, duration, easeLocation, easeRotation) {
    let $res = natives.setCamActiveWithInterp(this.handle, camFrom, duration, easeLocation, easeRotation);
};
mp.Camera.prototype.isInterpolating = function () {
    let $res = natives.isCamInterpolating(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Camera.prototype.shake = function (type, amplitude) {
    let $res = natives.shakeCam(this.handle, type, amplitude);
};
mp.Camera.prototype.animatedShake = function (p1, p2, p3, amplitude) {
    let $res = natives.animatedShakeCam(this.handle, p1, p2, p3, amplitude);
};
mp.Camera.prototype.isShaking = function () {
    let $res = natives.isCamShaking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Camera.prototype.setShakeAmplitude = function (amplitude) {
    let $res = natives.setCamShakeAmplitude(this.handle, amplitude);
};
mp.Camera.prototype.stopShaking = function (p1) {
    let $res = natives.stopCamShaking(this.handle, p1 | 0);
};
mp.Camera.prototype.playAnim = function (animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10) {
    let $res = natives.playCamAnim(this.handle, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9 | 0, p10);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Camera.prototype.isPlayingAnim = function (animName, animDictionary) {
    let $res = natives.isCamPlayingAnim(this.handle, animName, animDictionary);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Camera.prototype.setAnimCurrentPhase = function (phase) {
    let $res = natives.setCamAnimCurrentPhase(this.handle, phase);
};
mp.Camera.prototype.getAnimCurrentPhase = function () {
    let $res = natives.getCamAnimCurrentPhase(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Camera.prototype.setFlyHorizontalResponse = function (p1, p2, p3) {
    let $res = natives.setFlyCamHorizontalResponse(this.handle, p1, p2, p3);
};
mp.Camera.prototype.setFlyVerticalSpeedMultiplier = function (p1, p2, p3) {
    let $res = natives.setFlyCamVerticalResponse(this.handle, p1, p2, p3);
};
mp.Camera.prototype.setFlyMaxHeight = function (height) {
    let $res = natives.setFlyCamMaxHeight(this.handle, height);
};
mp.Camera.prototype.setFlyCoordAndConstrain = function (x, y, z) {
    let $res = natives.setFlyCamCoordAndConstrain(this.handle, x, y, z);
};
mp.Player.prototype.setGameplayFollowPedThisUpdate = function () {
    let $res = natives.setGameplayCamFollowPedThisUpdate(this.handle);
};
mp.Ped.prototype.setGameplayFollowPedThisUpdate = function () {
    let $res = natives.setGameplayCamFollowPedThisUpdate(this.handle);
};
mp.Player.prototype.disableCollisionForEntity = function () {
    let $res = natives.setGameplayCamIgnoreEntityCollisionThisUpdate(this.handle);
};
mp.Ped.prototype.disableCollisionForEntity = function () {
    let $res = natives.setGameplayCamIgnoreEntityCollisionThisUpdate(this.handle);
};
mp.Object.prototype.disableCollisionForEntity = function () {
    let $res = natives.setGameplayCamIgnoreEntityCollisionThisUpdate(this.handle);
};
mp.Vehicle.prototype.disableCollisionForEntity = function () {
    let $res = natives.setGameplayCamIgnoreEntityCollisionThisUpdate(this.handle);
};
mp.Player.prototype.disableCollisionForObject = function () {
    let $res = natives.disableCamCollisionForObject(this.handle);
};
mp.Ped.prototype.disableCollisionForObject = function () {
    let $res = natives.disableCamCollisionForObject(this.handle);
};
mp.Object.prototype.disableCollisionForObject = function () {
    let $res = natives.disableCamCollisionForObject(this.handle);
};
mp.Vehicle.prototype.disableCollisionForObject = function () {
    let $res = natives.disableCamCollisionForObject(this.handle);
};
mp.Vehicle.prototype.setInVehicleStateThisUpdate = function (p1) {
    let $res = natives.setInVehicleCamStateThisUpdate(this.handle, p1);
};
mp.Camera.prototype.getViewModeForContext = function () {
    let $res = natives.getCamViewModeForContext(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Camera.prototype.setViewModeForContext = function (viewMode) {
    let $res = natives.setCamViewModeForContext(this.handle, viewMode);
};
mp.Player.prototype.setGameplayPedHint = function (x1, y1, z1, p4, duration, blendOutDuration, blendInDuration) {
    let $res = natives.setGameplayPedHint(this.handle, x1, y1, z1, p4 | 0, duration, blendOutDuration, blendInDuration);
};
mp.Ped.prototype.setGameplayPedHint = function (x1, y1, z1, p4, duration, blendOutDuration, blendInDuration) {
    let $res = natives.setGameplayPedHint(this.handle, x1, y1, z1, p4 | 0, duration, blendOutDuration, blendInDuration);
};
mp.Vehicle.prototype.setGameplayVehicleHint = function (offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime) {
    let $res = natives.setGameplayVehicleHint(this.handle, offsetX, offsetY, offsetZ, p4 | 0, time, easeInTime, easeOutTime);
};
mp.Player.prototype.setGameplayEntityHint = function (xOffset, yOffset, zOffset, p4, p5, p6, p7, p8) {
    let $res = natives.setGameplayEntityHint(this.handle, xOffset, yOffset, zOffset, p4 | 0, p5, p6, p7, p8);
};
mp.Ped.prototype.setGameplayEntityHint = function (xOffset, yOffset, zOffset, p4, p5, p6, p7, p8) {
    let $res = natives.setGameplayEntityHint(this.handle, xOffset, yOffset, zOffset, p4 | 0, p5, p6, p7, p8);
};
mp.Object.prototype.setGameplayEntityHint = function (xOffset, yOffset, zOffset, p4, p5, p6, p7, p8) {
    let $res = natives.setGameplayEntityHint(this.handle, xOffset, yOffset, zOffset, p4 | 0, p5, p6, p7, p8);
};
mp.Vehicle.prototype.setGameplayEntityHint = function (xOffset, yOffset, zOffset, p4, p5, p6, p7, p8) {
    let $res = natives.setGameplayEntityHint(this.handle, xOffset, yOffset, zOffset, p4 | 0, p5, p6, p7, p8);
};
mp.Camera.prototype.setEffect = function () {
    let $res = natives.setCamDeathFailEffectState(this.handle);
};
if (!mp.game2.cam) mp.game2.cam = {};
mp.game2.cam.renderScriptS = function (render, ease, easeTime, p3, p4, p5) {
    let $res = natives.renderScriptCams(render | 0, ease | 0, easeTime, p3 | 0, p4 | 0, p5 | 0);
};
mp.game2.cam.renderScriptCams = function (render, ease, easeTime, p3, p4, p5) {
    let $res = natives.renderScriptCams(render | 0, ease | 0, easeTime, p3 | 0, p4 | 0, p5 | 0);
};
mp.game2.cam.stopRenderingScriptCamsUsingCatchUp = function (render, p1, p2, p3) {
    let $res = natives.stopRenderingScriptCamsUsingCatchUp(render | 0, p1, p2, p3);
};
mp.game2.cam.create = function (camName, p1) {
    let $res = natives.createCam(camName, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.createCam = function (camName, p1) {
    let $res = natives.createCam(camName, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.createWithParams = function (camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9) {
    let $res = natives.createCamWithParams(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.createCamWithParams = function (camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9) {
    let $res = natives.createCamWithParams(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.createEra = function (camHash, p1) {
    let $res = natives.createCamera(camHash, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.createCamera = function (camHash, p1) {
    let $res = natives.createCamera(camHash, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.createEraWithParams = function (camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9) {
    let $res = natives.createCameraWithParams(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.createCameraWithParams = function (camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9) {
    let $res = natives.createCameraWithParams(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.destroy = function (cam, bScriptHostCam) {
    let $res = natives.destroyCam(cam, bScriptHostCam | 0);
};
mp.game2.cam.destroyAllS = function (bScriptHostCam) {
    let $res = natives.destroyAllCams(bScriptHostCam | 0);
};
mp.game2.cam.destroyAllCams = function (bScriptHostCam) {
    let $res = natives.destroyAllCams(bScriptHostCam | 0);
};
mp.game2.cam.doesExist = function (cam) {
    let $res = natives.doesCamExist(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.setActive = function (cam, active) {
    let $res = natives.setCamActive(cam, active | 0);
};
mp.game2.cam.isActive = function (cam) {
    let $res = natives.isCamActive(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.isRendering = function (cam) {
    let $res = natives.isCamRendering(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.getRendering = function () {
    let $res = natives.getRenderingCam();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getCoord = function (cam) {
    let $res = natives.getCamCoord(cam);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.cam.getRot = function (cam, rotationOrder) {
    let $res = natives.getCamRot(cam, rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.cam.getFov = function (cam) {
    let $res = natives.getCamFov(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getNearClip = function (cam) {
    let $res = natives.getCamNearClip(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getFarClip = function (cam) {
    let $res = natives.getCamFarClip(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getFarDof = function (cam) {
    let $res = natives.getCamFarDof(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setParams = function (cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11) {
    let $res = natives.setCamParams(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11);
};
mp.game2.cam.setCoord = function (cam, posX, posY, posZ) {
    let $res = natives.setCamCoord(cam, posX, posY, posZ);
};
mp.game2.cam.setRot = function (cam, rotX, rotY, rotZ, rotationOrder) {
    let $res = natives.setCamRot(cam, rotX, rotY, rotZ, rotationOrder);
};
mp.game2.cam.setFov = function (cam, fieldOfView) {
    let $res = natives.setCamFov(cam, fieldOfView);
};
mp.game2.cam.setNearClip = function (cam, nearClip) {
    let $res = natives.setCamNearClip(cam, nearClip);
};
mp.game2.cam.setFarClip = function (cam, farClip) {
    let $res = natives.setCamFarClip(cam, farClip);
};
mp.game2.cam.setMotionBlurStrength = function (cam, strength) {
    let $res = natives.setCamMotionBlurStrength(cam, strength);
};
mp.game2.cam.setNearDof = function (cam, nearDOF) {
    let $res = natives.setCamNearDof(cam, nearDOF);
};
mp.game2.cam.setFarDof = function (cam, farDOF) {
    let $res = natives.setCamFarDof(cam, farDOF);
};
mp.game2.cam.setDofStrength = function (cam, dofStrength) {
    let $res = natives.setCamDofStrength(cam, dofStrength);
};
mp.game2.cam.setDofPlanes = function (cam, p1, p2, p3, p4) {
    let $res = natives.setCamDofPlanes(cam, p1, p2, p3, p4);
};
mp.game2.cam.setUseShallowDofMode = function (cam, toggle) {
    let $res = natives.setCamUseShallowDofMode(cam, toggle | 0);
};
mp.game2.cam.setUseHiDof = function () {
    let $res = natives.setUseHiDof();
};
mp.game2.cam.setDofFnumberOfLens = function (camera, p1) {
    let $res = natives.setCamDofFnumberOfLens(camera, p1);
};
mp.game2.cam.setDofFocalLengthMultiplier = function (camera, multiplier) {
    let $res = natives.setCamDofFocalLengthMultiplier(camera, multiplier);
};
mp.game2.cam.setDofFocusDistanceBias = function (camera, p1) {
    let $res = natives.setCamDofFocusDistanceBias(camera, p1);
};
mp.game2.cam.setDofMaxNearInFocusDistance = function (camera, p1) {
    let $res = natives.setCamDofMaxNearInFocusDistance(camera, p1);
};
mp.game2.cam.setDofMaxNearInFocusDistanceBlendLevel = function (camera, p1) {
    let $res = natives.setCamDofMaxNearInFocusDistanceBlendLevel(camera, p1);
};
mp.game2.cam.attachToEntity = function (cam, entity, xOffset, yOffset, zOffset, isRelative) {
    let $res = natives.attachCamToEntity(cam, entity, xOffset, yOffset, zOffset, isRelative | 0);
};
mp.game2.cam.attachToPedBone = function (cam, ped, boneIndex, x, y, z, heading) {
    let $res = natives.attachCamToPedBone(cam, ped, boneIndex, x, y, z, heading | 0);
};
mp.game2.cam.attachToPedBone2 = function (cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.hardAttachCamToPedBone(cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9 | 0);
};
mp.game2.cam.attachToVehicleBone = function (cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection) {
    let $res = natives.attachCamToVehicleBone(cam, vehicle, boneIndex, relativeRotation | 0, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection | 0);
};
mp.game2.cam.detach = function (cam) {
    let $res = natives.detachCam(cam);
};
mp.game2.cam.setInheritRollVehicle = function (cam, p1) {
    let $res = natives.setCamInheritRollVehicle(cam, p1 | 0);
};
mp.game2.cam.pointAtCoord = function (cam, x, y, z) {
    let $res = natives.pointCamAtCoord(cam, x, y, z);
};
mp.game2.cam.pointAtEntity = function (cam, entity, p2, p3, p4, p5) {
    let $res = natives.pointCamAtEntity(cam, entity, p2, p3, p4, p5 | 0);
};
mp.game2.cam.pointAtPedBone = function (cam, ped, boneIndex, x, y, z, p6) {
    let $res = natives.pointCamAtPedBone(cam, ped, boneIndex, x, y, z, p6 | 0);
};
mp.game2.cam.stopPointing = function (cam) {
    let $res = natives.stopCamPointing(cam);
};
mp.game2.cam.setAffectsAiming = function (cam, toggle) {
    let $res = natives.setCamAffectsAiming(cam, toggle | 0);
};
mp.game2.cam.setDebugName = function (camera, name) {
    let $res = natives.setCamDebugName(camera, name);
};
mp.game2.cam.getDebugEra = function () {
    let $res = natives.getDebugCam();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.addSplineNode = function (camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder) {
    let $res = natives.addCamSplineNode(camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder);
};
mp.game2.cam.addCamSplineNode = function (camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder) {
    let $res = natives.addCamSplineNode(camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder);
};
mp.game2.cam.addSplineNodeUsingCameraFrame = function (cam, cam2, p2, p3) {
    let $res = natives.addCamSplineNodeUsingCameraFrame(cam, cam2, p2, p3);
};
mp.game2.cam.addSplineNodeUsingCamera = function (cam, cam2, p2, p3) {
    let $res = natives.addCamSplineNodeUsingCamera(cam, cam2, p2, p3);
};
mp.game2.cam.addSplineNodeUsingGameplayFrame = function (cam, p1, p2) {
    let $res = natives.addCamSplineNodeUsingGameplayFrame(cam, p1, p2);
};
mp.game2.cam.setSplinePhase = function (cam, p1) {
    let $res = natives.setCamSplinePhase(cam, p1);
};
mp.game2.cam.setCamSplinePhase = function (cam, p1) {
    let $res = natives.setCamSplinePhase(cam, p1);
};
mp.game2.cam.getSplinePhase = function (cam) {
    let $res = natives.getCamSplinePhase(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getSplineNodePhase = function (cam) {
    let $res = natives.getCamSplineNodePhase(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getCamSplineNodePhase = function (cam) {
    let $res = natives.getCamSplineNodePhase(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setSplineDuration = function (cam, timeDuration) {
    let $res = natives.setCamSplineDuration(cam, timeDuration);
};
mp.game2.cam.setCamSplineDuration = function (cam, timeDuration) {
    let $res = natives.setCamSplineDuration(cam, timeDuration);
};
mp.game2.cam.setSplineSmoothingStyle = function (cam, smoothingStyle) {
    let $res = natives.setCamSplineSmoothingStyle(cam, smoothingStyle);
};
mp.game2.cam.getSplineNodeIndex = function (cam) {
    let $res = natives.getCamSplineNodeIndex(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getCamSplineNodeIndex = function (cam) {
    let $res = natives.getCamSplineNodeIndex(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setSplineNodeEase = function (cam, easingFunction, p2, p3) {
    let $res = natives.setCamSplineNodeEase(cam, easingFunction, p2, p3);
};
mp.game2.cam.setSplineNodeVelocityScale = function (cam, p1, scale) {
    let $res = natives.setCamSplineNodeVelocityScale(cam, p1, scale);
};
mp.game2.cam.overrideSplineVelocity = function (cam, p1, p2, p3) {
    let $res = natives.overrideCamSplineVelocity(cam, p1, p2, p3);
};
mp.game2.cam.overrideCamSplineVelocity = function (cam, p1, p2, p3) {
    let $res = natives.overrideCamSplineVelocity(cam, p1, p2, p3);
};
mp.game2.cam.overrideSplineMotionBlur = function (cam, p1, p2, p3) {
    let $res = natives.overrideCamSplineMotionBlur(cam, p1, p2, p3);
};
mp.game2.cam.overrideCamSplineMotionBlur = function (cam, p1, p2, p3) {
    let $res = natives.overrideCamSplineMotionBlur(cam, p1, p2, p3);
};
mp.game2.cam.setSplineNodeExtraFlags = function (cam, p1, flags) {
    let $res = natives.setCamSplineNodeExtraFlags(cam, p1, flags);
};
mp.game2.cam.isSplinePaused = function (p0) {
    let $res = natives.isCamSplinePaused(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.isCamSplinePaused = function (p0) {
    let $res = natives.isCamSplinePaused(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.setActiveWithInterp = function (camTo, camFrom, duration, easeLocation, easeRotation) {
    let $res = natives.setCamActiveWithInterp(camTo, camFrom, duration, easeLocation, easeRotation);
};
mp.game2.cam.isInterpolating = function (cam) {
    let $res = natives.isCamInterpolating(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.shake = function (cam, type, amplitude) {
    let $res = natives.shakeCam(cam, type, amplitude);
};
mp.game2.cam.animatedShake = function (cam, p1, p2, p3, amplitude) {
    let $res = natives.animatedShakeCam(cam, p1, p2, p3, amplitude);
};
mp.game2.cam.isShaking = function (cam) {
    let $res = natives.isCamShaking(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.setShakeAmplitude = function (cam, amplitude) {
    let $res = natives.setCamShakeAmplitude(cam, amplitude);
};
mp.game2.cam.stopShaking = function (cam, p1) {
    let $res = natives.stopCamShaking(cam, p1 | 0);
};
mp.game2.cam.shakeScriptGlobal = function (p0, p1) {
    let $res = natives.shakeScriptGlobal(p0, p1);
};
mp.game2.cam.animatedShakeScriptGlobal = function (p0, p1, p2, p3) {
    let $res = natives.animatedShakeScriptGlobal(p0, p1, p2, p3);
};
mp.game2.cam.isScriptGlobalShaking = function () {
    let $res = natives.isScriptGlobalShaking();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.stopScriptGlobalShaking = function (p0) {
    let $res = natives.stopScriptGlobalShaking(p0 | 0);
};
mp.game2.cam.playAnim = function (cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10) {
    let $res = natives.playCamAnim(cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9 | 0, p10);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.isPlayingAnim = function (cam, animName, animDictionary) {
    let $res = natives.isCamPlayingAnim(cam, animName, animDictionary);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.setAnimCurrentPhase = function (cam, phase) {
    let $res = natives.setCamAnimCurrentPhase(cam, phase);
};
mp.game2.cam.getAnimCurrentPhase = function (cam) {
    let $res = natives.getCamAnimCurrentPhase(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.playSynchronizedAnim = function (p0, p1, animName, animDictionary) {
    let $res = natives.playSynchronizedCamAnim(p0, p1, animName, animDictionary);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.playSynchronizedCamAnim = function (p0, p1, animName, animDictionary) {
    let $res = natives.playSynchronizedCamAnim(p0, p1, animName, animDictionary);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.setFlyHorizontalResponse = function (cam, p1, p2, p3) {
    let $res = natives.setFlyCamHorizontalResponse(cam, p1, p2, p3);
};
mp.game2.cam.setFlyVerticalSpeedMultiplier = function (cam, p1, p2, p3) {
    let $res = natives.setFlyCamVerticalResponse(cam, p1, p2, p3);
};
mp.game2.cam.setFlyMaxHeight = function (cam, height) {
    let $res = natives.setFlyCamMaxHeight(cam, height);
};
mp.game2.cam.setFlyCoordAndConstrain = function (cam, x, y, z) {
    let $res = natives.setFlyCamCoordAndConstrain(cam, x, y, z);
};
mp.game2.cam.isScreenFadedOut = function () {
    let $res = natives.isScreenFadedOut();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.isScreenFadedIn = function () {
    let $res = natives.isScreenFadedIn();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.isScreenFadingOut = function () {
    let $res = natives.isScreenFadingOut();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.isScreenFadingIn = function () {
    let $res = natives.isScreenFadingIn();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.doScreenFadeIn = function (duration) {
    let $res = natives.doScreenFadeIn(duration);
};
mp.game2.cam.doScreenFadeOut = function (duration) {
    let $res = natives.doScreenFadeOut(duration);
};
mp.game2.cam.setWidescreenBorders = function (p0, p1) {
    let $res = natives.setWidescreenBorders(p0 | 0, p1);
};
mp.game2.cam.getGameplayCoord = function () {
    let $res = natives.getGameplayCamCoord();
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.cam.getGameplayRot = function (rotationOrder) {
    let $res = natives.getGameplayCamRot(rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.cam.getGameplayCamRot = function (rotationOrder) {
    let $res = natives.getGameplayCamRot(rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.cam.getGameplayFov = function () {
    let $res = natives.getGameplayCamFov();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getGameplayRelativeHeading = function () {
    let $res = natives.getGameplayCamRelativeHeading();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getGameplayCamRelativeHeading = function () {
    let $res = natives.getGameplayCamRelativeHeading();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setGameplayRelativeHeading = function (heading) {
    let $res = natives.setGameplayCamRelativeHeading(heading);
};
mp.game2.cam.setGameplayCamRelativeHeading = function (heading) {
    let $res = natives.setGameplayCamRelativeHeading(heading);
};
mp.game2.cam.getGameplayRelativePitch = function () {
    let $res = natives.getGameplayCamRelativePitch();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setGameplayRelativePitch = function (angle, scalingFactor) {
    let $res = natives.setGameplayCamRelativePitch(angle, scalingFactor);
};
mp.game2.cam.setGameplayCamRelativePitch = function (angle, scalingFactor) {
    let $res = natives.setGameplayCamRelativePitch(angle, scalingFactor);
};
mp.game2.cam.setGameplayRelativeRotation = function (roll, pitch, yaw) {
    let $res = natives.forceCameraRelativeHeadingAndPitch(roll, pitch, yaw);
};
mp.game2.cam.setGameplayRawYaw = function (yaw) {
    let $res = natives.setFirstPersonShooterCameraHeading(yaw);
};
mp.game2.cam.setGameplayCamRawYaw = function (yaw) {
    let $res = natives.setFirstPersonShooterCameraHeading(yaw);
};
mp.game2.cam.setGameplayRawPitch = function (pitch) {
    let $res = natives.setFirstPersonShooterCameraPitch(pitch);
};
mp.game2.cam.setGameplayCamRawPitch = function (pitch) {
    let $res = natives.setFirstPersonShooterCameraPitch(pitch);
};
mp.game2.cam.shakeGameplay = function (shakeName, intensity) {
    let $res = natives.shakeGameplayCam(shakeName, intensity);
};
mp.game2.cam.shakeGameplayCam = function (shakeName, intensity) {
    let $res = natives.shakeGameplayCam(shakeName, intensity);
};
mp.game2.cam.isGameplayShaking = function () {
    let $res = natives.isGameplayCamShaking();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.setGameplayShakeAmplitude = function (amplitude) {
    let $res = natives.setGameplayCamShakeAmplitude(amplitude);
};
mp.game2.cam.setGameplayCamShakeAmplitude = function (amplitude) {
    let $res = natives.setGameplayCamShakeAmplitude(amplitude);
};
mp.game2.cam.stopGameplayShaking = function (p0) {
    let $res = natives.stopGameplayCamShaking(p0 | 0);
};
mp.game2.cam.stopGameplayCamShaking = function (p0) {
    let $res = natives.stopGameplayCamShaking(p0 | 0);
};
mp.game2.cam.setGameplayFollowPedThisUpdate = function (ped) {
    let $res = natives.setGameplayCamFollowPedThisUpdate(ped);
};
mp.game2.cam.isGameplayRendering = function () {
    let $res = natives.isGameplayCamRendering();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.enableCrosshairThisFrame = function () {
    let $res = natives.disableGameplayCamAltitudeFovScalingThisUpdate();
};
mp.game2.cam.isGameplayLookingBehind = function () {
    let $res = natives.isGameplayCamLookingBehind();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.disableCollisionForEntity = function (entity) {
    let $res = natives.setGameplayCamIgnoreEntityCollisionThisUpdate(entity);
};
mp.game2.cam.disableCollisionForObject = function (entity) {
    let $res = natives.disableCamCollisionForObject(entity);
};
mp.game2.cam.isSphereVisible = function (x, y, z, radius) {
    let $res = natives.isSphereVisible(x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.isFollowPedActive = function () {
    let $res = natives.isFollowPedCamActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.setFollowPedThisUpdate = function (camName, p1) {
    let $res = natives.setFollowPedCamThisUpdate(camName, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.setFollowPedCamCutsceneChat = function (camName, p1) {
    let $res = natives.setFollowPedCamThisUpdate(camName, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.clampGameplayYaw = function (minimum, maximum) {
    let $res = natives.setThirdPersonCamRelativeHeadingLimitsThisUpdate(minimum, maximum);
};
mp.game2.cam.clampGameplayCamYaw = function (minimum, maximum) {
    let $res = natives.setThirdPersonCamRelativeHeadingLimitsThisUpdate(minimum, maximum);
};
mp.game2.cam.clampGameplayPitch = function (minimum, maximum) {
    let $res = natives.setThirdPersonCamRelativePitchLimitsThisUpdate(minimum, maximum);
};
mp.game2.cam.clampGameplayCamPitch = function (minimum, maximum) {
    let $res = natives.setThirdPersonCamRelativePitchLimitsThisUpdate(minimum, maximum);
};
mp.game2.cam.animateGameplayZoom = function (p0, distance) {
    let $res = natives.setThirdPersonCamOrbitDistanceLimitsThisUpdate(p0, distance);
};
mp.game2.cam.animateGameplayCamZoom = function (p0, distance) {
    let $res = natives.setThirdPersonCamOrbitDistanceLimitsThisUpdate(p0, distance);
};
mp.game2.cam.setInVehicleStateThisUpdate = function (p0, p1) {
    let $res = natives.setInVehicleCamStateThisUpdate(p0, p1);
};
mp.game2.cam.disableFirstPersonThisFrame = function () {
    let $res = natives.disableOnFootFirstPersonViewThisUpdate();
};
mp.game2.cam.getFollowPedZoomLevel = function () {
    let $res = natives.getFollowPedCamZoomLevel();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getFollowPedViewMode = function () {
    let $res = natives.getFollowPedCamViewMode();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setFollowPedViewMode = function (viewMode) {
    let $res = natives.setFollowPedCamViewMode(viewMode);
};
mp.game2.cam.setFollowPedCamViewMode = function (viewMode) {
    let $res = natives.setFollowPedCamViewMode(viewMode);
};
mp.game2.cam.isFollowVehicleActive = function () {
    let $res = natives.isFollowVehicleCamActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.getFollowVehicleZoomLevel = function () {
    let $res = natives.getFollowVehicleCamZoomLevel();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setFollowVehicleZoomLevel = function (zoomLevel) {
    let $res = natives.setFollowVehicleCamZoomLevel(zoomLevel);
};
mp.game2.cam.setFollowVehicleCamZoomLevel = function (zoomLevel) {
    let $res = natives.setFollowVehicleCamZoomLevel(zoomLevel);
};
mp.game2.cam.getFollowVehicleViewMode = function () {
    let $res = natives.getFollowVehicleCamViewMode();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setFollowVehicleViewMode = function (viewMode) {
    let $res = natives.setFollowVehicleCamViewMode(viewMode);
};
mp.game2.cam.setFollowVehicleCamViewMode = function (viewMode) {
    let $res = natives.setFollowVehicleCamViewMode(viewMode);
};
mp.game2.cam.getViewModeForContext = function (context) {
    let $res = natives.getCamViewModeForContext(context);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setViewModeForContext = function (context, viewMode) {
    let $res = natives.setCamViewModeForContext(context, viewMode);
};
mp.game2.cam.getActiveViewModeContext = function () {
    let $res = natives.getCamActiveViewModeContext();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.useStuntEraThisFrame = function () {
    let $res = natives.useVehicleCamStuntSettingsThisUpdate();
};
mp.game2.cam.setGameplayHash = function (camName) {
    let $res = natives.useDedicatedStuntCameraThisUpdate(camName);
};
mp.game2.cam.setFollowTurretSeat = function (seatIndex) {
    let $res = natives.setFollowVehicleCamSeatThisUpdate(seatIndex);
};
mp.game2.cam.isAimActive = function () {
    let $res = natives.isAimCamActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.isAimThirdPersonActive = function () {
    let $res = natives.isAimCamActiveInAccurateMode();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.isFirstPersonAimActive = function () {
    let $res = natives.isFirstPersonAimCamActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.disableAimThisUpdate = function () {
    let $res = natives.disableAimCamThisUpdate();
};
mp.game2.cam.getFirstPersonAimZoomFactor = function () {
    let $res = natives.getFirstPersonAimCamZoomFactor();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setFirstPersonAimZoomFactor = function (zoomFactor) {
    let $res = natives.setFirstPersonAimCamZoomFactor(zoomFactor);
};
mp.game2.cam.setFirstPersonPitchRange = function (p0, p1) {
    let $res = natives.setFirstPersonAimCamRelativePitchLimitsThisUpdate(p0, p1);
};
mp.game2.cam.setFirstPersonAimNearClipThisUpdate = function (p0) {
    let $res = natives.setFirstPersonAimCamNearClipThisUpdate(p0);
};
mp.game2.cam.setThirdPersonAimNearClipThisUpdate = function (p0) {
    let $res = natives.setThirdPersonAimCamNearClipThisUpdate(p0);
};
mp.game2.cam.getFinalRenderedCoord = function () {
    let $res = natives.getFinalRenderedCamCoord();
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.cam.getFinalRenderedRot = function (rotationOrder) {
    let $res = natives.getFinalRenderedCamRot(rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.cam.getGameplayCamRot = function (rotationOrder) {
    let $res = natives.getFinalRenderedCamRot(rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.cam.getFinalRenderedInWhenFriendlyRot = function (player, rotationOrder) {
    let $res = natives.getFinalRenderedRemotePlayerCamRot(player, rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.cam.getFinalRenderedFov = function () {
    let $res = natives.getFinalRenderedCamFov();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getFinalRenderedInWhenFriendlyFov = function (player) {
    let $res = natives.getFinalRenderedRemotePlayerCamFov(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getFinalRenderedNearClip = function () {
    let $res = natives.getFinalRenderedCamNearClip();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getFinalRenderedFarClip = function () {
    let $res = natives.getFinalRenderedCamFarClip();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getFinalRenderedNearDof = function () {
    let $res = natives.getFinalRenderedCamNearDof();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getFinalRenderedFarDof = function () {
    let $res = natives.getFinalRenderedCamFarDof();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.getFinalRenderedMotionBlurStrength = function () {
    let $res = natives.getFinalRenderedCamMotionBlurStrength();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setGameplayCoordHint = function (x, y, z, duration, blendOutDuration, blendInDuration, unk) {
    let $res = natives.setGameplayCoordHint(x, y, z, duration, blendOutDuration, blendInDuration, unk);
};
mp.game2.cam.setGameplayPedHint = function (p0, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration) {
    let $res = natives.setGameplayPedHint(p0, x1, y1, z1, p4 | 0, duration, blendOutDuration, blendInDuration);
};
mp.game2.cam.setGameplayVehicleHint = function (vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime) {
    let $res = natives.setGameplayVehicleHint(vehicle, offsetX, offsetY, offsetZ, p4 | 0, time, easeInTime, easeOutTime);
};
mp.game2.cam.setGameplayObjectHint = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.setGameplayObjectHint(p0, p1, p2, p3, p4 | 0, p5, p6, p7);
};
mp.game2.cam.setGameplayEntityHint = function (entity, xOffset, yOffset, zOffset, p4, p5, p6, p7, p8) {
    let $res = natives.setGameplayEntityHint(entity, xOffset, yOffset, zOffset, p4 | 0, p5, p6, p7, p8);
};
mp.game2.cam.isGameplayHintActive = function () {
    let $res = natives.isGameplayHintActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.stopGameplayHint = function (p0) {
    let $res = natives.stopGameplayHint(p0 | 0);
};
mp.game2.cam.setGameplayHintFov = function (FOV) {
    let $res = natives.setGameplayHintFov(FOV);
};
mp.game2.cam.setGameplayHintFollowDistanceScalar = function (value) {
    let $res = natives.setGameplayHintFollowDistanceScalar(value);
};
mp.game2.cam.setGameplayHintBaseOrbitPitchOffset = function (value) {
    let $res = natives.setGameplayHintBaseOrbitPitchOffset(value);
};
mp.game2.cam.setGameplayHintAnimOffsetx = function (xOffset) {
    let $res = natives.setGameplayHintCameraRelativeSideOffset(xOffset);
};
mp.game2.cam.setGameplayHintAnimOffsety = function (yOffset) {
    let $res = natives.setGameplayHintCameraRelativeVerticalOffset(yOffset);
};
mp.game2.cam.setGameplayHintAnimCloseup = function (toggle) {
    let $res = natives.setGameplayHintCameraBlendToFollowPedMediumViewMode(toggle | 0);
};
mp.game2.cam.getIsMultiplayerBrief = function (toggle) {
    let $res = natives.setGameplayHintCameraBlendToFollowPedMediumViewMode(toggle | 0);
};
mp.game2.cam.setCinematicButtonActive = function (p0) {
    let $res = natives.setCinematicButtonActive(p0 | 0);
};
mp.game2.cam.isCinematicRendering = function () {
    let $res = natives.isCinematicCamRendering();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.shakeCinematic = function (p0, p1) {
    let $res = natives.shakeCinematicCam(p0, p1);
};
mp.game2.cam.shakeCinematicCam = function (p0, p1) {
    let $res = natives.shakeCinematicCam(p0, p1);
};
mp.game2.cam.isCinematicShaking = function () {
    let $res = natives.isCinematicCamShaking();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.setCinematicShakeAmplitude = function (p0) {
    let $res = natives.setCinematicCamShakeAmplitude(p0);
};
mp.game2.cam.setCinematicCamShakeAmplitude = function (p0) {
    let $res = natives.setCinematicCamShakeAmplitude(p0);
};
mp.game2.cam.stopCinematicShaking = function (p0) {
    let $res = natives.stopCinematicCamShaking(p0 | 0);
};
mp.game2.cam.stopCinematicCamShaking = function (p0) {
    let $res = natives.stopCinematicCamShaking(p0 | 0);
};
mp.game2.cam.disableVehicleFirstPersonThisFrame = function () {
    let $res = natives.disableCinematicBonnetCameraThisUpdate();
};
mp.game2.cam.invalidateVehicleIdle = function () {
    let $res = natives.invalidateCinematicVehicleIdleMode();
};
mp.game2.cam.invalidateIdle = function () {
    let $res = natives.invalidateIdleCam();
};
mp.game2.cam.isCinematicIdleRendering = function () {
    let $res = natives.isCinematicIdleCamRendering();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.isInVehicleDisabled = function () {
    let $res = natives.isCinematicFirstPersonVehicleInteriorCamRendering();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.createCinematicShot = function (p0, p1, p2, entity) {
    let $res = natives.createCinematicShot(p0, p1, p2, entity);
};
mp.game2.cam.isCinematicShotActive = function (p0) {
    let $res = natives.isCinematicShotActive(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.stopCinematicShot = function (p0) {
    let $res = natives.stopCinematicShot(p0);
};
mp.game2.cam.forceCinematicRenderingThisUpdate = function (p0) {
    let $res = natives.forceCinematicRenderingThisUpdate(p0 | 0);
};
mp.game2.cam.setCinematicModeActive = function (toggle) {
    let $res = natives.setCinematicModeActive(toggle | 0);
};
mp.game2.cam.isCinematicActive = function () {
    let $res = natives.isCinematicCamInputActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.stopCutsceneShaking = function () {
    let $res = natives.bypassCutsceneCamRenderingThisUpdate();
};
mp.game2.cam.getFocusPedOnScreen = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.getFocusPedOnScreen(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.setEffect = function (p0) {
    let $res = natives.setCamDeathFailEffectState(p0);
};
mp.game2.cam.setCamEffect = function (p0) {
    let $res = natives.setCamDeathFailEffectState(p0);
};
mp.game2.cam.setGameplayVehicleCamera = function (vehicleName) {
    let $res = natives.setFirstPersonFlashEffectVehicleModelName(vehicleName);
};
mp.game2.cam.setGameplayVehicleCameraName = function (vehicleModel) {
    let $res = natives.setFirstPersonFlashEffectVehicleModelHash(vehicleModel);
};
mp.game2.cam.replayFreeGetMaxRange = function () {
    let $res = natives.replayGetMaxDistanceAllowedFromPlayer();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
if (!mp.game2.cam) mp.game2.cam = {};
if (!mp.game2.cam.unk) mp.game2.cam.unk = {};
mp.game2.cam.unk._0xAABD62873FFB1A33 = function (p0, p1) {
    let $res = natives.forceCamFarClip(p0, p1);
};
mp.game2.cam.unk._0xF55E4046F6F831DC = function (p0, p1) {
    let $res = natives.setCamDofOverriddenFocusDistance(p0, p1);
};
mp.game2.cam.unk._0xE111A7C0D200CBC5 = function (p0, p1) {
    let $res = natives.setCamDofOverriddenFocusDistanceBlendLevel(p0, p1);
};
mp.game2.cam.unk._0x202A5ED9CE01D6E7 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.hardAttachCamToEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8);
};
mp.game2.cam.unk._0x661B5C8654ADD825 = function (cam, p1) {
    let $res = natives.setCamControlsMiniMapHeading(cam, p1 | 0);
};
mp.game2.cam.unk._0xA2767257A320FC82 = function (p0, p1) {
    let $res = natives.setCamIsInsideVehicle(p0, p1 | 0);
};
mp.game2.cam.unk._0x271017B9BA825366 = function (p0, p1) {
    let $res = natives.allowMotionBlurDecay(p0, p1 | 0);
};
mp.game2.cam.unk._0x5D96CFB59DA076A0 = function (vehicle, p1, p2) {
    let $res = natives.triggerVehiclePartBrokenCameraShake(vehicle, p1, p2);
};
mp.game2.cam.unk._0xC8B5C4A79CC18B94 = function (cam) {
    let $res = natives.setFlyCamVerticalControlsThisUpdate(cam);
};
mp.game2.cam.unk._0x5C48A1D6E3B33179 = function (cam) {
    let $res = natives.wasFlyCamConstrainedOnPreviousUdpate(cam);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.unk._0x4879E4FE39074CDF = function () {
    let $res = natives.areWidescreenBordersActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.unk._0x487A82C650EB7799 = function (p0) {
    let $res = natives.setGameplayCamMotionBlurScalingThisUpdate(p0);
};
mp.game2.cam.unk._0x0225778816FDC28C = function (p0) {
    let $res = natives.setGameplayCamMaxMotionBlurStrengthThisUpdate(p0);
};
mp.game2.cam.unk._0x28B022A17B068A3A = function (p0, p1) {
    let $res = natives.forceBonnetCameraRelativeHeadingAndPitch(p0, p1);
};
mp.game2.cam.unk._0x469F2ECDEC046337 = function (p0) {
    let $res = natives.setScriptedCameraIsFirstPersonThisFrame(p0 | 0);
};
mp.game2.cam.unk._0x3044240D2E0FA842 = function () {
    let $res = natives.isInterpolatingFromScriptCams();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.unk._0x705A276EBFF3133D = function () {
    let $res = natives.isInterpolatingToScriptCams();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.unk._0xDB90C6CCA48940F1 = function (p0) {
    let $res = natives.setGameplayCamAltitudeFovScalingState(p0 | 0);
};
mp.game2.cam.unk._0xA7092AFE81944852 = function () {
    let $res = natives.bypassCameraCollisionBuoyancyTestThisUpdate();
};
mp.game2.cam.unk._0xFD3151CD37EA2245 = function (entity) {
    let $res = natives.setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate(entity);
};
mp.game2.cam.unk._0xB1381B97F70C7B30 = function () {
    let $res = natives.disableFirstPersonCameraWaterClippingTestThisUpdate();
};
mp.game2.cam.unk._0xDD79DF9F4D26E1C9 = function () {
    let $res = natives.setFollowCamIgnoreAttachParentMovementThisUpdate();
};
mp.game2.cam.unk._0x271401846BD26E92 = function (p0, p1) {
    let $res = natives.useScriptCamForAmbientPopulationOriginThisFrame(p0 | 0, p1 | 0);
};
mp.game2.cam.unk._0xC8391C309684595A = function () {
    let $res = natives.setFollowPedCamLadderAlignThisUpdate();
};
mp.game2.cam.unk._0x59424BD75174C9B1 = function () {
    let $res = natives.disableFirstPersonFlashEffectThisUpdate();
};
mp.game2.cam.unk._0x9F97DA93681F87EA = function () {
    let $res = natives.blockFirstPersonOrientationResetThisUpdate();
};
mp.game2.cam.unk._0x91EF6EE6419E5B97 = function (p0) {
    let $res = natives.setFollowVehicleCamHighAngleModeThisUpdate(p0 | 0);
};
mp.game2.cam.unk._0x9DFE13ECDC1EC196 = function (p0, p1) {
    let $res = natives.setFollowVehicleCamHighAngleModeEveryUpdate(p0 | 0, p1 | 0);
};
mp.game2.cam.unk._0x79C0E43EB9B944E2 = function (hash) {
    let $res = natives.setTableGamesCameraThisUpdate(hash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cam.unk._0x0AA27680A0BD43FA = function () {
    let $res = natives.forceVehicleCamStuntSettingsThisUpdate();
};
mp.game2.cam.unk._0xCED08CBE8EBB97C7 = function (p0, p1) {
    let $res = natives.setFirstPersonAimCamZoomFactorLimitsThisUpdate(p0, p1);
};
mp.game2.cam.unk._0x2F7F2B26DD3F18EE = function (p0, p1) {
    let $res = natives.setFirstPersonAimCamRelativeHeadingLimitsThisUpdate(p0, p1);
};
mp.game2.cam.unk._0x4008EDF7D6E48175 = function (p0) {
    let $res = natives.setAllowCustomVehicleDriveByCamThisUpdate(p0 | 0);
};
mp.game2.cam.unk._0x380B4968D1E09E55 = function () {
    let $res = natives.forceTightspaceCustomFramingThisUpdate();
};
mp.game2.cam.unk._0xCCD078C2665D2973 = function (p0) {
    let $res = natives.stopGameplayHintBeingCancelledThisUpdate(p0 | 0);
};
mp.game2.cam.unk._0x247ACBC4ABBC9D1C = function (p0) {
    let $res = natives.stopCodeGameplayHint(p0 | 0);
};
mp.game2.cam.unk._0xBF72910D0F26F025 = function () {
    let $res = natives.isCodeGameplayHintActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.unk._0x62ECFCFDEE7885D6 = function () {
    let $res = natives.disableCinematicVehicleIdleModeThisUpdate();
};
mp.game2.cam.unk._0xDC9DA9E8789F5246 = function () {
    let $res = natives.setCinematicNewsChannelActiveThisUpdate();
};
mp.game2.cam.unk._0x1F2300CB7FA7B7F6 = function () {
    let $res = natives.isInVehicleMobilePhoneCameraRendering();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.unk._0x17FCA7199A530203 = function () {
    let $res = natives.disableCinematicSlowMoThisUpdate();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.unk._0xD7360051C885628B = function () {
    let $res = natives.isBonnetCinematicCamRendering();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.unk._0x7B8A361C1813FBEF = function () {
    let $res = natives.ignoreMenuPreferenceForBonnetCameraThisUpdate();
};
mp.game2.cam.unk._0x324C5AA411DA7737 = function (p0) {
    let $res = natives.stopCutsceneCamShaking(p0);
};
mp.game2.cam.unk._0x12DED8CA53D47EA5 = function (p0) {
    let $res = natives.setCutsceneCamFarClipThisUpdate(p0);
};
mp.game2.cam.unk._0x5A43C76F7FC7BA5F = function () {
    let $res = natives.disableNearClipScanThisUpdate();
};
mp.game2.cam.unk._0x5C41E6BABC9E2112 = function (p0) {
    let $res = natives.setFirstPersonFlashEffectType(p0);
};
mp.game2.cam.unk._0xEAF0FA793D05C592 = function () {
    let $res = natives.isAllowedIndependentCameraModes();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cam.unk._0x62374889A4D59F72 = function () {
    let $res = natives.cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate();
};
if (!mp.game2.clock) mp.game2.clock = {};
mp.game2.clock.setTime = function (hour, minute, second) {
    let $res = natives.setClockTime(hour, minute, second);
};
mp.game2.clock.setClockTime = function (hour, minute, second) {
    let $res = natives.setClockTime(hour, minute, second);
};
mp.game2.clock.pause = function (toggle) {
    let $res = natives.pauseClock(toggle | 0);
};
mp.game2.clock.pauseClock = function (toggle) {
    let $res = natives.pauseClock(toggle | 0);
};
mp.game2.clock.advanceTimeTo = function (hour, minute, second) {
    let $res = natives.advanceClockTimeTo(hour, minute, second);
};
mp.game2.clock.advanceClockTimeTo = function (hour, minute, second) {
    let $res = natives.advanceClockTimeTo(hour, minute, second);
};
mp.game2.clock.addToTime = function (hours, minutes, seconds) {
    let $res = natives.addToClockTime(hours, minutes, seconds);
};
mp.game2.clock.addToClockTime = function (hours, minutes, seconds) {
    let $res = natives.addToClockTime(hours, minutes, seconds);
};
mp.game2.clock.getHours = function () {
    let $res = natives.getClockHours();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.clock.getMinutes = function () {
    let $res = natives.getClockMinutes();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.clock.getSeconds = function () {
    let $res = natives.getClockSeconds();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.clock.setDate = function (day, month, year) {
    let $res = natives.setClockDate(day, month, year);
};
mp.game2.clock.setClockDate = function (day, month, year) {
    let $res = natives.setClockDate(day, month, year);
};
mp.game2.clock.getDayOfWeek = function () {
    let $res = natives.getClockDayOfWeek();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.clock.getDayOfMonth = function () {
    let $res = natives.getClockDayOfMonth();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.clock.getMonth = function () {
    let $res = natives.getClockMonth();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.clock.getYear = function () {
    let $res = natives.getClockYear();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.clock.getMillisecondsPerGameMinute = function () {
    let $res = natives.getMillisecondsPerGameMinute();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.clock.getPosixTime = function () {
    let $res = natives.getPosixTime(0, 0, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.year = $res[1];
    $resObj.month = $res[2];
    $resObj.day = $res[3];
    $resObj.hour = $res[4];
    $resObj.minute = $res[5];
    $resObj.second = $res[6];
    return $resObj;
};
mp.game2.clock.getUtcTime = function () {
    let $res = natives.getUtcTime(0, 0, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.year = $res[1];
    $resObj.month = $res[2];
    $resObj.day = $res[3];
    $resObj.hour = $res[4];
    $resObj.minute = $res[5];
    $resObj.second = $res[6];
    return $resObj;
};
mp.game2.clock.getLocalTimeGmt = function () {
    let $res = natives.getUtcTime(0, 0, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.year = $res[1];
    $resObj.month = $res[2];
    $resObj.day = $res[3];
    $resObj.hour = $res[4];
    $resObj.minute = $res[5];
    $resObj.second = $res[6];
    return $resObj;
};
mp.game2.clock.getLocalTime = function () {
    let $res = natives.getLocalTime(0, 0, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.year = $res[1];
    $resObj.month = $res[2];
    $resObj.day = $res[3];
    $resObj.hour = $res[4];
    $resObj.minute = $res[5];
    $resObj.second = $res[6];
    return $resObj;
};
mp.Player.prototype.registerEntityFor = function (cutsceneEntName, p2, modelHash, p4) {
    let $res = natives.registerEntityForCutscene(this.handle, cutsceneEntName, p2, modelHash, p4);
};
mp.Ped.prototype.registerEntityFor = function (cutsceneEntName, p2, modelHash, p4) {
    let $res = natives.registerEntityForCutscene(this.handle, cutsceneEntName, p2, modelHash, p4);
};
if (!mp.game2.cutscene) mp.game2.cutscene = {};
mp.game2.cutscene.request = function (cutsceneName, flags) {
    let $res = natives.requestCutscene(cutsceneName, flags);
};
mp.game2.cutscene.requestCutscene = function (cutsceneName, flags) {
    let $res = natives.requestCutscene(cutsceneName, flags);
};
mp.game2.cutscene.requestWithPlaybackList = function (cutsceneName, playbackFlags, flags) {
    let $res = natives.requestCutsceneWithPlaybackList(cutsceneName, playbackFlags, flags);
};
mp.game2.cutscene.requestCutscene2 = function (cutsceneName, playbackFlags, flags) {
    let $res = natives.requestCutsceneWithPlaybackList(cutsceneName, playbackFlags, flags);
};
mp.game2.cutscene.remove = function () {
    let $res = natives.removeCutscene();
};
mp.game2.cutscene.hasLoaded = function () {
    let $res = natives.hasCutsceneLoaded();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.hasThisLoaded = function (cutsceneName) {
    let $res = natives.hasThisCutsceneLoaded(cutsceneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.hasThisCutsceneLoaded = function (cutsceneName) {
    let $res = natives.hasThisCutsceneLoaded(cutsceneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.canRequestAssetsForEntity = function () {
    let $res = natives.canRequestAssetsForCutsceneEntity();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.isPlaybackFlagSet = function (flag) {
    let $res = natives.isCutscenePlaybackFlagSet(flag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.setEntityStreamingFlags = function (cutsceneEntName, p1, p2) {
    let $res = natives.setCutsceneEntityStreamingFlags(cutsceneEntName, p1, p2);
};
mp.game2.cutscene.requestCutFile = function (cutsceneName) {
    let $res = natives.requestCutFile(cutsceneName);
};
mp.game2.cutscene.hasCutFileLoaded = function (cutsceneName) {
    let $res = natives.hasCutFileLoaded(cutsceneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.removeCutFile = function (cutsceneName) {
    let $res = natives.removeCutFile(cutsceneName);
};
mp.game2.cutscene.getCutFileNumSections = function (cutsceneName) {
    let $res = natives.getCutFileConcatCount(cutsceneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.start = function (flags) {
    let $res = natives.startCutscene(flags);
};
mp.game2.cutscene.startCutscene = function (flags) {
    let $res = natives.startCutscene(flags);
};
mp.game2.cutscene.startAtCoords = function (x, y, z, flags) {
    let $res = natives.startCutsceneAtCoords(x, y, z, flags);
};
mp.game2.cutscene.startCutsceneAtCoords = function (x, y, z, flags) {
    let $res = natives.startCutsceneAtCoords(x, y, z, flags);
};
mp.game2.cutscene.stop = function (p0) {
    let $res = natives.stopCutscene(p0 | 0);
};
mp.game2.cutscene.stopCutscene = function (p0) {
    let $res = natives.stopCutscene(p0 | 0);
};
mp.game2.cutscene.stopImmediately = function () {
    let $res = natives.stopCutsceneImmediately();
};
mp.game2.cutscene.setOrigin = function (x, y, z, p3, p4) {
    let $res = natives.setCutsceneOrigin(x, y, z, p3, p4);
};
mp.game2.cutscene.setCutsceneOrigin = function (x, y, z, p3, p4) {
    let $res = natives.setCutsceneOrigin(x, y, z, p3, p4);
};
mp.game2.cutscene.getTime = function () {
    let $res = natives.getCutsceneTime();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.getTotalDuration = function () {
    let $res = natives.getCutsceneTotalDuration();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.wasSkipped = function () {
    let $res = natives.wasCutsceneSkipped();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.hasFinished = function () {
    let $res = natives.hasCutsceneFinished();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.isActive = function () {
    let $res = natives.isCutsceneActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.isPlaying = function () {
    let $res = natives.isCutscenePlaying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.getSectionPlaying = function () {
    let $res = natives.getCutsceneSectionPlaying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.getEntityIndexOfEntity = function (cutsceneEntName, modelHash) {
    let $res = natives.getEntityIndexOfCutsceneEntity(cutsceneEntName, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.getEntityIndexOfCutsceneEntity = function (cutsceneEntName, modelHash) {
    let $res = natives.getEntityIndexOfCutsceneEntity(cutsceneEntName, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.registerEntityFor = function (cutscenePed, cutsceneEntName, p2, modelHash, p4) {
    let $res = natives.registerEntityForCutscene(cutscenePed, cutsceneEntName, p2, modelHash, p4);
};
mp.game2.cutscene.registerEntityForCutscene = function (cutscenePed, cutsceneEntName, p2, modelHash, p4) {
    let $res = natives.registerEntityForCutscene(cutscenePed, cutsceneEntName, p2, modelHash, p4);
};
mp.game2.cutscene.getEntityIndexOfRegisteredEntity = function (cutsceneEntName, modelHash) {
    let $res = natives.getEntityIndexOfRegisteredEntity(cutsceneEntName, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.setTriggerArea = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.setCutsceneTriggerArea(p0, p1, p2, p3, p4, p5);
};
mp.game2.cutscene.setCutsceneTriggerArea = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.setCutsceneTriggerArea(p0, p1, p2, p3, p4, p5);
};
mp.game2.cutscene.canSetEnterStateForRegisteredEntity = function (cutsceneEntName, modelHash) {
    let $res = natives.canSetEnterStateForRegisteredEntity(cutsceneEntName, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.canSetExitStateForRegisteredEntity = function (cutsceneEntName, modelHash) {
    let $res = natives.canSetExitStateForRegisteredEntity(cutsceneEntName, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.canSetExitStateForCamera = function (p0) {
    let $res = natives.canSetExitStateForCamera(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.setFadeValues = function (p0, p1, p2, p3) {
    let $res = natives.setCutsceneFadeValues(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
};
mp.game2.cutscene.setCutsceneFadeValues = function (p0, p1, p2, p3) {
    let $res = natives.setCutsceneFadeValues(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
};
mp.game2.cutscene.setCanBeSkipped = function (p0) {
    let $res = natives.setCutsceneCanBeSkipped(p0 | 0);
};
mp.game2.cutscene.registerSynchronisedScriptSpeech = function () {
    let $res = natives.setCanDisplayMinimapDuringCutsceneThisUpdate();
};
mp.game2.cutscene.setPedComponentVariation = function (cutsceneEntName, p1, p2, p3, modelHash) {
    let $res = natives.setCutscenePedComponentVariation(cutsceneEntName, p1, p2, p3, modelHash);
};
mp.game2.cutscene.setCutscenePedComponentVariation = function (cutsceneEntName, p1, p2, p3, modelHash) {
    let $res = natives.setCutscenePedComponentVariation(cutsceneEntName, p1, p2, p3, modelHash);
};
mp.game2.cutscene.setPedComponentVariationFromPed = function (cutsceneEntName, ped, modelHash) {
    let $res = natives.setCutscenePedComponentVariationFromPed(cutsceneEntName, ped, modelHash);
};
mp.game2.cutscene.doesEntityExist = function (cutsceneEntName, modelHash) {
    let $res = natives.doesCutsceneEntityExist(cutsceneEntName, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.doesCutsceneEntityExist = function (cutsceneEntName, modelHash) {
    let $res = natives.doesCutsceneEntityExist(cutsceneEntName, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.setPedPropVariation = function (cutsceneEntName, p1, p2, p3, modelHash) {
    let $res = natives.setCutscenePedPropVariation(cutsceneEntName, p1, p2, p3, modelHash);
};
mp.game2.cutscene.setCutscenePedPropVariation = function (cutsceneEntName, p1, p2, p3, modelHash) {
    let $res = natives.setCutscenePedPropVariation(cutsceneEntName, p1, p2, p3, modelHash);
};
mp.game2.cutscene.hasCutThisFrame = function () {
    let $res = natives.hasCutsceneCutThisFrame();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.cutscene) mp.game2.cutscene = {};
if (!mp.game2.cutscene.unk) mp.game2.cutscene.unk = {};
mp.game2.cutscene.unk._0x8D9DF6ECA8768583 = function (threadId) {
    let $res = natives.setScriptCanStartCutscene(threadId);
};
mp.game2.cutscene.unk._0x011883F41211432A = function (x1, y1, z1, x2, y2, z2, p6) {
    let $res = natives.setCutsceneOriginAndOrientation(x1, y1, z1, x2, y2, z2, p6);
};
mp.game2.cutscene.unk._0x971D7B15BCDBEF99 = function () {
    let $res = natives.getCutsceneEndTime();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.unk._0x583DF8E3D4AFBD98 = function () {
    let $res = natives.getCutsceneConcatSectionPlaying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.unk._0x4CEBC1ED31E8925E = function (cutsceneName) {
    let $res = natives.isCutsceneAuthorized(cutsceneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.cutscene.unk._0x4FCD976DA686580C = function (p0) {
    let $res = natives.doesCutsceneHandleExist(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.unk._0x7F96F23FA9B73327 = function (modelHash) {
    let $res = natives.setVehicleModelPlayerWillExitScene(modelHash);
};
mp.game2.cutscene.unk._0xC61B86C9F61EB404 = function (toggle) {
    let $res = natives.setPadCanShakeDuringCutscene(toggle | 0);
};
mp.game2.cutscene.unk._0x20746F7B1032A3C7 = function (p0, p1, p2, p3) {
    let $res = natives.setCutsceneMultiheadFade(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
};
mp.game2.cutscene.unk._0x06EE9048FD080382 = function (p0) {
    let $res = natives.setCutsceneMultiheadFadeManual(p0 | 0);
};
mp.game2.cutscene.unk._0xA0FE76168A189DDB = function () {
    let $res = natives.isMultiheadFadeUp();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.cutscene.unk._0x2F137B508DE238F2 = function (p0) {
    let $res = natives.networkSetMocapCutsceneCanBeSkipped(p0 | 0);
};
mp.game2.cutscene.unk._0xE36A98D8AB3D3C66 = function (p0) {
    let $res = natives.setCarGeneratorsCanUpdateDuringCutscene(p0 | 0);
};
mp.game2.cutscene.unk._0x5EDEF0CF8C1DAB3C = function () {
    let $res = natives.canUseMobilePhoneDuringCutscene();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
if (!mp.game2.datafile) mp.game2.datafile = {};
mp.game2.datafile.watchRequestId = function (id) {
    let $res = natives.datafileWatchRequestId(id);
};
mp.game2.datafile.clearWatchList = function () {
    let $res = natives.datafileClearWatchList();
};
mp.game2.datafile.isValidRequestId = function (index) {
    let $res = natives.datafileIsValidRequestId(index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.hasLoadedFileData = function (p0) {
    let $res = natives.datafileHasLoadedFileData(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.hasValidFileData = function (p0) {
    let $res = natives.datafileHasValidFileData(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.selectActiveFile = function (p0, p1) {
    let $res = natives.datafileSelectActiveFile(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.deleteRequestedFile = function (p0) {
    let $res = natives.datafileDeleteRequestedFile(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.ugcCreateContent = function (dataCount, contentName, description, tagsCsv, contentTypeName, publish, p7) {
    let $res = natives.ugcCreateContent(0, dataCount, contentName, description, tagsCsv, contentTypeName, publish | 0, p7);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $res[0] == 1 ? $resObj.data : undefined;
};
mp.game2.datafile.ugcCreateMission = function (contentName, description, tagsCsv, contentTypeName, publish, p5) {
    let $res = natives.ugcCreateMission(contentName, description, tagsCsv, contentTypeName, publish | 0, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.ugcUpdateContent = function (contentId, dataCount, contentName, description, tagsCsv, contentTypeName, p7) {
    let $res = natives.ugcUpdateContent(contentId, 0, dataCount, contentName, description, tagsCsv, contentTypeName, p7);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $res[0] == 1 ? $resObj.data : undefined;
};
mp.game2.datafile.ugcUpdateMission = function (contentId, contentName, description, tagsCsv, contentTypeName, p5) {
    let $res = natives.ugcUpdateMission(contentId, contentName, description, tagsCsv, contentTypeName, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.ugcSetPlayerData = function (contentId, rating, contentTypeName, p3) {
    let $res = natives.ugcSetPlayerData(contentId, rating, contentTypeName, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.selectUgcData = function (p0, p1) {
    let $res = natives.datafileSelectUgcData(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.selectUgcStats = function (p0, p1, p2) {
    let $res = natives.datafileSelectUgcStats(p0, p1 | 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.selectUgcPlayerData = function (p0, p1) {
    let $res = natives.datafileSelectUgcPlayerData(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.selectCreatorStats = function (p0, p1) {
    let $res = natives.datafileSelectCreatorStats(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.loadOfflineUgc = function (filename, p1) {
    let $res = natives.datafileLoadOfflineUgc(filename, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.loadUgcFile = function (filename, p1) {
    let $res = natives.datafileLoadOfflineUgc(filename, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.create = function (p0) {
    let $res = natives.datafileCreate(p0 | 0);
};
mp.game2.datafile.delete = function (p0) {
    let $res = natives.datafileDelete(p0 | 0);
};
mp.game2.datafile.storeMissionHeader = function (p0) {
    let $res = natives.datafileStoreMissionHeader(p0);
};
mp.game2.datafile.flushMissionHeader = function () {
    let $res = natives.datafileFlushMissionHeader();
};
mp.game2.datafile.getFileDict = function (p0) {
    let $res = natives.datafileGetFileDict(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.datafile.startSaveToCloud = function (filename, p1) {
    let $res = natives.datafileStartSaveToCloud(filename, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.updateSaveToCloud = function () {
    let $res = natives.datafileUpdateSaveToCloud(false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1] == 1;
    return $res[1] == 1 ? $resObj.p0 : undefined;
};
mp.game2.datafile.isSavePending = function () {
    let $res = natives.datafileIsSavePending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.datafile.datadictSetBool = function (key, value) {
    let $res = natives.datadictSetBool(0, key, value | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj.objectData;
};
mp.game2.datafile.objectValueAddBoolean = function (key, value) {
    let $res = natives.datadictSetBool(0, key, value | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj.objectData;
};
mp.game2.datafile.datadictSetInt = function (key, value) {
    let $res = natives.datadictSetInt(0, key, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj.objectData;
};
mp.game2.datafile.objectValueAddInteger = function (key, value) {
    let $res = natives.datadictSetInt(0, key, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj.objectData;
};
mp.game2.datafile.datadictSetFloat = function (key, value) {
    let $res = natives.datadictSetFloat(0, key, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj.objectData;
};
mp.game2.datafile.objectValueAddFloat = function (key, value) {
    let $res = natives.datadictSetFloat(0, key, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj.objectData;
};
mp.game2.datafile.datadictSetString = function (key, value) {
    let $res = natives.datadictSetString(0, key, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj.objectData;
};
mp.game2.datafile.objectValueAddString = function (key, value) {
    let $res = natives.datadictSetString(0, key, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj.objectData;
};
mp.game2.datafile.datadictSetVector = function (key, valueX, valueY, valueZ) {
    let $res = natives.datadictSetVector(0, key, valueX, valueY, valueZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj.objectData;
};
mp.game2.datafile.objectValueAddVector3 = function (key, valueX, valueY, valueZ) {
    let $res = natives.datadictSetVector(0, key, valueX, valueY, valueZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj.objectData;
};
mp.game2.datafile.datadictCreateDict = function (key) {
    let $res = natives.datadictCreateDict(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj;
};
mp.game2.datafile.objectValueAddObject = function (key) {
    let $res = natives.datadictCreateDict(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj;
};
mp.game2.datafile.datadictCreateArray = function (key) {
    let $res = natives.datadictCreateArray(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj;
};
mp.game2.datafile.objectValueAddArray = function (key) {
    let $res = natives.datadictCreateArray(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj;
};
mp.game2.datafile.datadictGetBool = function (key) {
    let $res = natives.datadictGetBool(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $res[0] == 1 ? $resObj.objectData : undefined;
};
mp.game2.datafile.objectValueGetBoolean = function (key) {
    let $res = natives.datadictGetBool(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $res[0] == 1 ? $resObj.objectData : undefined;
};
mp.game2.datafile.datadictGetInt = function (key) {
    let $res = natives.datadictGetInt(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.objectValueGetInteger = function (key) {
    let $res = natives.datadictGetInt(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.datadictGetFloat = function (key) {
    let $res = natives.datadictGetFloat(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.objectValueGetFloat = function (key) {
    let $res = natives.datadictGetFloat(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.datadictGetString = function (key) {
    let $res = natives.datadictGetString(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj;
};
mp.game2.datafile.objectValueGetString = function (key) {
    let $res = natives.datadictGetString(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj;
};
mp.game2.datafile.datadictGetVector = function (key) {
    let $res = natives.datadictGetVector(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.objectData = $res[0];
    $resObj.result = new mp.Vector3($res[0]);
    return $resObj;
};
mp.game2.datafile.objectValueGetVector3 = function (key) {
    let $res = natives.datadictGetVector(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.objectData = $res[0];
    $resObj.result = new mp.Vector3($res[0]);
    return $resObj;
};
mp.game2.datafile.datadictGetDict = function (key) {
    let $res = natives.datadictGetDict(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj;
};
mp.game2.datafile.objectValueGetObject = function (key) {
    let $res = natives.datadictGetDict(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj;
};
mp.game2.datafile.datadictGetArray = function (key) {
    let $res = natives.datadictGetArray(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj;
};
mp.game2.datafile.objectValueGetArray = function (key) {
    let $res = natives.datadictGetArray(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    return $resObj;
};
mp.game2.datafile.datadictGetType = function (key) {
    let $res = natives.datadictGetType(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.objectValueGetType = function (key) {
    let $res = natives.datadictGetType(0, key);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.objectData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.dataarrayAddBool = function (value) {
    let $res = natives.dataarrayAddBool(0, value | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj.arrayData;
};
mp.game2.datafile.arrayValueAddBoolean = function (value) {
    let $res = natives.dataarrayAddBool(0, value | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj.arrayData;
};
mp.game2.datafile.dataarrayAddInt = function (value) {
    let $res = natives.dataarrayAddInt(0, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj.arrayData;
};
mp.game2.datafile.arrayValueAddInteger = function (value) {
    let $res = natives.dataarrayAddInt(0, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj.arrayData;
};
mp.game2.datafile.dataarrayAddFloat = function (value) {
    let $res = natives.dataarrayAddFloat(0, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj.arrayData;
};
mp.game2.datafile.arrayValueAddFloat = function (value) {
    let $res = natives.dataarrayAddFloat(0, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj.arrayData;
};
mp.game2.datafile.dataarrayAddString = function (value) {
    let $res = natives.dataarrayAddString(0, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj.arrayData;
};
mp.game2.datafile.arrayValueAddString = function (value) {
    let $res = natives.dataarrayAddString(0, value);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj.arrayData;
};
mp.game2.datafile.dataarrayAddVector = function (valueX, valueY, valueZ) {
    let $res = natives.dataarrayAddVector(0, valueX, valueY, valueZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj.arrayData;
};
mp.game2.datafile.arrayValueAddVector3 = function (valueX, valueY, valueZ) {
    let $res = natives.dataarrayAddVector(0, valueX, valueY, valueZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj.arrayData;
};
mp.game2.datafile.dataarrayAddDict = function () {
    let $res = natives.dataarrayAddDict(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj;
};
mp.game2.datafile.arrayValueAddObject = function () {
    let $res = natives.dataarrayAddDict(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj;
};
mp.game2.datafile.dataarrayGetBool = function (arrayIndex) {
    let $res = natives.dataarrayGetBool(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $res[0] == 1 ? $resObj.arrayData : undefined;
};
mp.game2.datafile.arrayValueGetBoolean = function (arrayIndex) {
    let $res = natives.dataarrayGetBool(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $res[0] == 1 ? $resObj.arrayData : undefined;
};
mp.game2.datafile.dataarrayGetInt = function (arrayIndex) {
    let $res = natives.dataarrayGetInt(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.arrayValueGetInteger = function (arrayIndex) {
    let $res = natives.dataarrayGetInt(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.dataarrayGetFloat = function (arrayIndex) {
    let $res = natives.dataarrayGetFloat(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.arrayValueGetFloat = function (arrayIndex) {
    let $res = natives.dataarrayGetFloat(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.dataarrayGetString = function (arrayIndex) {
    let $res = natives.dataarrayGetString(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj;
};
mp.game2.datafile.arrayValueGetString = function (arrayIndex) {
    let $res = natives.dataarrayGetString(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj;
};
mp.game2.datafile.dataarrayGetVector = function (arrayIndex) {
    let $res = natives.dataarrayGetVector(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.arrayData = $res[0];
    $resObj.result = new mp.Vector3($res[0]);
    return $resObj;
};
mp.game2.datafile.arrayValueGetVector3 = function (arrayIndex) {
    let $res = natives.dataarrayGetVector(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.arrayData = $res[0];
    $resObj.result = new mp.Vector3($res[0]);
    return $resObj;
};
mp.game2.datafile.dataarrayGetDict = function (arrayIndex) {
    let $res = natives.dataarrayGetDict(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj;
};
mp.game2.datafile.arrayValueGetObject = function (arrayIndex) {
    let $res = natives.dataarrayGetDict(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    return $resObj;
};
mp.game2.datafile.dataarrayGetCount = function () {
    let $res = natives.dataarrayGetCount(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.arrayValueGetSize = function () {
    let $res = natives.dataarrayGetCount(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.dataarrayGetType = function (arrayIndex) {
    let $res = natives.dataarrayGetType(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.datafile.arrayValueGetType = function (arrayIndex) {
    let $res = natives.dataarrayGetType(0, arrayIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.arrayData = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
if (!mp.game2.datafile) mp.game2.datafile = {};
if (!mp.game2.datafile.unk) mp.game2.datafile.unk = {};
mp.game2.datafile.unk._0xA6EEF01087181EDD = function (p0, p1) {
    let $res = natives.datafileLoadOfflineUgcForAdditionalDataFile(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.datafile.unk._0x6AD0BD5E087866CB = function (p0) {
    let $res = natives.datafileDeleteForAdditionalDataFile(p0);
};
mp.game2.datafile.unk._0xDBF860CF1DB8E599 = function (p0) {
    let $res = natives.datafileGetFileDictForAdditionalDataFile(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.decorSetTime = function (propertyName, timestamp) {
    let $res = natives.decorSetTime(this.handle, propertyName, timestamp);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.decorSetTime = function (propertyName, timestamp) {
    let $res = natives.decorSetTime(this.handle, propertyName, timestamp);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.decorSetTime = function (propertyName, timestamp) {
    let $res = natives.decorSetTime(this.handle, propertyName, timestamp);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.decorSetTime = function (propertyName, timestamp) {
    let $res = natives.decorSetTime(this.handle, propertyName, timestamp);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.decorSetBool = function (propertyName, value) {
    let $res = natives.decorSetBool(this.handle, propertyName, value | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.decorSetBool = function (propertyName, value) {
    let $res = natives.decorSetBool(this.handle, propertyName, value | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.decorSetBool = function (propertyName, value) {
    let $res = natives.decorSetBool(this.handle, propertyName, value | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.decorSetBool = function (propertyName, value) {
    let $res = natives.decorSetBool(this.handle, propertyName, value | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.decorSetFloat = function (propertyName, value) {
    let $res = natives.decorSetFloat(this.handle, propertyName, value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.decorSetFloat = function (propertyName, value) {
    let $res = natives.decorSetFloat(this.handle, propertyName, value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.decorSetFloat = function (propertyName, value) {
    let $res = natives.decorSetFloat(this.handle, propertyName, value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.decorSetFloat = function (propertyName, value) {
    let $res = natives.decorSetFloat(this.handle, propertyName, value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.decorSetInt = function (propertyName, value) {
    let $res = natives.decorSetInt(this.handle, propertyName, value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.decorSetInt = function (propertyName, value) {
    let $res = natives.decorSetInt(this.handle, propertyName, value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.decorSetInt = function (propertyName, value) {
    let $res = natives.decorSetInt(this.handle, propertyName, value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.decorSetInt = function (propertyName, value) {
    let $res = natives.decorSetInt(this.handle, propertyName, value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.decorGetBool = function (propertyName) {
    let $res = natives.decorGetBool(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.decorGetBool = function (propertyName) {
    let $res = natives.decorGetBool(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.decorGetBool = function (propertyName) {
    let $res = natives.decorGetBool(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.decorGetBool = function (propertyName) {
    let $res = natives.decorGetBool(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.decorGetFloat = function (propertyName) {
    let $res = natives.decorGetFloat(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.decorGetFloat = function (propertyName) {
    let $res = natives.decorGetFloat(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.decorGetFloat = function (propertyName) {
    let $res = natives.decorGetFloat(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.decorGetFloat = function (propertyName) {
    let $res = natives.decorGetFloat(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.decorGetInt = function (propertyName) {
    let $res = natives.decorGetInt(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.decorGetInt = function (propertyName) {
    let $res = natives.decorGetInt(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.decorGetInt = function (propertyName) {
    let $res = natives.decorGetInt(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.decorGetInt = function (propertyName) {
    let $res = natives.decorGetInt(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.decorExistOn = function (propertyName) {
    let $res = natives.decorExistOn(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.decorExistOn = function (propertyName) {
    let $res = natives.decorExistOn(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.decorExistOn = function (propertyName) {
    let $res = natives.decorExistOn(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.decorExistOn = function (propertyName) {
    let $res = natives.decorExistOn(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.decorRemove = function (propertyName) {
    let $res = natives.decorRemove(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.decorRemove = function (propertyName) {
    let $res = natives.decorRemove(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.decorRemove = function (propertyName) {
    let $res = natives.decorRemove(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.decorRemove = function (propertyName) {
    let $res = natives.decorRemove(this.handle, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.decorator) mp.game2.decorator = {};
mp.game2.decorator.decorSetTime = function (entity, propertyName, timestamp) {
    let $res = natives.decorSetTime(entity, propertyName, timestamp);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.decorator.decorSetBool = function (entity, propertyName, value) {
    let $res = natives.decorSetBool(entity, propertyName, value | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.decorator.decorSetFloat = function (entity, propertyName, value) {
    let $res = natives.decorSetFloat(entity, propertyName, value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.decorator.decorSetInt = function (entity, propertyName, value) {
    let $res = natives.decorSetInt(entity, propertyName, value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.decorator.decorGetBool = function (entity, propertyName) {
    let $res = natives.decorGetBool(entity, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.decorator.decorGetFloat = function (entity, propertyName) {
    let $res = natives.decorGetFloat(entity, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.decorator.decorGetInt = function (entity, propertyName) {
    let $res = natives.decorGetInt(entity, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.decorator.decorExistOn = function (entity, propertyName) {
    let $res = natives.decorExistOn(entity, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.decorator.decorRemove = function (entity, propertyName) {
    let $res = natives.decorRemove(entity, propertyName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.decorator.decorRegister = function (propertyName, type) {
    let $res = natives.decorRegister(propertyName, type);
};
mp.game2.decorator.decorIsRegisteredAsType = function (propertyName, type) {
    let $res = natives.decorIsRegisteredAsType(propertyName, type);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.decorator.decorRegisterLock = function () {
    let $res = natives.decorRegisterLock();
};
if (!mp.game2.dlc) mp.game2.dlc = {};
mp.game2.dlc.isPresent = function (dlcHash) {
    let $res = natives.isDlcPresent(dlcHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.dlc.isDlcPresent = function (dlcHash) {
    let $res = natives.isDlcPresent(dlcHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.dlc.getExtraContentPackHasBeenInstalled = function () {
    let $res = natives.getEverHadBadPackOrder();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.dlc.getIsLoadingScreenActive = function () {
    let $res = natives.getIsLoadingScreenActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.dlc.hasCloudRequestsFinished = function (unused) {
    let $res = natives.hasCloudRequestsFinished(false, unused);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1] == 1;
    return $res[1] == 1 ? $resObj.p0 : undefined;
};
mp.game2.dlc.nullify = function (unused) {
    let $res = natives.hasCloudRequestsFinished(false, unused);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1] == 1;
    return $res[1] == 1 ? $resObj.p0 : undefined;
};
mp.game2.dlc.onEnterSp = function () {
    let $res = natives.onEnterSp();
};
mp.game2.dlc.onEnterMp = function () {
    let $res = natives.onEnterMp();
};
if (!mp.game2.dlc) mp.game2.dlc = {};
if (!mp.game2.dlc.unk) mp.game2.dlc.unk = {};
mp.game2.dlc.unk._0x241FCA5B1AA14F75 = function () {
    let $res = natives.areAnyCcsPending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.dlc.unk._0xF2E07819EF1A5289 = function () {
    let $res = natives.dlcCheckCloudDataCorrect();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.dlc.unk._0x9489659372A81585 = function () {
    let $res = natives.getExtracontentCloudResult();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.dlc.unk._0xA213B11DFF526300 = function () {
    let $res = natives.dlcCheckCompatPackConfiguration();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.dlc.unk._0xC4637A6D03C24CC3 = function () {
    let $res = natives.getIsInitialLoadingScreenActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.doesExist = function () {
    let $res = natives.doesEntityExist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.doesExist = function () {
    let $res = natives.doesEntityExist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.doesExist = function () {
    let $res = natives.doesEntityExist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.doesExist = function () {
    let $res = natives.doesEntityExist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.doesBelongToThisScript = function (p1) {
    let $res = natives.doesEntityBelongToThisScript(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.doesBelongToThisScript = function (p1) {
    let $res = natives.doesEntityBelongToThisScript(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.doesBelongToThisScript = function (p1) {
    let $res = natives.doesEntityBelongToThisScript(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.doesBelongToThisScript = function (p1) {
    let $res = natives.doesEntityBelongToThisScript(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.doesHaveDrawable = function () {
    let $res = natives.doesEntityHaveDrawable(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.doesHaveDrawable = function () {
    let $res = natives.doesEntityHaveDrawable(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.doesHaveDrawable = function () {
    let $res = natives.doesEntityHaveDrawable(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.doesHaveDrawable = function () {
    let $res = natives.doesEntityHaveDrawable(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.doesHavePhysics = function () {
    let $res = natives.doesEntityHavePhysics(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.doesHavePhysics = function () {
    let $res = natives.doesEntityHavePhysics(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.doesHavePhysics = function () {
    let $res = natives.doesEntityHavePhysics(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.doesHavePhysics = function () {
    let $res = natives.doesEntityHavePhysics(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasAnimFinished = function (animDict, animName, p3) {
    let $res = natives.hasEntityAnimFinished(this.handle, animDict, animName, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasAnimFinished = function (animDict, animName, p3) {
    let $res = natives.hasEntityAnimFinished(this.handle, animDict, animName, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasAnimFinished = function (animDict, animName, p3) {
    let $res = natives.hasEntityAnimFinished(this.handle, animDict, animName, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasAnimFinished = function (animDict, animName, p3) {
    let $res = natives.hasEntityAnimFinished(this.handle, animDict, animName, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasBeenDamagedByAnyObject = function () {
    let $res = natives.hasEntityBeenDamagedByAnyObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasBeenDamagedByAnyObject = function () {
    let $res = natives.hasEntityBeenDamagedByAnyObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasBeenDamagedByAnyObject = function () {
    let $res = natives.hasEntityBeenDamagedByAnyObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasBeenDamagedByAnyObject = function () {
    let $res = natives.hasEntityBeenDamagedByAnyObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasBeenDamagedByAnyPed = function () {
    let $res = natives.hasEntityBeenDamagedByAnyPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasBeenDamagedByAnyPed = function () {
    let $res = natives.hasEntityBeenDamagedByAnyPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasBeenDamagedByAnyPed = function () {
    let $res = natives.hasEntityBeenDamagedByAnyPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasBeenDamagedByAnyPed = function () {
    let $res = natives.hasEntityBeenDamagedByAnyPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasBeenDamagedByAnyVehicle = function () {
    let $res = natives.hasEntityBeenDamagedByAnyVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasBeenDamagedByAnyVehicle = function () {
    let $res = natives.hasEntityBeenDamagedByAnyVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasBeenDamagedByAnyVehicle = function () {
    let $res = natives.hasEntityBeenDamagedByAnyVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasBeenDamagedByAnyVehicle = function () {
    let $res = natives.hasEntityBeenDamagedByAnyVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasBeenDamagedByEntity = function (entity2, p2) {
    let $res = natives.hasEntityBeenDamagedByEntity(this.handle, entity2, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasBeenDamagedByEntity = function (entity2, p2) {
    let $res = natives.hasEntityBeenDamagedByEntity(this.handle, entity2, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasBeenDamagedByEntity = function (entity2, p2) {
    let $res = natives.hasEntityBeenDamagedByEntity(this.handle, entity2, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasBeenDamagedByEntity = function (entity2, p2) {
    let $res = natives.hasEntityBeenDamagedByEntity(this.handle, entity2, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasClearLosToEntity = function (entity2, traceType) {
    let $res = natives.hasEntityClearLosToEntity(this.handle, entity2, traceType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasClearLosToEntity = function (entity2, traceType) {
    let $res = natives.hasEntityClearLosToEntity(this.handle, entity2, traceType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasClearLosToEntity = function (entity2, traceType) {
    let $res = natives.hasEntityClearLosToEntity(this.handle, entity2, traceType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasClearLosToEntity = function (entity2, traceType) {
    let $res = natives.hasEntityClearLosToEntity(this.handle, entity2, traceType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasClearLosToEntity2 = function (entity2, traceType) {
    let $res = natives.hasEntityClearLosToEntityAdjustForCover(this.handle, entity2, traceType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.hasClearLosToEntity2 = function (entity2, traceType) {
    let $res = natives.hasEntityClearLosToEntityAdjustForCover(this.handle, entity2, traceType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.hasClearLosToEntity2 = function (entity2, traceType) {
    let $res = natives.hasEntityClearLosToEntityAdjustForCover(this.handle, entity2, traceType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.hasClearLosToEntity2 = function (entity2, traceType) {
    let $res = natives.hasEntityClearLosToEntityAdjustForCover(this.handle, entity2, traceType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.hasClearLosToEntityInFront = function (entity2) {
    let $res = natives.hasEntityClearLosToEntityInFront(this.handle, entity2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasClearLosToEntityInFront = function (entity2) {
    let $res = natives.hasEntityClearLosToEntityInFront(this.handle, entity2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasClearLosToEntityInFront = function (entity2) {
    let $res = natives.hasEntityClearLosToEntityInFront(this.handle, entity2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasClearLosToEntityInFront = function (entity2) {
    let $res = natives.hasEntityClearLosToEntityInFront(this.handle, entity2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasCollidedWithAnything = function () {
    let $res = natives.hasEntityCollidedWithAnything(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasCollidedWithAnything = function () {
    let $res = natives.hasEntityCollidedWithAnything(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasCollidedWithAnything = function () {
    let $res = natives.hasEntityCollidedWithAnything(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasCollidedWithAnything = function () {
    let $res = natives.hasEntityCollidedWithAnything(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getLastMaterialHitBy = function () {
    let $res = natives.getLastMaterialHitByEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getLastMaterialHitBy = function () {
    let $res = natives.getLastMaterialHitByEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getLastMaterialHitBy = function () {
    let $res = natives.getLastMaterialHitByEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getLastMaterialHitBy = function () {
    let $res = natives.getLastMaterialHitByEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getCollisionNormalOfLastHitFor = function () {
    let $res = natives.getCollisionNormalOfLastHitForEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getCollisionNormalOfLastHitFor = function () {
    let $res = natives.getCollisionNormalOfLastHitForEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getCollisionNormalOfLastHitFor = function () {
    let $res = natives.getCollisionNormalOfLastHitForEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getCollisionNormalOfLastHitFor = function () {
    let $res = natives.getCollisionNormalOfLastHitForEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.forceAiAndAnimationUpdate = function () {
    let $res = natives.forceEntityAiAndAnimationUpdate(this.handle);
};
mp.Ped.prototype.forceAiAndAnimationUpdate = function () {
    let $res = natives.forceEntityAiAndAnimationUpdate(this.handle);
};
mp.Object.prototype.forceAiAndAnimationUpdate = function () {
    let $res = natives.forceEntityAiAndAnimationUpdate(this.handle);
};
mp.Vehicle.prototype.forceAiAndAnimationUpdate = function () {
    let $res = natives.forceEntityAiAndAnimationUpdate(this.handle);
};
mp.Player.prototype.getAnimCurrentTime = function (animDict, animName) {
    let $res = natives.getEntityAnimCurrentTime(this.handle, animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAnimCurrentTime = function (animDict, animName) {
    let $res = natives.getEntityAnimCurrentTime(this.handle, animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getAnimCurrentTime = function (animDict, animName) {
    let $res = natives.getEntityAnimCurrentTime(this.handle, animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getAnimCurrentTime = function (animDict, animName) {
    let $res = natives.getEntityAnimCurrentTime(this.handle, animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getAnimTotalTime = function (animDict, animName) {
    let $res = natives.getEntityAnimTotalTime(this.handle, animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAnimTotalTime = function (animDict, animName) {
    let $res = natives.getEntityAnimTotalTime(this.handle, animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getAnimTotalTime = function (animDict, animName) {
    let $res = natives.getEntityAnimTotalTime(this.handle, animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getAnimTotalTime = function (animDict, animName) {
    let $res = natives.getEntityAnimTotalTime(this.handle, animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getAttachedTo = function () {
    let $res = natives.getEntityAttachedTo(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAttachedTo = function () {
    let $res = natives.getEntityAttachedTo(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getAttachedTo = function () {
    let $res = natives.getEntityAttachedTo(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getAttachedTo = function () {
    let $res = natives.getEntityAttachedTo(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getCoords = function (alive) {
    let $res = natives.getEntityCoords(this.handle, alive | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getCoords = function (alive) {
    let $res = natives.getEntityCoords(this.handle, alive | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getCoords = function (alive) {
    let $res = natives.getEntityCoords(this.handle, alive | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getCoords = function (alive) {
    let $res = natives.getEntityCoords(this.handle, alive | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getForwardVector = function () {
    let $res = natives.getEntityForwardVector(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getForwardVector = function () {
    let $res = natives.getEntityForwardVector(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getForwardVector = function () {
    let $res = natives.getEntityForwardVector(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getForwardVector = function () {
    let $res = natives.getEntityForwardVector(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getForwardX = function () {
    let $res = natives.getEntityForwardX(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getForwardX = function () {
    let $res = natives.getEntityForwardX(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getForwardX = function () {
    let $res = natives.getEntityForwardX(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getForwardX = function () {
    let $res = natives.getEntityForwardX(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getForwardY = function () {
    let $res = natives.getEntityForwardY(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getForwardY = function () {
    let $res = natives.getEntityForwardY(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getForwardY = function () {
    let $res = natives.getEntityForwardY(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getForwardY = function () {
    let $res = natives.getEntityForwardY(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getHeading = function () {
    let $res = natives.getEntityHeading(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHeading = function () {
    let $res = natives.getEntityHeading(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getHeading = function () {
    let $res = natives.getEntityHeading(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getHeading = function () {
    let $res = natives.getEntityHeading(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getPhysicsHeading = function () {
    let $res = natives.getEntityHeadingFromEulers(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPhysicsHeading = function () {
    let $res = natives.getEntityHeadingFromEulers(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getPhysicsHeading = function () {
    let $res = natives.getEntityHeadingFromEulers(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getPhysicsHeading = function () {
    let $res = natives.getEntityHeadingFromEulers(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getHealth = function () {
    let $res = natives.getEntityHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getHealth = function () {
    let $res = natives.getEntityHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getMaxHealth = function () {
    let $res = natives.getEntityMaxHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getMaxHealth = function () {
    let $res = natives.getEntityMaxHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getMaxHealth = function () {
    let $res = natives.getEntityMaxHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getMaxHealth = function () {
    let $res = natives.getEntityMaxHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setMaxHealth = function (value) {
    let $res = natives.setEntityMaxHealth(this.handle, value);
};
mp.Ped.prototype.setMaxHealth = function (value) {
    let $res = natives.setEntityMaxHealth(this.handle, value);
};
mp.Object.prototype.setMaxHealth = function (value) {
    let $res = natives.setEntityMaxHealth(this.handle, value);
};
mp.Vehicle.prototype.setMaxHealth = function (value) {
    let $res = natives.setEntityMaxHealth(this.handle, value);
};
mp.Player.prototype.getHeight = function (X, Y, Z, atTop, inWorldCoords) {
    let $res = natives.getEntityHeight(this.handle, X, Y, Z, atTop | 0, inWorldCoords | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHeight = function (X, Y, Z, atTop, inWorldCoords) {
    let $res = natives.getEntityHeight(this.handle, X, Y, Z, atTop | 0, inWorldCoords | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getHeight = function (X, Y, Z, atTop, inWorldCoords) {
    let $res = natives.getEntityHeight(this.handle, X, Y, Z, atTop | 0, inWorldCoords | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getHeight = function (X, Y, Z, atTop, inWorldCoords) {
    let $res = natives.getEntityHeight(this.handle, X, Y, Z, atTop | 0, inWorldCoords | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getHeightAboveGround = function () {
    let $res = natives.getEntityHeightAboveGround(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHeightAboveGround = function () {
    let $res = natives.getEntityHeightAboveGround(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getHeightAboveGround = function () {
    let $res = natives.getEntityHeightAboveGround(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getHeightAboveGround = function () {
    let $res = natives.getEntityHeightAboveGround(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getMatrix = function () {
    let $res = natives.getEntityMatrix(this.handle, undefined, undefined, undefined, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.forwardVector = new mp.Vector3($res[1]);
    $resObj.rightVector = new mp.Vector3($res[2]);
    $resObj.upVector = new mp.Vector3($res[3]);
    $resObj.position = new mp.Vector3($res[4]);
    return $resObj;
};
mp.Ped.prototype.getMatrix = function () {
    let $res = natives.getEntityMatrix(this.handle, undefined, undefined, undefined, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.forwardVector = new mp.Vector3($res[1]);
    $resObj.rightVector = new mp.Vector3($res[2]);
    $resObj.upVector = new mp.Vector3($res[3]);
    $resObj.position = new mp.Vector3($res[4]);
    return $resObj;
};
mp.Object.prototype.getMatrix = function () {
    let $res = natives.getEntityMatrix(this.handle, undefined, undefined, undefined, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.forwardVector = new mp.Vector3($res[1]);
    $resObj.rightVector = new mp.Vector3($res[2]);
    $resObj.upVector = new mp.Vector3($res[3]);
    $resObj.position = new mp.Vector3($res[4]);
    return $resObj;
};
mp.Vehicle.prototype.getMatrix = function () {
    let $res = natives.getEntityMatrix(this.handle, undefined, undefined, undefined, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.forwardVector = new mp.Vector3($res[1]);
    $resObj.rightVector = new mp.Vector3($res[2]);
    $resObj.upVector = new mp.Vector3($res[3]);
    $resObj.position = new mp.Vector3($res[4]);
    return $resObj;
};
mp.Ped.prototype.getModel = function () {
    let $res = natives.getEntityModel(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getOffsetFromGivenWorldCoords = function (posX, posY, posZ) {
    let $res = natives.getOffsetFromEntityGivenWorldCoords(this.handle, posX, posY, posZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getOffsetFromGivenWorldCoords = function (posX, posY, posZ) {
    let $res = natives.getOffsetFromEntityGivenWorldCoords(this.handle, posX, posY, posZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getOffsetFromGivenWorldCoords = function (posX, posY, posZ) {
    let $res = natives.getOffsetFromEntityGivenWorldCoords(this.handle, posX, posY, posZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getOffsetFromGivenWorldCoords = function (posX, posY, posZ) {
    let $res = natives.getOffsetFromEntityGivenWorldCoords(this.handle, posX, posY, posZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getOffsetFromInWorldCoords = function (offsetX, offsetY, offsetZ) {
    let $res = natives.getOffsetFromEntityInWorldCoords(this.handle, offsetX, offsetY, offsetZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getOffsetFromInWorldCoords = function (offsetX, offsetY, offsetZ) {
    let $res = natives.getOffsetFromEntityInWorldCoords(this.handle, offsetX, offsetY, offsetZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getOffsetFromInWorldCoords = function (offsetX, offsetY, offsetZ) {
    let $res = natives.getOffsetFromEntityInWorldCoords(this.handle, offsetX, offsetY, offsetZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getOffsetFromInWorldCoords = function (offsetX, offsetY, offsetZ) {
    let $res = natives.getOffsetFromEntityInWorldCoords(this.handle, offsetX, offsetY, offsetZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getPitch = function () {
    let $res = natives.getEntityPitch(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPitch = function () {
    let $res = natives.getEntityPitch(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getPitch = function () {
    let $res = natives.getEntityPitch(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getPitch = function () {
    let $res = natives.getEntityPitch(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getQuaternion = function () {
    let $res = natives.getEntityQuaternion(this.handle, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[3];
    $resObj.w = $res[4];
    return $resObj;
};
mp.Ped.prototype.getQuaternion = function () {
    let $res = natives.getEntityQuaternion(this.handle, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[3];
    $resObj.w = $res[4];
    return $resObj;
};
mp.Object.prototype.getQuaternion = function () {
    let $res = natives.getEntityQuaternion(this.handle, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[3];
    $resObj.w = $res[4];
    return $resObj;
};
mp.Vehicle.prototype.getQuaternion = function () {
    let $res = natives.getEntityQuaternion(this.handle, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[3];
    $resObj.w = $res[4];
    return $resObj;
};
mp.Player.prototype.getRoll = function () {
    let $res = natives.getEntityRoll(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getRoll = function () {
    let $res = natives.getEntityRoll(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getRoll = function () {
    let $res = natives.getEntityRoll(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getRoll = function () {
    let $res = natives.getEntityRoll(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getRotation = function (rotationOrder) {
    let $res = natives.getEntityRotation(this.handle, rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getRotation = function (rotationOrder) {
    let $res = natives.getEntityRotation(this.handle, rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getRotation = function (rotationOrder) {
    let $res = natives.getEntityRotation(this.handle, rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getRotation = function (rotationOrder) {
    let $res = natives.getEntityRotation(this.handle, rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getRotationVelocity = function () {
    let $res = natives.getEntityRotationVelocity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getRotationVelocity = function () {
    let $res = natives.getEntityRotationVelocity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getRotationVelocity = function () {
    let $res = natives.getEntityRotationVelocity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getRotationVelocity = function () {
    let $res = natives.getEntityRotationVelocity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getScript = function () {
    let $res = natives.getEntityScript(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.script = $res[1];
    return $resObj;
};
mp.Ped.prototype.getScript = function () {
    let $res = natives.getEntityScript(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.script = $res[1];
    return $resObj;
};
mp.Object.prototype.getScript = function () {
    let $res = natives.getEntityScript(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.script = $res[1];
    return $resObj;
};
mp.Vehicle.prototype.getScript = function () {
    let $res = natives.getEntityScript(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.script = $res[1];
    return $resObj;
};
mp.Player.prototype.getSpeed = function () {
    let $res = natives.getEntitySpeed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getSpeed = function () {
    let $res = natives.getEntitySpeed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getSpeed = function () {
    let $res = natives.getEntitySpeed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getSpeed = function () {
    let $res = natives.getEntitySpeed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getSpeedVector = function (relative) {
    let $res = natives.getEntitySpeedVector(this.handle, relative | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getSpeedVector = function (relative) {
    let $res = natives.getEntitySpeedVector(this.handle, relative | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getSpeedVector = function (relative) {
    let $res = natives.getEntitySpeedVector(this.handle, relative | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getSpeedVector = function (relative) {
    let $res = natives.getEntitySpeedVector(this.handle, relative | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getUprightValue = function () {
    let $res = natives.getEntityUprightValue(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getUprightValue = function () {
    let $res = natives.getEntityUprightValue(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getUprightValue = function () {
    let $res = natives.getEntityUprightValue(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getUprightValue = function () {
    let $res = natives.getEntityUprightValue(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getVelocity = function () {
    let $res = natives.getEntityVelocity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getVelocity = function () {
    let $res = natives.getEntityVelocity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getObjectIndexFromIndex = function () {
    let $res = natives.getObjectIndexFromEntityIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getPedIndexFromIndex = function () {
    let $res = natives.getPedIndexFromEntityIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedIndexFromIndex = function () {
    let $res = natives.getPedIndexFromEntityIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getVehicleIndexFromIndex = function () {
    let $res = natives.getVehicleIndexFromEntityIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getWorldPositionOfBone = function (boneIndex) {
    let $res = natives.getWorldPositionOfEntityBone(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getWorldPositionOfBone = function (boneIndex) {
    let $res = natives.getWorldPositionOfEntityBone(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getWorldPositionOfBone = function (boneIndex) {
    let $res = natives.getWorldPositionOfEntityBone(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getWorldPositionOfBone = function (boneIndex) {
    let $res = natives.getWorldPositionOfEntityBone(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getNearestPlayerTo = function () {
    let $res = natives.getNearestPlayerToEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getNearestPlayerTo = function () {
    let $res = natives.getNearestPlayerToEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getNearestPlayerTo = function () {
    let $res = natives.getNearestPlayerToEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getNearestPlayerTo = function () {
    let $res = natives.getNearestPlayerToEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getNearestPlayerToOnTeam = function (team) {
    let $res = natives.getNearestPlayerToEntityOnTeam(this.handle, team);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getNearestPlayerToOnTeam = function (team) {
    let $res = natives.getNearestPlayerToEntityOnTeam(this.handle, team);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getNearestPlayerToOnTeam = function (team) {
    let $res = natives.getNearestPlayerToEntityOnTeam(this.handle, team);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getNearestPlayerToOnTeam = function (team) {
    let $res = natives.getNearestPlayerToEntityOnTeam(this.handle, team);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getType = function () {
    let $res = natives.getEntityType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getType = function () {
    let $res = natives.getEntityType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getType = function () {
    let $res = natives.getEntityType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getType = function () {
    let $res = natives.getEntityType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getPopulationType = function () {
    let $res = natives.getEntityPopulationType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPopulationType = function () {
    let $res = natives.getEntityPopulationType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getPopulationType = function () {
    let $res = natives.getEntityPopulationType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getPopulationType = function () {
    let $res = natives.getEntityPopulationType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.isAPed = function () {
    let $res = natives.isEntityAPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAPed = function () {
    let $res = natives.isEntityAPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAPed = function () {
    let $res = natives.isEntityAPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAPed = function () {
    let $res = natives.isEntityAPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAMissionEntity = function () {
    let $res = natives.isEntityAMissionEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAMissionEntity = function () {
    let $res = natives.isEntityAMissionEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAMissionEntity = function () {
    let $res = natives.isEntityAMissionEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAMissionEntity = function () {
    let $res = natives.isEntityAMissionEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAVehicle = function () {
    let $res = natives.isEntityAVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAVehicle = function () {
    let $res = natives.isEntityAVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAVehicle = function () {
    let $res = natives.isEntityAVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAVehicle = function () {
    let $res = natives.isEntityAVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAnObject = function () {
    let $res = natives.isEntityAnObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAnObject = function () {
    let $res = natives.isEntityAnObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAnObject = function () {
    let $res = natives.isEntityAnObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAnObject = function () {
    let $res = natives.isEntityAnObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAtCoord = function (xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9) {
    let $res = natives.isEntityAtCoord(this.handle, xPos, yPos, zPos, xSize, ySize, zSize, p7 | 0, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAtCoord = function (xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9) {
    let $res = natives.isEntityAtCoord(this.handle, xPos, yPos, zPos, xSize, ySize, zSize, p7 | 0, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAtCoord = function (xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9) {
    let $res = natives.isEntityAtCoord(this.handle, xPos, yPos, zPos, xSize, ySize, zSize, p7 | 0, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAtCoord = function (xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9) {
    let $res = natives.isEntityAtCoord(this.handle, xPos, yPos, zPos, xSize, ySize, zSize, p7 | 0, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAtEntity = function (entity2, xSize, ySize, zSize, p5, p6, p7) {
    let $res = natives.isEntityAtEntity(this.handle, entity2, xSize, ySize, zSize, p5 | 0, p6 | 0, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAtEntity = function (entity2, xSize, ySize, zSize, p5, p6, p7) {
    let $res = natives.isEntityAtEntity(this.handle, entity2, xSize, ySize, zSize, p5 | 0, p6 | 0, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAtEntity = function (entity2, xSize, ySize, zSize, p5, p6, p7) {
    let $res = natives.isEntityAtEntity(this.handle, entity2, xSize, ySize, zSize, p5 | 0, p6 | 0, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAtEntity = function (entity2, xSize, ySize, zSize, p5, p6, p7) {
    let $res = natives.isEntityAtEntity(this.handle, entity2, xSize, ySize, zSize, p5 | 0, p6 | 0, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAttached = function () {
    let $res = natives.isEntityAttached(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAttached = function () {
    let $res = natives.isEntityAttached(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAttached = function () {
    let $res = natives.isEntityAttached(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAttached = function () {
    let $res = natives.isEntityAttached(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAttachedToAnyObject = function () {
    let $res = natives.isEntityAttachedToAnyObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAttachedToAnyObject = function () {
    let $res = natives.isEntityAttachedToAnyObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAttachedToAnyObject = function () {
    let $res = natives.isEntityAttachedToAnyObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAttachedToAnyObject = function () {
    let $res = natives.isEntityAttachedToAnyObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAttachedToAnyPed = function () {
    let $res = natives.isEntityAttachedToAnyPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAttachedToAnyPed = function () {
    let $res = natives.isEntityAttachedToAnyPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAttachedToAnyPed = function () {
    let $res = natives.isEntityAttachedToAnyPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAttachedToAnyPed = function () {
    let $res = natives.isEntityAttachedToAnyPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAttachedToAnyVehicle = function () {
    let $res = natives.isEntityAttachedToAnyVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAttachedToAnyVehicle = function () {
    let $res = natives.isEntityAttachedToAnyVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAttachedToAnyVehicle = function () {
    let $res = natives.isEntityAttachedToAnyVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAttachedToAnyVehicle = function () {
    let $res = natives.isEntityAttachedToAnyVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAttachedToEntity = function (to) {
    let $res = natives.isEntityAttachedToEntity(this.handle, to);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAttachedToEntity = function (to) {
    let $res = natives.isEntityAttachedToEntity(this.handle, to);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAttachedToEntity = function (to) {
    let $res = natives.isEntityAttachedToEntity(this.handle, to);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAttachedToEntity = function (to) {
    let $res = natives.isEntityAttachedToEntity(this.handle, to);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isDead = function (p1) {
    let $res = natives.isEntityDead(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isDead = function (p1) {
    let $res = natives.isEntityDead(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isDead = function (p1) {
    let $res = natives.isEntityDead(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isDead = function (p1) {
    let $res = natives.isEntityDead(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInAir = function () {
    let $res = natives.isEntityInAir(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInAir = function () {
    let $res = natives.isEntityInAir(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isInAir = function () {
    let $res = natives.isEntityInAir(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isInAir = function () {
    let $res = natives.isEntityInAir(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInAngledArea = function (x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10) {
    let $res = natives.isEntityInAngledArea(this.handle, x1, y1, z1, x2, y2, z2, width, debug | 0, includeZ | 0, p10);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInAngledArea = function (x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10) {
    let $res = natives.isEntityInAngledArea(this.handle, x1, y1, z1, x2, y2, z2, width, debug | 0, includeZ | 0, p10);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isInAngledArea = function (x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10) {
    let $res = natives.isEntityInAngledArea(this.handle, x1, y1, z1, x2, y2, z2, width, debug | 0, includeZ | 0, p10);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isInAngledArea = function (x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10) {
    let $res = natives.isEntityInAngledArea(this.handle, x1, y1, z1, x2, y2, z2, width, debug | 0, includeZ | 0, p10);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInArea = function (x1, y1, z1, x2, y2, z2, p7, p8, p9) {
    let $res = natives.isEntityInArea(this.handle, x1, y1, z1, x2, y2, z2, p7 | 0, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInArea = function (x1, y1, z1, x2, y2, z2, p7, p8, p9) {
    let $res = natives.isEntityInArea(this.handle, x1, y1, z1, x2, y2, z2, p7 | 0, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isInArea = function (x1, y1, z1, x2, y2, z2, p7, p8, p9) {
    let $res = natives.isEntityInArea(this.handle, x1, y1, z1, x2, y2, z2, p7 | 0, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isInArea = function (x1, y1, z1, x2, y2, z2, p7, p8, p9) {
    let $res = natives.isEntityInArea(this.handle, x1, y1, z1, x2, y2, z2, p7 | 0, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInZone = function (zone) {
    let $res = natives.isEntityInZone(this.handle, zone);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInZone = function (zone) {
    let $res = natives.isEntityInZone(this.handle, zone);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isInZone = function (zone) {
    let $res = natives.isEntityInZone(this.handle, zone);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isInZone = function (zone) {
    let $res = natives.isEntityInZone(this.handle, zone);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInWater = function () {
    let $res = natives.isEntityInWater(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInWater = function () {
    let $res = natives.isEntityInWater(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isInWater = function () {
    let $res = natives.isEntityInWater(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isInWater = function () {
    let $res = natives.isEntityInWater(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getSubmergedLevel = function () {
    let $res = natives.getEntitySubmergedLevel(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getSubmergedLevel = function () {
    let $res = natives.getEntitySubmergedLevel(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getSubmergedLevel = function () {
    let $res = natives.getEntitySubmergedLevel(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getSubmergedLevel = function () {
    let $res = natives.getEntitySubmergedLevel(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.isOnScreen = function () {
    let $res = natives.isEntityOnScreen(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isOnScreen = function () {
    let $res = natives.isEntityOnScreen(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isOnScreen = function () {
    let $res = natives.isEntityOnScreen(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isOnScreen = function () {
    let $res = natives.isEntityOnScreen(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPlayingAnim = function (animDict, animName, taskFlag) {
    let $res = natives.isEntityPlayingAnim(this.handle, animDict, animName, taskFlag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPlayingAnim = function (animDict, animName, taskFlag) {
    let $res = natives.isEntityPlayingAnim(this.handle, animDict, animName, taskFlag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isPlayingAnim = function (animDict, animName, taskFlag) {
    let $res = natives.isEntityPlayingAnim(this.handle, animDict, animName, taskFlag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isPlayingAnim = function (animDict, animName, taskFlag) {
    let $res = natives.isEntityPlayingAnim(this.handle, animDict, animName, taskFlag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isStatic = function () {
    let $res = natives.isEntityStatic(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isStatic = function () {
    let $res = natives.isEntityStatic(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isStatic = function () {
    let $res = natives.isEntityStatic(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isStatic = function () {
    let $res = natives.isEntityStatic(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isTouchingEntity = function (targetEntity) {
    let $res = natives.isEntityTouchingEntity(this.handle, targetEntity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isTouchingEntity = function (targetEntity) {
    let $res = natives.isEntityTouchingEntity(this.handle, targetEntity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isTouchingEntity = function (targetEntity) {
    let $res = natives.isEntityTouchingEntity(this.handle, targetEntity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isTouchingEntity = function (targetEntity) {
    let $res = natives.isEntityTouchingEntity(this.handle, targetEntity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isTouchingModel = function (modelHash) {
    let $res = natives.isEntityTouchingModel(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isTouchingModel = function (modelHash) {
    let $res = natives.isEntityTouchingModel(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isTouchingModel = function (modelHash) {
    let $res = natives.isEntityTouchingModel(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isTouchingModel = function (modelHash) {
    let $res = natives.isEntityTouchingModel(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isUpright = function (angle) {
    let $res = natives.isEntityUpright(this.handle, angle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isUpright = function (angle) {
    let $res = natives.isEntityUpright(this.handle, angle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isUpright = function (angle) {
    let $res = natives.isEntityUpright(this.handle, angle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isUpright = function (angle) {
    let $res = natives.isEntityUpright(this.handle, angle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isUpsidedown = function () {
    let $res = natives.isEntityUpsidedown(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isUpsidedown = function () {
    let $res = natives.isEntityUpsidedown(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isUpsidedown = function () {
    let $res = natives.isEntityUpsidedown(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isUpsidedown = function () {
    let $res = natives.isEntityUpsidedown(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isVisible = function () {
    let $res = natives.isEntityVisible(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isVisible = function () {
    let $res = natives.isEntityVisible(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isVisible = function () {
    let $res = natives.isEntityVisible(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isVisible = function () {
    let $res = natives.isEntityVisible(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isVisibleToScript = function () {
    let $res = natives.isEntityVisibleToScript(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isVisibleToScript = function () {
    let $res = natives.isEntityVisibleToScript(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isVisibleToScript = function () {
    let $res = natives.isEntityVisibleToScript(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isVisibleToScript = function () {
    let $res = natives.isEntityVisibleToScript(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isOccluded = function () {
    let $res = natives.isEntityOccluded(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isOccluded = function () {
    let $res = natives.isEntityOccluded(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isOccluded = function () {
    let $res = natives.isEntityOccluded(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isOccluded = function () {
    let $res = natives.isEntityOccluded(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isWaitingForWorldCollision = function () {
    let $res = natives.isEntityWaitingForWorldCollision(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isWaitingForWorldCollision = function () {
    let $res = natives.isEntityWaitingForWorldCollision(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isWaitingForWorldCollision = function () {
    let $res = natives.isEntityWaitingForWorldCollision(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isWaitingForWorldCollision = function () {
    let $res = natives.isEntityWaitingForWorldCollision(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.applyForceToCenterOfMass = function (forceType, x, y, z, p5, isDirectionRel, isForceRel, p8) {
    let $res = natives.applyForceToEntityCenterOfMass(this.handle, forceType, x, y, z, p5 | 0, isDirectionRel | 0, isForceRel | 0, p8 | 0);
};
mp.Ped.prototype.applyForceToCenterOfMass = function (forceType, x, y, z, p5, isDirectionRel, isForceRel, p8) {
    let $res = natives.applyForceToEntityCenterOfMass(this.handle, forceType, x, y, z, p5 | 0, isDirectionRel | 0, isForceRel | 0, p8 | 0);
};
mp.Object.prototype.applyForceToCenterOfMass = function (forceType, x, y, z, p5, isDirectionRel, isForceRel, p8) {
    let $res = natives.applyForceToEntityCenterOfMass(this.handle, forceType, x, y, z, p5 | 0, isDirectionRel | 0, isForceRel | 0, p8 | 0);
};
mp.Vehicle.prototype.applyForceToCenterOfMass = function (forceType, x, y, z, p5, isDirectionRel, isForceRel, p8) {
    let $res = natives.applyForceToEntityCenterOfMass(this.handle, forceType, x, y, z, p5 | 0, isDirectionRel | 0, isForceRel | 0, p8 | 0);
};
mp.Player.prototype.applyForceTo = function (forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13) {
    let $res = natives.applyForceToEntity(this.handle, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel | 0, ignoreUpVec | 0, isForceRel | 0, p12 | 0, p13 | 0);
};
mp.Ped.prototype.applyForceTo = function (forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13) {
    let $res = natives.applyForceToEntity(this.handle, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel | 0, ignoreUpVec | 0, isForceRel | 0, p12 | 0, p13 | 0);
};
mp.Object.prototype.applyForceTo = function (forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13) {
    let $res = natives.applyForceToEntity(this.handle, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel | 0, ignoreUpVec | 0, isForceRel | 0, p12 | 0, p13 | 0);
};
mp.Vehicle.prototype.applyForceTo = function (forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13) {
    let $res = natives.applyForceToEntity(this.handle, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel | 0, ignoreUpVec | 0, isForceRel | 0, p12 | 0, p13 | 0);
};
mp.Player.prototype.attachToEntity = function (entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot) {
    let $res = natives.attachEntityToEntity(this.handle, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9 | 0, useSoftPinning | 0, collision | 0, isPed | 0, vertexIndex, fixedRot | 0, 0);
};
mp.Ped.prototype.attachToEntity = function (entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot) {
    let $res = natives.attachEntityToEntity(this.handle, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9 | 0, useSoftPinning | 0, collision | 0, isPed | 0, vertexIndex, fixedRot | 0, 0);
};
mp.Object.prototype.attachToEntity = function (entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot) {
    let $res = natives.attachEntityToEntity(this.handle, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9 | 0, useSoftPinning | 0, collision | 0, isPed | 0, vertexIndex, fixedRot | 0, 0);
};
mp.Vehicle.prototype.attachToEntity = function (entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot) {
    let $res = natives.attachEntityToEntity(this.handle, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9 | 0, useSoftPinning | 0, collision | 0, isPed | 0, vertexIndex, fixedRot | 0, 0);
};
mp.Player.prototype.attachBoneToEntityBone = function (entity2, boneIndex1, boneIndex2, p4, p5) {
    let $res = natives.attachEntityBoneToEntityBone(this.handle, entity2, boneIndex1, boneIndex2, p4 | 0, p5 | 0);
};
mp.Ped.prototype.attachBoneToEntityBone = function (entity2, boneIndex1, boneIndex2, p4, p5) {
    let $res = natives.attachEntityBoneToEntityBone(this.handle, entity2, boneIndex1, boneIndex2, p4 | 0, p5 | 0);
};
mp.Object.prototype.attachBoneToEntityBone = function (entity2, boneIndex1, boneIndex2, p4, p5) {
    let $res = natives.attachEntityBoneToEntityBone(this.handle, entity2, boneIndex1, boneIndex2, p4 | 0, p5 | 0);
};
mp.Vehicle.prototype.attachBoneToEntityBone = function (entity2, boneIndex1, boneIndex2, p4, p5) {
    let $res = natives.attachEntityBoneToEntityBone(this.handle, entity2, boneIndex1, boneIndex2, p4 | 0, p5 | 0);
};
mp.Player.prototype.attachBoneToEntityBonePhysically = function (entity2, boneIndex1, boneIndex2, p4, p5) {
    let $res = natives.attachEntityBoneToEntityBoneYForward(this.handle, entity2, boneIndex1, boneIndex2, p4 | 0, p5 | 0);
};
mp.Ped.prototype.attachBoneToEntityBonePhysically = function (entity2, boneIndex1, boneIndex2, p4, p5) {
    let $res = natives.attachEntityBoneToEntityBoneYForward(this.handle, entity2, boneIndex1, boneIndex2, p4 | 0, p5 | 0);
};
mp.Object.prototype.attachBoneToEntityBonePhysically = function (entity2, boneIndex1, boneIndex2, p4, p5) {
    let $res = natives.attachEntityBoneToEntityBoneYForward(this.handle, entity2, boneIndex1, boneIndex2, p4 | 0, p5 | 0);
};
mp.Vehicle.prototype.attachBoneToEntityBonePhysically = function (entity2, boneIndex1, boneIndex2, p4, p5) {
    let $res = natives.attachEntityBoneToEntityBoneYForward(this.handle, entity2, boneIndex1, boneIndex2, p4 | 0, p5 | 0);
};
mp.Player.prototype.attachToEntityPhysically = function (entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18) {
    let $res = natives.attachEntityToEntityPhysically(this.handle, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot | 0, p15 | 0, collision | 0, p17 | 0, p18);
};
mp.Ped.prototype.attachToEntityPhysically = function (entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18) {
    let $res = natives.attachEntityToEntityPhysically(this.handle, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot | 0, p15 | 0, collision | 0, p17 | 0, p18);
};
mp.Object.prototype.attachToEntityPhysically = function (entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18) {
    let $res = natives.attachEntityToEntityPhysically(this.handle, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot | 0, p15 | 0, collision | 0, p17 | 0, p18);
};
mp.Vehicle.prototype.attachToEntityPhysically = function (entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18) {
    let $res = natives.attachEntityToEntityPhysically(this.handle, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot | 0, p15 | 0, collision | 0, p17 | 0, p18);
};
mp.Player.prototype.processAttachments = function () {
    let $res = natives.processEntityAttachments(this.handle);
};
mp.Ped.prototype.processAttachments = function () {
    let $res = natives.processEntityAttachments(this.handle);
};
mp.Object.prototype.processAttachments = function () {
    let $res = natives.processEntityAttachments(this.handle);
};
mp.Vehicle.prototype.processAttachments = function () {
    let $res = natives.processEntityAttachments(this.handle);
};
mp.Player.prototype.getBoneIndexByName = function (boneName) {
    let $res = natives.getEntityBoneIndexByName(this.handle, boneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getBoneIndexByName = function (boneName) {
    let $res = natives.getEntityBoneIndexByName(this.handle, boneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getBoneIndexByName = function (boneName) {
    let $res = natives.getEntityBoneIndexByName(this.handle, boneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getBoneIndexByName = function (boneName) {
    let $res = natives.getEntityBoneIndexByName(this.handle, boneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.clearLastDamageEntity = function () {
    let $res = natives.clearEntityLastDamageEntity(this.handle);
};
mp.Ped.prototype.clearLastDamageEntity = function () {
    let $res = natives.clearEntityLastDamageEntity(this.handle);
};
mp.Object.prototype.clearLastDamageEntity = function () {
    let $res = natives.clearEntityLastDamageEntity(this.handle);
};
mp.Vehicle.prototype.clearLastDamageEntity = function () {
    let $res = natives.clearEntityLastDamageEntity(this.handle);
};
mp.Player.prototype.detach = function (dynamic, collision) {
    let $res = natives.detachEntity(this.handle, dynamic | 0, collision | 0);
};
mp.Ped.prototype.detach = function (dynamic, collision) {
    let $res = natives.detachEntity(this.handle, dynamic | 0, collision | 0);
};
mp.Object.prototype.detach = function (dynamic, collision) {
    let $res = natives.detachEntity(this.handle, dynamic | 0, collision | 0);
};
mp.Vehicle.prototype.detach = function (dynamic, collision) {
    let $res = natives.detachEntity(this.handle, dynamic | 0, collision | 0);
};
mp.Player.prototype.freezePosition = function (toggle) {
    let $res = natives.freezeEntityPosition(this.handle, toggle | 0);
};
mp.Ped.prototype.freezePosition = function (toggle) {
    let $res = natives.freezeEntityPosition(this.handle, toggle | 0);
};
mp.Object.prototype.freezePosition = function (toggle) {
    let $res = natives.freezeEntityPosition(this.handle, toggle | 0);
};
mp.Vehicle.prototype.freezePosition = function (toggle) {
    let $res = natives.freezeEntityPosition(this.handle, toggle | 0);
};
mp.Player.prototype.setCleanupByEngine = function (toggle) {
    let $res = natives.setEntityShouldFreezeWaitingOnCollision(this.handle, toggle | 0);
};
mp.Ped.prototype.setCleanupByEngine = function (toggle) {
    let $res = natives.setEntityShouldFreezeWaitingOnCollision(this.handle, toggle | 0);
};
mp.Object.prototype.setCleanupByEngine = function (toggle) {
    let $res = natives.setEntityShouldFreezeWaitingOnCollision(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setCleanupByEngine = function (toggle) {
    let $res = natives.setEntityShouldFreezeWaitingOnCollision(this.handle, toggle | 0);
};
mp.Player.prototype.playAnim = function (animName, animDict, p3, loop, stayInAnim, p6, delta, bitset) {
    let $res = natives.playEntityAnim(this.handle, animName, animDict, p3, loop | 0, stayInAnim | 0, p6 | 0, delta, bitset);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.playAnim = function (animName, animDict, p3, loop, stayInAnim, p6, delta, bitset) {
    let $res = natives.playEntityAnim(this.handle, animName, animDict, p3, loop | 0, stayInAnim | 0, p6 | 0, delta, bitset);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.playAnim = function (animName, animDict, p3, loop, stayInAnim, p6, delta, bitset) {
    let $res = natives.playEntityAnim(this.handle, animName, animDict, p3, loop | 0, stayInAnim | 0, p6 | 0, delta, bitset);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.playAnim = function (animName, animDict, p3, loop, stayInAnim, p6, delta, bitset) {
    let $res = natives.playEntityAnim(this.handle, animName, animDict, p3, loop | 0, stayInAnim | 0, p6 | 0, delta, bitset);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.playSynchronizedAnim = function (syncedScene, animation, propName, p4, p5, p6, p7) {
    let $res = natives.playSynchronizedEntityAnim(this.handle, syncedScene, animation, propName, p4, p5, p6, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.playSynchronizedAnim = function (syncedScene, animation, propName, p4, p5, p6, p7) {
    let $res = natives.playSynchronizedEntityAnim(this.handle, syncedScene, animation, propName, p4, p5, p6, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.playSynchronizedAnim = function (syncedScene, animation, propName, p4, p5, p6, p7) {
    let $res = natives.playSynchronizedEntityAnim(this.handle, syncedScene, animation, propName, p4, p5, p6, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.playSynchronizedAnim = function (syncedScene, animation, propName, p4, p5, p6, p7) {
    let $res = natives.playSynchronizedEntityAnim(this.handle, syncedScene, animation, propName, p4, p5, p6, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.stopAnim = function (animation, animGroup, p3) {
    let $res = natives.stopEntityAnim(this.handle, animation, animGroup, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.stopAnim = function (animation, animGroup, p3) {
    let $res = natives.stopEntityAnim(this.handle, animation, animGroup, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.stopAnim = function (animation, animGroup, p3) {
    let $res = natives.stopEntityAnim(this.handle, animation, animGroup, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.stopAnim = function (animation, animGroup, p3) {
    let $res = natives.stopEntityAnim(this.handle, animation, animGroup, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.stopSynchronizedAnim = function (p1, p2) {
    let $res = natives.stopSynchronizedEntityAnim(this.handle, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.stopSynchronizedAnim = function (p1, p2) {
    let $res = natives.stopSynchronizedEntityAnim(this.handle, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.stopSynchronizedAnim = function (p1, p2) {
    let $res = natives.stopSynchronizedEntityAnim(this.handle, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.stopSynchronizedAnim = function (p1, p2) {
    let $res = natives.stopSynchronizedEntityAnim(this.handle, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasAnimEventFired = function (actionHash) {
    let $res = natives.hasAnimEventFired(this.handle, actionHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasAnimEventFired = function (actionHash) {
    let $res = natives.hasAnimEventFired(this.handle, actionHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasAnimEventFired = function (actionHash) {
    let $res = natives.hasAnimEventFired(this.handle, actionHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasAnimEventFired = function (actionHash) {
    let $res = natives.hasAnimEventFired(this.handle, actionHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setAnimCurrentTime = function (animDictionary, animName, time) {
    let $res = natives.setEntityAnimCurrentTime(this.handle, animDictionary, animName, time);
};
mp.Ped.prototype.setAnimCurrentTime = function (animDictionary, animName, time) {
    let $res = natives.setEntityAnimCurrentTime(this.handle, animDictionary, animName, time);
};
mp.Object.prototype.setAnimCurrentTime = function (animDictionary, animName, time) {
    let $res = natives.setEntityAnimCurrentTime(this.handle, animDictionary, animName, time);
};
mp.Vehicle.prototype.setAnimCurrentTime = function (animDictionary, animName, time) {
    let $res = natives.setEntityAnimCurrentTime(this.handle, animDictionary, animName, time);
};
mp.Player.prototype.setAnimSpeed = function (animDictionary, animName, speedMultiplier) {
    let $res = natives.setEntityAnimSpeed(this.handle, animDictionary, animName, speedMultiplier);
};
mp.Ped.prototype.setAnimSpeed = function (animDictionary, animName, speedMultiplier) {
    let $res = natives.setEntityAnimSpeed(this.handle, animDictionary, animName, speedMultiplier);
};
mp.Object.prototype.setAnimSpeed = function (animDictionary, animName, speedMultiplier) {
    let $res = natives.setEntityAnimSpeed(this.handle, animDictionary, animName, speedMultiplier);
};
mp.Vehicle.prototype.setAnimSpeed = function (animDictionary, animName, speedMultiplier) {
    let $res = natives.setEntityAnimSpeed(this.handle, animDictionary, animName, speedMultiplier);
};
mp.Player.prototype.setAsMissionEntity = function (p1, p2) {
    let $res = natives.setEntityAsMissionEntity(this.handle, p1 | 0, p2 | 0);
};
mp.Ped.prototype.setAsMissionEntity = function (p1, p2) {
    let $res = natives.setEntityAsMissionEntity(this.handle, p1 | 0, p2 | 0);
};
mp.Object.prototype.setAsMissionEntity = function (p1, p2) {
    let $res = natives.setEntityAsMissionEntity(this.handle, p1 | 0, p2 | 0);
};
mp.Vehicle.prototype.setAsMissionEntity = function (p1, p2) {
    let $res = natives.setEntityAsMissionEntity(this.handle, p1 | 0, p2 | 0);
};
mp.Player.prototype.setCanBeDamaged = function (toggle) {
    let $res = natives.setEntityCanBeDamaged(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanBeDamaged = function (toggle) {
    let $res = natives.setEntityCanBeDamaged(this.handle, toggle | 0);
};
mp.Object.prototype.setCanBeDamaged = function (toggle) {
    let $res = natives.setEntityCanBeDamaged(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setCanBeDamaged = function (toggle) {
    let $res = natives.setEntityCanBeDamaged(this.handle, toggle | 0);
};
mp.Player.prototype.getCanBeDamaged = function () {
    let $res = natives.getEntityCanBeDamaged(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getCanBeDamaged = function () {
    let $res = natives.getEntityCanBeDamaged(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.getCanBeDamaged = function () {
    let $res = natives.getEntityCanBeDamaged(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getCanBeDamaged = function () {
    let $res = natives.getEntityCanBeDamaged(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setCanBeDamagedByRelationshipGroup = function (bCanBeDamaged, relGroup) {
    let $res = natives.setEntityCanBeDamagedByRelationshipGroup(this.handle, bCanBeDamaged | 0, relGroup);
};
mp.Ped.prototype.setCanBeDamagedByRelationshipGroup = function (bCanBeDamaged, relGroup) {
    let $res = natives.setEntityCanBeDamagedByRelationshipGroup(this.handle, bCanBeDamaged | 0, relGroup);
};
mp.Object.prototype.setCanBeDamagedByRelationshipGroup = function (bCanBeDamaged, relGroup) {
    let $res = natives.setEntityCanBeDamagedByRelationshipGroup(this.handle, bCanBeDamaged | 0, relGroup);
};
mp.Vehicle.prototype.setCanBeDamagedByRelationshipGroup = function (bCanBeDamaged, relGroup) {
    let $res = natives.setEntityCanBeDamagedByRelationshipGroup(this.handle, bCanBeDamaged | 0, relGroup);
};
mp.Player.prototype.setCanBeTargetedWithoutLos = function (toggle) {
    let $res = natives.setEntityCanBeTargetedWithoutLos(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanBeTargetedWithoutLos = function (toggle) {
    let $res = natives.setEntityCanBeTargetedWithoutLos(this.handle, toggle | 0);
};
mp.Object.prototype.setCanBeTargetedWithoutLos = function (toggle) {
    let $res = natives.setEntityCanBeTargetedWithoutLos(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setCanBeTargetedWithoutLos = function (toggle) {
    let $res = natives.setEntityCanBeTargetedWithoutLos(this.handle, toggle | 0);
};
mp.Player.prototype.setCollision = function (toggle, keepPhysics) {
    let $res = natives.setEntityCollision(this.handle, toggle | 0, keepPhysics | 0);
};
mp.Ped.prototype.setCollision = function (toggle, keepPhysics) {
    let $res = natives.setEntityCollision(this.handle, toggle | 0, keepPhysics | 0);
};
mp.Object.prototype.setCollision = function (toggle, keepPhysics) {
    let $res = natives.setEntityCollision(this.handle, toggle | 0, keepPhysics | 0);
};
mp.Vehicle.prototype.setCollision = function (toggle, keepPhysics) {
    let $res = natives.setEntityCollision(this.handle, toggle | 0, keepPhysics | 0);
};
mp.Player.prototype.getCollisionDisabled = function () {
    let $res = natives.getEntityCollisionDisabled(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getCollisionDisabled = function () {
    let $res = natives.getEntityCollisionDisabled(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.getCollisionDisabled = function () {
    let $res = natives.getEntityCollisionDisabled(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getCollisionDisabled = function () {
    let $res = natives.getEntityCollisionDisabled(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setCompletelyDisableCollision = function (toggle, keepPhysics) {
    let $res = natives.setEntityCompletelyDisableCollision(this.handle, toggle | 0, keepPhysics | 0);
};
mp.Ped.prototype.setCompletelyDisableCollision = function (toggle, keepPhysics) {
    let $res = natives.setEntityCompletelyDisableCollision(this.handle, toggle | 0, keepPhysics | 0);
};
mp.Object.prototype.setCompletelyDisableCollision = function (toggle, keepPhysics) {
    let $res = natives.setEntityCompletelyDisableCollision(this.handle, toggle | 0, keepPhysics | 0);
};
mp.Vehicle.prototype.setCompletelyDisableCollision = function (toggle, keepPhysics) {
    let $res = natives.setEntityCompletelyDisableCollision(this.handle, toggle | 0, keepPhysics | 0);
};
mp.Player.prototype.setCoords = function (xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea) {
    let $res = natives.setEntityCoords(this.handle, xPos, yPos, zPos, xAxis | 0, yAxis | 0, zAxis | 0, clearArea | 0);
};
mp.Ped.prototype.setCoords = function (xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea) {
    let $res = natives.setEntityCoords(this.handle, xPos, yPos, zPos, xAxis | 0, yAxis | 0, zAxis | 0, clearArea | 0);
};
mp.Object.prototype.setCoords = function (xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea) {
    let $res = natives.setEntityCoords(this.handle, xPos, yPos, zPos, xAxis | 0, yAxis | 0, zAxis | 0, clearArea | 0);
};
mp.Vehicle.prototype.setCoords = function (xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea) {
    let $res = natives.setEntityCoords(this.handle, xPos, yPos, zPos, xAxis | 0, yAxis | 0, zAxis | 0, clearArea | 0);
};
mp.Player.prototype.setCoordsWithoutPlantsReset = function (xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) {
    let $res = natives.setEntityCoordsWithoutPlantsReset(this.handle, xPos, yPos, zPos, alive | 0, deadFlag | 0, ragdollFlag | 0, clearArea | 0);
};
mp.Ped.prototype.setCoordsWithoutPlantsReset = function (xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) {
    let $res = natives.setEntityCoordsWithoutPlantsReset(this.handle, xPos, yPos, zPos, alive | 0, deadFlag | 0, ragdollFlag | 0, clearArea | 0);
};
mp.Object.prototype.setCoordsWithoutPlantsReset = function (xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) {
    let $res = natives.setEntityCoordsWithoutPlantsReset(this.handle, xPos, yPos, zPos, alive | 0, deadFlag | 0, ragdollFlag | 0, clearArea | 0);
};
mp.Vehicle.prototype.setCoordsWithoutPlantsReset = function (xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) {
    let $res = natives.setEntityCoordsWithoutPlantsReset(this.handle, xPos, yPos, zPos, alive | 0, deadFlag | 0, ragdollFlag | 0, clearArea | 0);
};
mp.Player.prototype.setCoordsNoOffset = function (xPos, yPos, zPos, xAxis, yAxis, zAxis) {
    let $res = natives.setEntityCoordsNoOffset(this.handle, xPos, yPos, zPos, xAxis | 0, yAxis | 0, zAxis | 0);
};
mp.Ped.prototype.setCoordsNoOffset = function (xPos, yPos, zPos, xAxis, yAxis, zAxis) {
    let $res = natives.setEntityCoordsNoOffset(this.handle, xPos, yPos, zPos, xAxis | 0, yAxis | 0, zAxis | 0);
};
mp.Object.prototype.setCoordsNoOffset = function (xPos, yPos, zPos, xAxis, yAxis, zAxis) {
    let $res = natives.setEntityCoordsNoOffset(this.handle, xPos, yPos, zPos, xAxis | 0, yAxis | 0, zAxis | 0);
};
mp.Vehicle.prototype.setCoordsNoOffset = function (xPos, yPos, zPos, xAxis, yAxis, zAxis) {
    let $res = natives.setEntityCoordsNoOffset(this.handle, xPos, yPos, zPos, xAxis | 0, yAxis | 0, zAxis | 0);
};
mp.Player.prototype.setDynamic = function (toggle) {
    let $res = natives.setEntityDynamic(this.handle, toggle | 0);
};
mp.Ped.prototype.setDynamic = function (toggle) {
    let $res = natives.setEntityDynamic(this.handle, toggle | 0);
};
mp.Object.prototype.setDynamic = function (toggle) {
    let $res = natives.setEntityDynamic(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDynamic = function (toggle) {
    let $res = natives.setEntityDynamic(this.handle, toggle | 0);
};
mp.Player.prototype.setHeading = function (heading) {
    let $res = natives.setEntityHeading(this.handle, heading);
};
mp.Ped.prototype.setHeading = function (heading) {
    let $res = natives.setEntityHeading(this.handle, heading);
};
mp.Object.prototype.setHeading = function (heading) {
    let $res = natives.setEntityHeading(this.handle, heading);
};
mp.Vehicle.prototype.setHeading = function (heading) {
    let $res = natives.setEntityHeading(this.handle, heading);
};
mp.Player.prototype.setHealth = function (health, p2) {
    let $res = natives.setEntityHealth(this.handle, health, p2 | 0);
};
mp.Ped.prototype.setHealth = function (health, p2) {
    let $res = natives.setEntityHealth(this.handle, health, p2 | 0);
};
mp.Object.prototype.setHealth = function (health, p2) {
    let $res = natives.setEntityHealth(this.handle, health, p2 | 0);
};
mp.Vehicle.prototype.setHealth = function (health, p2) {
    let $res = natives.setEntityHealth(this.handle, health, p2 | 0);
};
mp.Player.prototype.setInvincible = function (toggle) {
    let $res = natives.setEntityInvincible(this.handle, toggle | 0);
};
mp.Ped.prototype.setInvincible = function (toggle) {
    let $res = natives.setEntityInvincible(this.handle, toggle | 0);
};
mp.Object.prototype.setInvincible = function (toggle) {
    let $res = natives.setEntityInvincible(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setInvincible = function (toggle) {
    let $res = natives.setEntityInvincible(this.handle, toggle | 0);
};
mp.Player.prototype.setIsTargetPriority = function (p1, p2) {
    let $res = natives.setEntityIsTargetPriority(this.handle, p1 | 0, p2);
};
mp.Ped.prototype.setIsTargetPriority = function (p1, p2) {
    let $res = natives.setEntityIsTargetPriority(this.handle, p1 | 0, p2);
};
mp.Object.prototype.setIsTargetPriority = function (p1, p2) {
    let $res = natives.setEntityIsTargetPriority(this.handle, p1 | 0, p2);
};
mp.Vehicle.prototype.setIsTargetPriority = function (p1, p2) {
    let $res = natives.setEntityIsTargetPriority(this.handle, p1 | 0, p2);
};
mp.Player.prototype.setLights = function (toggle) {
    let $res = natives.setEntityLights(this.handle, toggle | 0);
};
mp.Ped.prototype.setLights = function (toggle) {
    let $res = natives.setEntityLights(this.handle, toggle | 0);
};
mp.Object.prototype.setLights = function (toggle) {
    let $res = natives.setEntityLights(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setLights = function (toggle) {
    let $res = natives.setEntityLights(this.handle, toggle | 0);
};
mp.Player.prototype.setLoadCollisionFlag = function (toggle, p2) {
    let $res = natives.setEntityLoadCollisionFlag(this.handle, toggle | 0, p2 | 0);
};
mp.Ped.prototype.setLoadCollisionFlag = function (toggle, p2) {
    let $res = natives.setEntityLoadCollisionFlag(this.handle, toggle | 0, p2 | 0);
};
mp.Object.prototype.setLoadCollisionFlag = function (toggle, p2) {
    let $res = natives.setEntityLoadCollisionFlag(this.handle, toggle | 0, p2 | 0);
};
mp.Vehicle.prototype.setLoadCollisionFlag = function (toggle, p2) {
    let $res = natives.setEntityLoadCollisionFlag(this.handle, toggle | 0, p2 | 0);
};
mp.Player.prototype.hasCollisionLoadedAround = function () {
    let $res = natives.hasCollisionLoadedAroundEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasCollisionLoadedAround = function () {
    let $res = natives.hasCollisionLoadedAroundEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasCollisionLoadedAround = function () {
    let $res = natives.hasCollisionLoadedAroundEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasCollisionLoadedAround = function () {
    let $res = natives.hasCollisionLoadedAroundEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setMaxSpeed = function (speed) {
    let $res = natives.setEntityMaxSpeed(this.handle, speed);
};
mp.Ped.prototype.setMaxSpeed = function (speed) {
    let $res = natives.setEntityMaxSpeed(this.handle, speed);
};
mp.Object.prototype.setMaxSpeed = function (speed) {
    let $res = natives.setEntityMaxSpeed(this.handle, speed);
};
mp.Vehicle.prototype.setMaxSpeed = function (speed) {
    let $res = natives.setEntityMaxSpeed(this.handle, speed);
};
mp.Player.prototype.setOnlyDamagedByPlayer = function (toggle) {
    let $res = natives.setEntityOnlyDamagedByPlayer(this.handle, toggle | 0);
};
mp.Ped.prototype.setOnlyDamagedByPlayer = function (toggle) {
    let $res = natives.setEntityOnlyDamagedByPlayer(this.handle, toggle | 0);
};
mp.Object.prototype.setOnlyDamagedByPlayer = function (toggle) {
    let $res = natives.setEntityOnlyDamagedByPlayer(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setOnlyDamagedByPlayer = function (toggle) {
    let $res = natives.setEntityOnlyDamagedByPlayer(this.handle, toggle | 0);
};
mp.Player.prototype.setOnlyDamagedByRelationshipGroup = function (p1, p2) {
    let $res = natives.setEntityOnlyDamagedByRelationshipGroup(this.handle, p1 | 0, p2);
};
mp.Ped.prototype.setOnlyDamagedByRelationshipGroup = function (p1, p2) {
    let $res = natives.setEntityOnlyDamagedByRelationshipGroup(this.handle, p1 | 0, p2);
};
mp.Object.prototype.setOnlyDamagedByRelationshipGroup = function (p1, p2) {
    let $res = natives.setEntityOnlyDamagedByRelationshipGroup(this.handle, p1 | 0, p2);
};
mp.Vehicle.prototype.setOnlyDamagedByRelationshipGroup = function (p1, p2) {
    let $res = natives.setEntityOnlyDamagedByRelationshipGroup(this.handle, p1 | 0, p2);
};
mp.Player.prototype.setProofs = function (bulletProof, fireProof, explosionProof, collisionProof, meleeProof, p6, p7, drownProof) {
    let $res = natives.setEntityProofs(this.handle, bulletProof | 0, fireProof | 0, explosionProof | 0, collisionProof | 0, meleeProof | 0, p6 | 0, p7 | 0, drownProof | 0);
};
mp.Ped.prototype.setProofs = function (bulletProof, fireProof, explosionProof, collisionProof, meleeProof, p6, p7, drownProof) {
    let $res = natives.setEntityProofs(this.handle, bulletProof | 0, fireProof | 0, explosionProof | 0, collisionProof | 0, meleeProof | 0, p6 | 0, p7 | 0, drownProof | 0);
};
mp.Object.prototype.setProofs = function (bulletProof, fireProof, explosionProof, collisionProof, meleeProof, p6, p7, drownProof) {
    let $res = natives.setEntityProofs(this.handle, bulletProof | 0, fireProof | 0, explosionProof | 0, collisionProof | 0, meleeProof | 0, p6 | 0, p7 | 0, drownProof | 0);
};
mp.Vehicle.prototype.setProofs = function (bulletProof, fireProof, explosionProof, collisionProof, meleeProof, p6, p7, drownProof) {
    let $res = natives.setEntityProofs(this.handle, bulletProof | 0, fireProof | 0, explosionProof | 0, collisionProof | 0, meleeProof | 0, p6 | 0, p7 | 0, drownProof | 0);
};
mp.Player.prototype.getProofs = function () {
    let $res = natives.getEntityProofs(this.handle, false, false, false, false, false, false, false, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.bulletProof = $res[1] == 1;
    $resObj.fireProof = $res[2] == 1;
    $resObj.explosionProof = $res[3] == 1;
    $resObj.collisionProof = $res[4] == 1;
    $resObj.meleeProof = $res[5] == 1;
    $resObj.steamProof = $res[6] == 1;
    $resObj.p7 = $res[7] == 1;
    $resObj.drownProof = $res[8] == 1;
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.Ped.prototype.getProofs = function () {
    let $res = natives.getEntityProofs(this.handle, false, false, false, false, false, false, false, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.bulletProof = $res[1] == 1;
    $resObj.fireProof = $res[2] == 1;
    $resObj.explosionProof = $res[3] == 1;
    $resObj.collisionProof = $res[4] == 1;
    $resObj.meleeProof = $res[5] == 1;
    $resObj.steamProof = $res[6] == 1;
    $resObj.p7 = $res[7] == 1;
    $resObj.drownProof = $res[8] == 1;
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.Object.prototype.getProofs = function () {
    let $res = natives.getEntityProofs(this.handle, false, false, false, false, false, false, false, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.bulletProof = $res[1] == 1;
    $resObj.fireProof = $res[2] == 1;
    $resObj.explosionProof = $res[3] == 1;
    $resObj.collisionProof = $res[4] == 1;
    $resObj.meleeProof = $res[5] == 1;
    $resObj.steamProof = $res[6] == 1;
    $resObj.p7 = $res[7] == 1;
    $resObj.drownProof = $res[8] == 1;
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.Vehicle.prototype.getProofs = function () {
    let $res = natives.getEntityProofs(this.handle, false, false, false, false, false, false, false, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.bulletProof = $res[1] == 1;
    $resObj.fireProof = $res[2] == 1;
    $resObj.explosionProof = $res[3] == 1;
    $resObj.collisionProof = $res[4] == 1;
    $resObj.meleeProof = $res[5] == 1;
    $resObj.steamProof = $res[6] == 1;
    $resObj.p7 = $res[7] == 1;
    $resObj.drownProof = $res[8] == 1;
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.Player.prototype.setQuaternion = function (x, y, z, w) {
    let $res = natives.setEntityQuaternion(this.handle, x, y, z, w);
};
mp.Ped.prototype.setQuaternion = function (x, y, z, w) {
    let $res = natives.setEntityQuaternion(this.handle, x, y, z, w);
};
mp.Object.prototype.setQuaternion = function (x, y, z, w) {
    let $res = natives.setEntityQuaternion(this.handle, x, y, z, w);
};
mp.Vehicle.prototype.setQuaternion = function (x, y, z, w) {
    let $res = natives.setEntityQuaternion(this.handle, x, y, z, w);
};
mp.Player.prototype.setRecordsCollisions = function (toggle) {
    let $res = natives.setEntityRecordsCollisions(this.handle, toggle | 0);
};
mp.Ped.prototype.setRecordsCollisions = function (toggle) {
    let $res = natives.setEntityRecordsCollisions(this.handle, toggle | 0);
};
mp.Object.prototype.setRecordsCollisions = function (toggle) {
    let $res = natives.setEntityRecordsCollisions(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setRecordsCollisions = function (toggle) {
    let $res = natives.setEntityRecordsCollisions(this.handle, toggle | 0);
};
mp.Player.prototype.setRotation = function (pitch, roll, yaw, rotationOrder, p5) {
    let $res = natives.setEntityRotation(this.handle, pitch, roll, yaw, rotationOrder, p5 | 0);
};
mp.Ped.prototype.setRotation = function (pitch, roll, yaw, rotationOrder, p5) {
    let $res = natives.setEntityRotation(this.handle, pitch, roll, yaw, rotationOrder, p5 | 0);
};
mp.Object.prototype.setRotation = function (pitch, roll, yaw, rotationOrder, p5) {
    let $res = natives.setEntityRotation(this.handle, pitch, roll, yaw, rotationOrder, p5 | 0);
};
mp.Vehicle.prototype.setRotation = function (pitch, roll, yaw, rotationOrder, p5) {
    let $res = natives.setEntityRotation(this.handle, pitch, roll, yaw, rotationOrder, p5 | 0);
};
mp.Player.prototype.setVisible = function (toggle, unk) {
    let $res = natives.setEntityVisible(this.handle, toggle | 0, unk | 0);
};
mp.Ped.prototype.setVisible = function (toggle, unk) {
    let $res = natives.setEntityVisible(this.handle, toggle | 0, unk | 0);
};
mp.Object.prototype.setVisible = function (toggle, unk) {
    let $res = natives.setEntityVisible(this.handle, toggle | 0, unk | 0);
};
mp.Vehicle.prototype.setVisible = function (toggle, unk) {
    let $res = natives.setEntityVisible(this.handle, toggle | 0, unk | 0);
};
mp.Player.prototype.setVelocity = function (x, y, z) {
    let $res = natives.setEntityVelocity(this.handle, x, y, z);
};
mp.Ped.prototype.setVelocity = function (x, y, z) {
    let $res = natives.setEntityVelocity(this.handle, x, y, z);
};
mp.Object.prototype.setVelocity = function (x, y, z) {
    let $res = natives.setEntityVelocity(this.handle, x, y, z);
};
mp.Vehicle.prototype.setVelocity = function (x, y, z) {
    let $res = natives.setEntityVelocity(this.handle, x, y, z);
};
mp.Player.prototype.setAngularVelocity = function (x, y, z) {
    let $res = natives.setEntityAngularVelocity(this.handle, x, y, z);
};
mp.Ped.prototype.setAngularVelocity = function (x, y, z) {
    let $res = natives.setEntityAngularVelocity(this.handle, x, y, z);
};
mp.Object.prototype.setAngularVelocity = function (x, y, z) {
    let $res = natives.setEntityAngularVelocity(this.handle, x, y, z);
};
mp.Vehicle.prototype.setAngularVelocity = function (x, y, z) {
    let $res = natives.setEntityAngularVelocity(this.handle, x, y, z);
};
mp.Player.prototype.setHasGravity = function (toggle) {
    let $res = natives.setEntityHasGravity(this.handle, toggle | 0);
};
mp.Ped.prototype.setHasGravity = function (toggle) {
    let $res = natives.setEntityHasGravity(this.handle, toggle | 0);
};
mp.Object.prototype.setHasGravity = function (toggle) {
    let $res = natives.setEntityHasGravity(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setHasGravity = function (toggle) {
    let $res = natives.setEntityHasGravity(this.handle, toggle | 0);
};
mp.Player.prototype.setLodDist = function (value) {
    let $res = natives.setEntityLodDist(this.handle, value);
};
mp.Ped.prototype.setLodDist = function (value) {
    let $res = natives.setEntityLodDist(this.handle, value);
};
mp.Object.prototype.setLodDist = function (value) {
    let $res = natives.setEntityLodDist(this.handle, value);
};
mp.Vehicle.prototype.setLodDist = function (value) {
    let $res = natives.setEntityLodDist(this.handle, value);
};
mp.Player.prototype.getLodDist = function () {
    let $res = natives.getEntityLodDist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getLodDist = function () {
    let $res = natives.getEntityLodDist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getLodDist = function () {
    let $res = natives.getEntityLodDist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getLodDist = function () {
    let $res = natives.getEntityLodDist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.setAlpha = function (alphaLevel, skin) {
    let $res = natives.setEntityAlpha(this.handle, alphaLevel, skin | 0);
};
mp.Ped.prototype.getAlpha = function () {
    let $res = natives.getEntityAlpha(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.resetAlpha = function () {
    let $res = natives.resetEntityAlpha(this.handle);
};
mp.Ped.prototype.resetAlpha = function () {
    let $res = natives.resetEntityAlpha(this.handle);
};
mp.Object.prototype.resetAlpha = function () {
    let $res = natives.resetEntityAlpha(this.handle);
};
mp.Vehicle.prototype.resetAlpha = function () {
    let $res = natives.resetEntityAlpha(this.handle);
};
mp.Player.prototype.setAlwaysPrerender = function (toggle) {
    let $res = natives.setEntityAlwaysPrerender(this.handle, toggle | 0);
};
mp.Ped.prototype.setAlwaysPrerender = function (toggle) {
    let $res = natives.setEntityAlwaysPrerender(this.handle, toggle | 0);
};
mp.Object.prototype.setAlwaysPrerender = function (toggle) {
    let $res = natives.setEntityAlwaysPrerender(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setAlwaysPrerender = function (toggle) {
    let $res = natives.setEntityAlwaysPrerender(this.handle, toggle | 0);
};
mp.Player.prototype.setRenderScorched = function (toggle) {
    let $res = natives.setEntityRenderScorched(this.handle, toggle | 0);
};
mp.Ped.prototype.setRenderScorched = function (toggle) {
    let $res = natives.setEntityRenderScorched(this.handle, toggle | 0);
};
mp.Object.prototype.setRenderScorched = function (toggle) {
    let $res = natives.setEntityRenderScorched(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setRenderScorched = function (toggle) {
    let $res = natives.setEntityRenderScorched(this.handle, toggle | 0);
};
mp.Player.prototype.setTrafficlightOverride = function (state) {
    let $res = natives.setEntityTrafficlightOverride(this.handle, state);
};
mp.Ped.prototype.setTrafficlightOverride = function (state) {
    let $res = natives.setEntityTrafficlightOverride(this.handle, state);
};
mp.Object.prototype.setTrafficlightOverride = function (state) {
    let $res = natives.setEntityTrafficlightOverride(this.handle, state);
};
mp.Vehicle.prototype.setTrafficlightOverride = function (state) {
    let $res = natives.setEntityTrafficlightOverride(this.handle, state);
};
mp.Player.prototype.setNoCollisionEntity = function (entity2, thisFrameOnly) {
    let $res = natives.setEntityNoCollisionEntity(this.handle, entity2, thisFrameOnly | 0);
};
mp.Ped.prototype.setNoCollisionEntity = function (entity2, thisFrameOnly) {
    let $res = natives.setEntityNoCollisionEntity(this.handle, entity2, thisFrameOnly | 0);
};
mp.Object.prototype.setNoCollisionEntity = function (entity2, thisFrameOnly) {
    let $res = natives.setEntityNoCollisionEntity(this.handle, entity2, thisFrameOnly | 0);
};
mp.Vehicle.prototype.setNoCollisionEntity = function (entity2, thisFrameOnly) {
    let $res = natives.setEntityNoCollisionEntity(this.handle, entity2, thisFrameOnly | 0);
};
mp.Player.prototype.setMotionBlur = function (toggle) {
    let $res = natives.setEntityMotionBlur(this.handle, toggle | 0);
};
mp.Ped.prototype.setMotionBlur = function (toggle) {
    let $res = natives.setEntityMotionBlur(this.handle, toggle | 0);
};
mp.Object.prototype.setMotionBlur = function (toggle) {
    let $res = natives.setEntityMotionBlur(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setMotionBlur = function (toggle) {
    let $res = natives.setEntityMotionBlur(this.handle, toggle | 0);
};
mp.Player.prototype.setCanAutoVaultOn = function (toggle) {
    let $res = natives.setCanAutoVaultOnEntity(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanAutoVaultOn = function (toggle) {
    let $res = natives.setCanAutoVaultOnEntity(this.handle, toggle | 0);
};
mp.Object.prototype.setCanAutoVaultOn = function (toggle) {
    let $res = natives.setCanAutoVaultOnEntity(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setCanAutoVaultOn = function (toggle) {
    let $res = natives.setCanAutoVaultOnEntity(this.handle, toggle | 0);
};
mp.Player.prototype.setCanClimbOn = function (toggle) {
    let $res = natives.setCanClimbOnEntity(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanClimbOn = function (toggle) {
    let $res = natives.setCanClimbOnEntity(this.handle, toggle | 0);
};
mp.Object.prototype.setCanClimbOn = function (toggle) {
    let $res = natives.setCanClimbOnEntity(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setCanClimbOn = function (toggle) {
    let $res = natives.setCanClimbOnEntity(this.handle, toggle | 0);
};
mp.Player.prototype.setDecalsDisabled = function (p1) {
    let $res = natives.setEntityNoweapondecals(this.handle, p1 | 0);
};
mp.Ped.prototype.setDecalsDisabled = function (p1) {
    let $res = natives.setEntityNoweapondecals(this.handle, p1 | 0);
};
mp.Object.prototype.setDecalsDisabled = function (p1) {
    let $res = natives.setEntityNoweapondecals(this.handle, p1 | 0);
};
mp.Vehicle.prototype.setDecalsDisabled = function (p1) {
    let $res = natives.setEntityNoweapondecals(this.handle, p1 | 0);
};
mp.Player.prototype.getBoneRotation = function (boneIndex) {
    let $res = natives.getEntityBoneRotation(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getBoneRotation = function (boneIndex) {
    let $res = natives.getEntityBoneRotation(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getBoneRotation = function (boneIndex) {
    let $res = natives.getEntityBoneRotation(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getBoneRotation = function (boneIndex) {
    let $res = natives.getEntityBoneRotation(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getBonePosition2 = function (boneIndex) {
    let $res = natives.getEntityBonePostion(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getBonePosition2 = function (boneIndex) {
    let $res = natives.getEntityBonePostion(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getBonePosition2 = function (boneIndex) {
    let $res = natives.getEntityBonePostion(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getBonePosition2 = function (boneIndex) {
    let $res = natives.getEntityBonePostion(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getBoneRotationLocal = function (boneIndex) {
    let $res = natives.getEntityBoneObjectRotation(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getBoneRotationLocal = function (boneIndex) {
    let $res = natives.getEntityBoneObjectRotation(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getBoneRotationLocal = function (boneIndex) {
    let $res = natives.getEntityBoneObjectRotation(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getBoneRotationLocal = function (boneIndex) {
    let $res = natives.getEntityBoneObjectRotation(this.handle, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.getBoneCount = function () {
    let $res = natives.getEntityBoneCount(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getBoneCount = function () {
    let $res = natives.getEntityBoneCount(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getBoneCount = function () {
    let $res = natives.getEntityBoneCount(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getBoneCount = function () {
    let $res = natives.getEntityBoneCount(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.enableUnk = function () {
    let $res = natives.enableEntityBulletCollision(this.handle);
};
mp.Ped.prototype.enableUnk = function () {
    let $res = natives.enableEntityBulletCollision(this.handle);
};
mp.Object.prototype.enableUnk = function () {
    let $res = natives.enableEntityBulletCollision(this.handle);
};
mp.Vehicle.prototype.enableUnk = function () {
    let $res = natives.enableEntityBulletCollision(this.handle);
};
mp.Player.prototype.getPickup = function (modelHash) {
    let $res = natives.getEntityOfTypeAttachedToEntity(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPickup = function (modelHash) {
    let $res = natives.getEntityOfTypeAttachedToEntity(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getPickup = function (modelHash) {
    let $res = natives.getEntityOfTypeAttachedToEntity(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getPickup = function (modelHash) {
    let $res = natives.getEntityOfTypeAttachedToEntity(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
if (!mp.game2.entity) mp.game2.entity = {};
mp.game2.entity.doesExist = function (entity) {
    let $res = natives.doesEntityExist(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.doesBelongToThisScript = function (entity, p1) {
    let $res = natives.doesEntityBelongToThisScript(entity, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.doesHaveDrawable = function (entity) {
    let $res = natives.doesEntityHaveDrawable(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.doesHavePhysics = function (entity) {
    let $res = natives.doesEntityHavePhysics(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.hasAnimFinished = function (entity, animDict, animName, p3) {
    let $res = natives.hasEntityAnimFinished(entity, animDict, animName, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.hasBeenDamagedByAnyObject = function (entity) {
    let $res = natives.hasEntityBeenDamagedByAnyObject(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.hasBeenDamagedByAnyPed = function (entity) {
    let $res = natives.hasEntityBeenDamagedByAnyPed(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.hasBeenDamagedByAnyVehicle = function (entity) {
    let $res = natives.hasEntityBeenDamagedByAnyVehicle(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.hasBeenDamagedByEntity = function (entity1, entity2, p2) {
    let $res = natives.hasEntityBeenDamagedByEntity(entity1, entity2, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.hasClearLosToEntity = function (entity1, entity2, traceType) {
    let $res = natives.hasEntityClearLosToEntity(entity1, entity2, traceType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.hasClearLosToEntity2 = function (entity1, entity2, traceType) {
    let $res = natives.hasEntityClearLosToEntityAdjustForCover(entity1, entity2, traceType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.hasClearLosToEntityInFront = function (entity1, entity2) {
    let $res = natives.hasEntityClearLosToEntityInFront(entity1, entity2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.hasCollidedWithAnything = function (entity) {
    let $res = natives.hasEntityCollidedWithAnything(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.getLastMaterialHitBy = function (entity) {
    let $res = natives.getLastMaterialHitByEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getCollisionNormalOfLastHitFor = function (entity) {
    let $res = natives.getCollisionNormalOfLastHitForEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.forceAiAndAnimationUpdate = function (entity) {
    let $res = natives.forceEntityAiAndAnimationUpdate(entity);
};
mp.game2.entity.getAnimCurrentTime = function (entity, animDict, animName) {
    let $res = natives.getEntityAnimCurrentTime(entity, animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getAnimTotalTime = function (entity, animDict, animName) {
    let $res = natives.getEntityAnimTotalTime(entity, animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getAnimDuration = function (animDict, animName) {
    let $res = natives.getAnimDuration(animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getEntityAnimDuration = function (animDict, animName) {
    let $res = natives.getAnimDuration(animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getAttachedTo = function (entity) {
    let $res = natives.getEntityAttachedTo(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getCoords = function (entity, alive) {
    let $res = natives.getEntityCoords(entity, alive | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getForwardVector = function (entity) {
    let $res = natives.getEntityForwardVector(entity);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getForwardX = function (entity) {
    let $res = natives.getEntityForwardX(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getForwardY = function (entity) {
    let $res = natives.getEntityForwardY(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getHeading = function (entity) {
    let $res = natives.getEntityHeading(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getPhysicsHeading = function (entity) {
    let $res = natives.getEntityHeadingFromEulers(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getHealth = function (entity) {
    let $res = natives.getEntityHealth(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getMaxHealth = function (entity) {
    let $res = natives.getEntityMaxHealth(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.setMaxHealth = function (entity, value) {
    let $res = natives.setEntityMaxHealth(entity, value);
};
mp.game2.entity.getHeight = function (entity, X, Y, Z, atTop, inWorldCoords) {
    let $res = natives.getEntityHeight(entity, X, Y, Z, atTop | 0, inWorldCoords | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getHeightAboveGround = function (entity) {
    let $res = natives.getEntityHeightAboveGround(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getMatrix = function (entity) {
    let $res = natives.getEntityMatrix(entity, undefined, undefined, undefined, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.forwardVector = new mp.Vector3($res[1]);
    $resObj.rightVector = new mp.Vector3($res[2]);
    $resObj.upVector = new mp.Vector3($res[3]);
    $resObj.position = new mp.Vector3($res[4]);
    return $resObj;
};
mp.game2.entity.getModel = function (entity) {
    let $res = natives.getEntityModel(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getOffsetFromGivenWorldCoords = function (entity, posX, posY, posZ) {
    let $res = natives.getOffsetFromEntityGivenWorldCoords(entity, posX, posY, posZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getOffsetFromInWorldCoords = function (entity, offsetX, offsetY, offsetZ) {
    let $res = natives.getOffsetFromEntityInWorldCoords(entity, offsetX, offsetY, offsetZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getPitch = function (entity) {
    let $res = natives.getEntityPitch(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getQuaternion = function (entity) {
    let $res = natives.getEntityQuaternion(entity, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[3];
    $resObj.w = $res[4];
    return $resObj;
};
mp.game2.entity.getRoll = function (entity) {
    let $res = natives.getEntityRoll(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getRotation = function (entity, rotationOrder) {
    let $res = natives.getEntityRotation(entity, rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getRotationVelocity = function (entity) {
    let $res = natives.getEntityRotationVelocity(entity);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getScript = function (entity) {
    let $res = natives.getEntityScript(entity, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.script = $res[1];
    return $resObj;
};
mp.game2.entity.getSpeed = function (entity) {
    let $res = natives.getEntitySpeed(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getSpeedVector = function (entity, relative) {
    let $res = natives.getEntitySpeedVector(entity, relative | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getUprightValue = function (entity) {
    let $res = natives.getEntityUprightValue(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getVelocity = function (entity) {
    let $res = natives.getEntityVelocity(entity);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getObjectIndexFromIndex = function (entity) {
    let $res = natives.getObjectIndexFromEntityIndex(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getPedIndexFromIndex = function (entity) {
    let $res = natives.getPedIndexFromEntityIndex(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getVehicleIndexFromIndex = function (entity) {
    let $res = natives.getVehicleIndexFromEntityIndex(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getWorldPositionOfBone = function (entity, boneIndex) {
    let $res = natives.getWorldPositionOfEntityBone(entity, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getNearestPlayerTo = function (entity) {
    let $res = natives.getNearestPlayerToEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getNearestPlayerToOnTeam = function (entity, team) {
    let $res = natives.getNearestPlayerToEntityOnTeam(entity, team);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getType = function (entity) {
    let $res = natives.getEntityType(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.getPopulationType = function (entity) {
    let $res = natives.getEntityPopulationType(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.isAn = function (handle) {
    let $res = natives.isAnEntity(handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAnEntity = function (handle) {
    let $res = natives.isAnEntity(handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAPed = function (entity) {
    let $res = natives.isEntityAPed(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAMissionEntity = function (entity) {
    let $res = natives.isEntityAMissionEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAVehicle = function (entity) {
    let $res = natives.isEntityAVehicle(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAnObject = function (entity) {
    let $res = natives.isEntityAnObject(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAtCoord = function (entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9) {
    let $res = natives.isEntityAtCoord(entity, xPos, yPos, zPos, xSize, ySize, zSize, p7 | 0, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAtEntity = function (entity1, entity2, xSize, ySize, zSize, p5, p6, p7) {
    let $res = natives.isEntityAtEntity(entity1, entity2, xSize, ySize, zSize, p5 | 0, p6 | 0, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAttached = function (entity) {
    let $res = natives.isEntityAttached(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAttachedToAnyObject = function (entity) {
    let $res = natives.isEntityAttachedToAnyObject(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAttachedToAnyPed = function (entity) {
    let $res = natives.isEntityAttachedToAnyPed(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAttachedToAnyVehicle = function (entity) {
    let $res = natives.isEntityAttachedToAnyVehicle(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isAttachedToEntity = function (from, to) {
    let $res = natives.isEntityAttachedToEntity(from, to);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isDead = function (entity, p1) {
    let $res = natives.isEntityDead(entity, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isInAir = function (entity) {
    let $res = natives.isEntityInAir(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isInAngledArea = function (entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10) {
    let $res = natives.isEntityInAngledArea(entity, x1, y1, z1, x2, y2, z2, width, debug | 0, includeZ | 0, p10);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isInArea = function (entity, x1, y1, z1, x2, y2, z2, p7, p8, p9) {
    let $res = natives.isEntityInArea(entity, x1, y1, z1, x2, y2, z2, p7 | 0, p8 | 0, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isInZone = function (entity, zone) {
    let $res = natives.isEntityInZone(entity, zone);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isInWater = function (entity) {
    let $res = natives.isEntityInWater(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.getSubmergedLevel = function (entity) {
    let $res = natives.getEntitySubmergedLevel(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.isOnScreen = function (entity) {
    let $res = natives.isEntityOnScreen(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isPlayingAnim = function (entity, animDict, animName, taskFlag) {
    let $res = natives.isEntityPlayingAnim(entity, animDict, animName, taskFlag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isStatic = function (entity) {
    let $res = natives.isEntityStatic(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isTouchingEntity = function (entity, targetEntity) {
    let $res = natives.isEntityTouchingEntity(entity, targetEntity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isTouchingModel = function (entity, modelHash) {
    let $res = natives.isEntityTouchingModel(entity, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isUpright = function (entity, angle) {
    let $res = natives.isEntityUpright(entity, angle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isUpsidedown = function (entity) {
    let $res = natives.isEntityUpsidedown(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isVisible = function (entity) {
    let $res = natives.isEntityVisible(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isVisibleToScript = function (entity) {
    let $res = natives.isEntityVisibleToScript(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isOccluded = function (entity) {
    let $res = natives.isEntityOccluded(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.wouldBeOccluded = function (entityModelHash, x, y, z, p4) {
    let $res = natives.wouldEntityBeOccluded(entityModelHash, x, y, z, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.wouldEntityBeOccluded = function (entityModelHash, x, y, z, p4) {
    let $res = natives.wouldEntityBeOccluded(entityModelHash, x, y, z, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.isWaitingForWorldCollision = function (entity) {
    let $res = natives.isEntityWaitingForWorldCollision(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.applyForceToCenterOfMass = function (entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8) {
    let $res = natives.applyForceToEntityCenterOfMass(entity, forceType, x, y, z, p5 | 0, isDirectionRel | 0, isForceRel | 0, p8 | 0);
};
mp.game2.entity.applyForceTo = function (entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13) {
    let $res = natives.applyForceToEntity(entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel | 0, ignoreUpVec | 0, isForceRel | 0, p12 | 0, p13 | 0);
};
mp.game2.entity.attachToEntity = function (entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot) {
    let $res = natives.attachEntityToEntity(entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9 | 0, useSoftPinning | 0, collision | 0, isPed | 0, vertexIndex, fixedRot | 0, 0);
};
mp.game2.entity.attachBoneToEntityBone = function (entity1, entity2, boneIndex1, boneIndex2, p4, p5) {
    let $res = natives.attachEntityBoneToEntityBone(entity1, entity2, boneIndex1, boneIndex2, p4 | 0, p5 | 0);
};
mp.game2.entity.attachBoneToEntityBonePhysically = function (entity1, entity2, boneIndex1, boneIndex2, p4, p5) {
    let $res = natives.attachEntityBoneToEntityBoneYForward(entity1, entity2, boneIndex1, boneIndex2, p4 | 0, p5 | 0);
};
mp.game2.entity.attachToEntityPhysically = function (entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18) {
    let $res = natives.attachEntityToEntityPhysically(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot | 0, p15 | 0, collision | 0, p17 | 0, p18);
};
mp.game2.entity.processAttachments = function (entity) {
    let $res = natives.processEntityAttachments(entity);
};
mp.game2.entity.getBoneIndexByName = function (entity, boneName) {
    let $res = natives.getEntityBoneIndexByName(entity, boneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.clearLastDamageEntity = function (entity) {
    let $res = natives.clearEntityLastDamageEntity(entity);
};
mp.game2.entity.delete = function (entity) {
    let $res = natives.deleteEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.entity = $res[1];
    return $resObj.entity;
};
mp.game2.entity.detach = function (entity, dynamic, collision) {
    let $res = natives.detachEntity(entity, dynamic | 0, collision | 0);
};
mp.game2.entity.freezePosition = function (entity, toggle) {
    let $res = natives.freezeEntityPosition(entity, toggle | 0);
};
mp.game2.entity.setCleanupByEngine = function (entity, toggle) {
    let $res = natives.setEntityShouldFreezeWaitingOnCollision(entity, toggle | 0);
};
mp.game2.entity.playAnim = function (entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset) {
    let $res = natives.playEntityAnim(entity, animName, animDict, p3, loop | 0, stayInAnim | 0, p6 | 0, delta, bitset);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.playSynchronizedAnim = function (entity, syncedScene, animation, propName, p4, p5, p6, p7) {
    let $res = natives.playSynchronizedEntityAnim(entity, syncedScene, animation, propName, p4, p5, p6, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.playSynchronizedMapAnim = function (p0, p1, p2, p3, p4, p5, p8, p9, p10, p11) {
    let $res = natives.playSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5, null, null, p8, p9, p10, p11);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p6 = $res[0];
    $resObj.p7 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.entity.playSynchronizedMapEntityAnim = function (p0, p1, p2, p3, p4, p5, p8, p9, p10, p11) {
    let $res = natives.playSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5, null, null, p8, p9, p10, p11);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p6 = $res[0];
    $resObj.p7 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.entity.stopSynchronizedMapAnim = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.stopSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.stopSynchronizedMapEntityAnim = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.stopSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.stopAnim = function (entity, animation, animGroup, p3) {
    let $res = natives.stopEntityAnim(entity, animation, animGroup, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.stopSynchronizedAnim = function (entity, p1, p2) {
    let $res = natives.stopSynchronizedEntityAnim(entity, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.hasAnimEventFired = function (entity, actionHash) {
    let $res = natives.hasAnimEventFired(entity, actionHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.findAnimEventPhase = function (animDictionary, animName, p2) {
    let $res = natives.findAnimEventPhase(animDictionary, animName, p2, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p3 = $res[0];
    $resObj.p4 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.entity.setAnimCurrentTime = function (entity, animDictionary, animName, time) {
    let $res = natives.setEntityAnimCurrentTime(entity, animDictionary, animName, time);
};
mp.game2.entity.setAnimSpeed = function (entity, animDictionary, animName, speedMultiplier) {
    let $res = natives.setEntityAnimSpeed(entity, animDictionary, animName, speedMultiplier);
};
mp.game2.entity.setAsMissionEntity = function (entity, p1, p2) {
    let $res = natives.setEntityAsMissionEntity(entity, p1 | 0, p2 | 0);
};
mp.game2.entity.setAsNoLongerNeeded = function (entity) {
    let $res = natives.setEntityAsNoLongerNeeded(entity);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.entity = $res[1];
    return $resObj.entity;
};
mp.game2.entity.setPedAsNoLongerNeeded = function (ped) {
    let $res = natives.setPedAsNoLongerNeeded(ped);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ped = $res[1];
    return $resObj.ped;
};
mp.game2.entity.setVehicleAsNoLongerNeeded = function (vehicle) {
    let $res = natives.setVehicleAsNoLongerNeeded(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.vehicle = $res[1];
    return $resObj.vehicle;
};
mp.game2.entity.setObjectAsNoLongerNeeded = function (object) {
    let $res = natives.setObjectAsNoLongerNeeded(object);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.object = $res[1];
    return $resObj.object;
};
mp.game2.entity.setCanBeDamaged = function (entity, toggle) {
    let $res = natives.setEntityCanBeDamaged(entity, toggle | 0);
};
mp.game2.entity.getCanBeDamaged = function (entity) {
    let $res = natives.getEntityCanBeDamaged(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.setCanBeDamagedByRelationshipGroup = function (entity, bCanBeDamaged, relGroup) {
    let $res = natives.setEntityCanBeDamagedByRelationshipGroup(entity, bCanBeDamaged | 0, relGroup);
};
mp.game2.entity.setCanBeTargetedWithoutLos = function (entity, toggle) {
    let $res = natives.setEntityCanBeTargetedWithoutLos(entity, toggle | 0);
};
mp.game2.entity.setCollision = function (entity, toggle, keepPhysics) {
    let $res = natives.setEntityCollision(entity, toggle | 0, keepPhysics | 0);
};
mp.game2.entity.getCollisionDisabled = function (entity) {
    let $res = natives.getEntityCollisionDisabled(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.setCompletelyDisableCollision = function (entity, toggle, keepPhysics) {
    let $res = natives.setEntityCompletelyDisableCollision(entity, toggle | 0, keepPhysics | 0);
};
mp.game2.entity.setCoords = function (entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea) {
    let $res = natives.setEntityCoords(entity, xPos, yPos, zPos, xAxis | 0, yAxis | 0, zAxis | 0, clearArea | 0);
};
mp.game2.entity.setCoordsWithoutPlantsReset = function (entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) {
    let $res = natives.setEntityCoordsWithoutPlantsReset(entity, xPos, yPos, zPos, alive | 0, deadFlag | 0, ragdollFlag | 0, clearArea | 0);
};
mp.game2.entity.setCoordsNoOffset = function (entity, xPos, yPos, zPos, xAxis, yAxis, zAxis) {
    let $res = natives.setEntityCoordsNoOffset(entity, xPos, yPos, zPos, xAxis | 0, yAxis | 0, zAxis | 0);
};
mp.game2.entity.setDynamic = function (entity, toggle) {
    let $res = natives.setEntityDynamic(entity, toggle | 0);
};
mp.game2.entity.setHeading = function (entity, heading) {
    let $res = natives.setEntityHeading(entity, heading);
};
mp.game2.entity.setHealth = function (entity, health, p2) {
    let $res = natives.setEntityHealth(entity, health, p2 | 0);
};
mp.game2.entity.setInvincible = function (entity, toggle) {
    let $res = natives.setEntityInvincible(entity, toggle | 0);
};
mp.game2.entity.setIsTargetPriority = function (entity, p1, p2) {
    let $res = natives.setEntityIsTargetPriority(entity, p1 | 0, p2);
};
mp.game2.entity.setLights = function (entity, toggle) {
    let $res = natives.setEntityLights(entity, toggle | 0);
};
mp.game2.entity.setLoadCollisionFlag = function (entity, toggle, p2) {
    let $res = natives.setEntityLoadCollisionFlag(entity, toggle | 0, p2 | 0);
};
mp.game2.entity.hasCollisionLoadedAround = function (entity) {
    let $res = natives.hasCollisionLoadedAroundEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.entity.setMaxSpeed = function (entity, speed) {
    let $res = natives.setEntityMaxSpeed(entity, speed);
};
mp.game2.entity.setOnlyDamagedByPlayer = function (entity, toggle) {
    let $res = natives.setEntityOnlyDamagedByPlayer(entity, toggle | 0);
};
mp.game2.entity.setOnlyDamagedByRelationshipGroup = function (entity, p1, p2) {
    let $res = natives.setEntityOnlyDamagedByRelationshipGroup(entity, p1 | 0, p2);
};
mp.game2.entity.setProofs = function (entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, p6, p7, drownProof) {
    let $res = natives.setEntityProofs(entity, bulletProof | 0, fireProof | 0, explosionProof | 0, collisionProof | 0, meleeProof | 0, p6 | 0, p7 | 0, drownProof | 0);
};
mp.game2.entity.getProofs = function (entity) {
    let $res = natives.getEntityProofs(entity, false, false, false, false, false, false, false, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.bulletProof = $res[1] == 1;
    $resObj.fireProof = $res[2] == 1;
    $resObj.explosionProof = $res[3] == 1;
    $resObj.collisionProof = $res[4] == 1;
    $resObj.meleeProof = $res[5] == 1;
    $resObj.steamProof = $res[6] == 1;
    $resObj.p7 = $res[7] == 1;
    $resObj.drownProof = $res[8] == 1;
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.entity.setQuaternion = function (entity, x, y, z, w) {
    let $res = natives.setEntityQuaternion(entity, x, y, z, w);
};
mp.game2.entity.setRecordsCollisions = function (entity, toggle) {
    let $res = natives.setEntityRecordsCollisions(entity, toggle | 0);
};
mp.game2.entity.setRotation = function (entity, pitch, roll, yaw, rotationOrder, p5) {
    let $res = natives.setEntityRotation(entity, pitch, roll, yaw, rotationOrder, p5 | 0);
};
mp.game2.entity.setVisible = function (entity, toggle, unk) {
    let $res = natives.setEntityVisible(entity, toggle | 0, unk | 0);
};
mp.game2.entity.setVelocity = function (entity, x, y, z) {
    let $res = natives.setEntityVelocity(entity, x, y, z);
};
mp.game2.entity.setAngularVelocity = function (entity, x, y, z) {
    let $res = natives.setEntityAngularVelocity(entity, x, y, z);
};
mp.game2.entity.setHasGravity = function (entity, toggle) {
    let $res = natives.setEntityHasGravity(entity, toggle | 0);
};
mp.game2.entity.setLodDist = function (entity, value) {
    let $res = natives.setEntityLodDist(entity, value);
};
mp.game2.entity.getLodDist = function (entity) {
    let $res = natives.getEntityLodDist(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.setAlpha = function (entity, alphaLevel, skin) {
    let $res = natives.setEntityAlpha(entity, alphaLevel, skin | 0);
};
mp.game2.entity.getAlpha = function (entity) {
    let $res = natives.getEntityAlpha(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.resetAlpha = function (entity) {
    let $res = natives.resetEntityAlpha(entity);
};
mp.game2.entity.setAlwaysPrerender = function (entity, toggle) {
    let $res = natives.setEntityAlwaysPrerender(entity, toggle | 0);
};
mp.game2.entity.setRenderScorched = function (entity, toggle) {
    let $res = natives.setEntityRenderScorched(entity, toggle | 0);
};
mp.game2.entity.setTrafficlightOverride = function (entity, state) {
    let $res = natives.setEntityTrafficlightOverride(entity, state);
};
mp.game2.entity.createModelSwap = function (x, y, z, radius, originalModel, newModel, p6) {
    let $res = natives.createModelSwap(x, y, z, radius, originalModel, newModel, p6 | 0);
};
mp.game2.entity.removeModelSwap = function (x, y, z, radius, originalModel, newModel, p6) {
    let $res = natives.removeModelSwap(x, y, z, radius, originalModel, newModel, p6 | 0);
};
mp.game2.entity.createModelHide = function (x, y, z, radius, modelHash, p5) {
    let $res = natives.createModelHide(x, y, z, radius, modelHash, p5 | 0);
};
mp.game2.entity.createModelHideExcludingScriptObjects = function (x, y, z, radius, modelHash, p5) {
    let $res = natives.createModelHideExcludingScriptObjects(x, y, z, radius, modelHash, p5 | 0);
};
mp.game2.entity.removeModelHide = function (x, y, z, radius, modelHash, p5) {
    let $res = natives.removeModelHide(x, y, z, radius, modelHash, p5 | 0);
};
mp.game2.entity.createForcedObject = function (x, y, z, p3, modelHash, p5) {
    let $res = natives.createForcedObject(x, y, z, p3, modelHash, p5 | 0);
};
mp.game2.entity.removeForcedObject = function (p0, p1, p2, p3, p4) {
    let $res = natives.removeForcedObject(p0, p1, p2, p3, p4);
};
mp.game2.entity.setNoCollisionEntity = function (entity1, entity2, thisFrameOnly) {
    let $res = natives.setEntityNoCollisionEntity(entity1, entity2, thisFrameOnly | 0);
};
mp.game2.entity.setMotionBlur = function (entity, toggle) {
    let $res = natives.setEntityMotionBlur(entity, toggle | 0);
};
mp.game2.entity.setCanAutoVaultOn = function (entity, toggle) {
    let $res = natives.setCanAutoVaultOnEntity(entity, toggle | 0);
};
mp.game2.entity.setCanClimbOn = function (entity, toggle) {
    let $res = natives.setCanClimbOnEntity(entity, toggle | 0);
};
mp.game2.entity.setDecalsDisabled = function (entity, p1) {
    let $res = natives.setEntityNoweapondecals(entity, p1 | 0);
};
mp.game2.entity.getBoneRotation = function (entity, boneIndex) {
    let $res = natives.getEntityBoneRotation(entity, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getBonePosition2 = function (entity, boneIndex) {
    let $res = natives.getEntityBonePostion(entity, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getBoneRotationLocal = function (entity, boneIndex) {
    let $res = natives.getEntityBoneObjectRotation(entity, boneIndex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.entity.getBoneCount = function (entity) {
    let $res = natives.getEntityBoneCount(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.entity.enableUnk = function (entity) {
    let $res = natives.enableEntityBulletCollision(entity);
};
mp.game2.entity.getPickup = function (entity, modelHash) {
    let $res = natives.getEntityOfTypeAttachedToEntity(entity, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
if (!mp.game2.entity) mp.game2.entity = {};
if (!mp.game2.entity.unk) mp.game2.entity.unk = {};
mp.game2.entity.unk._0x694E00132F2823ED = function (entity, toggle) {
    let $res = natives.setEntityRequiresMoreExpensiveRiverCheck(entity, toggle | 0);
};
mp.game2.entity.unk._0x352E2B5CF420BF3B = function (p0, p1) {
    let $res = natives.setEntityCanOnlyBeDamagedByScriptParticipants(p0, p1);
};
mp.game2.entity.unk._0xC34BC448DA29F5E9 = function (entity, toggle) {
    let $res = natives.setEntityWaterReflectionFlag(entity, toggle | 0);
};
mp.game2.entity.unk._0xE66377CDDADA4810 = function (entity, p1) {
    let $res = natives.setEntityMirrorReflectionFlag(entity, p1 | 0);
};
mp.game2.entity.unk._0x490861B88F4FD846 = function (entity) {
    let $res = natives.resetPickupEntityGlow(entity);
};
mp.game2.entity.unk._0xCEA7C8E1B48FF68C = function (p0, p1) {
    let $res = natives.setPickupCollidesWithProjectiles(p0, p1);
};
mp.game2.entity.unk._0x5C3B791D580E0BC2 = function (entity, p1) {
    let $res = natives.setEntitySortBias(entity, p1);
};
mp.game2.entity.unk._0x78E8E3A640178255 = function (entity) {
    let $res = natives.setEntityIsInVehicle(entity);
};
mp.game2.entity.unk._0xDC6F8601FAF2E893 = function (entity, toggle) {
    let $res = natives.setWaitForCollisionsBeforeProbe(entity, toggle | 0);
};
mp.game2.entity.unk._0x1A092BB0C3808B96 = function (entity, p1) {
    let $res = natives.setEntityUseMaxDistanceForWaterReflection(entity, p1 | 0);
};
mp.game2.entity.unk._0xB17BC6453F6CF5AC = function (p0, p1) {
    let $res = natives.setEntityCanOnlyBeDamagedByEntity(p0, p1);
};
mp.game2.entity.unk._0x68B562E124CC0AEF = function (pickup, pickup2) {
    let $res = natives.setEntityCantCauseCollisionDamagedEntity(pickup, pickup2);
};
mp.game2.entity.unk._0x36F32DE87082343E = function (p0, p1) {
    let $res = natives.setAllowMigrateToSpectator(p0, p1);
};
mp.game2.entity.unk._0xD7B80E7C3BEFC396 = function (pickup, toggle) {
    let $res = natives.setPickUpByCargobobDisabled(pickup, toggle | 0);
};
mp.Player.prototype.setDecisionMaker = function (name) {
    let $res = natives.setDecisionMaker(this.handle, name);
};
mp.Ped.prototype.setDecisionMaker = function (name) {
    let $res = natives.setDecisionMaker(this.handle, name);
};
if (!mp.game2.event) mp.game2.event = {};
mp.game2.event.setDecisionMaker = function (ped, name) {
    let $res = natives.setDecisionMaker(ped, name);
};
mp.game2.event.clearDecisionMakerResponse = function (name, eventType) {
    let $res = natives.clearDecisionMakerEventResponse(name, eventType);
};
mp.game2.event.clearDecisionMakerEventResponse = function (name, eventType) {
    let $res = natives.clearDecisionMakerEventResponse(name, eventType);
};
mp.game2.event.blockDecisionMaker = function (name, eventType) {
    let $res = natives.blockDecisionMakerEvent(name, eventType);
};
mp.game2.event.blockDecisionMakerEvent = function (name, eventType) {
    let $res = natives.blockDecisionMakerEvent(name, eventType);
};
mp.game2.event.unblockDecisionMaker = function (name, eventType) {
    let $res = natives.unblockDecisionMakerEvent(name, eventType);
};
mp.game2.event.unblockDecisionMakerEvent = function (name, eventType) {
    let $res = natives.unblockDecisionMakerEvent(name, eventType);
};
mp.game2.event.addShockingAtPosition = function (eventType, x, y, z, duration) {
    let $res = natives.addShockingEventAtPosition(eventType, x, y, z, duration);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.event.addShockingEventAtPosition = function (eventType, x, y, z, duration) {
    let $res = natives.addShockingEventAtPosition(eventType, x, y, z, duration);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.event.addShockingForEntity = function (eventType, entity, duration) {
    let $res = natives.addShockingEventForEntity(eventType, entity, duration);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.event.addShockingEventForEntity = function (eventType, entity, duration) {
    let $res = natives.addShockingEventForEntity(eventType, entity, duration);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.event.isShockingInSphere = function (eventType, x, y, z, radius) {
    let $res = natives.isShockingEventInSphere(eventType, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.event.isShockingEventInSphere = function (eventType, x, y, z, radius) {
    let $res = natives.isShockingEventInSphere(eventType, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.event.removeShocking = function (event) {
    let $res = natives.removeShockingEvent(event);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.event.removeShockingEvent = function (event) {
    let $res = natives.removeShockingEvent(event);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.event.removeAllShockingS = function (p0) {
    let $res = natives.removeAllShockingEvents(p0 | 0);
};
mp.game2.event.removeAllShockingEvents = function (p0) {
    let $res = natives.removeAllShockingEvents(p0 | 0);
};
mp.game2.event.removeShockingSpawnBlockingAreas = function () {
    let $res = natives.removeShockingEventSpawnBlockingAreas();
};
mp.game2.event.suppressShockingEventsNextFrame = function () {
    let $res = natives.suppressShockingEventsNextFrame();
};
mp.game2.event.suppressShockingTypeNextFrame = function (eventType) {
    let $res = natives.suppressShockingEventTypeNextFrame(eventType);
};
mp.game2.event.suppressShockingEventTypeNextFrame = function (eventType) {
    let $res = natives.suppressShockingEventTypeNextFrame(eventType);
};
mp.game2.event.suppressAgitationEventsNextFrame = function () {
    let $res = natives.suppressAgitationEventsNextFrame();
};
mp.Player.prototype.getHashNameForComponent = function (componentId, drawableVariant, textureVariant) {
    let $res = natives.getHashNameForComponent(this.handle, componentId, drawableVariant, textureVariant);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHashNameForComponent = function (componentId, drawableVariant, textureVariant) {
    let $res = natives.getHashNameForComponent(this.handle, componentId, drawableVariant, textureVariant);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getHashNameForComponent = function (componentId, drawableVariant, textureVariant) {
    let $res = natives.getHashNameForComponent(this.handle, componentId, drawableVariant, textureVariant);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getHashNameForComponent = function (componentId, drawableVariant, textureVariant) {
    let $res = natives.getHashNameForComponent(this.handle, componentId, drawableVariant, textureVariant);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getHashNameForProp = function (componentId, propIndex, propTextureIndex) {
    let $res = natives.getHashNameForProp(this.handle, componentId, propIndex, propTextureIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHashNameForProp = function (componentId, propIndex, propTextureIndex) {
    let $res = natives.getHashNameForProp(this.handle, componentId, propIndex, propTextureIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getHashNameForProp = function (componentId, propIndex, propTextureIndex) {
    let $res = natives.getHashNameForProp(this.handle, componentId, propIndex, propTextureIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getHashNameForProp = function (componentId, propIndex, propTextureIndex) {
    let $res = natives.getHashNameForProp(this.handle, componentId, propIndex, propTextureIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
if (!mp.game2.files) mp.game2.files = {};
mp.game2.files.getNumTattooShopDlcItems = function (character) {
    let $res = natives.getNumTattooShopDlcItems(character);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getTattooShopDlcItemData = function (characterType, decorationIndex) {
    let $res = natives.getTattooShopDlcItemData(characterType, decorationIndex, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outComponent = $res[0];
    return $res[0] == 1 ? $resObj.outComponent : undefined;
};
mp.game2.files.initShopPedComponent = function () {
    let $res = natives.initShopPedComponent(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outComponent = $res[0];
    return $resObj.outComponent;
};
mp.game2.files.initShopPedProp = function () {
    let $res = natives.initShopPedProp(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outProp = $res[0];
    return $resObj.outProp;
};
mp.game2.files.setupShopPedApparelQuery = function (p0, p1, p2, p3) {
    let $res = natives.setupShopPedApparelQuery(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.setupShopPedApparelQueryTu = function (character, p1, p2, p3, p4, componentId) {
    let $res = natives.setupShopPedApparelQueryTu(character, p1, p2, p3 | 0, p4, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getNumPropsFromOutfit = function (character, p1, p2, p3, p4, componentId) {
    let $res = natives.setupShopPedApparelQueryTu(character, p1, p2, p3 | 0, p4, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getShopPedQueryComponent = function (componentId) {
    let $res = natives.getShopPedQueryComponent(componentId, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outComponent = $res[0];
    return $resObj.outComponent;
};
mp.game2.files.getShopPedComponent = function (componentHash) {
    let $res = natives.getShopPedComponent(componentHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outComponent = $res[0];
    return $resObj.outComponent;
};
mp.game2.files.getShopPedQueryProp = function (componentId) {
    let $res = natives.getShopPedQueryProp(componentId, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outProp = $res[0];
    return $resObj.outProp;
};
mp.game2.files.getShopPedProp = function (componentHash) {
    let $res = natives.getShopPedProp(componentHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outProp = $res[0];
    return $resObj.outProp;
};
mp.game2.files.getHashNameForComponent = function (entity, componentId, drawableVariant, textureVariant) {
    let $res = natives.getHashNameForComponent(entity, componentId, drawableVariant, textureVariant);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getHashNameForProp = function (entity, componentId, propIndex, propTextureIndex) {
    let $res = natives.getHashNameForProp(entity, componentId, propIndex, propTextureIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getShopPedApparelVariantComponentCount = function (componentHash) {
    let $res = natives.getItemVariantsCount(componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getShopPedApparelVariantPropCount = function (propHash) {
    let $res = natives.getShopPedApparelVariantPropCount(propHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getVariantComponent = function (componentHash, variantComponentIndex) {
    let $res = natives.getVariantComponent(componentHash, variantComponentIndex, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.nameHash = $res[1];
    $resObj.enumValue = $res[2];
    $resObj.componentType = $res[3];
    return $resObj;
};
mp.game2.files.getVariantProp = function (componentHash, variantPropIndex) {
    let $res = natives.getVariantProp(componentHash, variantPropIndex, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.nameHash = $res[1];
    $resObj.enumValue = $res[2];
    $resObj.anchorPoint = $res[3];
    return $resObj;
};
mp.game2.files.getShopPedApparelForcedComponentCount = function (componentHash) {
    let $res = natives.getShopPedApparelForcedComponentCount(componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getNumForcedComponents = function (componentHash) {
    let $res = natives.getShopPedApparelForcedComponentCount(componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getShopPedApparelForcedPropCount = function (componentHash) {
    let $res = natives.getShopPedApparelForcedPropCount(componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getForcedComponent = function (componentHash, forcedComponentIndex) {
    let $res = natives.getForcedComponent(componentHash, forcedComponentIndex, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.nameHash = $res[1];
    $resObj.enumValue = $res[2];
    $resObj.componentType = $res[3];
    return $resObj;
};
mp.game2.files.getForcedProp = function (componentHash, forcedPropIndex) {
    let $res = natives.getForcedProp(componentHash, forcedPropIndex, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.nameHash = $res[1];
    $resObj.enumValue = $res[2];
    $resObj.anchorPoint = $res[3];
    return $resObj;
};
mp.game2.files.doesShopPedApparelHaveRestrictionTag = function (componentHash, restrictionTagHash, componentId) {
    let $res = natives.isTagRestricted(componentHash, restrictionTagHash, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.files.setupShopPedOutfitQuery = function (character, p1) {
    let $res = natives.setupShopPedOutfitQuery(character, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getShopPedQueryOutfit = function (outfitIndex) {
    let $res = natives.getShopPedQueryOutfit(outfitIndex, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outfit = $res[0];
    return $resObj.outfit;
};
mp.game2.files.getShopPedOutfit = function (p0) {
    let $res = natives.getShopPedOutfit(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $resObj.p1;
};
mp.game2.files.getShopPedOutfitLocate = function (p0) {
    let $res = natives.getShopPedOutfitLocate(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getShopPedOutfitPropVariant = function (outfitHash, variantIndex) {
    let $res = natives.getShopPedOutfitPropVariant(outfitHash, variantIndex, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPropVariant = $res[0];
    return $res[0] == 1 ? $resObj.outPropVariant : undefined;
};
mp.game2.files.getShopPedOutfitComponentVariant = function (outfitHash, variantIndex) {
    let $res = natives.getShopPedOutfitComponentVariant(outfitHash, variantIndex, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outComponentVariant = $res[0];
    return $res[0] == 1 ? $resObj.outComponentVariant : undefined;
};
mp.game2.files.getPropFromOutfit = function (outfitHash, variantIndex) {
    let $res = natives.getShopPedOutfitComponentVariant(outfitHash, variantIndex, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outComponentVariant = $res[0];
    return $res[0] == 1 ? $resObj.outComponentVariant : undefined;
};
mp.game2.files.getNumDlcVehicles = function () {
    let $res = natives.getNumDlcVehicles();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getDlcVehicleModel = function (dlcVehicleIndex) {
    let $res = natives.getDlcVehicleModel(dlcVehicleIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getDlcVehicleData = function (dlcVehicleIndex) {
    let $res = natives.getDlcVehicleData(dlcVehicleIndex, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outData = $res[0];
    return $res[0] == 1 ? $resObj.outData : undefined;
};
mp.game2.files.getDlcVehicleFlags = function (dlcVehicleIndex) {
    let $res = natives.getDlcVehicleFlags(dlcVehicleIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getNumDlcWeapons = function () {
    let $res = natives.getNumDlcWeapons();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getNumDlcWeaponsSp = function () {
    let $res = natives.getNumDlcWeaponsSp();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getDlcWeaponData = function (dlcWeaponIndex) {
    let $res = natives.getDlcWeaponData(dlcWeaponIndex, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outData = $res[0];
    return $res[0] == 1 ? $resObj.outData : undefined;
};
mp.game2.files.getDlcWeaponDataSp = function (dlcWeaponIndex) {
    let $res = natives.getDlcWeaponDataSp(dlcWeaponIndex, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outData = $res[0];
    return $res[0] == 1 ? $resObj.outData : undefined;
};
mp.game2.files.getNumDlcWeaponComponents = function (dlcWeaponIndex) {
    let $res = natives.getNumDlcWeaponComponents(dlcWeaponIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getNumDlcWeaponComponentsSp = function (dlcWeaponIndex) {
    let $res = natives.getNumDlcWeaponComponentsSp(dlcWeaponIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.getDlcWeaponComponentData = function (dlcWeaponIndex, dlcWeapCompIndex) {
    let $res = natives.getDlcWeaponComponentData(dlcWeaponIndex, dlcWeapCompIndex, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ComponentDataPtr = $res[0];
    return $res[0] == 1 ? $resObj.ComponentDataPtr : undefined;
};
mp.game2.files.getDlcWeaponComponentDataSp = function (dlcWeaponIndex, dlcWeapCompIndex) {
    let $res = natives.getDlcWeaponComponentDataSp(dlcWeaponIndex, dlcWeapCompIndex, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ComponentDataPtr = $res[0];
    return $res[0] == 1 ? $resObj.ComponentDataPtr : undefined;
};
mp.game2.files.isContentItemLocked = function (itemHash) {
    let $res = natives.isContentItemLocked(itemHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.files.isDlcDataEmpty = function (itemHash) {
    let $res = natives.isContentItemLocked(itemHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.files.isDlcVehicleMod = function (hash) {
    let $res = natives.isDlcVehicleMod(hash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.files.getDlcVehicleModLockHash = function (hash) {
    let $res = natives.getDlcVehicleModLockHash(hash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.loadContentChangeSetGroup = function (hash) {
    let $res = natives.executeContentChangesetGroupForAll(hash);
};
mp.game2.files.unloadContentChangeSetGroup = function (hash) {
    let $res = natives.revertContentChangesetGroupForAll(hash);
};
if (!mp.game2.files) mp.game2.files = {};
if (!mp.game2.files.unk) mp.game2.files.unk = {};
mp.game2.files.unk._0x10144267DD22866C = function (overlayHash, p1, character) {
    let $res = natives.getTattooShopDlcItemIndex(overlayHash, p1, character);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.unk._0x96E2929292A4DB77 = function (componentHash) {
    let $res = natives.getShopPedQueryComponentIndex(componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.files.unk._0x6CEBE002E58DEE97 = function (componentHash) {
    let $res = natives.getShopPedQueryPropIndex(componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.startEntity = function () {
    let $res = natives.startEntityFire(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.startEntity = function () {
    let $res = natives.startEntityFire(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.startEntity = function () {
    let $res = natives.startEntityFire(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.startEntity = function () {
    let $res = natives.startEntityFire(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.stopEntity = function () {
    let $res = natives.stopEntityFire(this.handle);
};
mp.Ped.prototype.stopEntity = function () {
    let $res = natives.stopEntityFire(this.handle);
};
mp.Object.prototype.stopEntity = function () {
    let $res = natives.stopEntityFire(this.handle);
};
mp.Vehicle.prototype.stopEntity = function () {
    let $res = natives.stopEntityFire(this.handle);
};
mp.Player.prototype.isEntityOn = function () {
    let $res = natives.isEntityOnFire(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isEntityOn = function () {
    let $res = natives.isEntityOnFire(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isEntityOn = function () {
    let $res = natives.isEntityOnFire(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isEntityOn = function () {
    let $res = natives.isEntityOnFire(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.addOwnedExplosion = function (x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
    let $res = natives.addOwnedExplosion(this.handle, x, y, z, explosionType, damageScale, isAudible | 0, isInvisible | 0, cameraShake);
};
mp.Ped.prototype.addOwnedExplosion = function (x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
    let $res = natives.addOwnedExplosion(this.handle, x, y, z, explosionType, damageScale, isAudible | 0, isInvisible | 0, cameraShake);
};
mp.Player.prototype.getEntityInsideExplosionSphere = function (x, y, z, radius) {
    let $res = natives.getOwnerOfExplosionInSphere(this.handle, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getEntityInsideExplosionSphere = function (x, y, z, radius) {
    let $res = natives.getOwnerOfExplosionInSphere(this.handle, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getEntityInsideExplosionSphere = function (x, y, z, radius) {
    let $res = natives.getOwnerOfExplosionInSphere(this.handle, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getEntityInsideExplosionSphere = function (x, y, z, radius) {
    let $res = natives.getOwnerOfExplosionInSphere(this.handle, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
if (!mp.game2.fire) mp.game2.fire = {};
mp.game2.fire.startScript = function (X, Y, Z, maxChildren, isGasFire) {
    let $res = natives.startScriptFire(X, Y, Z, maxChildren, isGasFire | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.fire.startScriptFire = function (X, Y, Z, maxChildren, isGasFire) {
    let $res = natives.startScriptFire(X, Y, Z, maxChildren, isGasFire | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.fire.removeScript = function (fireHandle) {
    let $res = natives.removeScriptFire(fireHandle);
};
mp.game2.fire.removeScriptFire = function (fireHandle) {
    let $res = natives.removeScriptFire(fireHandle);
};
mp.game2.fire.startEntity = function (entity) {
    let $res = natives.startEntityFire(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.fire.stopEntity = function (entity) {
    let $res = natives.stopEntityFire(entity);
};
mp.game2.fire.isEntityOn = function (entity) {
    let $res = natives.isEntityOnFire(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.fire.getNumberOfFiresInRange = function (x, y, z, radius) {
    let $res = natives.getNumberOfFiresInRange(x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.fire.setSpreadRate = function (p0) {
    let $res = natives.setFlammabilityMultiplier(p0);
};
mp.game2.fire.stopInRange = function (x, y, z, radius) {
    let $res = natives.stopFireInRange(x, y, z, radius);
};
mp.game2.fire.stopFireInRange = function (x, y, z, radius) {
    let $res = natives.stopFireInRange(x, y, z, radius);
};
mp.game2.fire.getClosestPos = function (x, y, z) {
    let $res = natives.getClosestFirePos(undefined, x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    return $res[1] == 1 ? $resObj.outPosition : undefined;
};
mp.game2.fire.getClosestFirePos = function (x, y, z) {
    let $res = natives.getClosestFirePos(undefined, x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    return $res[1] == 1 ? $resObj.outPosition : undefined;
};
mp.game2.fire.addExplosion = function (x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage) {
    let $res = natives.addExplosion(x, y, z, explosionType, damageScale, isAudible | 0, isInvisible | 0, cameraShake, noDamage | 0);
};
mp.game2.fire.addOwnedExplosion = function (ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
    let $res = natives.addOwnedExplosion(ped, x, y, z, explosionType, damageScale, isAudible | 0, isInvisible | 0, cameraShake);
};
mp.game2.fire.addExplosionWithUserVfx = function (x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake) {
    let $res = natives.addExplosionWithUserVfx(x, y, z, explosionType, explosionFx, damageScale, isAudible | 0, isInvisible | 0, cameraShake);
};
mp.game2.fire.addSpecfxExplosion = function (x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake) {
    let $res = natives.addExplosionWithUserVfx(x, y, z, explosionType, explosionFx, damageScale, isAudible | 0, isInvisible | 0, cameraShake);
};
mp.game2.fire.isExplosionInArea = function (explosionType, x1, y1, z1, x2, y2, z2) {
    let $res = natives.isExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.fire.isExplosionActiveInArea = function (explosionType, x1, y1, z1, x2, y2, z2) {
    let $res = natives.isExplosionActiveInArea(explosionType, x1, y1, z1, x2, y2, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.fire.isExplosionInSphere = function (explosionType, x, y, z, radius) {
    let $res = natives.isExplosionInSphere(explosionType, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.fire.getEntityInsideExplosionSphere = function (explosionType, x, y, z, radius) {
    let $res = natives.getOwnerOfExplosionInSphere(explosionType, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.fire.isExplosionInAngledArea = function (explosionType, x1, y1, z1, x2, y2, z2, width) {
    let $res = natives.isExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, width);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.fire.getOwnerOfExplosionInAngledArea = function (explosionType, x1, y1, z1, x2, y2, z2, radius) {
    let $res = natives.getOwnerOfExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.fire.getPedInsideExplosionArea = function (explosionType, x1, y1, z1, x2, y2, z2, radius) {
    let $res = natives.getOwnerOfExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.setBackfaceculling = function () {
    let $res = natives.setBackfaceculling(this.handle);
};
mp.Player.prototype.updateLightsOnEntity = function () {
    let $res = natives.updateLightsOnEntity(this.handle);
};
mp.Ped.prototype.updateLightsOnEntity = function () {
    let $res = natives.updateLightsOnEntity(this.handle);
};
mp.Object.prototype.updateLightsOnEntity = function () {
    let $res = natives.updateLightsOnEntity(this.handle);
};
mp.Vehicle.prototype.updateLightsOnEntity = function () {
    let $res = natives.updateLightsOnEntity(this.handle);
};
mp.Checkpoint.prototype.setCheckpointScale = function (p0) {
    let $res = natives.setCheckpointInsideCylinderHeightScale(this.handle, p0);
};
mp.Checkpoint.prototype.setCheckpointIconScale = function (scale) {
    let $res = natives.setCheckpointInsideCylinderScale(this.handle, scale);
};
mp.Checkpoint.prototype.setCheckpointCylinderHeight = function (nearHeight, farHeight, radius) {
    let $res = natives.setCheckpointCylinderHeight(this.handle, nearHeight, farHeight, radius);
};
mp.Checkpoint.prototype.setCheckpointRgba = function (red, green, blue, alpha) {
    let $res = natives.setCheckpointRgba(this.handle, red, green, blue, alpha);
};
mp.Checkpoint.prototype.setCheckpointRgba2 = function (red, green, blue, alpha) {
    let $res = natives.setCheckpointRgba2(this.handle, red, green, blue, alpha);
};
mp.Checkpoint.prototype.deleteCheckpoint = function () {
    let $res = natives.deleteCheckpoint(this.handle);
};
mp.Player.prototype.addEntityIcon = function (icon) {
    let $res = natives.addEntityIcon(this.handle, icon);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.addEntityIcon = function (icon) {
    let $res = natives.addEntityIcon(this.handle, icon);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.addEntityIcon = function (icon) {
    let $res = natives.addEntityIcon(this.handle, icon);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.addEntityIcon = function (icon) {
    let $res = natives.addEntityIcon(this.handle, icon);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setEntityIconVisibility = function (toggle) {
    let $res = natives.setEntityIconVisibility(this.handle, toggle | 0);
};
mp.Ped.prototype.setEntityIconVisibility = function (toggle) {
    let $res = natives.setEntityIconVisibility(this.handle, toggle | 0);
};
mp.Object.prototype.setEntityIconVisibility = function (toggle) {
    let $res = natives.setEntityIconVisibility(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setEntityIconVisibility = function (toggle) {
    let $res = natives.setEntityIconVisibility(this.handle, toggle | 0);
};
mp.Player.prototype.setEntityIconColor = function (red, green, blue, alpha) {
    let $res = natives.setEntityIconColor(this.handle, red, green, blue, alpha);
};
mp.Ped.prototype.setEntityIconColor = function (red, green, blue, alpha) {
    let $res = natives.setEntityIconColor(this.handle, red, green, blue, alpha);
};
mp.Object.prototype.setEntityIconColor = function (red, green, blue, alpha) {
    let $res = natives.setEntityIconColor(this.handle, red, green, blue, alpha);
};
mp.Vehicle.prototype.setEntityIconColor = function (red, green, blue, alpha) {
    let $res = natives.setEntityIconColor(this.handle, red, green, blue, alpha);
};
mp.Blip.prototype.setBinkMovieTime = function (progress) {
    let $res = natives.setBinkMovieTime(this.handle, progress);
};
mp.Blip.prototype.getBinkMovieTime = function () {
    let $res = natives.getBinkMovieTime(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.setBinkMovieVolume = function (value) {
    let $res = natives.setBinkMovieVolume(this.handle, value);
};
mp.Player.prototype.attachTvAudioToEntity = function () {
    let $res = natives.attachTvAudioToEntity(this.handle);
};
mp.Ped.prototype.attachTvAudioToEntity = function () {
    let $res = natives.attachTvAudioToEntity(this.handle);
};
mp.Object.prototype.attachTvAudioToEntity = function () {
    let $res = natives.attachTvAudioToEntity(this.handle);
};
mp.Vehicle.prototype.attachTvAudioToEntity = function () {
    let $res = natives.attachTvAudioToEntity(this.handle);
};
mp.Blip.prototype.setBinkMovieUnk2 = function (p1) {
    let $res = natives.setBinkMovieAudioFrontend(this.handle, p1 | 0);
};
mp.Blip.prototype.setBinkShouldSkip = function (bShouldSkip) {
    let $res = natives.setBinkShouldSkip(this.handle, bShouldSkip | 0);
};
mp.Blip.prototype.getAspectRatio = function () {
    let $res = natives.getAspectRatio(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.overridePedBadgeTexture = function (txd, txn) {
    let $res = natives.overridePedCrewLogoTexture(this.handle, txd, txn);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.overridePedBadgeTexture = function (txd, txn) {
    let $res = natives.overridePedCrewLogoTexture(this.handle, txd, txn);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.removeParticleFxFromEntity = function () {
    let $res = natives.removeParticleFxFromEntity(this.handle);
};
mp.Ped.prototype.removeParticleFxFromEntity = function () {
    let $res = natives.removeParticleFxFromEntity(this.handle);
};
mp.Object.prototype.removeParticleFxFromEntity = function () {
    let $res = natives.removeParticleFxFromEntity(this.handle);
};
mp.Vehicle.prototype.removeParticleFxFromEntity = function () {
    let $res = natives.removeParticleFxFromEntity(this.handle);
};
mp.Vehicle.prototype.setParticleFxCamInsideNonplayerVehicle = function (p1) {
    let $res = natives.setParticleFxCamInsideNonplayerVehicle(this.handle, p1 | 0);
};
mp.Vehicle.prototype.washDecalsFromVehicle = function (p1) {
    let $res = natives.washDecalsFromVehicle(this.handle, p1);
};
mp.Object.prototype.removeDecalsFromObject = function () {
    let $res = natives.removeDecalsFromObject(this.handle);
};
mp.Object.prototype.removeDecalsFromObjectFacing = function (x, y, z) {
    let $res = natives.removeDecalsFromObjectFacing(this.handle, x, y, z);
};
mp.Vehicle.prototype.removeDecalsFromVehicle = function () {
    let $res = natives.removeDecalsFromVehicle(this.handle);
};
mp.Vehicle.prototype.addVehicleCrewEmblem = function (ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha) {
    let $res = natives.addVehicleCrewEmblem(this.handle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.removeVehicleCrewEmblem = function (p1) {
    let $res = natives.removeVehicleCrewEmblem(this.handle, p1);
};
mp.Vehicle.prototype.getVehicleCrewEmblemRequestState = function (p1) {
    let $res = natives.getVehicleCrewEmblemRequestState(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.doesVehicleHaveCrewEmblem = function (p1) {
    let $res = natives.doesVehicleHaveCrewEmblem(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.graphics) mp.game2.graphics = {};
mp.game2.graphics.setDebugLinesAndSpheresDrawingActive = function (enabled) {
    let $res = natives.setDebugLinesAndSpheresDrawingActive(enabled | 0);
};
mp.game2.graphics.drawDebugLine = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.drawDebugLine(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};
mp.game2.graphics.drawDebugLineWithTwoColours = function (x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2) {
    let $res = natives.drawDebugLineWithTwoColours(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2);
};
mp.game2.graphics.drawDebugSphere = function (x, y, z, radius, red, green, blue, alpha) {
    let $res = natives.drawDebugSphere(x, y, z, radius, red, green, blue, alpha);
};
mp.game2.graphics.drawDebugBox = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.drawDebugBox(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};
mp.game2.graphics.drawDebugCross = function (x, y, z, size, red, green, blue, alpha) {
    let $res = natives.drawDebugCross(x, y, z, size, red, green, blue, alpha);
};
mp.game2.graphics.drawDebugText = function (text, x, y, z, red, green, blue, alpha) {
    let $res = natives.drawDebugText(text, x, y, z, red, green, blue, alpha);
};
mp.game2.graphics.drawDebugText2D = function (text, x, y, z, red, green, blue, alpha) {
    let $res = natives.drawDebugText2d(text, x, y, z, red, green, blue, alpha);
};
mp.game2.graphics.drawLine = function (x1, y1, z1, x2, y2, z2, red, green, blue, alpha) {
    let $res = natives.drawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
};
mp.game2.graphics.drawPoly = function (x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha) {
    let $res = natives.drawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha);
};
mp.game2.graphics.drawSpritePoly = function (x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3) {
    let $res = natives.drawTexturedPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
};
mp.game2.graphics.drawSpritePoly2 = function (x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3) {
    let $res = natives.drawTexturedPolyWithThreeColours(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
};
mp.game2.graphics.drawBox = function (x1, y1, z1, x2, y2, z2, red, green, blue, alpha) {
    let $res = natives.drawBox(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
};
mp.game2.graphics.setBackfaceculling = function (toggle) {
    let $res = natives.setBackfaceculling(toggle | 0);
};
mp.game2.graphics.beginTakeMissionCreatorPhoto = function () {
    let $res = natives.beginTakeMissionCreatorPhoto();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.getStatusOfTakeMissionCreatorPhoto = function () {
    let $res = natives.getStatusOfTakeMissionCreatorPhoto();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.freeMemoryForMissionCreatorPhoto = function () {
    let $res = natives.freeMemoryForMissionCreatorPhoto();
};
mp.game2.graphics.loadMissionCreatorPhoto = function (p1, p2, p3) {
    let $res = natives.loadMissionCreatorPhoto(0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.graphics.getStatusOfLoadMissionCreatorPhoto = function () {
    let $res = natives.getStatusOfLoadMissionCreatorPhoto(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.graphics.beginTakeHighQualityPhoto = function () {
    let $res = natives.beginTakeHighQualityPhoto();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.getStatusOfTakeHighQualityPhoto = function () {
    let $res = natives.getStatusOfTakeHighQualityPhoto();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.freeMemoryForHighQualityPhoto = function () {
    let $res = natives.freeMemoryForHighQualityPhoto();
};
mp.game2.graphics.saveHighQualityPhoto = function (unused) {
    let $res = natives.saveHighQualityPhoto(unused);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.getStatusOfSaveHighQualityPhoto = function () {
    let $res = natives.getStatusOfSaveHighQualityPhoto();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.freeMemoryForLowQualityPhoto = function () {
    let $res = natives.freeMemoryForLowQualityPhoto();
};
mp.game2.graphics.drawLowQualityPhotoToPhone = function (p0, p1) {
    let $res = natives.drawLowQualityPhotoToPhone(p0 | 0, p1 | 0);
};
mp.game2.graphics.getMaximumNumberOfPhotos = function () {
    let $res = natives.getMaximumNumberOfPhotos();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.getMaximumNumberOfCloudPhotos = function () {
    let $res = natives.getMaximumNumberOfCloudPhotos();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.getCurrentNumberOfCloudPhotos = function () {
    let $res = natives.getCurrentNumberOfCloudPhotos();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.getStatusOfSortedListOperation = function (p0) {
    let $res = natives.getStatusOfSortedListOperation(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.returnTwo = function (p0) {
    let $res = natives.getLoadHighQualityPhotoStatus(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.drawLightWithRangeAndShadow = function (x, y, z, r, g, b, range, intensity, shadow) {
    let $res = natives.drawLightWithRangeex(x, y, z, r, g, b, range, intensity, shadow);
};
mp.game2.graphics.drawLightWithRange = function (posX, posY, posZ, colorR, colorG, colorB, range, intensity) {
    let $res = natives.drawLightWithRange(posX, posY, posZ, colorR, colorG, colorB, range, intensity);
};
mp.game2.graphics.drawSpotLight = function (posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff) {
    let $res = natives.drawSpotLight(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff);
};
mp.game2.graphics.drawSpotLightWithShadow = function (posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId) {
    let $res = natives.drawShadowedSpotLight(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId);
};
mp.game2.graphics.fadeUpPedLight = function (p0) {
    let $res = natives.fadeUpPedLight(p0);
};
mp.game2.graphics.updateLightsOnEntity = function (entity) {
    let $res = natives.updateLightsOnEntity(entity);
};
mp.game2.graphics.drawMarker = function (type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts) {
    let $res = natives.drawMarker(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown | 0, faceCamera | 0, p19, rotate | 0, textureDict, textureName, drawOnEnts | 0);
};
mp.game2.graphics.drawMarker2 = function (type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts, p24, p25) {
    let $res = natives.drawMarkerEx(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown | 0, faceCamera | 0, p19, rotate | 0, textureDict, textureName, drawOnEnts | 0, p24 | 0, p25 | 0);
};
mp.game2.graphics.drawSphere = function (x, y, z, radius, red, green, blue, alpha) {
    let $res = natives.drawMarkerSphere(x, y, z, radius, red, green, blue, alpha);
};
mp.game2.graphics.createCheckpoint = function (type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved) {
    let $res = natives.createCheckpoint(type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.setCheckpointScale = function (checkpoint, p0) {
    let $res = natives.setCheckpointInsideCylinderHeightScale(checkpoint, p0);
};
mp.game2.graphics.setCheckpointIconScale = function (checkpoint, scale) {
    let $res = natives.setCheckpointInsideCylinderScale(checkpoint, scale);
};
mp.game2.graphics.setCheckpointCylinderHeight = function (checkpoint, nearHeight, farHeight, radius) {
    let $res = natives.setCheckpointCylinderHeight(checkpoint, nearHeight, farHeight, radius);
};
mp.game2.graphics.setCheckpointRgba = function (checkpoint, red, green, blue, alpha) {
    let $res = natives.setCheckpointRgba(checkpoint, red, green, blue, alpha);
};
mp.game2.graphics.setCheckpointRgba2 = function (checkpoint, red, green, blue, alpha) {
    let $res = natives.setCheckpointRgba2(checkpoint, red, green, blue, alpha);
};
mp.game2.graphics.deleteCheckpoint = function (checkpoint) {
    let $res = natives.deleteCheckpoint(checkpoint);
};
mp.game2.graphics.dontRenderInGameUi = function (p0) {
    let $res = natives.dontRenderInGameUi(p0 | 0);
};
mp.game2.graphics.forceRenderInGameUi = function (toggle) {
    let $res = natives.forceRenderInGameUi(toggle | 0);
};
mp.game2.graphics.requestStreamedTextureDict = function (textureDict, p1) {
    let $res = natives.requestStreamedTextureDict(textureDict, p1 | 0);
};
mp.game2.graphics.hasStreamedTextureDictLoaded = function (textureDict) {
    let $res = natives.hasStreamedTextureDictLoaded(textureDict);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.setStreamedTextureDictAsNoLongerNeeded = function (textureDict) {
    let $res = natives.setStreamedTextureDictAsNoLongerNeeded(textureDict);
};
mp.game2.graphics.drawRect = function (x, y, width, height, r, g, b, a, p8) {
    let $res = natives.drawRect(x, y, width, height, r, g, b, a, p8 | 0);
};
mp.game2.graphics.setScriptGfxDrawBehindPausemenu = function (toggle) {
    let $res = natives.setScriptGfxDrawBehindPausemenu(toggle | 0);
};
mp.game2.graphics.setScriptGfxDrawOrder = function (drawOrder) {
    let $res = natives.setScriptGfxDrawOrder(drawOrder);
};
mp.game2.graphics.setScriptGfxAlign = function (horizontalAlign, verticalAlign) {
    let $res = natives.setScriptGfxAlign(horizontalAlign, verticalAlign);
};
mp.game2.graphics.setScreenDrawPosition = function (horizontalAlign, verticalAlign) {
    let $res = natives.setScriptGfxAlign(horizontalAlign, verticalAlign);
};
mp.game2.graphics.resetScriptGfxAlign = function () {
    let $res = natives.resetScriptGfxAlign();
};
mp.game2.graphics.setScriptGfxAlignParams = function (x, y, w, h) {
    let $res = natives.setScriptGfxAlignParams(x, y, w, h);
};
mp.game2.graphics.getScriptGfxPosition = function (x, y) {
    let $res = natives.getScriptGfxAlignPosition(x, y, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.calculatedX = $res[1];
    $resObj.calculatedY = $res[2];
    return $resObj;
};
mp.game2.graphics.getSafeZoneSize = function () {
    let $res = natives.getSafeZoneSize();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.drawSprite = function (textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11) {
    let $res = natives.drawSprite(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11 | 0, 0);
};
mp.game2.graphics.drawInteractiveSprite = function (textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha) {
    let $res = natives.drawSpriteNamedRendertarget(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, 0);
};
mp.game2.graphics.drawSpriteUv = function (textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha) {
    let $res = natives.drawSpriteArxWithUv(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha, 0);
};
mp.game2.graphics.addEntityIcon = function (entity, icon) {
    let $res = natives.addEntityIcon(entity, icon);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.setEntityIconVisibility = function (entity, toggle) {
    let $res = natives.setEntityIconVisibility(entity, toggle | 0);
};
mp.game2.graphics.setEntityIconColor = function (entity, red, green, blue, alpha) {
    let $res = natives.setEntityIconColor(entity, red, green, blue, alpha);
};
mp.game2.graphics.setDrawOrigin = function (x, y, z, p3) {
    let $res = natives.setDrawOrigin(x, y, z, p3);
};
mp.game2.graphics.clearDrawOrigin = function () {
    let $res = natives.clearDrawOrigin();
};
mp.game2.graphics.setBinkMovie = function (name) {
    let $res = natives.setBinkMovie(name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.playBinkMovie = function (binkMovie) {
    let $res = natives.playBinkMovie(binkMovie);
};
mp.game2.graphics.stopBinkMovie = function (binkMovie) {
    let $res = natives.stopBinkMovie(binkMovie);
};
mp.game2.graphics.releaseBinkMovie = function (binkMovie) {
    let $res = natives.releaseBinkMovie(binkMovie);
};
mp.game2.graphics.drawBinkMovie = function (binkMovie, p1, p2, p3, p4, p5, r, g, b, a) {
    let $res = natives.drawBinkMovie(binkMovie, p1, p2, p3, p4, p5, r, g, b, a);
};
mp.game2.graphics.setBinkMovieTime = function (binkMovie, progress) {
    let $res = natives.setBinkMovieTime(binkMovie, progress);
};
mp.game2.graphics.getBinkMovieTime = function (binkMovie) {
    let $res = natives.getBinkMovieTime(binkMovie);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.setBinkMovieVolume = function (binkMovie, value) {
    let $res = natives.setBinkMovieVolume(binkMovie, value);
};
mp.game2.graphics.attachTvAudioToEntity = function (entity) {
    let $res = natives.attachTvAudioToEntity(entity);
};
mp.game2.graphics.setBinkMovieUnk2 = function (binkMovie, p1) {
    let $res = natives.setBinkMovieAudioFrontend(binkMovie, p1 | 0);
};
mp.game2.graphics.setTvAudioFrontend = function (toggle) {
    let $res = natives.setTvAudioFrontend(toggle | 0);
};
mp.game2.graphics.setBinkShouldSkip = function (binkMovie, bShouldSkip) {
    let $res = natives.setBinkShouldSkip(binkMovie, bShouldSkip | 0);
};
mp.game2.graphics.loadMovieMeshSet = function (movieMeshSetName) {
    let $res = natives.loadMovieMeshSet(movieMeshSetName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.releaseMovieMeshSet = function (movieMeshSet) {
    let $res = natives.releaseMovieMeshSet(movieMeshSet);
};
mp.game2.graphics.queryMovieMeshSetState = function (p0) {
    let $res = natives.queryMovieMeshSetState(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.getScreenResolution = function () {
    let $res = natives.getScreenResolution(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    return $resObj;
};
mp.game2.graphics.getActiveScreenResolution = function () {
    let $res = natives.getActualScreenResolution(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    return $resObj;
};
mp.game2.graphics.getScreenActiveResolution = function () {
    let $res = natives.getActualScreenResolution(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    return $resObj;
};
mp.game2.graphics.getAspectRatio = function (b) {
    let $res = natives.getAspectRatio(b | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.getScreenAspectRatio = function (b) {
    let $res = natives.getAspectRatio(b | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.getIsWidescreen = function () {
    let $res = natives.getIsWidescreen();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.getIsHidef = function () {
    let $res = natives.getIsHidef();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.setNightvision = function (toggle) {
    let $res = natives.setNightvision(toggle | 0);
};
mp.game2.graphics.getRequestingnightvision = function () {
    let $res = natives.getRequestingnightvision();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.getUsingnightvision = function () {
    let $res = natives.getUsingnightvision();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.setNoiseoveride = function (toggle) {
    let $res = natives.setNoiseoveride(toggle | 0);
};
mp.game2.graphics.setNoisinessoveride = function (value) {
    let $res = natives.setNoisinessoveride(value);
};
mp.game2.graphics.getScreenCoordFromWorldCoord = function (worldX, worldY, worldZ) {
    let $res = natives.getScreenCoordFromWorldCoord(worldX, worldY, worldZ, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.screenX = $res[1];
    $resObj.screenY = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.graphics.getTextureResolution = function (textureDict, textureName) {
    let $res = natives.getTextureResolution(textureDict, textureName);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.graphics.overridePedBadgeTexture = function (ped, txd, txn) {
    let $res = natives.overridePedCrewLogoTexture(ped, txd, txn);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.setFlash = function (p0, p1, fadeIn, duration, fadeOut) {
    let $res = natives.setFlash(p0, p1, fadeIn, duration, fadeOut);
};
mp.game2.graphics.disableOcclusionThisFrame = function () {
    let $res = natives.disableOcclusionThisFrame();
};
mp.game2.graphics.setArtificialLightsState = function (state) {
    let $res = natives.setArtificialLightsState(state | 0);
};
mp.game2.graphics.setBlackout = function (state) {
    let $res = natives.setArtificialLightsState(state | 0);
};
mp.game2.graphics.setArtificialLightsStateAffectsVehicles = function (toggle) {
    let $res = natives.setArtificialVehicleLightsState(toggle | 0);
};
mp.game2.graphics.createTrackedPoint = function () {
    let $res = natives.createTrackedPoint();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.setTrackedPointInfo = function (point, x, y, z, radius) {
    let $res = natives.setTrackedPointInfo(point, x, y, z, radius);
};
mp.game2.graphics.isTrackedPointVisible = function (point) {
    let $res = natives.isTrackedPointVisible(point);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.destroyTrackedPoint = function (point) {
    let $res = natives.destroyTrackedPoint(point);
};
mp.game2.graphics.grassLodShrinkScriptAreas = function (x, y, z, radius, p4, p5, p6) {
    let $res = natives.grassbatchEnableFlatteningInSphere(x, y, z, radius, p4, p5, p6);
};
mp.game2.graphics.grassLodResetScriptAreas = function () {
    let $res = natives.grassbatchDisableFlattening();
};
mp.game2.graphics.cascadeShadowsInitSession = function () {
    let $res = natives.cascadeShadowsInitSession();
};
mp.game2.graphics.cascadeShadowsSetCascadeBounds = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.cascadeShadowsSetCascadeBounds(p0, p1 | 0, p2, p3, p4, p5, p6 | 0, p7);
};
mp.game2.graphics.cascadeShadowsSetCascadeBoundsScale = function (p0) {
    let $res = natives.cascadeShadowsSetCascadeBoundsScale(p0);
};
mp.game2.graphics.cascadeShadowsSetEntityTrackerScale = function (p0) {
    let $res = natives.cascadeShadowsSetEntityTrackerScale(p0);
};
mp.game2.graphics.cascadeShadowsEnableEntityTracker = function (toggle) {
    let $res = natives.cascadeShadowsEnableEntityTracker(toggle | 0);
};
mp.game2.graphics.setFarShadowsSuppressed = function (toggle) {
    let $res = natives.cascadeShadowsEnableEntityTracker(toggle | 0);
};
mp.game2.graphics.cascadeShadowsSetShadowSampleType = function (type) {
    let $res = natives.cascadeShadowsSetShadowSampleType(type);
};
mp.game2.graphics.cascadeShadowsClearShadowSampleType = function () {
    let $res = natives.cascadeShadowsClearShadowSampleType();
};
mp.game2.graphics.cascadeShadowsSetAircraftMode = function (p0) {
    let $res = natives.cascadeShadowsSetAircraftMode(p0 | 0);
};
mp.game2.graphics.cascadeShadowsSetDynamicDepthMode = function (p0) {
    let $res = natives.cascadeShadowsSetDynamicDepthMode(p0 | 0);
};
mp.game2.graphics.cascadeShadowsSetDynamicDepthValue = function (p0) {
    let $res = natives.cascadeShadowsSetDynamicDepthValue(p0);
};
mp.game2.graphics.golfTrailSetEnabled = function (toggle) {
    let $res = natives.golfTrailSetEnabled(toggle | 0);
};
mp.game2.graphics.golfTrailSetPath = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.golfTrailSetPath(p0, p1, p2, p3, p4, p5, p6, p7, p8 | 0);
};
mp.game2.graphics.golfTrailSetRadius = function (p0, p1, p2) {
    let $res = natives.golfTrailSetRadius(p0, p1, p2);
};
mp.game2.graphics.golfTrailSetColour = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    let $res = natives.golfTrailSetColour(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
};
mp.game2.graphics.golfTrailSetTessellation = function (p0, p1) {
    let $res = natives.golfTrailSetTessellation(p0, p1);
};
mp.game2.graphics.golfTrailSetFixedControlPoint = function (type, xPos, yPos, zPos, p4, red, green, blue, alpha) {
    let $res = natives.golfTrailSetFixedControlPoint(type, xPos, yPos, zPos, p4, red, green, blue, alpha);
};
mp.game2.graphics.golfTrailSetShaderParams = function (p0, p1, p2, p3, p4) {
    let $res = natives.golfTrailSetShaderParams(p0, p1, p2, p3, p4);
};
mp.game2.graphics.golfTrailSetFacing = function (p0) {
    let $res = natives.golfTrailSetFacing(p0 | 0);
};
mp.game2.graphics.golfTrailGetMaxHeight = function () {
    let $res = natives.golfTrailGetMaxHeight();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.golfTrailGetVisualControlPoint = function (p0) {
    let $res = natives.golfTrailGetVisualControlPoint(p0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.graphics.setSeethrough = function (toggle) {
    let $res = natives.setSeethrough(toggle | 0);
};
mp.game2.graphics.getUsingseethrough = function () {
    let $res = natives.getUsingseethrough();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.seethroughReset = function () {
    let $res = natives.seethroughReset();
};
mp.game2.graphics.seethroughSetFadeStartDistance = function (distance) {
    let $res = natives.seethroughSetFadeStartdistance(distance);
};
mp.game2.graphics.seethroughSetFadeEndDistance = function (distance) {
    let $res = natives.seethroughSetFadeEnddistance(distance);
};
mp.game2.graphics.seethroughGetMaxThickness = function () {
    let $res = natives.seethroughGetMaxThickness();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.seethroughSetMaxThickness = function (thickness) {
    let $res = natives.seethroughSetMaxThickness(thickness);
};
mp.game2.graphics.seethroughSetNoiseAmountMin = function (amount) {
    let $res = natives.seethroughSetNoiseMin(amount);
};
mp.game2.graphics.seethroughSetNoiseAmountMax = function (amount) {
    let $res = natives.seethroughSetNoiseMax(amount);
};
mp.game2.graphics.seethroughSetHiLightIntensity = function (intensity) {
    let $res = natives.seethroughSetHilightIntensity(intensity);
};
mp.game2.graphics.seethroughSetHiLightNoise = function (noise) {
    let $res = natives.seethroughSetHighlightNoise(noise);
};
mp.game2.graphics.seethroughSetHeatscale = function (index, heatScale) {
    let $res = natives.seethroughSetHeatscale(index, heatScale);
};
mp.game2.graphics.seethroughSetColorNear = function (red, green, blue) {
    let $res = natives.seethroughSetColorNear(red, green, blue);
};
mp.game2.graphics.togglePlayerDamageOverlay = function (toggle) {
    let $res = natives.togglePlayerDamageOverlay(toggle | 0);
};
mp.game2.graphics.triggerScreenblurFadeIn = function (transitionTime) {
    let $res = natives.triggerScreenblurFadeIn(transitionTime);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.transitionToBlurred = function (transitionTime) {
    let $res = natives.triggerScreenblurFadeIn(transitionTime);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.triggerScreenblurFadeOut = function (transitionTime) {
    let $res = natives.triggerScreenblurFadeOut(transitionTime);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.transitionFromBlurred = function (transitionTime) {
    let $res = natives.triggerScreenblurFadeOut(transitionTime);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.disableScreenblurFade = function () {
    let $res = natives.disableScreenblurFade();
};
mp.game2.graphics.getScreenblurFadeCurrentTime = function () {
    let $res = natives.getScreenblurFadeCurrentTime();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.isScreenblurFadeRunning = function () {
    let $res = natives.isScreenblurFadeRunning();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.togglePausedRenderphases = function (toggle) {
    let $res = natives.togglePausedRenderphases(toggle | 0);
};
mp.game2.graphics.setFrozenRenderingDisabled = function (toggle) {
    let $res = natives.togglePausedRenderphases(toggle | 0);
};
mp.game2.graphics.getTogglePausedRenderphasesStatus = function () {
    let $res = natives.getTogglePausedRenderphasesStatus();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.resetPausedRenderphases = function () {
    let $res = natives.resetPausedRenderphases();
};
mp.game2.graphics.setHidofEnvBlurParams = function (p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn) {
    let $res = natives.setHidofOverride(p0 | 0, p1 | 0, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn);
};
mp.game2.graphics.startParticleFxNonLoopedAtCoord = function (effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
    let $res = natives.startParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis | 0, yAxis | 0, zAxis | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.startNetworkedParticleFxNonLoopedAtCoord = function (effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11) {
    let $res = natives.startNetworkedParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis | 0, yAxis | 0, zAxis | 0, p11 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.startParticleFxNonLoopedAtCoord2 = function (effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11) {
    let $res = natives.startNetworkedParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis | 0, yAxis | 0, zAxis | 0, p11 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.startParticleFxNonLoopedOnPedBone = function (effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
    let $res = natives.startParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX | 0, axisY | 0, axisZ | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.startNetworkedParticleFxNonLoopedOnPedBone = function (effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
    let $res = natives.startNetworkedParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX | 0, axisY | 0, axisZ | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.startParticleFxNonLoopedOnPedBone2 = function (effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
    let $res = natives.startNetworkedParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX | 0, axisY | 0, axisZ | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.startParticleFxNonLoopedOnEntity = function (effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) {
    let $res = natives.startParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX | 0, axisY | 0, axisZ | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.startNetworkedParticleFxNonLoopedOnEntity = function (effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) {
    let $res = natives.startNetworkedParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX | 0, axisY | 0, axisZ | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.startParticleFxNonLoopedOnEntity2 = function (effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) {
    let $res = natives.startNetworkedParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX | 0, axisY | 0, axisZ | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.startNetworkedParticleFxNonLoopedOnEntityBone = function (effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
    let $res = natives.startParticleFxNonLoopedOnEntityBone(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX | 0, axisY | 0, axisZ | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.setParticleFxNonLoopedColour = function (r, g, b) {
    let $res = natives.setParticleFxNonLoopedColour(r, g, b);
};
mp.game2.graphics.setParticleFxNonLoopedAlpha = function (alpha) {
    let $res = natives.setParticleFxNonLoopedAlpha(alpha);
};
mp.game2.graphics.startParticleFxLoopedAtCoord = function (effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11) {
    let $res = natives.startParticleFxLoopedAtCoord(effectName, x, y, z, xRot, yRot, zRot, scale, xAxis | 0, yAxis | 0, zAxis | 0, p11 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.startParticleFxLoopedOnPedBone = function (effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) {
    let $res = natives.startParticleFxLoopedOnPedBone(effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis | 0, yAxis | 0, zAxis | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.startParticleFxLoopedOnEntity = function (effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
    let $res = natives.startParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis | 0, yAxis | 0, zAxis | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.startParticleFxLoopedOnEntityBone = function (effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) {
    let $res = natives.startParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis | 0, yAxis | 0, zAxis | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.startNetworkedParticleFxLoopedOnEntity = function (effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p12, p13, p14, p15) {
    let $res = natives.startNetworkedParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis | 0, yAxis | 0, zAxis | 0, p12 | 0, p13 | 0, p14 | 0, p15 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.startParticleFxLoopedOnEntity2 = function (effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p12, p13, p14, p15) {
    let $res = natives.startNetworkedParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis | 0, yAxis | 0, zAxis | 0, p12 | 0, p13 | 0, p14 | 0, p15 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.startNetworkedParticleFxLoopedOnEntityBone = function (effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, p13, p14, p15, p16) {
    let $res = natives.startNetworkedParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis | 0, yAxis | 0, zAxis | 0, p13 | 0, p14 | 0, p15 | 0, p16 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.startParticleFxLoopedOnEntityBone2 = function (effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, p13, p14, p15, p16) {
    let $res = natives.startNetworkedParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis | 0, yAxis | 0, zAxis | 0, p13 | 0, p14 | 0, p15 | 0, p16 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.stopParticleFxLooped = function (ptfxHandle, p1) {
    let $res = natives.stopParticleFxLooped(ptfxHandle, p1 | 0);
};
mp.game2.graphics.removeParticleFx = function (ptfxHandle, p1) {
    let $res = natives.removeParticleFx(ptfxHandle, p1 | 0);
};
mp.game2.graphics.removeParticleFxFromEntity = function (entity) {
    let $res = natives.removeParticleFxFromEntity(entity);
};
mp.game2.graphics.removeParticleFxInRange = function (X, Y, Z, radius) {
    let $res = natives.removeParticleFxInRange(X, Y, Z, radius);
};
mp.game2.graphics.doesParticleFxLoopedExist = function (ptfxHandle) {
    let $res = natives.doesParticleFxLoopedExist(ptfxHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.setParticleFxLoopedOffsets = function (ptfxHandle, x, y, z, rotX, rotY, rotZ) {
    let $res = natives.setParticleFxLoopedOffsets(ptfxHandle, x, y, z, rotX, rotY, rotZ);
};
mp.game2.graphics.setParticleFxLoopedEvolution = function (ptfxHandle, propertyName, amount, noNetwork) {
    let $res = natives.setParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, noNetwork | 0);
};
mp.game2.graphics.setParticleFxLoopedColour = function (ptfxHandle, r, g, b, p4) {
    let $res = natives.setParticleFxLoopedColour(ptfxHandle, r, g, b, p4 | 0);
};
mp.game2.graphics.setParticleFxLoopedAlpha = function (ptfxHandle, alpha) {
    let $res = natives.setParticleFxLoopedAlpha(ptfxHandle, alpha);
};
mp.game2.graphics.setParticleFxLoopedScale = function (ptfxHandle, scale) {
    let $res = natives.setParticleFxLoopedScale(ptfxHandle, scale);
};
mp.game2.graphics.setParticleFxLoopedFarClipDist = function (ptfxHandle, range) {
    let $res = natives.setParticleFxLoopedFarClipDist(ptfxHandle, range);
};
mp.game2.graphics.setParticleFxLoopedRange = function (ptfxHandle, range) {
    let $res = natives.setParticleFxLoopedFarClipDist(ptfxHandle, range);
};
mp.game2.graphics.setParticleFxCamInsideVehicle = function (p0) {
    let $res = natives.setParticleFxCamInsideVehicle(p0 | 0);
};
mp.game2.graphics.setParticleFxCamInsideNonplayerVehicle = function (vehicle, p1) {
    let $res = natives.setParticleFxCamInsideNonplayerVehicle(vehicle, p1 | 0);
};
mp.game2.graphics.setParticleFxShootoutBoat = function (p0) {
    let $res = natives.setParticleFxShootoutBoat(p0);
};
mp.game2.graphics.enableClownBloodVfx = function (toggle) {
    let $res = natives.enableClownBloodVfx(toggle | 0);
};
mp.game2.graphics.enableAlienBloodVfx = function (toggle) {
    let $res = natives.enableAlienBloodVfx(toggle | 0);
};
mp.game2.graphics.setParticleFxBulletImpactScale = function (scale) {
    let $res = natives.setParticleFxBulletImpactScale(scale);
};
mp.game2.graphics.useParticleFxAsset = function (name) {
    let $res = natives.useParticleFxAsset(name);
};
mp.game2.graphics.setPtfxAssetNextCall = function (name) {
    let $res = natives.useParticleFxAsset(name);
};
mp.game2.graphics.setParticleFxOverride = function (oldAsset, newAsset) {
    let $res = natives.setParticleFxOverride(oldAsset, newAsset);
};
mp.game2.graphics.setPtfxAssetOldToNew = function (oldAsset, newAsset) {
    let $res = natives.setParticleFxOverride(oldAsset, newAsset);
};
mp.game2.graphics.resetParticleFxOverride = function (name) {
    let $res = natives.resetParticleFxOverride(name);
};
mp.game2.graphics.washDecalsInRange = function (p0, p1, p2, p3, p4) {
    let $res = natives.washDecalsInRange(p0, p1, p2, p3, p4);
};
mp.game2.graphics.washDecalsFromVehicle = function (vehicle, p1) {
    let $res = natives.washDecalsFromVehicle(vehicle, p1);
};
mp.game2.graphics.fadeDecalsInRange = function (p0, p1, p2, p3, p4) {
    let $res = natives.fadeDecalsInRange(p0, p1, p2, p3, p4);
};
mp.game2.graphics.removeDecalsInRange = function (x, y, z, range) {
    let $res = natives.removeDecalsInRange(x, y, z, range);
};
mp.game2.graphics.removeDecalsFromObject = function (obj) {
    let $res = natives.removeDecalsFromObject(obj);
};
mp.game2.graphics.removeDecalsFromObjectFacing = function (obj, x, y, z) {
    let $res = natives.removeDecalsFromObjectFacing(obj, x, y, z);
};
mp.game2.graphics.removeDecalsFromVehicle = function (vehicle) {
    let $res = natives.removeDecalsFromVehicle(vehicle);
};
mp.game2.graphics.addDecal = function (decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17, p18, p19) {
    let $res = natives.addDecal(decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17 | 0, p18 | 0, p19 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.addPetrolDecal = function (x, y, z, groundLvl, width, transparency) {
    let $res = natives.addPetrolDecal(x, y, z, groundLvl, width, transparency);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.startPetrolTrailDecals = function (p0) {
    let $res = natives.startPetrolTrailDecals(p0);
};
mp.game2.graphics.addPetrolTrailDecalInfo = function (x, y, z, p3) {
    let $res = natives.addPetrolTrailDecalInfo(x, y, z, p3);
};
mp.game2.graphics.endPetrolTrailDecals = function () {
    let $res = natives.endPetrolTrailDecals();
};
mp.game2.graphics.removeDecal = function (decal) {
    let $res = natives.removeDecal(decal);
};
mp.game2.graphics.isDecalAlive = function (decal) {
    let $res = natives.isDecalAlive(decal);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.getDecalWashLevel = function (decal) {
    let $res = natives.getDecalWashLevel(decal);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.setDisableDecalRenderingThisFrame = function () {
    let $res = natives.setDisableDecalRenderingThisFrame();
};
mp.game2.graphics.getIsPetrolDecalInRange = function (xCoord, yCoord, zCoord, radius) {
    let $res = natives.getIsPetrolDecalInRange(xCoord, yCoord, zCoord, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.patchDecalDiffuseMap = function (decalType, textureDict, textureName) {
    let $res = natives.patchDecalDiffuseMap(decalType, textureDict, textureName);
};
mp.game2.graphics.unpatchDecalDiffuseMap = function (decalType) {
    let $res = natives.unpatchDecalDiffuseMap(decalType);
};
mp.game2.graphics.moveVehicleDecals = function (p0, p1) {
    let $res = natives.moveVehicleDecals(p0, p1);
};
mp.game2.graphics.addVehicleCrewEmblem = function (vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha) {
    let $res = natives.addVehicleCrewEmblem(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.removeVehicleCrewEmblem = function (vehicle, p1) {
    let $res = natives.removeVehicleCrewEmblem(vehicle, p1);
};
mp.game2.graphics.getVehicleCrewEmblemRequestState = function (vehicle, p1) {
    let $res = natives.getVehicleCrewEmblemRequestState(vehicle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.doesVehicleHaveCrewEmblem = function (vehicle, p1) {
    let $res = natives.doesVehicleHaveCrewEmblem(vehicle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.overrideInteriorSmokeName = function (name) {
    let $res = natives.overrideInteriorSmokeName(name);
};
mp.game2.graphics.overrideInteriorSmokeLevel = function (level) {
    let $res = natives.overrideInteriorSmokeLevel(level);
};
mp.game2.graphics.overrideInteriorSmokeEnd = function () {
    let $res = natives.overrideInteriorSmokeEnd();
};
mp.game2.graphics.registerNoirScreenEffectThisFrame = function () {
    let $res = natives.registerNoirLensEffect();
};
mp.game2.graphics.disableVehicleDistantlights = function (toggle) {
    let $res = natives.disableVehicleDistantlights(toggle | 0);
};
mp.game2.graphics.setForcePedFootstepsTracks = function (toggle) {
    let $res = natives.useSnowFootVfxWhenUnsheltered(toggle | 0);
};
mp.game2.graphics.setForceVehicleTrails = function (toggle) {
    let $res = natives.useSnowWheelVfxWhenUnsheltered(toggle | 0);
};
mp.game2.graphics.disableScriptAmbientEffects = function (p0) {
    let $res = natives.disableRegionVfx(p0);
};
mp.game2.graphics.presetInteriorAmbientCache = function (timecycleModifierName) {
    let $res = natives.presetInteriorAmbientCache(timecycleModifierName);
};
mp.game2.graphics.setTimecycleModifier = function (modifierName) {
    let $res = natives.setTimecycleModifier(modifierName);
};
mp.game2.graphics.setTimecycleModifierStrength = function (strength) {
    let $res = natives.setTimecycleModifierStrength(strength);
};
mp.game2.graphics.setTransitionTimecycleModifier = function (modifierName, transition) {
    let $res = natives.setTransitionTimecycleModifier(modifierName, transition);
};
mp.game2.graphics.clearTimecycleModifier = function () {
    let $res = natives.clearTimecycleModifier();
};
mp.game2.graphics.getTimecycleModifierIndex = function () {
    let $res = natives.getTimecycleModifierIndex();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.getTimecycleTransitionModifierIndex = function () {
    let $res = natives.getTimecycleTransitionModifierIndex();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.pushTimecycleModifier = function () {
    let $res = natives.pushTimecycleModifier();
};
mp.game2.graphics.popTimecycleModifier = function () {
    let $res = natives.popTimecycleModifier();
};
mp.game2.graphics.setCurrentPlayerTcmodifier = function (modifierName) {
    let $res = natives.setCurrentPlayerTcmodifier(modifierName);
};
mp.game2.graphics.setPlayerTcmodifierTransition = function (value) {
    let $res = natives.setPlayerTcmodifierTransition(value);
};
mp.game2.graphics.setNextPlayerTcmodifier = function (modifierName) {
    let $res = natives.setNextPlayerTcmodifier(modifierName);
};
mp.game2.graphics.addTcmodifierOverride = function (modifierName1, modifierName2) {
    let $res = natives.addTcmodifierOverride(modifierName1, modifierName2);
};
mp.game2.graphics.removeTcmodifierOverride = function (p0) {
    let $res = natives.clearAllTcmodifierOverrides(p0);
};
mp.game2.graphics.setExtraTimecycleModifier = function (modifierName) {
    let $res = natives.setExtraTcmodifier(modifierName);
};
mp.game2.graphics.clearExtraTimecycleModifier = function () {
    let $res = natives.clearExtraTcmodifier();
};
mp.game2.graphics.getExtraTimecycleModifierIndex = function () {
    let $res = natives.getExtraTcmodifier();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.setExtraTimecycleModifierStrength = function (strength) {
    let $res = natives.enableMoonCycleOverride(strength);
};
mp.game2.graphics.resetExtraTimecycleModifierStrength = function () {
    let $res = natives.disableMoonCycleOverride();
};
mp.game2.graphics.requestScaleformMovie = function (scaleformName) {
    let $res = natives.requestScaleformMovie(scaleformName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.requestScaleformMovie2 = function (scaleformName) {
    let $res = natives.requestScaleformMovieWithIgnoreSuperWidescreen(scaleformName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.requestScaleformMovieInstance = function (scaleformName) {
    let $res = natives.requestScaleformMovieInstance(scaleformName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.requestScaleformMovieInteractive = function (scaleformName) {
    let $res = natives.requestScaleformMovieSkipRenderWhilePaused(scaleformName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.requestScaleformMovie3 = function (scaleformName) {
    let $res = natives.requestScaleformMovieSkipRenderWhilePaused(scaleformName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.hasScaleformMovieLoaded = function (scaleformHandle) {
    let $res = natives.hasScaleformMovieLoaded(scaleformHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.hasScaleformMovieFilenameLoaded = function (scaleformName) {
    let $res = natives.hasScaleformMovieFilenameLoaded(scaleformName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.hasNamedScaleformMovieLoaded = function (scaleformName) {
    let $res = natives.hasScaleformMovieFilenameLoaded(scaleformName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.hasScaleformContainerMovieLoadedIntoParent = function (scaleformHandle) {
    let $res = natives.hasScaleformContainerMovieLoadedIntoParent(scaleformHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.setScaleformMovieAsNoLongerNeeded = function (scaleformHandle) {
    let $res = natives.setScaleformMovieAsNoLongerNeeded(scaleformHandle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.scaleformHandle = $res[1];
    return $resObj.scaleformHandle;
};
mp.game2.graphics.setScaleformMovieToUseSystemTime = function (scaleform, toggle) {
    let $res = natives.setScaleformMovieToUseSystemTime(scaleform, toggle | 0);
};
mp.game2.graphics.setScaleformFitRendertarget = function (scaleformHandle, toggle) {
    let $res = natives.setScaleformMovieToUseSuperLargeRt(scaleformHandle, toggle | 0);
};
mp.game2.graphics.drawScaleformMovie = function (scaleformHandle, x, y, width, height, red, green, blue, alpha, unk) {
    let $res = natives.drawScaleformMovie(scaleformHandle, x, y, width, height, red, green, blue, alpha, unk);
};
mp.game2.graphics.drawScaleformMovieFullscreen = function (scaleform, red, green, blue, alpha, unk) {
    let $res = natives.drawScaleformMovieFullscreen(scaleform, red, green, blue, alpha, unk | 0);
};
mp.game2.graphics.drawScaleformMovieFullscreenMasked = function (scaleform1, scaleform2, red, green, blue, alpha) {
    let $res = natives.drawScaleformMovieFullscreenMasked(scaleform1, scaleform2, red, green, blue, alpha);
};
mp.game2.graphics.drawScaleformMovie3D = function (scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13) {
    let $res = natives.drawScaleformMovie3d(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13);
};
mp.game2.graphics.drawScaleformMovie3DSolid = function (scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13) {
    let $res = natives.drawScaleformMovie3dSolid(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13);
};
mp.game2.graphics.callScaleformMovieMethodWithNumber = function (scaleform, methodName, param1, param2, param3, param4, param5) {
    let $res = natives.callScaleformMovieMethodWithNumber(scaleform, methodName, param1, param2, param3, param4, param5);
};
mp.game2.graphics.callScaleformMovieFunctionFloatParams = function (scaleform, methodName, param1, param2, param3, param4, param5) {
    let $res = natives.callScaleformMovieMethodWithNumber(scaleform, methodName, param1, param2, param3, param4, param5);
};
mp.game2.graphics.callScaleformMovieMethodWithString = function (scaleform, methodName, param1, param2, param3, param4, param5) {
    let $res = natives.callScaleformMovieMethodWithString(scaleform, methodName, param1, param2, param3, param4, param5);
};
mp.game2.graphics.callScaleformMovieFunctionStringParams = function (scaleform, methodName, param1, param2, param3, param4, param5) {
    let $res = natives.callScaleformMovieMethodWithString(scaleform, methodName, param1, param2, param3, param4, param5);
};
mp.game2.graphics.callScaleformMovieMethodWithNumberAndString = function (scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5) {
    let $res = natives.callScaleformMovieMethodWithNumberAndString(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);
};
mp.game2.graphics.callScaleformMovieFunctionMixedParams = function (scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5) {
    let $res = natives.callScaleformMovieMethodWithNumberAndString(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);
};
mp.game2.graphics.beginScaleformMovieMethodOnFrontend = function (methodName) {
    let $res = natives.beginScaleformMovieMethodOnFrontend(methodName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.pushScaleformMovieFunctionN = function (methodName) {
    let $res = natives.beginScaleformMovieMethodOnFrontend(methodName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.beginScaleformMovieMethodOnFrontendHeader = function (methodName) {
    let $res = natives.beginScaleformMovieMethodOnFrontendHeader(methodName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.endScaleformMovieMethodReturnValue = function () {
    let $res = natives.endScaleformMovieMethodReturnValue();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.popScaleformMovieFunction = function () {
    let $res = natives.endScaleformMovieMethodReturnValue();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.isScaleformMovieMethodReturnValueReady = function (methodReturn) {
    let $res = natives.isScaleformMovieMethodReturnValueReady(methodReturn);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.getScaleformMovieMethodReturnValueInt = function (methodReturn) {
    let $res = natives.getScaleformMovieMethodReturnValueInt(methodReturn);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.getScaleformMovieMethodReturnValueBool = function (methodReturn) {
    let $res = natives.getScaleformMovieMethodReturnValueBool(methodReturn);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.getScaleformMovieMethodReturnValueString = function (methodReturn) {
    let $res = natives.getScaleformMovieMethodReturnValueString(methodReturn);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.sittingTv = function (methodReturn) {
    let $res = natives.getScaleformMovieMethodReturnValueString(methodReturn);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.scaleformMovieMethodAddParamInt = function (value) {
    let $res = natives.scaleformMovieMethodAddParamInt(value);
};
mp.game2.graphics.pushScaleformMovieFunctionParameterInt = function (value) {
    let $res = natives.scaleformMovieMethodAddParamInt(value);
};
mp.game2.graphics.scaleformMovieMethodAddParamFloat = function (value) {
    let $res = natives.scaleformMovieMethodAddParamFloat(value);
};
mp.game2.graphics.pushScaleformMovieFunctionParameterFloat = function (value) {
    let $res = natives.scaleformMovieMethodAddParamFloat(value);
};
mp.game2.graphics.scaleformMovieMethodAddParamBool = function (value) {
    let $res = natives.scaleformMovieMethodAddParamBool(value | 0);
};
mp.game2.graphics.pushScaleformMovieFunctionParameterBool = function (value) {
    let $res = natives.scaleformMovieMethodAddParamBool(value | 0);
};
mp.game2.graphics.beginTextCommandScaleformString = function (componentType) {
    let $res = natives.beginTextCommandScaleformString(componentType);
};
mp.game2.graphics.beginTextComponent = function (componentType) {
    let $res = natives.beginTextCommandScaleformString(componentType);
};
mp.game2.graphics.endTextCommandScaleformString = function () {
    let $res = natives.endTextCommandScaleformString();
};
mp.game2.graphics.endTextComponent = function () {
    let $res = natives.endTextCommandScaleformString();
};
mp.game2.graphics.endTextCommandScaleformString2 = function () {
    let $res = natives.endTextCommandUnparsedScaleformString();
};
mp.game2.graphics.scaleformMovieMethodAddParamTextureNameString2 = function (string) {
    let $res = natives.scaleformMovieMethodAddParamLiteralString(string);
};
mp.game2.graphics.scaleformMovieMethodAddParamTextureNameString = function (string) {
    let $res = natives.scaleformMovieMethodAddParamTextureNameString(string);
};
mp.game2.graphics.pushScaleformMovieFunctionParameterString = function (string) {
    let $res = natives.scaleformMovieMethodAddParamTextureNameString(string);
};
mp.game2.graphics.scaleformMovieMethodAddParamPlayerNameString = function (string) {
    let $res = natives.scaleformMovieMethodAddParamPlayerNameString(string);
};
mp.game2.graphics.doesLatestBriefStringExist = function (p0) {
    let $res = natives.doesLatestBriefStringExist(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.scaleformMovieMethodAddParamLatestBriefString = function (value) {
    let $res = natives.scaleformMovieMethodAddParamLatestBriefString(value);
};
mp.game2.graphics.requestScaleformScriptHudMovie = function (hudComponent) {
    let $res = natives.requestScaleformScriptHudMovie(hudComponent);
};
mp.game2.graphics.requestHudScaleform = function (hudComponent) {
    let $res = natives.requestScaleformScriptHudMovie(hudComponent);
};
mp.game2.graphics.hasScaleformScriptHudMovieLoaded = function (hudComponent) {
    let $res = natives.hasScaleformScriptHudMovieLoaded(hudComponent);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.hasHudScaleformLoaded = function (hudComponent) {
    let $res = natives.hasScaleformScriptHudMovieLoaded(hudComponent);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.removeScaleformScriptHudMovie = function (hudComponent) {
    let $res = natives.removeScaleformScriptHudMovie(hudComponent);
};
mp.game2.graphics.setTvChannel = function (channel) {
    let $res = natives.setTvChannel(channel);
};
mp.game2.graphics.getTvChannel = function () {
    let $res = natives.getTvChannel();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.setTvVolume = function (volume) {
    let $res = natives.setTvVolume(volume);
};
mp.game2.graphics.getTvVolume = function () {
    let $res = natives.getTvVolume();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.drawTvChannel = function (xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha) {
    let $res = natives.drawTvChannel(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
};
mp.game2.graphics.setTvChannelPlaylist = function (tvChannel, playlistName, restart) {
    let $res = natives.setTvChannelPlaylist(tvChannel, playlistName, restart | 0);
};
mp.game2.graphics.setTvChannelPlaylistAtHour = function (tvChannel, playlistName, hour) {
    let $res = natives.setTvChannelPlaylistAtHour(tvChannel, playlistName, hour);
};
mp.game2.graphics.clearTvChannelPlaylist = function (tvChannel) {
    let $res = natives.clearTvChannelPlaylist(tvChannel);
};
mp.game2.graphics.isPlaylistUnk = function (tvChannel, p1) {
    let $res = natives.isPlaylistOnChannel(tvChannel, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.isTvPlaylistItemPlaying = function (videoCliphash) {
    let $res = natives.isTvshowCurrentlyPlaying(videoCliphash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.loadTvChannel = function (videoCliphash) {
    let $res = natives.isTvshowCurrentlyPlaying(videoCliphash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.enableMovieKeyframeWait = function (toggle) {
    let $res = natives.enableMovieKeyframeWait(toggle | 0);
};
mp.game2.graphics.enableMovieSubtitles = function (toggle) {
    let $res = natives.enableMovieSubtitles(toggle | 0);
};
mp.game2.graphics.ui3DsceneIsAvailable = function () {
    let $res = natives.ui3dsceneIsAvailable();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.ui3DscenePushPreset = function (presetName) {
    let $res = natives.ui3dscenePushPreset(presetName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.terraingridActivate = function (toggle) {
    let $res = natives.terraingridActivate(toggle | 0);
};
mp.game2.graphics.terraingridSetParams = function (x, y, z, p3, rotation, p5, width, height, p8, scale, glowIntensity, normalHeight, heightDiff) {
    let $res = natives.terraingridSetParams(x, y, z, p3, rotation, p5, width, height, p8, scale, glowIntensity, normalHeight, heightDiff);
};
mp.game2.graphics.terraingridSetColours = function (lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha) {
    let $res = natives.terraingridSetColours(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha);
};
mp.game2.graphics.animpostfxPlay = function (effectName, duration, looped) {
    let $res = natives.animpostfxPlay(effectName, duration, looped | 0);
};
mp.game2.graphics.startScreenEffect = function (effectName, duration, looped) {
    let $res = natives.animpostfxPlay(effectName, duration, looped | 0);
};
mp.game2.graphics.animpostfxStop = function (effectName) {
    let $res = natives.animpostfxStop(effectName);
};
mp.game2.graphics.stopScreenEffect = function (effectName) {
    let $res = natives.animpostfxStop(effectName);
};
mp.game2.graphics.animpostfxGetUnk = function (effectName) {
    let $res = natives.animpostfxGetCurrentTime(effectName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.animpostfxIsRunning = function (effectName) {
    let $res = natives.animpostfxIsRunning(effectName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.getScreenEffectIsActive = function (effectName) {
    let $res = natives.animpostfxIsRunning(effectName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.animpostfxStopAll = function () {
    let $res = natives.animpostfxStopAll();
};
mp.game2.graphics.stopAllScreenEffects = function () {
    let $res = natives.animpostfxStopAll();
};
mp.game2.graphics.animpostfxStopAndDoUnk = function (effectName) {
    let $res = natives.animpostfxStopAndFlushRequests(effectName);
};
if (!mp.game2.graphics) mp.game2.graphics = {};
if (!mp.game2.graphics.unk) mp.game2.graphics.unk = {};
mp.game2.graphics.unk._0xC5C8F970D4EDFF71 = function (p0) {
    let $res = natives.setDepthwriting(p0);
};
mp.game2.graphics.unk._0x7FA5D82B8F58EC06 = function () {
    let $res = natives.beginCreateMissionCreatorPhotoPreview();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x5B0316762AFD4A64 = function () {
    let $res = natives.getStatusOfCreateMissionCreatorPhotoPreview();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x346EF3ECAAAB149E = function () {
    let $res = natives.freeMemoryForMissionCreatorPhotoPreview();
};
mp.game2.graphics.unk._0x1BBC135A4D25EDDE = function (p0) {
    let $res = natives.setTakenPhotoIsMugshot(p0 | 0);
};
mp.game2.graphics.unk._0xF3F776ADA161E47D = function (p0, p1) {
    let $res = natives.setArenaThemeAndVariationForTakenPhoto(p0, p1);
};
mp.game2.graphics.unk._0xADD6627C4D325458 = function (p0) {
    let $res = natives.setOnIslandXForTakenPhoto(p0);
};
mp.game2.graphics.unk._0x759650634F07B6B4 = function (p0) {
    let $res = natives.beginCreateLowQualityCopyOfPhoto(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.unk._0xCB82A0BF0E3E3265 = function (p0) {
    let $res = natives.getStatusOfCreateLowQualityCopyOfPhoto(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x2A893980E96B659A = function (p0) {
    let $res = natives.queueOperationToCreateSortedListOfPhotos(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x4AF92ACD3141D96C = function () {
    let $res = natives.clearStatusOfSortedListOperation();
};
mp.game2.graphics.unk._0xE791DF1F73ED2C8B = function (p0) {
    let $res = natives.doesThisPhotoSlotContainAValidPhoto(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0xEC72C258667BE5EA = function (p0) {
    let $res = natives.loadHighQualityPhoto(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x9641588DAB93B4B5 = function (p0) {
    let $res = natives.setLightOverrideMaxIntensityScale(p0);
};
mp.game2.graphics.unk._0x393BD2275CEB7793 = function () {
    let $res = natives.getLightOverrideMaxIntensityScale();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0xF51D36185993515D = function (checkpoint, posX, posY, posZ, unkX, unkY, unkZ) {
    let $res = natives.setCheckpointClipplaneWithPosNorm(checkpoint, posX, posY, posZ, unkX, unkY, unkZ);
};
mp.game2.graphics.unk._0xFCF6788FC4860CD4 = function (checkpoint) {
    let $res = natives.setCheckpointForceOldArrowPointing(checkpoint);
};
mp.game2.graphics.unk._0x615D3925E87A3B26 = function (checkpoint) {
    let $res = natives.setCheckpointDecalRotAlignedToCameraRot(checkpoint);
};
mp.game2.graphics.unk._0xDB1EA9411C8911EC = function (checkpoint) {
    let $res = natives.setCheckpointForceDirection(checkpoint);
};
mp.game2.graphics.unk._0x3C788E7F6438754D = function (checkpoint, posX, posY, posZ) {
    let $res = natives.setCheckpointDirection(checkpoint, posX, posY, posZ);
};
mp.game2.graphics.unk._0x2D3B147AFAD49DE0 = function (textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11) {
    let $res = natives.drawSpriteArx(textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11, 0);
};
mp.game2.graphics.unk._0xB2EBE8CBC58B90E9 = function () {
    let $res = natives.getScreenAspectRatio();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0xEFABC7722293DA7C = function () {
    let $res = natives.adjustNextPosSizeAsNormalized169();
};
mp.game2.graphics.unk._0xEF398BEEE4EF45F9 = function (p0) {
    let $res = natives.setExposuretweak(p0 | 0);
};
mp.game2.graphics.unk._0x814AF7DCAACC597B = function (p0) {
    let $res = natives.forceExposureReadback(p0);
};
mp.game2.graphics.unk._0x43FA7CBE20DAB219 = function (p0) {
    let $res = natives.overrideNightvisionLightRange(p0);
};
mp.game2.graphics.unk._0xE2892E7E55D7073A = function (p0) {
    let $res = natives.setDistanceBlurStrengthOverride(p0);
};
mp.game2.graphics.unk._0xC35A6D07C93802B2 = function () {
    let $res = natives.disableHdtexThisFrame();
};
mp.game2.graphics.unk._0xBE197EAA669238F4 = function (p0, p1, p2, p3) {
    let $res = natives.setGrassCullSphere(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x61F95E5BB3E0A8C6 = function (p0) {
    let $res = natives.removeGrassCullSphere(p0);
};
mp.game2.graphics.unk._0xAE51BC858F32BA66 = function (p0, p1, p2, p3, p4) {
    let $res = natives.procgrassEnableCullsphere(p0, p1, p2, p3, p4);
};
mp.game2.graphics.unk._0x649C97D52332341A = function (p0) {
    let $res = natives.procgrassDisableCullsphere(p0);
};
mp.game2.graphics.unk._0x2C42340F916C5930 = function (p0) {
    let $res = natives.procgrassIsCullsphereEnabled(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x14FC5833464340A8 = function () {
    let $res = natives.procgrassEnableAmbscalescan();
};
mp.game2.graphics.unk._0x0218BA067D249DEA = function () {
    let $res = natives.procgrassDisableAmbscalescan();
};
mp.game2.graphics.unk._0x1612C45F9E3E0D44 = function () {
    let $res = natives.disableProcobjCreation();
};
mp.game2.graphics.unk._0x5DEBD9C4DC995692 = function () {
    let $res = natives.enableProcobjCreation();
};
mp.game2.graphics.unk._0xAAE9BE70EC7C69AB = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.grassbatchEnableFlatteningExtInSphere(p0, p1, p2, p3, p4, p5, p6, p7);
};
mp.game2.graphics.unk._0x36F6626459D91457 = function (p0) {
    let $res = natives.cascadeShadowsSetSplitZExpWeight(p0);
};
mp.game2.graphics.unk._0x259BA6D4E6F808F1 = function (p0) {
    let $res = natives.cascadeShadowsSetBoundPosition(p0);
};
mp.game2.graphics.unk._0x25FC3E33A31AD0C9 = function (p0) {
    let $res = natives.cascadeShadowsSetScreenSizeCheckEnabled(p0 | 0);
};
mp.game2.graphics.unk._0x0AE73D8DF3A762B2 = function (p0) {
    let $res = natives.cascadeShadowsEnableFreezer(p0 | 0);
};
mp.game2.graphics.unk._0xCA465D9CC0D231BA = function (p0) {
    let $res = natives.waterReflectionSetScriptObjectVisibility(p0);
};
mp.game2.graphics.unk._0xC0416B061F2B7E5E = function (p0) {
    let $res = natives.golfTrailSetFixedControlPointEnable(p0 | 0);
};
mp.game2.graphics.unk._0xB3C641F3630BF6DA = function (p0) {
    let $res = natives.setMotionblurMaxVelScaler(p0);
};
mp.game2.graphics.unk._0xE59343E9E96529E7 = function () {
    let $res = natives.getMotionblurMaxVelScaler();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x6A51F78772175A51 = function (toggle) {
    let $res = natives.setForceMotionblur(toggle | 0);
};
mp.game2.graphics.unk._0xE3E2C1B4C59DBC77 = function (unk) {
    let $res = natives.resetAdaptation(unk);
};
mp.game2.graphics.unk._0x851CD923176EBA7C = function () {
    let $res = natives.grabPausemenuOwnership();
};
mp.game2.graphics.unk._0xB569F41F3E7E83A4 = function (p0) {
    let $res = natives.setLockAdaptiveDofDistance(p0);
};
mp.game2.graphics.unk._0x7AC24EAB6D74118D = function (p0) {
    let $res = natives.phonephotoeditorToggle(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.unk._0xBCEDB009461DA156 = function () {
    let $res = natives.phonephotoeditorIsActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x27FEB5254759CDE3 = function (textureDict, p1) {
    let $res = natives.phonephotoeditorSetFrameTxd(textureDict, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.unk._0x8CDE909A0370BB3A = function (toggle) {
    let $res = natives.setParticleFxForceVehicleInterior(toggle | 0);
};
mp.game2.graphics.unk._0xBA0127DA25FD54C9 = function (p0, p1) {
    let $res = natives.forceParticleFxInVehicleInterior(p0, p1);
};
mp.game2.graphics.unk._0x2A251AA48B2B46DB = function () {
    let $res = natives.clearParticleFxShootoutBoat();
};
mp.game2.graphics.unk._0x908311265D42A820 = function (p0) {
    let $res = natives.setParticleFxBloodScale(p0);
};
mp.game2.graphics.unk._0xCFD16F0DB5A3535C = function (toggle) {
    let $res = natives.disableInWaterPtfx(toggle | 0);
};
mp.game2.graphics.unk._0x5F6DF3D92271E8A1 = function (toggle) {
    let $res = natives.disableDownwashPtfx(toggle | 0);
};
mp.game2.graphics.unk._0x2B40A97646381508 = function (p0) {
    let $res = natives.setParticleFxSlipstreamLodrangeScale(p0);
};
mp.game2.graphics.unk._0xBB90E12CAC1DAB25 = function (p0) {
    let $res = natives.setParticleFxBulletImpactLodrangeScale(p0);
};
mp.game2.graphics.unk._0xCA4AE345A153D573 = function (p0) {
    let $res = natives.setParticleFxBulletTraceNoAngleReject(p0 | 0);
};
mp.game2.graphics.unk._0x54E22EA2C1956A8D = function (p0) {
    let $res = natives.setParticleFxBangScrapeLodrangeScale(p0);
};
mp.game2.graphics.unk._0x949F397A288B28B3 = function (p0) {
    let $res = natives.setParticleFxFootLodrangeScale(p0);
};
mp.game2.graphics.unk._0xBA3D194057C79A7B = function (p0) {
    let $res = natives.setParticleFxFootOverrideName(p0);
};
mp.game2.graphics.unk._0x5DBF05DB5926D089 = function (p0) {
    let $res = natives.setSkidmarkRangeScale(p0);
};
mp.game2.graphics.unk._0x9B079E5221D984D3 = function (p0) {
    let $res = natives.forcePostfxBulletImpactsAfterHud(p0 | 0);
};
mp.game2.graphics.unk._0xA46B73FAA3460AE1 = function (p0) {
    let $res = natives.setWeatherPtfxUseOverrideSettings(p0 | 0);
};
mp.game2.graphics.unk._0xF78B803082D4386F = function (p0) {
    let $res = natives.setWeatherPtfxOverrideCurrLevel(p0);
};
mp.game2.graphics.unk._0xD9454B5752C857DC = function () {
    let $res = natives.setDisablePetrolDecalsIgnitingThisFrame();
};
mp.game2.graphics.unk._0x27CFB1B1E078CB2D = function () {
    let $res = natives.setDisablePetrolDecalsRecyclingThisFrame();
};
mp.game2.graphics.unk._0x82ACC484FFA3B05F = function (p0) {
    let $res = natives.abortVehicleCrewEmblemRequest(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[1];
};
mp.game2.graphics.unk._0x0E4299C549F0D1F1 = function (toggle) {
    let $res = natives.disableCompositeShotgunDecals(toggle | 0);
};
mp.game2.graphics.unk._0x02369D5C8A51FDCF = function (toggle) {
    let $res = natives.disableScuffDecals(toggle | 0);
};
mp.game2.graphics.unk._0x46D1A61A21F566FC = function (p0) {
    let $res = natives.setDecalBulletImpactRangeScale(p0);
};
mp.game2.graphics.unk._0x03300B57FCAC6DDB = function (p0) {
    let $res = natives.renderShadowedLightsWithNoShadows(p0 | 0);
};
mp.game2.graphics.unk._0x98EDF76A7271E4F2 = function () {
    let $res = natives.requestEarlyLightCheck();
};
mp.game2.graphics.unk._0x1CBA05AE7BD7EE05 = function (p0) {
    let $res = natives.setTransitionOutOfTimecycleModifier(p0);
};
mp.game2.graphics.unk._0x98D18905BF723B99 = function () {
    let $res = natives.getIsTimecycleTransitioningOut();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x2FCB133CA50A49EB = function (val) {
    let $res = natives.isActiveScaleformMovieDeleting(val);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.unk._0x86255B1FC929E33E = function (val) {
    let $res = natives.isScaleformMovieDeleting(val);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.unk._0x32F34FF7F617643B = function (p0, p1) {
    let $res = natives.setScaleformMovieToUseLargeRt(p0, p1);
};
mp.game2.graphics.unk._0xD1C7CB175E012964 = function (scaleformHandle) {
    let $res = natives.passKeyboardInputToScaleform(scaleformHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.unk._0xD1C55B110E4DF534 = function (p0) {
    let $res = natives.setTvPlayerWatchingThisFrame(p0);
};
mp.game2.graphics.unk._0x30432A0118736E00 = function () {
    let $res = natives.getCurrentTvClipNamehash();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.graphics.unk._0x98C4FE6EC34154CA = function (presetName, ped, p2, posX, posY, posZ) {
    let $res = natives.ui3dsceneAssignPedToSlot(presetName, ped, p2, posX, posY, posZ);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.graphics.unk._0x7A42B2E236E71415 = function () {
    let $res = natives.ui3dsceneClearPatchedData();
};
mp.game2.graphics.unk._0x108BE26959A9D9BB = function (toggle) {
    let $res = natives.ui3dsceneMakePushedPresetPersistent(toggle | 0);
};
mp.Blip.prototype.setBlipRoute = function (enabled) {
    let $res = natives.setBlipRoute(this.handle, enabled | 0);
};
mp.Blip.prototype.setBlipRouteColour = function (colour) {
    let $res = natives.setBlipRouteColour(this.handle, colour);
};
mp.Blip.prototype.getBlipInfoIdCoord = function () {
    let $res = natives.getBlipInfoIdCoord(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Blip.prototype.getBlipInfoIdDisplay = function () {
    let $res = natives.getBlipInfoIdDisplay(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.getBlipInfoIdType = function () {
    let $res = natives.getBlipInfoIdType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.getBlipInfoIdEntityIndex = function () {
    let $res = natives.getBlipInfoIdEntityIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.getBlipInfoIdPickupIndex = function () {
    let $res = natives.getBlipInfoIdPickupIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.getBlipFromEntity = function () {
    let $res = natives.getBlipFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.addBlipForEntity = function () {
    let $res = natives.addBlipForEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.addBlipForEntity = function () {
    let $res = natives.addBlipForEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.addBlipForEntity = function () {
    let $res = natives.addBlipForEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.addBlipForEntity = function () {
    let $res = natives.addBlipForEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.setBlipCoords = function (posX, posY, posZ) {
    let $res = natives.setBlipCoords(this.handle, posX, posY, posZ);
};
mp.Blip.prototype.getBlipCoords = function () {
    let $res = natives.getBlipCoords(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Blip.prototype.setBlipSprite = function (spriteId) {
    let $res = natives.setBlipSprite(this.handle, spriteId);
};
mp.Blip.prototype.getBlipSprite = function () {
    let $res = natives.getBlipSprite(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.setBlipNameFromTextFile = function (gxtEntry) {
    let $res = natives.setBlipNameFromTextFile(this.handle, gxtEntry);
};
mp.Blip.prototype.setBlipNameToPlayerName = function (player) {
    let $res = natives.setBlipNameToPlayerName(this.handle, player);
};
mp.Blip.prototype.setBlipAlpha = function (alpha) {
    let $res = natives.setBlipAlpha(this.handle, alpha);
};
mp.Blip.prototype.getBlipAlpha = function () {
    let $res = natives.getBlipAlpha(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.setBlipFade = function (opacity, duration) {
    let $res = natives.setBlipFade(this.handle, opacity, duration);
};
mp.Blip.prototype.getBlipFadeStatus = function () {
    let $res = natives.getBlipFadeDirection(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.setBlipRotation = function (rotation) {
    let $res = natives.setBlipRotation(this.handle, rotation);
};
mp.Blip.prototype.setBlipSquaredRotation = function (heading) {
    let $res = natives.setBlipRotationWithFloat(this.handle, heading);
};
mp.Blip.prototype.getBlipRotation = function () {
    let $res = natives.getBlipRotation(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.setBlipFlashTimer = function (duration) {
    let $res = natives.setBlipFlashTimer(this.handle, duration);
};
mp.Blip.prototype.setBlipFlashInterval = function (p1) {
    let $res = natives.setBlipFlashInterval(this.handle, p1);
};
mp.Blip.prototype.setBlipColour = function (color) {
    let $res = natives.setBlipColour(this.handle, color);
};
mp.Blip.prototype.setBlipSecondaryColour = function (r, g, b) {
    let $res = natives.setBlipSecondaryColour(this.handle, r, g, b);
};
mp.Blip.prototype.getBlipColour = function () {
    let $res = natives.getBlipColour(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.getBlipColour = function () {
    let $res = natives.getBlipHudColour(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.isBlipShortRange = function () {
    let $res = natives.isBlipShortRange(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.isBlipOnMinimap = function () {
    let $res = natives.isBlipOnMinimap(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.doesBlipHaveGpsRoute = function () {
    let $res = natives.doesBlipHaveGpsRoute(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.setBlipHiddenOnLegend = function (toggle) {
    let $res = natives.setBlipHiddenOnLegend(this.handle, toggle | 0);
};
mp.Blip.prototype.setBlipHighDetail = function (toggle) {
    let $res = natives.setBlipHighDetail(this.handle, toggle | 0);
};
mp.Blip.prototype.setBlipAsMissionCreatorBlip = function (toggle) {
    let $res = natives.setBlipAsMissionCreatorBlip(this.handle, toggle | 0);
};
mp.Blip.prototype.setBlipFlashes = function (toggle) {
    let $res = natives.setBlipFlashes(this.handle, toggle | 0);
};
mp.Blip.prototype.setBlipFlashesAlternate = function (toggle) {
    let $res = natives.setBlipFlashesAlternate(this.handle, toggle | 0);
};
mp.Blip.prototype.isBlipFlashing = function () {
    let $res = natives.isBlipFlashing(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.setBlipAsShortRange = function (toggle) {
    let $res = natives.setBlipAsShortRange(this.handle, toggle | 0);
};
mp.Blip.prototype.setBlipScale = function (scale) {
    let $res = natives.setBlipScale(this.handle, scale);
};
mp.Blip.prototype.setBlipScaleTransformation = function (xScale, yScale) {
    let $res = natives.setBlipScale2d(this.handle, xScale, yScale);
};
mp.Blip.prototype.setBlipPriority = function (priority) {
    let $res = natives.setBlipPriority(this.handle, priority);
};
mp.Blip.prototype.setBlipDisplay = function (displayId) {
    let $res = natives.setBlipDisplay(this.handle, displayId);
};
mp.Blip.prototype.setBlipCategory = function (index) {
    let $res = natives.setBlipCategory(this.handle, index);
};
mp.Blip.prototype.setBlipAsFriendly = function (toggle) {
    let $res = natives.setBlipAsFriendly(this.handle, toggle | 0);
};
mp.Blip.prototype.setBlipDisplayIndicatorOnBlip = function (toggle) {
    let $res = natives.setBlipExtendedHeightThreshold(this.handle, toggle | 0);
};
mp.Blip.prototype.setBlipAsMinimalOnEdge = function (toggle) {
    let $res = natives.setBlipAsMinimalOnEdge(this.handle, toggle | 0);
};
mp.Blip.prototype.doesBlipExist = function () {
    let $res = natives.doesBlipExist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.setBlipBright = function (toggle) {
    let $res = natives.setBlipBright(this.handle, toggle | 0);
};
mp.Blip.prototype.setBlipShowCone = function (toggle, p2) {
    let $res = natives.setBlipShowCone(this.handle, toggle | 0, p2 | 0);
};
mp.Blip.prototype.setBigmapActive = function (showFullMap) {
    let $res = natives.setBigmapActive(this.handle, showFullMap | 0);
};
mp.Player.prototype.createFakeMpGamerTag = function (username, pointedClanTag, isRockstarClan, clanTag, clanFlag) {
    let $res = natives.createFakeMpGamerTag(this.handle, username, pointedClanTag | 0, isRockstarClan | 0, clanTag, clanFlag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.createFakeMpGamerTag = function (username, pointedClanTag, isRockstarClan, clanTag, clanFlag) {
    let $res = natives.createFakeMpGamerTag(this.handle, username, pointedClanTag | 0, isRockstarClan | 0, clanTag, clanFlag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.givePedToPauseMenu = function (p1) {
    let $res = natives.givePedToPauseMenu(this.handle, p1);
};
mp.Ped.prototype.givePedToPauseMenu = function (p1) {
    let $res = natives.givePedToPauseMenu(this.handle, p1);
};
mp.Player.prototype.setPedHasAiBlip = function (hasCone) {
    let $res = natives.setPedHasAiBlip(this.handle, hasCone | 0);
};
mp.Ped.prototype.setPedHasAiBlip = function (hasCone) {
    let $res = natives.setPedHasAiBlip(this.handle, hasCone | 0);
};
mp.Player.prototype.setPedHasAiBlipWithColor = function (hasCone, color) {
    let $res = natives.setPedHasAiBlipWithColour(this.handle, hasCone | 0, color);
};
mp.Ped.prototype.setPedHasAiBlipWithColor = function (hasCone, color) {
    let $res = natives.setPedHasAiBlipWithColour(this.handle, hasCone | 0, color);
};
mp.Player.prototype.doesPedHaveAiBlip = function () {
    let $res = natives.doesPedHaveAiBlip(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.doesPedHaveAiBlip = function () {
    let $res = natives.doesPedHaveAiBlip(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setPedAiBlipGangId = function (gangId) {
    let $res = natives.setPedAiBlipGangId(this.handle, gangId);
};
mp.Ped.prototype.setPedAiBlipGangId = function (gangId) {
    let $res = natives.setPedAiBlipGangId(this.handle, gangId);
};
mp.Player.prototype.setPedAiBlipHasCone = function (toggle) {
    let $res = natives.setPedAiBlipHasCone(this.handle, toggle | 0);
};
mp.Ped.prototype.setPedAiBlipHasCone = function (toggle) {
    let $res = natives.setPedAiBlipHasCone(this.handle, toggle | 0);
};
mp.Player.prototype.setPedAiBlipForcedOn = function (toggle) {
    let $res = natives.setPedAiBlipForcedOn(this.handle, toggle | 0);
};
mp.Ped.prototype.setPedAiBlipForcedOn = function (toggle) {
    let $res = natives.setPedAiBlipForcedOn(this.handle, toggle | 0);
};
mp.Player.prototype.setPedAiBlipNoticeRange = function (range) {
    let $res = natives.setPedAiBlipNoticeRange(this.handle, range);
};
mp.Ped.prototype.setPedAiBlipNoticeRange = function (range) {
    let $res = natives.setPedAiBlipNoticeRange(this.handle, range);
};
mp.Player.prototype.setPedAiBlipSprite = function (spriteId) {
    let $res = natives.setPedAiBlipSprite(this.handle, spriteId);
};
mp.Ped.prototype.setPedAiBlipSprite = function (spriteId) {
    let $res = natives.setPedAiBlipSprite(this.handle, spriteId);
};
mp.Player.prototype.getAiBlip2 = function () {
    let $res = natives.getAiPedPedBlipIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAiBlip2 = function () {
    let $res = natives.getAiPedPedBlipIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getAiBlip = function () {
    let $res = natives.getAiPedVehicleBlipIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAiBlip = function () {
    let $res = natives.getAiPedVehicleBlipIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
if (!mp.game2.hud) mp.game2.hud = {};
mp.game2.hud.beginTextCommandBusyspinnerOn = function (string) {
    let $res = natives.beginTextCommandBusyspinnerOn(string);
};
mp.game2.hud.setLoadingPromptTextEntry = function (string) {
    let $res = natives.beginTextCommandBusyspinnerOn(string);
};
mp.game2.hud.endTextCommandBusyspinnerOn = function (busySpinnerType) {
    let $res = natives.endTextCommandBusyspinnerOn(busySpinnerType);
};
mp.game2.hud.showLoadingPrompt = function (busySpinnerType) {
    let $res = natives.endTextCommandBusyspinnerOn(busySpinnerType);
};
mp.game2.hud.busyspinnerOff = function () {
    let $res = natives.busyspinnerOff();
};
mp.game2.hud.preloadBusyspinner = function () {
    let $res = natives.preloadBusyspinner();
};
mp.game2.hud.busyspinnerIsOn = function () {
    let $res = natives.busyspinnerIsOn();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.busyspinnerIsDisplaying = function () {
    let $res = natives.busyspinnerIsDisplaying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setMouseCursorActiveThisFrame = function () {
    let $res = natives.setMouseCursorThisFrame();
};
mp.game2.hud.setMouseCursorSprite = function (spriteId) {
    let $res = natives.setMouseCursorStyle(spriteId);
};
mp.game2.hud.setCursorSprite = function (spriteId) {
    let $res = natives.setMouseCursorStyle(spriteId);
};
mp.game2.hud.setMouseCursorVisibleInMenus = function (toggle) {
    let $res = natives.setMouseCursorVisible(toggle | 0);
};
mp.game2.hud.thefeedOnlyShowTooltips = function (toggle) {
    let $res = natives.thefeedOnlyShowTooltips(toggle | 0);
};
mp.game2.hud.thefeedSetScriptedMenuHeight = function (pos) {
    let $res = natives.thefeedSetScriptedMenuHeight(pos);
};
mp.game2.hud.thefeedDisableLoadingScreenTips = function () {
    let $res = natives.thefeedHide();
};
mp.game2.hud.thefeedHideThisFrame = function () {
    let $res = natives.thefeedHideThisFrame();
};
mp.game2.hud.thefeedDisplayLoadingScreenTips = function () {
    let $res = natives.thefeedShow();
};
mp.game2.hud.thefeedFlushQueue = function () {
    let $res = natives.thefeedFlushQueue();
};
mp.game2.hud.thefeedRemoveItem = function (notificationId) {
    let $res = natives.thefeedRemoveItem(notificationId);
};
mp.game2.hud.removeNotification = function (notificationId) {
    let $res = natives.thefeedRemoveItem(notificationId);
};
mp.game2.hud.thefeedForceRenderOn = function () {
    let $res = natives.thefeedForceRenderOn();
};
mp.game2.hud.thefeedForceRenderOff = function () {
    let $res = natives.thefeedForceRenderOff();
};
mp.game2.hud.thefeedPause = function () {
    let $res = natives.thefeedPause();
};
mp.game2.hud.thefeedResume = function () {
    let $res = natives.thefeedResume();
};
mp.game2.hud.thefeedIsPaused = function () {
    let $res = natives.thefeedIsPaused();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.thefeedSpsExtendWidescreenOn = function () {
    let $res = natives.thefeedReportLogoOn();
};
mp.game2.hud.thefeedSpsExtendWidescreenOff = function () {
    let $res = natives.thefeedReportLogoOff();
};
mp.game2.hud.thefeedGetFirstVisibleDeleteRemaining = function () {
    let $res = natives.thefeedGetLastShownPhoneActivatableFeedId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.thefeedCommentTeleportPoolOn = function () {
    let $res = natives.thefeedAutoPostGametipsOn();
};
mp.game2.hud.thefeedCommentTeleportPoolOff = function () {
    let $res = natives.thefeedAutoPostGametipsOff();
};
mp.game2.hud.thefeedSetNextPostBackgroundColor = function (hudColorIndex) {
    let $res = natives.thefeedSetBackgroundColorForNextPost(hudColorIndex);
};
mp.game2.hud.thefeedSetAnimpostfxColor = function (red, green, blue, alpha) {
    let $res = natives.thefeedSetRgbaParameterForNextMessage(red, green, blue, alpha);
};
mp.game2.hud.setNotificationFlashColor = function (red, green, blue, alpha) {
    let $res = natives.thefeedSetRgbaParameterForNextMessage(red, green, blue, alpha);
};
mp.game2.hud.thefeedSetAnimpostfxCount = function (count) {
    let $res = natives.thefeedSetFlashDurationParameterForNextMessage(count);
};
mp.game2.hud.thefeedSetAnimpostfxSound = function (toggle) {
    let $res = natives.thefeedSetVibrateParameterForNextMessage(toggle | 0);
};
mp.game2.hud.thefeedResetAllParameters = function () {
    let $res = natives.thefeedResetAllParameters();
};
mp.game2.hud.thefeedFreezeNextPost = function () {
    let $res = natives.thefeedFreezeNextPost();
};
mp.game2.hud.thefeedClearFrozenPost = function () {
    let $res = natives.thefeedClearFrozenPost();
};
mp.game2.hud.thefeedSetFlushAnimpostfx = function (p0) {
    let $res = natives.thefeedSetSnapFeedItemPositions(p0 | 0);
};
mp.game2.hud.thefeedAddTxdRef = function () {
    let $res = natives.thefeedUpdateItemTexture(null, null, null, null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    return $resObj;
};
mp.game2.hud.beginTextCommandThefeedPost = function (text) {
    let $res = natives.beginTextCommandThefeedPost(text);
};
mp.game2.hud.setNotificationTextEntry = function (text) {
    let $res = natives.beginTextCommandThefeedPost(text);
};
mp.game2.hud.endTextCommandThefeedPostStats = function (statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName) {
    let $res = natives.endTextCommandThefeedPostStats(statTitle, iconEnum, stepVal | 0, barValue, isImportant | 0, pictureTextureDict, pictureTextureName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostMessagetext = function (txdName, textureName, flash, iconType, sender, subject) {
    let $res = natives.endTextCommandThefeedPostMessagetext(txdName, textureName, flash | 0, iconType, sender, subject);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setNotificationMessage = function (txdName, textureName, flash, iconType, sender, subject) {
    let $res = natives.endTextCommandThefeedPostMessagetext(txdName, textureName, flash | 0, iconType, sender, subject);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostMessagetextGxtEntry = function (txdName, textureName, flash, iconType, sender, subject) {
    let $res = natives.endTextCommandThefeedPostMessagetextSubtitleLabel(txdName, textureName, flash | 0, iconType, sender, subject);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostMessagetextTu = function (txdName, textureName, flash, iconType, sender, subject, duration) {
    let $res = natives.endTextCommandThefeedPostMessagetextTu(txdName, textureName, flash | 0, iconType, sender, subject, duration);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostMessagetextWithCrewTag = function (txdName, textureName, flash, iconType, sender, subject, duration, clanTag) {
    let $res = natives.endTextCommandThefeedPostMessagetextWithCrewTag(txdName, textureName, flash | 0, iconType, sender, subject, duration, clanTag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setNotificationMessageClanTag = function (txdName, textureName, flash, iconType, sender, subject, duration, clanTag) {
    let $res = natives.endTextCommandThefeedPostMessagetextWithCrewTag(txdName, textureName, flash | 0, iconType, sender, subject, duration, clanTag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon = function (txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9) {
    let $res = natives.endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName, textureName, flash | 0, iconType1, sender, subject, duration, clanTag, iconType2, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setNotificationMessageClanTag2 = function (txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9) {
    let $res = natives.endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName, textureName, flash | 0, iconType1, sender, subject, duration, clanTag, iconType2, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostTicker = function (blink, p1) {
    let $res = natives.endTextCommandThefeedPostTicker(blink | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.drawNotification = function (blink, p1) {
    let $res = natives.endTextCommandThefeedPostTicker(blink | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostTickerForced = function (blink, p1) {
    let $res = natives.endTextCommandThefeedPostTickerForced(blink | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.drawNotification2 = function (blink, p1) {
    let $res = natives.endTextCommandThefeedPostTickerForced(blink | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostTickerWithTokens = function (blink, p1) {
    let $res = natives.endTextCommandThefeedPostTickerWithTokens(blink | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.drawNotification3 = function (blink, p1) {
    let $res = natives.endTextCommandThefeedPostTickerWithTokens(blink | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostAward = function (textureDict, textureName, rpBonus, colorOverlay, titleLabel) {
    let $res = natives.endTextCommandThefeedPostAward(textureDict, textureName, rpBonus, colorOverlay, titleLabel);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostCrewtag = function (p0, p1, p3, isLeader, unk0, clanDesc, R, G, B) {
    let $res = natives.endTextCommandThefeedPostCrewtag(p0 | 0, p1 | 0, 0, p3, isLeader | 0, unk0 | 0, clanDesc, R, G, B);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p2 = $res[1];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.hud.endTextCommandThefeedPostCrewtagWithGameName = function (p0, p1, p3, isLeader, unk0, clanDesc, playerName, R, G, B) {
    let $res = natives.endTextCommandThefeedPostCrewtagWithGameName(p0 | 0, p1 | 0, 0, p3, isLeader | 0, unk0 | 0, clanDesc, playerName, R, G, B);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p2 = $res[1];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.hud.endTextCommandThefeedPostUnlock = function (p0, p1, p2) {
    let $res = natives.endTextCommandThefeedPostUnlock(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostUnlockTu = function (p0, p1, p2, p3) {
    let $res = natives.endTextCommandThefeedPostUnlockTu(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostUnlockTuWithColor = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.endTextCommandThefeedPostUnlockTuWithColor(p0, p1, p2, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostMpticker = function (blink, p1) {
    let $res = natives.endTextCommandThefeedPostMpticker(blink | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.drawNotification4 = function (blink, p1) {
    let $res = natives.endTextCommandThefeedPostMpticker(blink | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostCrewRankup = function (p0, p1, p2, p3, p4) {
    let $res = natives.endTextCommandThefeedPostCrewRankupWithLiteralFlag(p0, p1, p2, p3 | 0, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostVersusTu = function (p2, p5, p6, p7) {
    let $res = natives.endTextCommandThefeedPostVersusTu(null, null, p2, null, null, p5, p6, p7);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.p3 = $res[0];
    $resObj.p4 = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.hud.endTextCommandThefeedPostReplayIcon = function (type, image, text) {
    let $res = natives.endTextCommandThefeedPostReplay(type, image, text);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.endTextCommandThefeedPostReplayInput = function (type, button, text) {
    let $res = natives.endTextCommandThefeedPostReplayInput(type, button, text);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.beginTextCommandPrint = function (GxtEntry) {
    let $res = natives.beginTextCommandPrint(GxtEntry);
};
mp.game2.hud.setTextEntry2 = function (GxtEntry) {
    let $res = natives.beginTextCommandPrint(GxtEntry);
};
mp.game2.hud.endTextCommandPrint = function (duration, drawImmediately) {
    let $res = natives.endTextCommandPrint(duration, drawImmediately | 0);
};
mp.game2.hud.drawSubtitleTimed = function (duration, drawImmediately) {
    let $res = natives.endTextCommandPrint(duration, drawImmediately | 0);
};
mp.game2.hud.beginTextCommandIsMessageDisplayed = function (text) {
    let $res = natives.beginTextCommandIsMessageDisplayed(text);
};
mp.game2.hud.endTextCommandIsMessageDisplayed = function () {
    let $res = natives.endTextCommandIsMessageDisplayed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.beginTextCommandDisplayText = function (text) {
    let $res = natives.beginTextCommandDisplayText(text);
};
mp.game2.hud.setTextEntry = function (text) {
    let $res = natives.beginTextCommandDisplayText(text);
};
mp.game2.hud.endTextCommandDisplayText = function (x, y, p2) {
    let $res = natives.endTextCommandDisplayText(x, y, p2 | 0);
};
mp.game2.hud.drawText = function (x, y, p2) {
    let $res = natives.endTextCommandDisplayText(x, y, p2 | 0);
};
mp.game2.hud.beginTextCommandGetWidth = function (text) {
    let $res = natives.beginTextCommandGetScreenWidthOfDisplayText(text);
};
mp.game2.hud.setTextEntryForWidth = function (text) {
    let $res = natives.beginTextCommandGetScreenWidthOfDisplayText(text);
};
mp.game2.hud.endTextCommandGetWidth = function (p0) {
    let $res = natives.endTextCommandGetScreenWidthOfDisplayText(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getTextScreenWidth = function (p0) {
    let $res = natives.endTextCommandGetScreenWidthOfDisplayText(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.beginTextCommandLineCount = function (entry) {
    let $res = natives.beginTextCommandGetNumberOfLinesForString(entry);
};
mp.game2.hud.setTextGxtEntry = function (entry) {
    let $res = natives.beginTextCommandGetNumberOfLinesForString(entry);
};
mp.game2.hud.endTextCommandLineCount = function (x, y) {
    let $res = natives.endTextCommandGetNumberOfLinesForString(x, y);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.beginTextCommandDisplayHelp = function (inputType) {
    let $res = natives.beginTextCommandDisplayHelp(inputType);
};
mp.game2.hud.setTextComponentFormat = function (inputType) {
    let $res = natives.beginTextCommandDisplayHelp(inputType);
};
mp.game2.hud.endTextCommandDisplayHelp = function (p0, loop, beep, shape) {
    let $res = natives.endTextCommandDisplayHelp(p0, loop | 0, beep | 0, shape);
};
mp.game2.hud.displayHelpTextFromStringLabel = function (p0, loop, beep, shape) {
    let $res = natives.endTextCommandDisplayHelp(p0, loop | 0, beep | 0, shape);
};
mp.game2.hud.beginTextCommandIsThisHelpMessageBeingDisplayed = function (labelName) {
    let $res = natives.beginTextCommandIsThisHelpMessageBeingDisplayed(labelName);
};
mp.game2.hud.endTextCommandIsThisHelpMessageBeingDisplayed = function (p0) {
    let $res = natives.endTextCommandIsThisHelpMessageBeingDisplayed(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.beginTextCommandSetBlipName = function (textLabel) {
    let $res = natives.beginTextCommandSetBlipName(textLabel);
};
mp.game2.hud.endTextCommandSetBlipName = function (blip) {
    let $res = natives.endTextCommandSetBlipName(blip);
};
mp.game2.hud.beginTextCommandObjective = function (p0) {
    let $res = natives.beginTextCommandAddDirectlyToPreviousBriefs(p0);
};
mp.game2.hud.endTextCommandObjective = function (p0) {
    let $res = natives.endTextCommandAddDirectlyToPreviousBriefs(p0 | 0);
};
mp.game2.hud.beginTextCommandClearPrint = function (text) {
    let $res = natives.beginTextCommandClearPrint(text);
};
mp.game2.hud.endTextCommandClearPrint = function () {
    let $res = natives.endTextCommandClearPrint();
};
mp.game2.hud.beginTextCommandOverrideButtonText = function (gxtEntry) {
    let $res = natives.beginTextCommandOverrideButtonText(gxtEntry);
};
mp.game2.hud.endTextCommandOverrideButtonText = function (p0) {
    let $res = natives.endTextCommandOverrideButtonText(p0);
};
mp.game2.hud.addTextComponentInteger = function (value) {
    let $res = natives.addTextComponentInteger(value);
};
mp.game2.hud.addTextComponentFloat = function (value, decimalPlaces) {
    let $res = natives.addTextComponentFloat(value, decimalPlaces);
};
mp.game2.hud.addTextComponentSubstringTextLabel = function (labelName) {
    let $res = natives.addTextComponentSubstringTextLabel(labelName);
};
mp.game2.hud.addTextComponentItemString = function (labelName) {
    let $res = natives.addTextComponentSubstringTextLabel(labelName);
};
mp.game2.hud.addTextComponentSubstringTextLabelHashKey = function (gxtEntryHash) {
    let $res = natives.addTextComponentSubstringTextLabelHashKey(gxtEntryHash);
};
mp.game2.hud.addTextComponentSubstringLocalized = function (gxtEntryHash) {
    let $res = natives.addTextComponentSubstringTextLabelHashKey(gxtEntryHash);
};
mp.game2.hud.addTextComponentSubstringBlipName = function (blip) {
    let $res = natives.addTextComponentSubstringBlipName(blip);
};
mp.game2.hud.addTextComponentSubstringPlayerName = function (text) {
    let $res = natives.addTextComponentSubstringPlayerName(text);
};
mp.game2.hud.addTextComponentSubstringTime = function (timestamp, flags) {
    let $res = natives.addTextComponentSubstringTime(timestamp, flags);
};
mp.game2.hud.addTextComponentFormattedInteger = function (value, commaSeparated) {
    let $res = natives.addTextComponentFormattedInteger(value, commaSeparated | 0);
};
mp.game2.hud.addTextComponentSubstringCash = function (value, commaSeparated) {
    let $res = natives.addTextComponentFormattedInteger(value, commaSeparated | 0);
};
mp.game2.hud.addTextComponentSubstringPhoneNumber = function (p0, p1) {
    let $res = natives.addTextComponentSubstringPhoneNumber(p0, p1);
};
mp.game2.hud.addTextComponentSubstringWebsite = function (website) {
    let $res = natives.addTextComponentSubstringWebsite(website);
};
mp.game2.hud.addTextComponentSubstringKeyboardDisplay = function (string) {
    let $res = natives.addTextComponentSubstringKeyboardDisplay(string);
};
mp.game2.hud.setColourOfNextTextComponent = function (hudColor) {
    let $res = natives.setColourOfNextTextComponent(hudColor);
};
mp.game2.hud.getTextSubstring = function (text, position, length) {
    let $res = natives.getCharacterFromAudioConversationFilename(text, position, length);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getTextSubstringSafe = function (text, position, length, maxLength) {
    let $res = natives.getCharacterFromAudioConversationFilenameWithByteLimit(text, position, length, maxLength);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getTextSubstringSlice = function (text, startPosition, endPosition) {
    let $res = natives.getCharacterFromAudioConversationFilenameBytes(text, startPosition, endPosition);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getLabelText = function (labelName) {
    let $res = natives.getFilenameForAudioConversation(labelName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.clearPrints = function () {
    let $res = natives.clearPrints();
};
mp.game2.hud.clearBrief = function () {
    let $res = natives.clearBrief();
};
mp.game2.hud.clearAllHelpMessages = function () {
    let $res = natives.clearAllHelpMessages();
};
mp.game2.hud.clearThisPrint = function (p0) {
    let $res = natives.clearThisPrint(p0);
};
mp.game2.hud.clearSmallPrints = function () {
    let $res = natives.clearSmallPrints();
};
mp.game2.hud.doesTextBlockExist = function (gxt) {
    let $res = natives.doesTextBlockExist(gxt);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.requestAdditionalText = function (gxt, slot) {
    let $res = natives.requestAdditionalText(gxt, slot);
};
mp.game2.hud.requestAdditionalTextForDlc = function (gxt, slot) {
    let $res = natives.requestAdditionalTextForDlc(gxt, slot);
};
mp.game2.hud.requestAdditionalText2 = function (gxt, slot) {
    let $res = natives.requestAdditionalTextForDlc(gxt, slot);
};
mp.game2.hud.hasAdditionalTextLoaded = function (slot) {
    let $res = natives.hasAdditionalTextLoaded(slot);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.clearAdditionalText = function (p0, p1) {
    let $res = natives.clearAdditionalText(p0, p1 | 0);
};
mp.game2.hud.isStreamingAdditionalText = function (p0) {
    let $res = natives.isStreamingAdditionalText(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.hasThisAdditionalTextLoaded = function (gxt, slot) {
    let $res = natives.hasThisAdditionalTextLoaded(gxt, slot);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isMessageBeingDisplayed = function () {
    let $res = natives.isMessageBeingDisplayed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.doesTextLabelExist = function (gxt) {
    let $res = natives.doesTextLabelExist(gxt);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.getLengthOfStringWithThisTextLabel = function (gxt) {
    let $res = natives.getLengthOfStringWithThisTextLabel(gxt);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getLengthOfLiteralString = function (string) {
    let $res = natives.getLengthOfLiteralString(string);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getLengthOfLiteralStringInBytes = function (string) {
    let $res = natives.getLengthOfLiteralStringInBytes(string);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getStreetNameFromHashKey = function (hash) {
    let $res = natives.getStreetNameFromHashKey(hash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.isPreferenceSwitchedOn = function () {
    let $res = natives.isHudPreferenceSwitchedOn();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isRadarPreferenceSwitchedOn = function () {
    let $res = natives.isRadarPreferenceSwitchedOn();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isSubtitlePreferenceSwitchedOn = function () {
    let $res = natives.isSubtitlePreferenceSwitchedOn();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.display = function (toggle) {
    let $res = natives.displayHud(toggle | 0);
};
mp.game2.hud.displayHud = function (toggle) {
    let $res = natives.displayHud(toggle | 0);
};
mp.game2.hud.displayWhenDeadThisFrame = function () {
    let $res = natives.displayHudWhenNotInStateOfPlayThisFrame();
};
mp.game2.hud.displayWhenPausedThisFrame = function () {
    let $res = natives.displayHudWhenPausedThisFrame();
};
mp.game2.hud.displayRadar = function (toggle) {
    let $res = natives.displayRadar(toggle | 0);
};
mp.game2.hud.isHidden = function () {
    let $res = natives.isHudHidden();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isRadarHidden = function () {
    let $res = natives.isRadarHidden();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isMinimapRendering = function () {
    let $res = natives.isMinimapRendering();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setBlipRoute = function (blip, enabled) {
    let $res = natives.setBlipRoute(blip, enabled | 0);
};
mp.game2.hud.clearAllBlipRoutes = function () {
    let $res = natives.clearAllBlipRoutes();
};
mp.game2.hud.setBlipRouteColour = function (blip, colour) {
    let $res = natives.setBlipRouteColour(blip, colour);
};
mp.game2.hud.addNextMessageToPreviousBriefs = function (p0) {
    let $res = natives.addNextMessageToPreviousBriefs(p0 | 0);
};
mp.game2.hud.setRadarZoomPrecise = function (zoom) {
    let $res = natives.setRadarZoomPrecise(zoom);
};
mp.game2.hud.respondingAsTemp = function (zoom) {
    let $res = natives.setRadarZoomPrecise(zoom);
};
mp.game2.hud.setRadarZoom = function (zoomLevel) {
    let $res = natives.setRadarZoom(zoomLevel);
};
mp.game2.hud.setRadarZoomToBlip = function (blip, zoom) {
    let $res = natives.setRadarZoomToBlip(blip, zoom);
};
mp.game2.hud.setRadarZoomToDistance = function (zoom) {
    let $res = natives.setRadarZoomToDistance(zoom);
};
mp.game2.hud.setRadarZoomLevelThisFrame = function (zoom) {
    let $res = natives.setRadarZoomToDistance(zoom);
};
mp.game2.hud.getColour = function (hudColorIndex) {
    let $res = natives.getHudColour(hudColorIndex, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    $resObj.a = $res[4];
    return $resObj;
};
mp.game2.hud.getHudColour = function (hudColorIndex) {
    let $res = natives.getHudColour(hudColorIndex, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    $resObj.a = $res[4];
    return $resObj;
};
mp.game2.hud.setScriptVariableColour = function (r, g, b, a) {
    let $res = natives.setScriptVariableHudColour(r, g, b, a);
};
mp.game2.hud.setScriptVariable2Colour = function (r, g, b, a) {
    let $res = natives.setSecondScriptVariableHudColour(r, g, b, a);
};
mp.game2.hud.replaceColour = function (hudColorIndex, hudColorIndex2) {
    let $res = natives.replaceHudColour(hudColorIndex, hudColorIndex2);
};
mp.game2.hud.replaceColourWithRgba = function (hudColorIndex, r, g, b, a) {
    let $res = natives.replaceHudColourWithRgba(hudColorIndex, r, g, b, a);
};
mp.game2.hud.setHudColour = function (hudColorIndex, r, g, b, a) {
    let $res = natives.replaceHudColourWithRgba(hudColorIndex, r, g, b, a);
};
mp.game2.hud.setAbilityBarVisibilityInMultiplayer = function (visible) {
    let $res = natives.setAbilityBarVisibility(visible | 0);
};
mp.game2.hud.setAllowAbilityBarInMultiplayer = function (toggle) {
    let $res = natives.setAllowAbilityBar(toggle | 0);
};
mp.game2.hud.flashAbilityBar = function (millisecondsToFlash) {
    let $res = natives.flashAbilityBar(millisecondsToFlash);
};
mp.game2.hud.setAbilityBarValue = function (p0, p1) {
    let $res = natives.setAbilityBarValue(p0, p1);
};
mp.game2.hud.flashWantedDisplay = function (p0) {
    let $res = natives.flashWantedDisplay(p0 | 0);
};
mp.game2.hud.getRenderedCharacterHeight = function (size, font) {
    let $res = natives.getRenderedCharacterHeight(size, font);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getTextScaleHeight = function (size, font) {
    let $res = natives.getRenderedCharacterHeight(size, font);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setTextScale = function (scale, size) {
    let $res = natives.setTextScale(scale, size);
};
mp.game2.hud.setTextColour = function (red, green, blue, alpha) {
    let $res = natives.setTextColour(red, green, blue, alpha);
};
mp.game2.hud.setTextCentre = function (align) {
    let $res = natives.setTextCentre(align | 0);
};
mp.game2.hud.setTextRightJustify = function (toggle) {
    let $res = natives.setTextRightJustify(toggle | 0);
};
mp.game2.hud.setTextJustification = function (justifyType) {
    let $res = natives.setTextJustification(justifyType);
};
mp.game2.hud.setTextWrap = function (start, end) {
    let $res = natives.setTextWrap(start, end);
};
mp.game2.hud.setTextLeading = function (p0) {
    let $res = natives.setTextLeading(p0 | 0);
};
mp.game2.hud.setTextProportional = function (p0) {
    let $res = natives.setTextProportional(p0 | 0);
};
mp.game2.hud.setTextFont = function (fontType) {
    let $res = natives.setTextFont(fontType);
};
mp.game2.hud.setTextDropShadow = function () {
    let $res = natives.setTextDropShadow();
};
mp.game2.hud.setTextDropshadow = function (distance, r, g, b, a) {
    let $res = natives.setTextDropshadow(distance, r, g, b, a);
};
mp.game2.hud.setTextOutline = function () {
    let $res = natives.setTextOutline();
};
mp.game2.hud.setTextEdge = function (p0, r, g, b, a) {
    let $res = natives.setTextEdge(p0, r, g, b, a);
};
mp.game2.hud.setTextRenderId = function (renderId) {
    let $res = natives.setTextRenderId(renderId);
};
mp.game2.hud.getDefaultScriptRendertargetRenderId = function () {
    let $res = natives.getDefaultScriptRendertargetRenderId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.registerNamedRendertarget = function (name, p1) {
    let $res = natives.registerNamedRendertarget(name, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isNamedRendertargetRegistered = function (name) {
    let $res = natives.isNamedRendertargetRegistered(name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.releaseNamedRendertarget = function (name) {
    let $res = natives.releaseNamedRendertarget(name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.linkNamedRendertarget = function (modelHash) {
    let $res = natives.linkNamedRendertarget(modelHash);
};
mp.game2.hud.getNamedRendertargetRenderId = function (name) {
    let $res = natives.getNamedRendertargetRenderId(name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.isNamedRendertargetLinked = function (modelHash) {
    let $res = natives.isNamedRendertargetLinked(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.clearHelp = function (toggle) {
    let $res = natives.clearHelp(toggle | 0);
};
mp.game2.hud.isHelpMessageOnScreen = function () {
    let $res = natives.isHelpMessageOnScreen();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isHelpMessageBeingDisplayed = function () {
    let $res = natives.isHelpMessageBeingDisplayed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isHelpMessageFadingOut = function () {
    let $res = natives.isHelpMessageFadingOut();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setHelpMessageTextStyle = function (style, hudColor, alpha, p3, p4) {
    let $res = natives.setHelpMessageStyle(style, hudColor, alpha, p3, p4);
};
mp.game2.hud.getStandardBlipEnumId = function () {
    let $res = natives.getStandardBlipEnumId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.getWaypointBlipEnumId = function () {
    let $res = natives.getWaypointBlipEnumId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getNumberOfActiveBlips = function () {
    let $res = natives.getNumberOfActiveBlips();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getNextBlipInfoId = function (blipSprite) {
    let $res = natives.getNextBlipInfoId(blipSprite);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getFirstBlipInfoId = function (blipSprite) {
    let $res = natives.getFirstBlipInfoId(blipSprite);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getClosestBlipOfType = function (blipSprite) {
    let $res = natives.getClosestBlipInfoId(blipSprite);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getBlipInfoIdCoord = function (blip) {
    let $res = natives.getBlipInfoIdCoord(blip);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.hud.getBlipInfoIdDisplay = function (blip) {
    let $res = natives.getBlipInfoIdDisplay(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getBlipInfoIdType = function (blip) {
    let $res = natives.getBlipInfoIdType(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getBlipInfoIdEntityIndex = function (blip) {
    let $res = natives.getBlipInfoIdEntityIndex(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getBlipInfoIdPickupIndex = function (blip) {
    let $res = natives.getBlipInfoIdPickupIndex(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getBlipFromEntity = function (entity) {
    let $res = natives.getBlipFromEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.addBlipForRadius = function (posX, posY, posZ, radius) {
    let $res = natives.addBlipForRadius(posX, posY, posZ, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.addBlipForArea = function (x, y, z, width, height) {
    let $res = natives.addBlipForArea(x, y, z, width, height);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.addBlipForEntity = function (entity) {
    let $res = natives.addBlipForEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.addBlipForPickup = function (pickup) {
    let $res = natives.addBlipForPickup(pickup);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.addBlipForCoord = function (x, y, z) {
    let $res = natives.addBlipForCoord(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.triggerSonarBlip = function (posX, posY, posZ, radius, p4) {
    let $res = natives.triggerSonarBlip(posX, posY, posZ, radius, p4);
};
mp.game2.hud.allowSonarBlips = function (toggle) {
    let $res = natives.allowSonarBlips(toggle | 0);
};
mp.game2.hud.setBlipCoords = function (blip, posX, posY, posZ) {
    let $res = natives.setBlipCoords(blip, posX, posY, posZ);
};
mp.game2.hud.getBlipCoords = function (blip) {
    let $res = natives.getBlipCoords(blip);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.hud.setBlipSprite = function (blip, spriteId) {
    let $res = natives.setBlipSprite(blip, spriteId);
};
mp.game2.hud.getBlipSprite = function (blip) {
    let $res = natives.getBlipSprite(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setBlipNameFromTextFile = function (blip, gxtEntry) {
    let $res = natives.setBlipNameFromTextFile(blip, gxtEntry);
};
mp.game2.hud.setBlipNameToPlayerName = function (blip, player) {
    let $res = natives.setBlipNameToPlayerName(blip, player);
};
mp.game2.hud.setBlipAlpha = function (blip, alpha) {
    let $res = natives.setBlipAlpha(blip, alpha);
};
mp.game2.hud.getBlipAlpha = function (blip) {
    let $res = natives.getBlipAlpha(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setBlipFade = function (blip, opacity, duration) {
    let $res = natives.setBlipFade(blip, opacity, duration);
};
mp.game2.hud.getBlipFadeStatus = function (blip) {
    let $res = natives.getBlipFadeDirection(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setBlipRotation = function (blip, rotation) {
    let $res = natives.setBlipRotation(blip, rotation);
};
mp.game2.hud.setBlipSquaredRotation = function (blip, heading) {
    let $res = natives.setBlipRotationWithFloat(blip, heading);
};
mp.game2.hud.getBlipRotation = function (blip) {
    let $res = natives.getBlipRotation(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setBlipFlashTimer = function (blip, duration) {
    let $res = natives.setBlipFlashTimer(blip, duration);
};
mp.game2.hud.setBlipFlashInterval = function (blip, p1) {
    let $res = natives.setBlipFlashInterval(blip, p1);
};
mp.game2.hud.setBlipColour = function (blip, color) {
    let $res = natives.setBlipColour(blip, color);
};
mp.game2.hud.setBlipSecondaryColour = function (blip, r, g, b) {
    let $res = natives.setBlipSecondaryColour(blip, r, g, b);
};
mp.game2.hud.getBlipColour = function (blip) {
    let $res = natives.getBlipColour(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getBlipColour = function (blip) {
    let $res = natives.getBlipHudColour(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.isBlipShortRange = function (blip) {
    let $res = natives.isBlipShortRange(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isBlipOnMinimap = function (blip) {
    let $res = natives.isBlipOnMinimap(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.doesBlipHaveGpsRoute = function (blip) {
    let $res = natives.doesBlipHaveGpsRoute(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setBlipHiddenOnLegend = function (blip, toggle) {
    let $res = natives.setBlipHiddenOnLegend(blip, toggle | 0);
};
mp.game2.hud.setBlipHighDetail = function (blip, toggle) {
    let $res = natives.setBlipHighDetail(blip, toggle | 0);
};
mp.game2.hud.setBlipAsMissionCreatorBlip = function (blip, toggle) {
    let $res = natives.setBlipAsMissionCreatorBlip(blip, toggle | 0);
};
mp.game2.hud.isMissionCreatorBlip = function (blip) {
    let $res = natives.isMissionCreatorBlip(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.getNewSelectedMissionCreatorBlip = function () {
    let $res = natives.getNewSelectedMissionCreatorBlip();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.isHoveringOverMissionCreatorBlip = function () {
    let $res = natives.isHoveringOverMissionCreatorBlip();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.showStartMissionInstructionalButton = function (p0) {
    let $res = natives.showStartMissionInstructionalButton(p0 | 0);
};
mp.game2.hud.setBlipFlashes = function (blip, toggle) {
    let $res = natives.setBlipFlashes(blip, toggle | 0);
};
mp.game2.hud.setBlipFlashesAlternate = function (blip, toggle) {
    let $res = natives.setBlipFlashesAlternate(blip, toggle | 0);
};
mp.game2.hud.isBlipFlashing = function (blip) {
    let $res = natives.isBlipFlashing(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setBlipAsShortRange = function (blip, toggle) {
    let $res = natives.setBlipAsShortRange(blip, toggle | 0);
};
mp.game2.hud.setBlipScale = function (blip, scale) {
    let $res = natives.setBlipScale(blip, scale);
};
mp.game2.hud.setBlipScaleTransformation = function (blip, xScale, yScale) {
    let $res = natives.setBlipScale2d(blip, xScale, yScale);
};
mp.game2.hud.setBlipPriority = function (blip, priority) {
    let $res = natives.setBlipPriority(blip, priority);
};
mp.game2.hud.setBlipDisplay = function (blip, displayId) {
    let $res = natives.setBlipDisplay(blip, displayId);
};
mp.game2.hud.setBlipCategory = function (blip, index) {
    let $res = natives.setBlipCategory(blip, index);
};
mp.game2.hud.removeBlip = function (blip) {
    let $res = natives.removeBlip(blip);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.blip = $res[1];
    return $resObj.blip;
};
mp.game2.hud.setBlipAsFriendly = function (blip, toggle) {
    let $res = natives.setBlipAsFriendly(blip, toggle | 0);
};
mp.game2.hud.pulseBlip = function (blip) {
    let $res = natives.pulseBlip(blip);
};
mp.game2.hud.showNumberOnBlip = function (blip, number) {
    let $res = natives.showNumberOnBlip(blip, number);
};
mp.game2.hud.hideNumberOnBlip = function (blip) {
    let $res = natives.hideNumberOnBlip(blip);
};
mp.game2.hud.showHeightOnBlip = function (blip, toggle) {
    let $res = natives.showHeightOnBlip(blip, toggle | 0);
};
mp.game2.hud.showTickOnBlip = function (blip, toggle) {
    let $res = natives.showTickOnBlip(blip, toggle | 0);
};
mp.game2.hud.showHeadingIndicatorOnBlip = function (blip, toggle) {
    let $res = natives.showHeadingIndicatorOnBlip(blip, toggle | 0);
};
mp.game2.hud.showOutlineIndicatorOnBlip = function (blip, toggle) {
    let $res = natives.showOutlineIndicatorOnBlip(blip, toggle | 0);
};
mp.game2.hud.showFriendIndicatorOnBlip = function (blip, toggle) {
    let $res = natives.showFriendIndicatorOnBlip(blip, toggle | 0);
};
mp.game2.hud.showCrewIndicatorOnBlip = function (blip, toggle) {
    let $res = natives.showCrewIndicatorOnBlip(blip, toggle | 0);
};
mp.game2.hud.setBlipDisplayIndicatorOnBlip = function (blip, toggle) {
    let $res = natives.setBlipExtendedHeightThreshold(blip, toggle | 0);
};
mp.game2.hud.setBlipAsMinimalOnEdge = function (blip, toggle) {
    let $res = natives.setBlipAsMinimalOnEdge(blip, toggle | 0);
};
mp.game2.hud.setRadiusBlipEdge = function (blip, toggle) {
    let $res = natives.setRadiusBlipEdge(blip, toggle | 0);
};
mp.game2.hud.doesBlipExist = function (blip) {
    let $res = natives.doesBlipExist(blip);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setWaypointOff = function () {
    let $res = natives.setWaypointOff();
};
mp.game2.hud.deleteWaypoint = function () {
    let $res = natives.deleteWaypointsFromThisPlayer();
};
mp.game2.hud.refreshWaypoint = function () {
    let $res = natives.refreshWaypoint();
};
mp.game2.hud.isWaypointActive = function () {
    let $res = natives.isWaypointActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setNewWaypoint = function (x, y) {
    let $res = natives.setNewWaypoint(x, y);
};
mp.game2.hud.setBlipBright = function (blip, toggle) {
    let $res = natives.setBlipBright(blip, toggle | 0);
};
mp.game2.hud.setBlipShowCone = function (blip, toggle, p2) {
    let $res = natives.setBlipShowCone(blip, toggle | 0, p2 | 0);
};
mp.game2.hud.setMinimapComponent = function (componentId, toggle, overrideColor) {
    let $res = natives.setMinimapComponent(componentId, toggle | 0, overrideColor);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setMinimapSonarEnabled = function (toggle) {
    let $res = natives.setMinimapSonarSweep(toggle | 0);
};
mp.game2.hud.showSigninUi = function () {
    let $res = natives.showAccountPicker();
};
mp.game2.hud.getMainPlayerBlipId = function () {
    let $res = natives.getMainPlayerBlipId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.hideLoadingOnFadeThisFrame = function () {
    let $res = natives.hideLoadingOnFadeThisFrame();
};
mp.game2.hud.setRadarAsInteriorThisFrame = function (interior, x, y, z, zoom) {
    let $res = natives.setRadarAsInteriorThisFrame(interior, x, y, z, zoom);
};
mp.game2.hud.setInteriorZoomLevelIncreased = function (toggle) {
    let $res = natives.setInsideVerySmallInterior(toggle | 0);
};
mp.game2.hud.setInteriorZoomLevelDecreased = function (toggle) {
    let $res = natives.setInsideVeryLargeInterior(toggle | 0);
};
mp.game2.hud.setRadarAsExteriorThisFrame = function () {
    let $res = natives.setRadarAsExteriorThisFrame();
};
mp.game2.hud.setPlayerBlipPositionThisFrame = function (x, y) {
    let $res = natives.setFakePausemapPlayerPositionThisFrame(x, y);
};
mp.game2.hud.isMinimapInInterior = function () {
    let $res = natives.isPausemapInInteriorMode();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.hideMinimapExteriorMapThisFrame = function () {
    let $res = natives.hideMinimapExteriorMapThisFrame();
};
mp.game2.hud.hideMinimapInteriorMapThisFrame = function () {
    let $res = natives.hideMinimapInteriorMapThisFrame();
};
mp.game2.hud.setToggleMinimapHeistIsland = function (toggle) {
    let $res = natives.setUseIslandMap(toggle | 0);
};
mp.game2.hud.dontTiltMinimapThisFrame = function () {
    let $res = natives.dontTiltMinimapThisFrame();
};
mp.game2.hud.setWidescreenFormat = function (p0) {
    let $res = natives.setWidescreenFormat(p0);
};
mp.game2.hud.displayAreaName = function (toggle) {
    let $res = natives.displayAreaName(toggle | 0);
};
mp.game2.hud.displayCash = function (toggle) {
    let $res = natives.displayCash(toggle | 0);
};
mp.game2.hud.setPlayerCashChange = function (cash, bank) {
    let $res = natives.changeFakeMpCash(cash, bank);
};
mp.game2.hud.displayAmmoThisFrame = function (display) {
    let $res = natives.displayAmmoThisFrame(display | 0);
};
mp.game2.hud.displaySniperScopeThisFrame = function () {
    let $res = natives.displaySniperScopeThisFrame();
};
mp.game2.hud.hideAndRadarThisFrame = function () {
    let $res = natives.hideHudAndRadarThisFrame();
};
mp.game2.hud.setMultiplayerWalletCash = function () {
    let $res = natives.setMultiplayerWalletCash();
};
mp.game2.hud.removeMultiplayerWalletCash = function () {
    let $res = natives.removeMultiplayerWalletCash();
};
mp.game2.hud.setMultiplayerBankCash = function () {
    let $res = natives.setMultiplayerBankCash();
};
mp.game2.hud.removeMultiplayerBankCash = function () {
    let $res = natives.removeMultiplayerBankCash();
};
mp.game2.hud.setMultiplayerCash = function (p0, p1) {
    let $res = natives.setMultiplayerHudCash(p0, p1);
};
mp.game2.hud.setMultiplayerHudCash = function (p0, p1) {
    let $res = natives.setMultiplayerHudCash(p0, p1);
};
mp.game2.hud.removeMultiplayerCash = function () {
    let $res = natives.removeMultiplayerHudCash();
};
mp.game2.hud.hideHelpTextThisFrame = function () {
    let $res = natives.hideHelpTextThisFrame();
};
mp.game2.hud.displayHelpTextThisFrame = function (message, p1) {
    let $res = natives.displayHelpTextThisFrame(message, p1 | 0);
};
mp.game2.hud.forceWeaponWheel = function (show) {
    let $res = natives.hudForceWeaponWheel(show | 0);
};
mp.game2.hud.showWeaponWheel = function (show) {
    let $res = natives.hudForceWeaponWheel(show | 0);
};
mp.game2.hud.displayLoadingScreenTips = function () {
    let $res = natives.hudForceSpecialVehicleWeaponWheel();
};
mp.game2.hud.weaponWheelIgnoreSelection = function () {
    let $res = natives.blockWeaponWheelThisFrame();
};
mp.game2.hud.weaponWheelGetSelectedHash = function () {
    let $res = natives.hudGetWeaponWheelCurrentlyHighlighted();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setWeaponWheelTopSlot = function (weaponHash) {
    let $res = natives.hudSetWeaponWheelTopSlot(weaponHash);
};
mp.game2.hud.weaponWheelGetSlotHash = function (weaponTypeIndex) {
    let $res = natives.hudGetWeaponWheelTopSlot(weaponTypeIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.weaponWheelIgnoreControlInput = function (toggle) {
    let $res = natives.hudShowingCharacterSwitchSelection(toggle | 0);
};
mp.game2.hud.setGpsFlags = function (p0, p1) {
    let $res = natives.setGpsFlags(p0, p1);
};
mp.game2.hud.clearGpsFlags = function () {
    let $res = natives.clearGpsFlags();
};
mp.game2.hud.setRaceTrackRender = function (toggle) {
    let $res = natives.setRaceTrackRender(toggle | 0);
};
mp.game2.hud.clearGpsRaceTrack = function () {
    let $res = natives.clearGpsRaceTrack();
};
mp.game2.hud.startGpsCustomRoute = function (hudColor, displayOnFoot, followPlayer) {
    let $res = natives.startGpsCustomRoute(hudColor, displayOnFoot | 0, followPlayer | 0);
};
mp.game2.hud.addPointToGpsCustomRoute = function (x, y, z) {
    let $res = natives.addPointToGpsCustomRoute(x, y, z);
};
mp.game2.hud.setGpsCustomRouteRender = function (toggle, radarThickness, mapThickness) {
    let $res = natives.setGpsCustomRouteRender(toggle | 0, radarThickness, mapThickness);
};
mp.game2.hud.clearGpsCustomRoute = function () {
    let $res = natives.clearGpsCustomRoute();
};
mp.game2.hud.startGpsMultiRoute = function (hudColor, routeFromPlayer, displayOnFoot) {
    let $res = natives.startGpsMultiRoute(hudColor, routeFromPlayer | 0, displayOnFoot | 0);
};
mp.game2.hud.addPointToGpsMultiRoute = function (x, y, z) {
    let $res = natives.addPointToGpsMultiRoute(x, y, z);
};
mp.game2.hud.setGpsMultiRouteRender = function (toggle) {
    let $res = natives.setGpsMultiRouteRender(toggle | 0);
};
mp.game2.hud.clearGpsMultiRoute = function () {
    let $res = natives.clearGpsMultiRoute();
};
mp.game2.hud.clearGpsPlayerWaypoint = function () {
    let $res = natives.clearGpsPlayerWaypoint();
};
mp.game2.hud.setGpsFlashes = function (toggle) {
    let $res = natives.setGpsFlashes(toggle | 0);
};
mp.game2.hud.setMainPlayerBlipColour = function (color) {
    let $res = natives.setPlayerIconColour(color);
};
mp.game2.hud.flashMinimapDisplay = function () {
    let $res = natives.flashMinimapDisplay();
};
mp.game2.hud.flashMinimapDisplayWithColor = function (hudColorIndex) {
    let $res = natives.flashMinimapDisplayWithColor(hudColorIndex);
};
mp.game2.hud.toggleStealthRadar = function (toggle) {
    let $res = natives.toggleStealthRadar(toggle | 0);
};
mp.game2.hud.setMinimapInSpectatorMode = function (toggle, ped) {
    let $res = natives.setMinimapInSpectatorMode(toggle | 0, ped);
};
mp.game2.hud.keyHudColour = function (toggle, ped) {
    let $res = natives.setMinimapInSpectatorMode(toggle | 0, ped);
};
mp.game2.hud.setMissionName = function (p0, name) {
    let $res = natives.setMissionName(p0 | 0, name);
};
mp.game2.hud.setMissionName2 = function (p0, name) {
    let $res = natives.setMissionNameForUgcMission(p0 | 0, name);
};
mp.game2.hud.setMinimapBlockWaypoint = function (toggle) {
    let $res = natives.setMinimapBlockWaypoint(toggle | 0);
};
mp.game2.hud.setMinimapInPrologue = function (toggle) {
    let $res = natives.setMinimapInPrologue(toggle | 0);
};
mp.game2.hud.setMinimapVisible = function (toggle) {
    let $res = natives.setMinimapInPrologue(toggle | 0);
};
mp.game2.hud.setMinimapHideFow = function (toggle) {
    let $res = natives.setMinimapHideFow(toggle | 0);
};
mp.game2.hud.setMinimapRevealed = function (toggle) {
    let $res = natives.setMinimapHideFow(toggle | 0);
};
mp.game2.hud.getMinimapFowDiscoveryRatio = function () {
    let $res = natives.getMinimapFowDiscoveryRatio();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getMinimapFowCoordinateIsRevealed = function (x, y, z) {
    let $res = natives.getMinimapFowCoordinateIsRevealed(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isMinimapAreaRevealed = function (x, y, z) {
    let $res = natives.getMinimapFowCoordinateIsRevealed(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setMinimapFowRevealCoordinate = function (x, y, z) {
    let $res = natives.setMinimapFowRevealCoordinate(x, y, z);
};
mp.game2.hud.setMinimapGolfCourse = function (hole) {
    let $res = natives.setMinimapGolfCourse(hole);
};
mp.game2.hud.setMinimapGolfCourseOff = function () {
    let $res = natives.setMinimapGolfCourseOff();
};
mp.game2.hud.lockMinimapAngle = function (angle) {
    let $res = natives.lockMinimapAngle(angle);
};
mp.game2.hud.unlockMinimapAngle = function () {
    let $res = natives.unlockMinimapAngle();
};
mp.game2.hud.lockMinimapPosition = function (x, y) {
    let $res = natives.lockMinimapPosition(x, y);
};
mp.game2.hud.unlockMinimapPosition = function () {
    let $res = natives.unlockMinimapPosition();
};
mp.game2.hud.setMinimapAltitudeIndicatorLevel = function (altitude, p1, p2) {
    let $res = natives.setFakeMinimapMaxAltimeterHeight(altitude, p1 | 0, p2 | 0);
};
mp.game2.hud.setMinimapAttitudeIndicatorLevel = function (altitude, p1, p2) {
    let $res = natives.setFakeMinimapMaxAltimeterHeight(altitude, p1 | 0, p2 | 0);
};
mp.game2.hud.setHealthDisplayValues = function (health, capacity, wasAdded) {
    let $res = natives.setHealthHudDisplayValues(health, capacity, wasAdded | 0);
};
mp.game2.hud.setMaxHealthDisplay = function (maximumValue) {
    let $res = natives.setMaxHealthHudDisplay(maximumValue);
};
mp.game2.hud.setMaxArmourDisplay = function (maximumValue) {
    let $res = natives.setMaxArmourHudDisplay(maximumValue);
};
mp.game2.hud.setBigmapActive = function (toggleBigMap, showFullMap) {
    let $res = natives.setBigmapActive(toggleBigMap | 0, showFullMap | 0);
};
mp.game2.hud.setRadarBigmapEnabled = function (toggleBigMap, showFullMap) {
    let $res = natives.setBigmapActive(toggleBigMap | 0, showFullMap | 0);
};
mp.game2.hud.isComponentActive = function (id) {
    let $res = natives.isHudComponentActive(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isHudComponentActive = function (id) {
    let $res = natives.isHudComponentActive(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isScriptedComponentActive = function (id) {
    let $res = natives.isScriptedHudComponentActive(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isScriptedHudComponentActive = function (id) {
    let $res = natives.isScriptedHudComponentActive(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.hideScriptedComponentThisFrame = function (id) {
    let $res = natives.hideScriptedHudComponentThisFrame(id);
};
mp.game2.hud.hideScriptedHudComponentThisFrame = function (id) {
    let $res = natives.hideScriptedHudComponentThisFrame(id);
};
mp.game2.hud.showScriptedComponentThisFrame = function (id) {
    let $res = natives.showScriptedHudComponentThisFrame(id);
};
mp.game2.hud.isScriptedComponentHiddenThisFrame = function (id) {
    let $res = natives.isScriptedHudComponentHiddenThisFrame(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.hideComponentThisFrame = function (id) {
    let $res = natives.hideHudComponentThisFrame(id);
};
mp.game2.hud.hideHudComponentThisFrame = function (id) {
    let $res = natives.hideHudComponentThisFrame(id);
};
mp.game2.hud.showComponentThisFrame = function (id) {
    let $res = natives.showHudComponentThisFrame(id);
};
mp.game2.hud.showHudComponentThisFrame = function (id) {
    let $res = natives.showHudComponentThisFrame(id);
};
mp.game2.hud.hideAreaAndVehicleNameThisFrame = function () {
    let $res = natives.hideStreetAndCarNamesThisFrame();
};
mp.game2.hud.resetReticuleValues = function () {
    let $res = natives.resetReticuleValues();
};
mp.game2.hud.resetComponentValues = function (id) {
    let $res = natives.resetHudComponentValues(id);
};
mp.game2.hud.resetHudComponentValues = function (id) {
    let $res = natives.resetHudComponentValues(id);
};
mp.game2.hud.setComponentPosition = function (id, x, y) {
    let $res = natives.setHudComponentPosition(id, x, y);
};
mp.game2.hud.setHudComponentPosition = function (id, x, y) {
    let $res = natives.setHudComponentPosition(id, x, y);
};
mp.game2.hud.getComponentPosition = function (id) {
    let $res = natives.getHudComponentPosition(id);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.hud.getHudComponentPosition = function (id) {
    let $res = natives.getHudComponentPosition(id);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.hud.clearReminderMessage = function () {
    let $res = natives.clearReminderMessage();
};
mp.game2.hud.getScreenPositionFromWorldPosition = function (worldX, worldY, worldZ) {
    let $res = natives.getScreenCoordFromWorldCoord2(worldX, worldY, worldZ, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.screenX = $res[1];
    $resObj.screenY = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.hud.openReportugcMenu = function () {
    let $res = natives.openReportugcMenu();
};
mp.game2.hud.forceCloseReportugcMenu = function () {
    let $res = natives.forceCloseReportugcMenu();
};
mp.game2.hud.isReportugcMenuOpen = function () {
    let $res = natives.isReportugcMenuOpen();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isFloatingHelpTextOnScreen = function (hudIndex) {
    let $res = natives.isFloatingHelpTextOnScreen(hudIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setFloatingHelpTextScreenPosition = function (hudIndex, x, y) {
    let $res = natives.setFloatingHelpTextScreenPosition(hudIndex, x, y);
};
mp.game2.hud.setFloatingHelpTextWorldPosition = function (hudIndex, x, y, z) {
    let $res = natives.setFloatingHelpTextWorldPosition(hudIndex, x, y, z);
};
mp.game2.hud.setFloatingHelpTextToEntity = function (hudIndex, entity, offsetX, offsetY) {
    let $res = natives.setFloatingHelpTextToEntity(hudIndex, entity, offsetX, offsetY);
};
mp.game2.hud.setFloatingHelpTextStyle = function (hudIndex, p1, p2, p3, p4, p5) {
    let $res = natives.setFloatingHelpTextStyle(hudIndex, p1, p2, p3, p4, p5);
};
mp.game2.hud.clearFloatingHelp = function (hudIndex, p1) {
    let $res = natives.clearFloatingHelp(hudIndex, p1 | 0);
};
mp.game2.hud.createMpGamerTagWithCrewColor = function (player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b) {
    let $res = natives.createMpGamerTagWithCrewColor(player, username, pointedClanTag | 0, isRockstarClan | 0, clanTag, clanFlag, r, g, b);
};
mp.game2.hud.isMpGamerTagMovieActive = function () {
    let $res = natives.isMpGamerTagMovieActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.createFakeMpGamerTag = function (ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag) {
    let $res = natives.createFakeMpGamerTag(ped, username, pointedClanTag | 0, isRockstarClan | 0, clanTag, clanFlag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.removeMpGamerTag = function (gamerTagId) {
    let $res = natives.removeMpGamerTag(gamerTagId);
};
mp.game2.hud.isMpGamerTagActive = function (gamerTagId) {
    let $res = natives.isMpGamerTagActive(gamerTagId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.hasHeadDisplayLoaded = function (gamerTagId) {
    let $res = natives.isMpGamerTagActive(gamerTagId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.isMpGamerTagFree = function (gamerTagId) {
    let $res = natives.isMpGamerTagFree(gamerTagId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.addTrevorRandomModifier = function (gamerTagId) {
    let $res = natives.isMpGamerTagFree(gamerTagId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setMpGamerTagVisibility = function (gamerTagId, component, toggle, p3) {
    let $res = natives.setMpGamerTagVisibility(gamerTagId, component, toggle | 0, p3 | 0);
};
mp.game2.hud.setHeadDisplayFlag = function (gamerTagId, component, toggle, p3) {
    let $res = natives.setMpGamerTagVisibility(gamerTagId, component, toggle | 0, p3 | 0);
};
mp.game2.hud.setMpGamerTagEnabled = function (gamerTagId, toggle) {
    let $res = natives.setAllMpGamerTagsVisibility(gamerTagId, toggle | 0);
};
mp.game2.hud.setMpGamerTagIcons = function (gamerTagId, toggle) {
    let $res = natives.setMpGamerTagsShouldUseVehicleHealth(gamerTagId, toggle | 0);
};
mp.game2.hud.setMpGamerHealthBarDisplay = function (gamerTagId, toggle) {
    let $res = natives.setMpGamerTagsShouldUsePointsHealth(gamerTagId, toggle | 0);
};
mp.game2.hud.setMpGamerHealthBarMax = function (gamerTagId, value, maximumValue) {
    let $res = natives.setMpGamerTagsPointHealth(gamerTagId, value, maximumValue);
};
mp.game2.hud.setMpGamerTagColour = function (gamerTagId, component, hudColorIndex) {
    let $res = natives.setMpGamerTagColour(gamerTagId, component, hudColorIndex);
};
mp.game2.hud.setMpGamerTagHealthBarColour = function (gamerTagId, hudColorIndex) {
    let $res = natives.setMpGamerTagHealthBarColour(gamerTagId, hudColorIndex);
};
mp.game2.hud.setMpGamerTagAlpha = function (gamerTagId, component, alpha) {
    let $res = natives.setMpGamerTagAlpha(gamerTagId, component, alpha);
};
mp.game2.hud.setMpGamerTagWantedLevel = function (gamerTagId, wantedlvl) {
    let $res = natives.setMpGamerTagWantedLevel(gamerTagId, wantedlvl);
};
mp.game2.hud.setHeadDisplayWanted = function (gamerTagId, wantedlvl) {
    let $res = natives.setMpGamerTagWantedLevel(gamerTagId, wantedlvl);
};
mp.game2.hud.setMpGamerTagUnk = function (gamerTagId, p1) {
    let $res = natives.setMpGamerTagNumPackages(gamerTagId, p1);
};
mp.game2.hud.setMpGamerTagName = function (gamerTagId, string) {
    let $res = natives.setMpGamerTagName(gamerTagId, string);
};
mp.game2.hud.setHeadDisplayString = function (gamerTagId, string) {
    let $res = natives.setMpGamerTagName(gamerTagId, string);
};
mp.game2.hud.isValidMpGamerTagMovie = function (gamerTagId) {
    let $res = natives.isUpdatingMpGamerTagNameAndCrewDetails(gamerTagId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setMpGamerTagBigText = function (gamerTagId, string) {
    let $res = natives.setMpGamerTagBigText(gamerTagId, string);
};
mp.game2.hud.getCurrentWebpageId = function () {
    let $res = natives.getCurrentWebpageId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getCurrentWebsiteId = function () {
    let $res = natives.getCurrentWebsiteId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getGlobalActionscriptFlag = function (flagIndex) {
    let $res = natives.getGlobalActionscriptFlag(flagIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.resetGlobalActionscriptFlag = function (flagIndex) {
    let $res = natives.resetGlobalActionscriptFlag(flagIndex);
};
mp.game2.hud.isWarningMessageActive2 = function () {
    let $res = natives.isWarningMessageReadyForControl();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setWarningMessage = function (titleMsg, flags, promptMsg, p3, p4, p5, p6, showBackground, errorCode) {
    let $res = natives.setWarningMessage(titleMsg, flags, promptMsg, p3 | 0, p4, p5, p6, showBackground | 0, errorCode | 0);
};
mp.game2.hud.setWarningMessageWithHeader = function (entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p8, p9) {
    let $res = natives.setWarningMessageWithHeader(entryHeader, entryLine1, instructionalKey, entryLine2, p4 | 0, p5, 0, 0, p8 | 0, p9 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.showBackground = $res[0];
    $resObj.p7 = $res[0];
    return $resObj;
};
mp.game2.hud.setWarningMessage2 = function (entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p8, p9) {
    let $res = natives.setWarningMessageWithHeader(entryHeader, entryLine1, instructionalKey, entryLine2, p4 | 0, p5, 0, 0, p8 | 0, p9 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.showBackground = $res[0];
    $resObj.p7 = $res[0];
    return $resObj;
};
mp.game2.hud.setWarningMessageWithHeaderAndSubstringFlags = function (entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode) {
    let $res = natives.setWarningMessageWithHeaderAndSubstringFlags(entryHeader, entryLine1, instructionalKey, entryLine2, p4 | 0, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground | 0, errorCode | 0);
};
mp.game2.hud.setWarningMessage3 = function (entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode) {
    let $res = natives.setWarningMessageWithHeaderAndSubstringFlags(entryHeader, entryLine1, instructionalKey, entryLine2, p4 | 0, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground | 0, errorCode | 0);
};
mp.game2.hud.setWarningMessageWithHeaderUnk = function (entryHeader, entryLine1, flags, entryLine2, p4, p5, showBg, p9, p10) {
    let $res = natives.setWarningMessageWithHeaderExtended(entryHeader, entryLine1, flags, entryLine2, p4 | 0, p5, 0, 0, showBg | 0, p9, p10);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p6 = $res[0];
    $resObj.p7 = $res[0];
    return $resObj;
};
mp.game2.hud.setWarningMessageWithAlert = function (labelTitle, labelMessage, p2, p3, labelMessage2, p5, p6, p7, p8, p9, background, errorCode) {
    let $res = natives.setWarningMessageWithHeaderAndSubstringFlagsExtended(labelTitle, labelMessage, p2, p3, labelMessage2, p5 | 0, p6, p7, p8, p9, background | 0, errorCode);
};
mp.game2.hud.getWarningMessageTitleHash = function () {
    let $res = natives.getWarningScreenMessageHash();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setWarningMessageListRow = function (index, name, cash, rp, lvl, colour) {
    let $res = natives.setWarningMessageOptionItems(index, name, cash, rp, lvl, colour);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.removeWarningMessageListItems = function () {
    let $res = natives.removeWarningMessageOptionItems();
};
mp.game2.hud.isWarningMessageActive = function () {
    let $res = natives.isWarningMessageActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.clearDynamicPauseMenuErrorMessage = function () {
    let $res = natives.clearDynamicPauseMenuErrorMessage();
};
mp.game2.hud.customMinimapSetActive = function (toggle) {
    let $res = natives.customMinimapSetActive(toggle | 0);
};
mp.game2.hud.customMinimapSetBlipObject = function (spriteId) {
    let $res = natives.customMinimapSetBlipObject(spriteId);
};
mp.game2.hud.customMinimapCreateBlip = function (x, y, z) {
    let $res = natives.customMinimapCreateBlip(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.customMinimapClearBlips = function () {
    let $res = natives.customMinimapClearBlips();
};
mp.game2.hud.forceSonarBlipsThisFrame = function () {
    let $res = natives.forceSonarBlipsThisFrame();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getNorthRadarBlip = function () {
    let $res = natives.getNorthBlidIndex();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.displayPlayerNameTagsOnBlips = function (toggle) {
    let $res = natives.displayPlayerNameTagsOnBlips(toggle | 0);
};
mp.game2.hud.activateFrontendMenu = function (menuhash, togglePause, component) {
    let $res = natives.activateFrontendMenu(menuhash, togglePause | 0, component);
};
mp.game2.hud.restartFrontendMenu = function (menuHash, p1) {
    let $res = natives.restartFrontendMenu(menuHash, p1);
};
mp.game2.hud.getCurrentFrontendMenuVersion = function () {
    let $res = natives.getCurrentFrontendMenuVersion();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.setPauseMenuActive = function (toggle) {
    let $res = natives.setPauseMenuActive(toggle | 0);
};
mp.game2.hud.disableFrontendThisFrame = function () {
    let $res = natives.disableFrontendThisFrame();
};
mp.game2.hud.suppressFrontendRenderingThisFrame = function () {
    let $res = natives.suppressFrontendRenderingThisFrame();
};
mp.game2.hud.allowPauseMenuWhenDeadThisFrame = function () {
    let $res = natives.allowPauseWhenNotInStateOfPlayThisFrame();
};
mp.game2.hud.setFrontendActive = function (active) {
    let $res = natives.setFrontendActive(active | 0);
};
mp.game2.hud.isPauseMenuActive = function () {
    let $res = natives.isPauseMenuActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.getPauseMenuState = function () {
    let $res = natives.getPauseMenuState();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.isPauseMenuRestarting = function () {
    let $res = natives.isPauseMenuRestarting();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.logDebugInfo = function (p0) {
    let $res = natives.forceScriptedGfxWhenFrontendActive(p0);
};
mp.game2.hud.pauseMenuActivateContext = function (contextHash) {
    let $res = natives.pauseMenuActivateContext(contextHash);
};
mp.game2.hud.pauseMenuDeactivateContext = function (contextHash) {
    let $res = natives.pauseMenuDeactivateContext(contextHash);
};
mp.game2.hud.objectDecalToggle = function (contextHash) {
    let $res = natives.pauseMenuDeactivateContext(contextHash);
};
mp.game2.hud.pauseMenuIsContextActive = function (contextHash) {
    let $res = natives.pauseMenuIsContextActive(contextHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.pauseMenuIsContextMenuActive = function () {
    let $res = natives.pauseMenuIsContextMenuActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.pauseMenuSetBusySpinner = function (p0, position, spinnerIndex) {
    let $res = natives.pauseMenuSetBusySpinner(p0 | 0, position, spinnerIndex);
};
mp.game2.hud.isFrontendReadyForControl = function () {
    let $res = natives.isFrontendReadyForControl();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.takeControlOfFrontend = function () {
    let $res = natives.takeControlOfFrontend();
};
mp.game2.hud.releaseControlOfFrontend = function () {
    let $res = natives.releaseControlOfFrontend();
};
mp.game2.hud.isNavigatingMenuContent = function () {
    let $res = natives.isNavigatingMenuContent();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.getPauseMenuSelection = function () {
    let $res = natives.getMenuTriggerEventDetails(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.lastItemMenuId = $res[1];
    $resObj.selectedItemUniqueId = $res[2];
    return $resObj;
};
mp.game2.hud.getPauseMenuSelectionData = function () {
    let $res = natives.getMenuLayoutChangedEventDetails(0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.lastItemMenuId = $res[1];
    $resObj.selectedItemMenuId = $res[2];
    $resObj.selectedItemUniqueId = $res[3];
    return $resObj;
};
mp.game2.hud.getMenuPedIntStat = function (p0) {
    let $res = natives.getMenuPedIntStat(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.hud.setUseridsUihidden = function (p0) {
    let $res = natives.getMenuPedIntStat(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.hud.getMenuPedMaskedIntStat = function (p0, p2, p3) {
    let $res = natives.getMenuPedMaskedIntStat(p0, 0, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.hud.getMenuPedFloatStat = function (p0) {
    let $res = natives.getMenuPedFloatStat(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.hud.getMenuPedBoolStat = function (p0) {
    let $res = natives.getMenuPedBoolStat(p0, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.hud.clearPedInPauseMenu = function () {
    let $res = natives.clearPedInPauseMenu();
};
mp.game2.hud.givePedToPauseMenu = function (ped, p1) {
    let $res = natives.givePedToPauseMenu(ped, p1);
};
mp.game2.hud.setPauseMenuPedLighting = function (state) {
    let $res = natives.setPauseMenuPedLighting(state | 0);
};
mp.game2.hud.setPauseMenuPedSleepState = function (state) {
    let $res = natives.setPauseMenuPedSleepState(state | 0);
};
mp.game2.hud.openOnlinePoliciesMenu = function () {
    let $res = natives.openOnlinePoliciesMenu();
};
mp.game2.hud.isOnlinePoliciesMenuActive = function () {
    let $res = natives.isOnlinePoliciesMenuActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.openSocialClubMenu = function () {
    let $res = natives.openSocialClubMenu();
};
mp.game2.hud.closeSocialClubMenu = function () {
    let $res = natives.closeSocialClubMenu();
};
mp.game2.hud.setSocialClubTour = function (name) {
    let $res = natives.setSocialClubTour(name);
};
mp.game2.hud.isSocialClubActive = function () {
    let $res = natives.isSocialClubActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.forceCloseTextInputBox = function () {
    let $res = natives.forceCloseTextInputBox();
};
mp.game2.hud.overrideMultiplayerChatPrefix = function (gxtEntryHash) {
    let $res = natives.overrideMpTextChatTeamString(gxtEntryHash);
};
mp.game2.hud.isMultiplayerChatActive = function () {
    let $res = natives.isMpTextChatTyping();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.closeMultiplayerChat = function () {
    let $res = natives.closeMpTextChat();
};
mp.game2.hud.overrideMultiplayerChatColour = function (p0, hudColor) {
    let $res = natives.overrideMpTextChatColor(p0, hudColor);
};
mp.game2.hud.setTextChatUnk = function (p0) {
    let $res = natives.mpTextChatDisable(p0 | 0);
};
mp.game2.hud.flagPlayerContextInTournament = function (toggle) {
    let $res = natives.flagPlayerContextInTournament(toggle | 0);
};
mp.game2.hud.setPedHasAiBlip = function (ped, hasCone) {
    let $res = natives.setPedHasAiBlip(ped, hasCone | 0);
};
mp.game2.hud.setPedHasAiBlipWithColor = function (ped, hasCone, color) {
    let $res = natives.setPedHasAiBlipWithColour(ped, hasCone | 0, color);
};
mp.game2.hud.doesPedHaveAiBlip = function (ped) {
    let $res = natives.doesPedHaveAiBlip(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setPedAiBlipGangId = function (ped, gangId) {
    let $res = natives.setPedAiBlipGangId(ped, gangId);
};
mp.game2.hud.setPedAiBlipHasCone = function (ped, toggle) {
    let $res = natives.setPedAiBlipHasCone(ped, toggle | 0);
};
mp.game2.hud.hideSpecialAbilityLockonOperation = function (ped, toggle) {
    let $res = natives.setPedAiBlipHasCone(ped, toggle | 0);
};
mp.game2.hud.setPedAiBlipForcedOn = function (ped, toggle) {
    let $res = natives.setPedAiBlipForcedOn(ped, toggle | 0);
};
mp.game2.hud.setPedAiBlipNoticeRange = function (ped, range) {
    let $res = natives.setPedAiBlipNoticeRange(ped, range);
};
mp.game2.hud.setPedAiBlipSprite = function (ped, spriteId) {
    let $res = natives.setPedAiBlipSprite(ped, spriteId);
};
mp.game2.hud.getAiBlip2 = function (ped) {
    let $res = natives.getAiPedPedBlipIndex(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.getAiBlip = function (ped) {
    let $res = natives.getAiPedVehicleBlipIndex(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.hasDirectorModeBeenTriggered = function () {
    let $res = natives.hasDirectorModeBeenLaunchedByCode();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.setDirectorModeClearTriggeredFlag = function () {
    let $res = natives.setDirectorModeLaunchedByScript();
};
mp.game2.hud.setPlayerIsInDirectorMode = function (toggle) {
    let $res = natives.setPlayerIsInDirectorMode(toggle | 0);
};
if (!mp.game2.hud) mp.game2.hud = {};
if (!mp.game2.hud.unk) mp.game2.hud.unk = {};
mp.game2.hud.unk._0x9245E81072704B8A = function (p0) {
    let $res = natives.disablePausemenuSpinner(p0 | 0);
};
mp.game2.hud.unk._0x3D9ACB1EB139E702 = function () {
    let $res = natives.isMouseRolledOverInstructionalButtons();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.unk._0x632B2940C67F4EA9 = function (scaleformHandle) {
    let $res = natives.getMouseEvent(scaleformHandle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.hud.unk._0x98C3CF913D895111 = function (string, length) {
    let $res = natives.getFirstNCharactersOfLiteralString(string, length);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.unk._0xCD74233600C4EA6B = function (toggle) {
    let $res = natives.setFakeSpectatorMode(toggle | 0);
};
mp.game2.hud.unk._0xC2D2AD9EAAE265B8 = function () {
    let $res = natives.getFakeSpectatorMode();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.unk._0x0C698D8F099174C7 = function (p0) {
    let $res = natives.useVehicleTargetingReticule(p0);
};
mp.game2.hud.unk._0xE4C3B169876D33D7 = function (p0) {
    let $res = natives.addValidVehicleHitHash(p0);
};
mp.game2.hud.unk._0xEB81A3DADD503187 = function () {
    let $res = natives.clearValidVehicleHitHashes();
};
mp.game2.hud.unk._0x2790F4B17D098E26 = function (toggle) {
    let $res = natives.setForceShowGps(toggle | 0);
};
mp.game2.hud.unk._0x6CDD58146A436083 = function (p0) {
    let $res = natives.setUseSetDestinationInPauseMap(p0);
};
mp.game2.hud.unk._0xD1942374085C8469 = function (disabled) {
    let $res = natives.setBlockWantedFlash(disabled | 0);
};
mp.game2.hud.unk._0x57D760D55F54E071 = function (p0) {
    let $res = natives.forceNextMessageToPreviousBriefsList(p0);
};
mp.game2.hud.unk._0xD2049635DEB9C375 = function () {
    let $res = natives.updateRadarZoomToBlip();
};
mp.game2.hud.unk._0xBA8D65C1C65702E5 = function (toggle) {
    let $res = natives.forceOffWantedStarFlash(toggle | 0);
};
mp.game2.hud.unk._0x214CD562A939246A = function () {
    let $res = natives.hasScriptHiddenHelpThisFrame();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.unk._0x9FCB3CBFB3EAD69A = function (p0, p1) {
    let $res = natives.setCopBlipSprite(p0, p1);
};
mp.game2.hud.unk._0xB7B873520C84C118 = function () {
    let $res = natives.setCopBlipSpriteAsStandard();
};
mp.game2.hud.unk._0x2916A928514C9827 = function () {
    let $res = natives.reloadMapMenu();
};
mp.game2.hud.unk._0xB552929B85FC27EC = function (p0, p1) {
    let $res = natives.setBlipMarkerLongDistance(p0, p1);
};
mp.game2.hud.unk._0x4B5B620C9B59ED34 = function (p0, p1) {
    let $res = natives.setBlipShortHeightThreshold(p0, p1);
};
mp.game2.hud.unk._0x2C9F302398E13141 = function (p0, p1) {
    let $res = natives.setBlipUseHeightIndicatorOnEdge(p0, p1);
};
mp.game2.hud.unk._0xC594B315EDF2D4AF = function (ped) {
    let $res = natives.removeCopBlipFromPed(ped);
};
mp.game2.hud.unk._0xF83D0FEBE75E62C9 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.setupFakeConeData(p0, p1, p2, p3, p4, p5, p6, p7, p8);
};
mp.game2.hud.unk._0x35A3CD97B2C0A6D2 = function (blip) {
    let $res = natives.removeFakeConeData(blip);
};
mp.game2.hud.unk._0x8410C5E0CD847B9D = function () {
    let $res = natives.clearFakeConeArray();
};
mp.game2.hud.unk._0x41350B4FC28E3941 = function (p0) {
    let $res = natives.setPmWarningscreenActive(p0 | 0);
};
mp.game2.hud.unk._0xA17784FCA9548D15 = function (p0, p1, p2) {
    let $res = natives.setFakeGpsPlayerPositionThisFrame(p0, p1, p2);
};
mp.game2.hud.unk._0x55F5A5F07134DE60 = function () {
    let $res = natives.dontZoomMinimapWhenSnipingThisFrame();
};
mp.game2.hud.unk._0x170F541E1CADD1DE = function (p0) {
    let $res = natives.useFakeMpCash(p0 | 0);
};
mp.game2.hud.unk._0xE67C6DFD386EA5E7 = function (p0) {
    let $res = natives.allowDisplayOfMultiplayerCashText(p0 | 0);
};
mp.game2.hud.unk._0x801879A9B4F4B2FB = function () {
    let $res = natives.isImeInProgress();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.unk._0x817B86108EB94E51 = function (p0) {
    let $res = natives.setDescriptionForUgcMissionEightStrings(p0 | 0, null, null, null, null, null, null, null, null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    $resObj.p4 = $res[0];
    $resObj.p5 = $res[0];
    $resObj.p6 = $res[0];
    $resObj.p7 = $res[0];
    $resObj.p8 = $res[0];
    return $resObj;
};
mp.game2.hud.unk._0x62E849B7EB28E770 = function (p0) {
    let $res = natives.setMinimapFowDoNotUpdate(p0 | 0);
};
mp.game2.hud.unk._0xDAF87174BE7454FF = function (p0) {
    let $res = natives.setWarningMessageOptionHighlight(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.unk._0x211C4EF450086857 = function () {
    let $res = natives.drawFrontendBackgroundThisFrame();
};
mp.game2.hud.unk._0xBF4F34A85CA2970C = function () {
    let $res = natives.drawHudOverFadeThisFrame();
};
mp.game2.hud.unk._0x2F057596F2BD0061 = function () {
    let $res = natives.isStorePendingNetworkShutdownToOpen();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.unk._0x5BFF36D6ED83E0AE = function () {
    let $res = natives.getPauseMenuPosition();
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.hud.unk._0x77F16B447824DA6C = function (p0) {
    let $res = natives.pauseMenuceptionGoDeeper(p0);
};
mp.game2.hud.unk._0xCDCA26E80FAECB8F = function () {
    let $res = natives.pauseMenuceptionTheKick();
};
mp.game2.hud.unk._0x2DE6C5E2E996F178 = function (p0) {
    let $res = natives.pauseToggleFullscreenMap(p0);
};
mp.game2.hud.unk._0xDE03620F8703A9DF = function () {
    let $res = natives.pauseMenuGetHairColourIndex();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.unk._0x359AF31A4B52F5ED = function () {
    let $res = natives.pauseMenuGetMouseHoverIndex();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.unk._0x13C4B962653A5280 = function () {
    let $res = natives.pauseMenuGetMouseHoverUniqueId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.unk._0xC8E1071177A23BE5 = function () {
    let $res = natives.pauseMenuGetMouseClickEvent(0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.hud.unk._0x4895BDEA16E7C080 = function (p0) {
    let $res = natives.pauseMenuRedrawInstructionalButtons(p0 | 0);
};
mp.game2.hud.unk._0xF06EBB91A81E09E3 = function (p0) {
    let $res = natives.pauseMenuSetWarnOnTabChange(p0 | 0);
};
mp.game2.hud.unk._0x66E7CB63C97B7D20 = function () {
    let $res = natives.codeWantsScriptToTakeControl();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.unk._0x593FEAE1F73392D4 = function () {
    let $res = natives.getScreenCodeWantsScriptToControl();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.hud.unk._0xF284AC67940C6812 = function () {
    let $res = natives.hasMenuTriggerEventOccurred();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.unk._0x2E22FEFA0100275E = function () {
    let $res = natives.hasMenuLayoutChangedEventOccurred();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.unk._0x0CF54F20DE43879C = function (p0) {
    let $res = natives.setSavegameListUniqueId(p0);
};
mp.game2.hud.unk._0xA238192F33110615 = function () {
    let $res = natives.getPmPlayerCrewColor(0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    $resObj.result = $res[1] == 1;
    return $resObj;
};
mp.game2.hud.unk._0xCA6B2F7CE32AB653 = function (p0, p2) {
    let $res = natives.getCharacterMenuPedIntStat(p0, 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.hud.unk._0x24A49BEAF468DC90 = function (p0, p2, p3, p4) {
    let $res = natives.getCharacterMenuPedMaskedIntStat(p0, 0, p2, p3, p4);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.hud.unk._0x8F08017F9D7C47BD = function (p0, p2) {
    let $res = natives.getCharacterMenuPedFloatStat(p0, 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.hud.unk._0xF13FE2A80C05C561 = function () {
    let $res = natives.areOnlinePoliciesUpToDate();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.hud.unk._0x1185A8087587322C = function (p0) {
    let $res = natives.setTextInputBoxEnabled(p0 | 0);
};
mp.game2.hud.unk._0x577599CCED639CA2 = function (p0) {
    let $res = natives.setAllowCommaOnTextInput(p0);
};
mp.game2.hud.unk._0x7C226D5346D4D10A = function (p0) {
    let $res = natives.mpTextChatIsTeamJob(p0);
};
mp.game2.hud.unk._0x04655F9D075D0AE5 = function (toggle) {
    let $res = natives.setDirectorModeAvailable(toggle | 0);
};
mp.game2.hud.unk._0x243296A510B562B6 = function () {
    let $res = natives.hideHudmarkersThisFrame();
};
mp.Player.prototype.clearRoomForEntity = function () {
    let $res = natives.clearRoomForEntity(this.handle);
};
mp.Ped.prototype.clearRoomForEntity = function () {
    let $res = natives.clearRoomForEntity(this.handle);
};
mp.Object.prototype.clearRoomForEntity = function () {
    let $res = natives.clearRoomForEntity(this.handle);
};
mp.Vehicle.prototype.clearRoomForEntity = function () {
    let $res = natives.clearRoomForEntity(this.handle);
};
mp.Player.prototype.forceRoomForEntity = function (interior, roomHashKey) {
    let $res = natives.forceRoomForEntity(this.handle, interior, roomHashKey);
};
mp.Ped.prototype.forceRoomForEntity = function (interior, roomHashKey) {
    let $res = natives.forceRoomForEntity(this.handle, interior, roomHashKey);
};
mp.Object.prototype.forceRoomForEntity = function (interior, roomHashKey) {
    let $res = natives.forceRoomForEntity(this.handle, interior, roomHashKey);
};
mp.Vehicle.prototype.forceRoomForEntity = function (interior, roomHashKey) {
    let $res = natives.forceRoomForEntity(this.handle, interior, roomHashKey);
};
mp.Player.prototype.getRoomKeyFromEntity = function () {
    let $res = natives.getRoomKeyFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getRoomKeyFromEntity = function () {
    let $res = natives.getRoomKeyFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getRoomKeyFromEntity = function () {
    let $res = natives.getRoomKeyFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getRoomKeyFromEntity = function () {
    let $res = natives.getRoomKeyFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getKeyForEntityInRoom = function () {
    let $res = natives.getKeyForEntityInRoom(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getKeyForEntityInRoom = function () {
    let $res = natives.getKeyForEntityInRoom(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getKeyForEntityInRoom = function () {
    let $res = natives.getKeyForEntityInRoom(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getKeyForEntityInRoom = function () {
    let $res = natives.getKeyForEntityInRoom(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getFromEntity = function () {
    let $res = natives.getInteriorFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getFromEntity = function () {
    let $res = natives.getInteriorFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getFromEntity = function () {
    let $res = natives.getInteriorFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getFromEntity = function () {
    let $res = natives.getInteriorFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.clearForEntity = function () {
    let $res = natives.clearInteriorStateOfEntity(this.handle);
};
mp.Ped.prototype.clearForEntity = function () {
    let $res = natives.clearInteriorStateOfEntity(this.handle);
};
mp.Object.prototype.clearForEntity = function () {
    let $res = natives.clearInteriorStateOfEntity(this.handle);
};
mp.Vehicle.prototype.clearForEntity = function () {
    let $res = natives.clearInteriorStateOfEntity(this.handle);
};
if (!mp.game2.interior) mp.game2.interior = {};
mp.game2.interior.getHeading = function (interior) {
    let $res = natives.getInteriorHeading(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.getInfo = function (interior) {
    let $res = natives.getInteriorLocationAndNamehash(interior, undefined, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.position = new mp.Vector3($res[1]);
    $resObj.nameHash = $res[2];
    return $resObj;
};
mp.game2.interior.getGroupId = function (interior) {
    let $res = natives.getInteriorGroupId(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.getInteriorGroupId = function (interior) {
    let $res = natives.getInteriorGroupId(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.getOffsetFromInWorldCoords = function (interior, x, y, z) {
    let $res = natives.getOffsetFromInteriorInWorldCoords(interior, x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.interior.getOffsetFromInteriorInWorldCoords = function (interior, x, y, z) {
    let $res = natives.getOffsetFromInteriorInWorldCoords(interior, x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.interior.isScene = function () {
    let $res = natives.isInteriorScene();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.isValid = function (interior) {
    let $res = natives.isValidInterior(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.isValidInterior = function (interior) {
    let $res = natives.isValidInterior(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.clearRoomForEntity = function (entity) {
    let $res = natives.clearRoomForEntity(entity);
};
mp.game2.interior.forceRoomForEntity = function (entity, interior, roomHashKey) {
    let $res = natives.forceRoomForEntity(entity, interior, roomHashKey);
};
mp.game2.interior.getRoomKeyFromEntity = function (entity) {
    let $res = natives.getRoomKeyFromEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.getKeyForEntityInRoom = function (entity) {
    let $res = natives.getKeyForEntityInRoom(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.getFromEntity = function (entity) {
    let $res = natives.getInteriorFromEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.clearForEntity = function (entity) {
    let $res = natives.clearInteriorStateOfEntity(entity);
};
mp.game2.interior.forceRoomForGameViewport = function (interiorID, roomHashKey) {
    let $res = natives.forceRoomForGameViewport(interiorID, roomHashKey);
};
mp.game2.interior.getRoomKeyForGameViewport = function () {
    let $res = natives.getRoomKeyForGameViewport();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.clearRoomForGameViewport = function () {
    let $res = natives.clearRoomForGameViewport();
};
mp.game2.interior.getFromGameplayCam = function () {
    let $res = natives.getInteriorFromPrimaryView();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.getAtCoords = function (x, y, z) {
    let $res = natives.getInteriorAtCoords(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.getInteriorAtCoords = function (x, y, z) {
    let $res = natives.getInteriorAtCoords(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.addPickupToRoomByName = function (pickup, roomName) {
    let $res = natives.addPickupToInteriorRoomByName(pickup, roomName);
};
mp.game2.interior.addPickupToInteriorRoomByName = function (pickup, roomName) {
    let $res = natives.addPickupToInteriorRoomByName(pickup, roomName);
};
mp.game2.interior.pinInMemory = function (interior) {
    let $res = natives.pinInteriorInMemory(interior);
};
mp.game2.interior.unpin = function (interior) {
    let $res = natives.unpinInterior(interior);
};
mp.game2.interior.unpinInterior = function (interior) {
    let $res = natives.unpinInterior(interior);
};
mp.game2.interior.isReady = function (interior) {
    let $res = natives.isInteriorReady(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.isInteriorReady = function (interior) {
    let $res = natives.isInteriorReady(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.getAtCoordsWithType = function (x, y, z, interiorType) {
    let $res = natives.getInteriorAtCoordsWithType(x, y, z, interiorType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.getInteriorAtCoordsWithType = function (x, y, z, interiorType) {
    let $res = natives.getInteriorAtCoordsWithType(x, y, z, interiorType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.getAtCoordsWithTypehash = function (x, y, z, typeHash) {
    let $res = natives.getInteriorAtCoordsWithTypehash(x, y, z, typeHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.unkGetInteriorAtCoords = function (x, y, z, typeHash) {
    let $res = natives.getInteriorAtCoordsWithTypehash(x, y, z, typeHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.isCollisionMarkedOutside = function (x, y, z) {
    let $res = natives.isCollisionMarkedOutside(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.areCoordsCollidingWithExterior = function (x, y, z) {
    let $res = natives.isCollisionMarkedOutside(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.getFromCollision = function (x, y, z) {
    let $res = natives.getInteriorFromCollision(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.getInteriorFromCollision = function (x, y, z) {
    let $res = natives.getInteriorFromCollision(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.activateEntitySet = function (interior, entitySetName) {
    let $res = natives.activateInteriorEntitySet(interior, entitySetName);
};
mp.game2.interior.enableInteriorProp = function (interior, entitySetName) {
    let $res = natives.activateInteriorEntitySet(interior, entitySetName);
};
mp.game2.interior.deactivateEntitySet = function (interior, entitySetName) {
    let $res = natives.deactivateInteriorEntitySet(interior, entitySetName);
};
mp.game2.interior.disableInteriorProp = function (interior, entitySetName) {
    let $res = natives.deactivateInteriorEntitySet(interior, entitySetName);
};
mp.game2.interior.isEntitySetActive = function (interior, entitySetName) {
    let $res = natives.isInteriorEntitySetActive(interior, entitySetName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.isInteriorPropEnabled = function (interior, entitySetName) {
    let $res = natives.isInteriorEntitySetActive(interior, entitySetName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.setEntitySetColor = function (interior, entitySetName, color) {
    let $res = natives.setInteriorEntitySetTintIndex(interior, entitySetName, color);
};
mp.game2.interior.refresh = function (interior) {
    let $res = natives.refreshInterior(interior);
};
mp.game2.interior.refreshInterior = function (interior) {
    let $res = natives.refreshInterior(interior);
};
mp.game2.interior.enableExteriorCullModelThisFrame = function (mapObjectHash) {
    let $res = natives.enableExteriorCullModelThisFrame(mapObjectHash);
};
mp.game2.interior.hideMapObjectThisFrame = function (mapObjectHash) {
    let $res = natives.enableExteriorCullModelThisFrame(mapObjectHash);
};
mp.game2.interior.enableScriptCullModelThisFrame = function (mapObjectHash) {
    let $res = natives.enableShadowCullModelThisFrame(mapObjectHash);
};
mp.game2.interior.disable = function (interior, toggle) {
    let $res = natives.disableInterior(interior, toggle | 0);
};
mp.game2.interior.disableInterior = function (interior, toggle) {
    let $res = natives.disableInterior(interior, toggle | 0);
};
mp.game2.interior.isDisabled = function (interior) {
    let $res = natives.isInteriorDisabled(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.isInteriorDisabled = function (interior) {
    let $res = natives.isInteriorDisabled(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.cap = function (interior, toggle) {
    let $res = natives.capInterior(interior, toggle | 0);
};
mp.game2.interior.capInterior = function (interior, toggle) {
    let $res = natives.capInterior(interior, toggle | 0);
};
mp.game2.interior.isCapped = function (interior) {
    let $res = natives.isInteriorCapped(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.interior.isInteriorCapped = function (interior) {
    let $res = natives.isInteriorCapped(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.interior) mp.game2.interior = {};
if (!mp.game2.interior.unk) mp.game2.interior.unk = {};
mp.game2.interior.unk._0x82EBB79E258FA2B7 = function (entity, interior) {
    let $res = natives.retainEntityInInterior(entity, interior);
};
mp.game2.interior.unk._0x38C1CB1CB119A016 = function (p0, p1) {
    let $res = natives.forceActivatingTrackingOnEntity(p0, p1);
};
mp.game2.interior.unk._0xAF348AFCB575A441 = function (roomName) {
    let $res = natives.setRoomForGameViewportByName(roomName);
};
mp.game2.interior.unk._0x405DC2AEF6AF95B9 = function (roomHashKey) {
    let $res = natives.setRoomForGameViewportByKey(roomHashKey);
};
mp.game2.interior.unk._0x4C2330E61D3DEB56 = function (interior) {
    let $res = natives.setInteriorInUse(interior);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.interior.unk._0x483ACA1176CA93F1 = function () {
    let $res = natives.activateInteriorGroupsUsingCamera();
};
mp.game2.interior.unk._0x7ECDF98587E92DEC = function (p0) {
    let $res = natives.enableStadiumProbesThisFrame(p0);
};
mp.game2.interior.unk._0x9E6542F0CE8E70A3 = function (toggle) {
    let $res = natives.disableMetroSystem(toggle | 0);
};
mp.game2.interior.unk._0x7241CCB7D020DB69 = function (entity, toggle) {
    let $res = natives.setIsExteriorOnly(entity, toggle | 0);
};
if (!mp.game2.itemset) mp.game2.itemset = {};
mp.game2.itemset.create = function (p0) {
    let $res = natives.createItemset(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.itemset.createItemset = function (p0) {
    let $res = natives.createItemset(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.itemset.destroy = function (p0) {
    let $res = natives.destroyItemset(p0);
};
mp.game2.itemset.destroyItemset = function (p0) {
    let $res = natives.destroyItemset(p0);
};
mp.game2.itemset.isValid = function (p0) {
    let $res = natives.isItemsetValid(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.itemset.isItemsetValid = function (p0) {
    let $res = natives.isItemsetValid(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.itemset.addTo = function (p0, p1) {
    let $res = natives.addToItemset(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.itemset.addToItemset = function (p0, p1) {
    let $res = natives.addToItemset(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.itemset.removeFrom = function (p0, p1) {
    let $res = natives.removeFromItemset(p0, p1);
};
mp.game2.itemset.removeFromItemset = function (p0, p1) {
    let $res = natives.removeFromItemset(p0, p1);
};
mp.game2.itemset.getSize = function (x) {
    let $res = natives.getItemsetSize(x);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.itemset.getItemsetSize = function (x) {
    let $res = natives.getItemsetSize(x);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.itemset.getIndexedItemIn = function (p0, p1) {
    let $res = natives.getIndexedItemInItemset(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.itemset.getIndexedItemInItemset = function (p0, p1) {
    let $res = natives.getIndexedItemInItemset(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.itemset.isIn = function (p0, p1) {
    let $res = natives.isInItemset(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.itemset.isInItemset = function (p0, p1) {
    let $res = natives.isInItemset(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.itemset.clean = function (p0) {
    let $res = natives.cleanItemset(p0);
};
mp.game2.itemset.cleanItemset = function (p0) {
    let $res = natives.cleanItemset(p0);
};
if (!mp.game2.loadingscreen) mp.game2.loadingscreen = {};
mp.game2.loadingscreen.getLoadFreemode = function () {
    let $res = natives.lobbyAutoMultiplayerFreemode();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.loadingscreen.setLoadFreemode = function (toggle) {
    let $res = natives.lobbySetAutoMultiplayer(toggle | 0);
};
mp.game2.loadingscreen.getBroadcastFinshedLosSound = function (toggle) {
    let $res = natives.lobbySetAutoMultiplayer(toggle | 0);
};
mp.game2.loadingscreen.getLoadFreemodeWithEventName = function () {
    let $res = natives.lobbyAutoMultiplayerEvent();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.loadingscreen.setLoadFreemodeWithEventName = function (toggle) {
    let $res = natives.lobbySetAutoMultiplayerEvent(toggle | 0);
};
mp.game2.loadingscreen.isLoadingFreemode = function () {
    let $res = natives.lobbyAutoMultiplayerRandomJob();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.loadingscreen.setIsLoadingFreemode = function (toggle) {
    let $res = natives.lobbySetAutoMpRandomJob(toggle | 0);
};
if (!mp.game2.loadingscreen) mp.game2.loadingscreen = {};
if (!mp.game2.loadingscreen.unk) mp.game2.loadingscreen.unk = {};
mp.game2.loadingscreen.unk._0xF2CA003F167E21D2 = function () {
    let $res = natives.lobbyAutoMultiplayerMenu();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.loadingscreen.unk._0xFA1E0E893D915215 = function (toggle) {
    let $res = natives.shutdownSessionClearsAutoMultiplayer(toggle | 0);
};
if (!mp.game2.localization) mp.game2.localization = {};
mp.game2.localization.getSystemLanguage = function () {
    let $res = natives.localizationGetSystemLanguage();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.localization.getCurrentLanguage = function () {
    let $res = natives.getCurrentLanguage();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.localization.getSystemDateFormat = function () {
    let $res = natives.localizationGetSystemDateType();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getCoordsOfProjectileTypeWithinDistance = function (weaponHash, distance, p4) {
    let $res = natives.getCoordsOfProjectileTypeWithinDistance(this.handle, weaponHash, distance, undefined, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outCoords = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.outCoords : undefined;
};
mp.Ped.prototype.getCoordsOfProjectileTypeWithinDistance = function (weaponHash, distance, p4) {
    let $res = natives.getCoordsOfProjectileTypeWithinDistance(this.handle, weaponHash, distance, undefined, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outCoords = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.outCoords : undefined;
};
mp.Player.prototype.getProjectileNearPed = function (weaponHash, distance, p5) {
    let $res = natives.getProjectileOfProjectileTypeWithinDistance(this.handle, weaponHash, distance, undefined, 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outCoords = new mp.Vector3($res[1]);
    $resObj.outProjectile = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.Ped.prototype.getProjectileNearPed = function (weaponHash, distance, p5) {
    let $res = natives.getProjectileOfProjectileTypeWithinDistance(this.handle, weaponHash, distance, undefined, 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outCoords = new mp.Vector3($res[1]);
    $resObj.outProjectile = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.Blip.prototype.isBulletInAngledArea = function (y1, z1, x2, y2, z2, width, ownedByPlayer) {
    let $res = natives.isBulletInAngledArea(this.handle, y1, z1, x2, y2, z2, width, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.isBulletInArea = function (y, z, radius, ownedByPlayer) {
    let $res = natives.isBulletInArea(this.handle, y, z, radius, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.isBulletInBox = function (y1, z1, x2, y2, z2, ownedByPlayer) {
    let $res = natives.isBulletInBox(this.handle, y1, z1, x2, y2, z2, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.hasBulletImpactedInArea = function (y, z, p3, p4, p5) {
    let $res = natives.hasBulletImpactedInArea(this.handle, y, z, p3, p4 | 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.hasBulletImpactedInBox = function (p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.hasBulletImpactedInBox(this.handle, p1, p2, p3, p4, p5, p6 | 0, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.getBitsInRange = function (rangeStart, rangeEnd) {
    let $res = natives.getBitsInRange(this.handle, rangeStart, rangeEnd);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.hasButtonCombinationJustBeenEntered = function (amount) {
    let $res = natives.hasCheatWithHashBeenActivated(this.handle, amount);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.enableTennisMode = function (toggle, p2) {
    let $res = natives.enableTennisMode(this.handle, toggle | 0, p2 | 0);
};
mp.Ped.prototype.enableTennisMode = function (toggle, p2) {
    let $res = natives.enableTennisMode(this.handle, toggle | 0, p2 | 0);
};
mp.Player.prototype.isTennisMode = function () {
    let $res = natives.isTennisMode(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isTennisMode = function () {
    let $res = natives.isTennisMode(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.playTennisSwingAnim = function (animDict, animName, p3, p4, p5) {
    let $res = natives.playTennisSwingAnim(this.handle, animDict, animName, p3, p4, p5 | 0);
};
mp.Ped.prototype.playTennisSwingAnim = function (animDict, animName, p3, p4, p5) {
    let $res = natives.playTennisSwingAnim(this.handle, animDict, animName, p3, p4, p5 | 0);
};
mp.Player.prototype.getTennisSwingAnimComplete = function () {
    let $res = natives.getTennisSwingAnimComplete(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getTennisSwingAnimComplete = function () {
    let $res = natives.getTennisSwingAnimComplete(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.playTennisDiveAnim = function (p1, p2, p3, p4, p5) {
    let $res = natives.playTennisDiveAnim(this.handle, p1, p2, p3, p4, p5 | 0);
};
mp.Ped.prototype.playTennisDiveAnim = function (p1, p2, p3, p4, p5) {
    let $res = natives.playTennisDiveAnim(this.handle, p1, p2, p3, p4, p5 | 0);
};
mp.Blip.prototype.setBeastModeActive = function () {
    let $res = natives.setBeastJumpThisFrame(this.handle);
};
if (!mp.game2.misc) mp.game2.misc = {};
mp.game2.misc.getAllocatedStackSize = function () {
    let $res = natives.getAllocatedStackSize();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getNumberOfFreeStacksOfThisSize = function (stackSize) {
    let $res = natives.getNumberOfFreeStacksOfThisSize(stackSize);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getFreeStackSlotsCount = function (stackSize) {
    let $res = natives.getNumberOfFreeStacksOfThisSize(stackSize);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.setRandomSeed = function (seed) {
    let $res = natives.setRandomSeed(seed);
};
mp.game2.misc.setTimeScale = function (timeScale) {
    let $res = natives.setTimeScale(timeScale);
};
mp.game2.misc.setMissionFlag = function (toggle) {
    let $res = natives.setMissionFlag(toggle | 0);
};
mp.game2.misc.getMissionFlag = function () {
    let $res = natives.getMissionFlag();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.setRandomEventFlag = function (toggle) {
    let $res = natives.setRandomEventFlag(toggle | 0);
};
mp.game2.misc.getRandomEventFlag = function () {
    let $res = natives.getRandomEventFlag();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.getGlobalCharBuffer = function () {
    let $res = natives.getContentToLoad();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.hasResumedFromSuspend = function () {
    let $res = natives.hasResumedFromSuspend();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.getBaseElementMetadata = function (p2, p3) {
    let $res = natives.getBaseElementLocationFromMetadataBlock(0, 0, p2, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.misc.getPrevWeatherTypeHashName = function () {
    let $res = natives.getPrevWeatherTypeHashName();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getNextWeatherTypeHashName = function () {
    let $res = natives.getNextWeatherTypeHashName();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.isPrevWeatherType = function (weatherType) {
    let $res = natives.isPrevWeatherType(weatherType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isNextWeatherType = function (weatherType) {
    let $res = natives.isNextWeatherType(weatherType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.setWeatherTypePersist = function (weatherType) {
    let $res = natives.setWeatherTypePersist(weatherType);
};
mp.game2.misc.setWeatherTypeNowPersist = function (weatherType) {
    let $res = natives.setWeatherTypeNowPersist(weatherType);
};
mp.game2.misc.setWeatherTypeNow = function (weatherType) {
    let $res = natives.setWeatherTypeNow(weatherType);
};
mp.game2.misc.setWeatherTypeOvertimePersist = function (weatherType, time) {
    let $res = natives.setWeatherTypeOvertimePersist(weatherType, time);
};
mp.game2.misc.setWeatherTypeOverTime = function (weatherType, time) {
    let $res = natives.setWeatherTypeOvertimePersist(weatherType, time);
};
mp.game2.misc.setRandomWeatherType = function () {
    let $res = natives.setRandomWeatherType();
};
mp.game2.misc.clearWeatherTypePersist = function () {
    let $res = natives.clearWeatherTypePersist();
};
mp.game2.misc.clearWeatherTypeOvertimePersist = function (milliseconds) {
    let $res = natives.clearWeatherTypeNowPersistNetwork(milliseconds);
};
mp.game2.misc.getWeatherTypeTransition = function () {
    let $res = natives.getCurrWeatherState(0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weatherType1 = $res[1];
    $resObj.weatherType2 = $res[2];
    $resObj.percentWeather2 = $res[3];
    return $resObj;
};
mp.game2.misc.setWeatherTypeTransition = function (weatherType1, weatherType2, percentWeather2) {
    let $res = natives.setCurrWeatherState(weatherType1, weatherType2, percentWeather2);
};
mp.game2.misc.setOverrideWeather = function (weatherType) {
    let $res = natives.setOverrideWeather(weatherType);
};
mp.game2.misc.clearOverrideWeather = function () {
    let $res = natives.clearOverrideWeather();
};
mp.game2.misc.waterOverrideSetShorewaveamplitude = function (amplitude) {
    let $res = natives.waterOverrideSetShorewaveamplitude(amplitude);
};
mp.game2.misc.waterOverrideSetShorewaveminamplitude = function (minAmplitude) {
    let $res = natives.waterOverrideSetShorewaveminamplitude(minAmplitude);
};
mp.game2.misc.waterOverrideSetShorewavemaxamplitude = function (maxAmplitude) {
    let $res = natives.waterOverrideSetShorewavemaxamplitude(maxAmplitude);
};
mp.game2.misc.waterOverrideSetOceannoiseminamplitude = function (minAmplitude) {
    let $res = natives.waterOverrideSetOceannoiseminamplitude(minAmplitude);
};
mp.game2.misc.waterOverrideSetOceanwaveamplitude = function (amplitude) {
    let $res = natives.waterOverrideSetOceanwaveamplitude(amplitude);
};
mp.game2.misc.waterOverrideSetOceanwaveminamplitude = function (minAmplitude) {
    let $res = natives.waterOverrideSetOceanwaveminamplitude(minAmplitude);
};
mp.game2.misc.waterOverrideSetOceanwavemaxamplitude = function (maxAmplitude) {
    let $res = natives.waterOverrideSetOceanwavemaxamplitude(maxAmplitude);
};
mp.game2.misc.waterOverrideSetRipplebumpiness = function (bumpiness) {
    let $res = natives.waterOverrideSetRipplebumpiness(bumpiness);
};
mp.game2.misc.waterOverrideSetRippleminbumpiness = function (minBumpiness) {
    let $res = natives.waterOverrideSetRippleminbumpiness(minBumpiness);
};
mp.game2.misc.waterOverrideSetRipplemaxbumpiness = function (maxBumpiness) {
    let $res = natives.waterOverrideSetRipplemaxbumpiness(maxBumpiness);
};
mp.game2.misc.waterOverrideSetRippledisturb = function (disturb) {
    let $res = natives.waterOverrideSetRippledisturb(disturb);
};
mp.game2.misc.waterOverrideSetStrength = function (strength) {
    let $res = natives.waterOverrideSetStrength(strength);
};
mp.game2.misc.waterOverrideFadeIn = function (p0) {
    let $res = natives.waterOverrideFadeIn(p0);
};
mp.game2.misc.waterOverrideFadeOut = function (p0) {
    let $res = natives.waterOverrideFadeOut(p0);
};
mp.game2.misc.setWind = function (speed) {
    let $res = natives.setWind(speed);
};
mp.game2.misc.setWindSpeed = function (speed) {
    let $res = natives.setWindSpeed(speed);
};
mp.game2.misc.getWindSpeed = function () {
    let $res = natives.getWindSpeed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.setWindDirection = function (direction) {
    let $res = natives.setWindDirection(direction);
};
mp.game2.misc.getWindDirection = function () {
    let $res = natives.getWindDirection();
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.misc.setRainLevel = function (intensity) {
    let $res = natives.setRain(intensity);
};
mp.game2.misc.setRainFxIntensity = function (intensity) {
    let $res = natives.setRain(intensity);
};
mp.game2.misc.getRainLevel = function () {
    let $res = natives.getRainLevel();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.setSnowLevel = function (level) {
    let $res = natives.setSnow(level);
};
mp.game2.misc.getSnowLevel = function () {
    let $res = natives.getSnowLevel();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.forceLightningFlash = function () {
    let $res = natives.forceLightningFlash();
};
mp.game2.misc.preloadCloudHat = function (name) {
    let $res = natives.preloadCloudHat(name);
};
mp.game2.misc.loadCloudHat = function (name, transitionTime) {
    let $res = natives.loadCloudHat(name, transitionTime);
};
mp.game2.misc.setCloudHatTransition = function (name, transitionTime) {
    let $res = natives.loadCloudHat(name, transitionTime);
};
mp.game2.misc.unloadCloudHat = function (name, p1) {
    let $res = natives.unloadCloudHat(name, p1);
};
mp.game2.misc.clearCloudHat = function () {
    let $res = natives.unloadAllCloudHats();
};
mp.game2.misc.setCloudHatOpacity = function (opacity) {
    let $res = natives.setCloudsAlpha(opacity);
};
mp.game2.misc.getCloudHatOpacity = function () {
    let $res = natives.getCloudsAlpha();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getGameTimer = function () {
    let $res = natives.getGameTimer();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getFrameTime = function () {
    let $res = natives.getFrameTime();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getBenchmarkTime = function () {
    let $res = natives.getSystemTimeStep();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getFrameCount = function () {
    let $res = natives.getFrameCount();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getRandomFloatInRange = function (startRange, endRange) {
    let $res = natives.getRandomFloatInRange(startRange, endRange);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getRandomIntInRange = function (startRange, endRange) {
    let $res = natives.getRandomIntInRange(startRange, endRange);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getRandomIntInRange2 = function (startRange, endRange) {
    let $res = natives.getRandomMwcIntInRange(startRange, endRange);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getGroundZFor3DCoord = function (x, y, z, ignoreWater, p5) {
    let $res = natives.getGroundZFor3dCoord(x, y, z, 0, ignoreWater | 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.groundZ = $res[1];
    return $res[0] == 1 ? $resObj.groundZ : undefined;
};
mp.game2.misc.getGroundZAndNormalFor3DCoord = function (x, y, z) {
    let $res = natives.getGroundZAndNormalFor3dCoord(x, y, z, 0, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.groundZ = $res[1];
    $resObj.normal = new mp.Vector3($res[2]);
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.misc.getGroundZFor3DCoord2 = function (x, y, z, p4, p5) {
    let $res = natives.getGroundZExcludingObjectsFor3dCoord(x, y, z, 0, p4 | 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.groundZ = $res[1];
    return $res[0] == 1 ? $resObj.groundZ : undefined;
};
mp.game2.misc.asin = function (p0) {
    let $res = natives.asin(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.acos = function (p0) {
    let $res = natives.acos(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.tan = function (p0) {
    let $res = natives.tan(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.atan = function (p0) {
    let $res = natives.atan(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.atan2 = function (p0, p1) {
    let $res = natives.atan2(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getDistanceBetweenCoords = function (x1, y1, z1, x2, y2, z2, useZ) {
    let $res = natives.getDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getAngleBetween2DVectors = function (x1, y1, x2, y2) {
    let $res = natives.getAngleBetween2dVectors(x1, y1, x2, y2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getHeadingFromVector2D = function (dx, dy) {
    let $res = natives.getHeadingFromVector2d(dx, dy);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.setBit = function (offset) {
    let $res = natives.setBit(0, offset);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.address = $res[1];
    return $resObj.address;
};
mp.game2.misc.clearBit = function (offset) {
    let $res = natives.clearBit(0, offset);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.address = $res[1];
    return $resObj.address;
};
mp.game2.misc.getHashKey = function (string) {
    let $res = natives.getHashKey(string);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.slerpNearQuaternion = function (t, x, y, z, w, x1, y1, z1, w1) {
    let $res = natives.slerpNearQuaternion(t, x, y, z, w, x1, y1, z1, w1, 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outX = $res[1];
    $resObj.outY = $res[2];
    $resObj.outZ = $res[3];
    $resObj.outW = $res[4];
    return $resObj;
};
mp.game2.misc.isAreaOccupied = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    let $res = natives.isAreaOccupied(p0, p1, p2, p3, p4, p5, p6 | 0, p7 | 0, p8 | 0, p9 | 0, p10 | 0, p11, p12 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isPositionOccupied = function (x, y, z, range, p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10) {
    let $res = natives.isPositionOccupied(x, y, z, range, p4 | 0, checkVehicles | 0, checkPeds | 0, p7 | 0, p8 | 0, ignoreEntity, p10 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isPointObscuredByAMissionEntity = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.isPointObscuredByAMissionEntity(p0, p1, p2, p3, p4, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.clearArea = function (X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7) {
    let $res = natives.clearArea(X, Y, Z, radius, p4 | 0, ignoreCopCars | 0, ignoreObjects | 0, p7 | 0);
};
mp.game2.misc.clearAreaLeaveVehicleHealth = function (x, y, z, radius, p4, p5, p6, p7) {
    let $res = natives.clearAreaLeaveVehicleHealth(x, y, z, radius, p4 | 0, p5 | 0, p6 | 0, p7 | 0);
};
mp.game2.misc.clearAreaOfEverything = function (x, y, z, radius, p4, p5, p6, p7) {
    let $res = natives.clearAreaLeaveVehicleHealth(x, y, z, radius, p4 | 0, p5 | 0, p6 | 0, p7 | 0);
};
mp.game2.misc.clearAreaOfVehicles = function (x, y, z, radius, p4, p5, p6, p7, p8, p9) {
    let $res = natives.clearAreaOfVehicles(x, y, z, radius, p4 | 0, p5 | 0, p6 | 0, p7 | 0, p8 | 0, p9 | 0, 0);
};
mp.game2.misc.clearAngledAreaOfVehicles = function (x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11, p12) {
    let $res = natives.clearAngledAreaOfVehicles(x1, y1, z1, x2, y2, z2, width, p7 | 0, p8 | 0, p9 | 0, p10 | 0, p11 | 0, p12 | 0, 0);
};
mp.game2.misc.clearAreaOfObjects = function (x, y, z, radius, flags) {
    let $res = natives.clearAreaOfObjects(x, y, z, radius, flags);
};
mp.game2.misc.clearAreaOfPeds = function (x, y, z, radius, flags) {
    let $res = natives.clearAreaOfPeds(x, y, z, radius, flags);
};
mp.game2.misc.clearAreaOfCops = function (x, y, z, radius, flags) {
    let $res = natives.clearAreaOfCops(x, y, z, radius, flags);
};
mp.game2.misc.clearAreaOfProjectiles = function (x, y, z, radius, flags) {
    let $res = natives.clearAreaOfProjectiles(x, y, z, radius, flags);
};
mp.game2.misc.setSaveMenuActive = function (ignoreVehicle) {
    let $res = natives.setSaveMenuActive(ignoreVehicle | 0);
};
mp.game2.misc.setCreditsActive = function (toggle) {
    let $res = natives.setCreditsActive(toggle | 0);
};
mp.game2.misc.haveCreditsReachedEnd = function () {
    let $res = natives.haveCreditsReachedEnd();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.terminateAllScriptsWithThisName = function (scriptName) {
    let $res = natives.terminateAllScriptsWithThisName(scriptName);
};
mp.game2.misc.networkSetScriptIsSafeForNetworkGame = function () {
    let $res = natives.networkSetScriptIsSafeForNetworkGame();
};
mp.game2.misc.addHospitalRestart = function (x, y, z, p3, p4) {
    let $res = natives.addHospitalRestart(x, y, z, p3, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.disableHospitalRestart = function (hospitalIndex, toggle) {
    let $res = natives.disableHospitalRestart(hospitalIndex, toggle | 0);
};
mp.game2.misc.addPoliceRestart = function (p0, p1, p2, p3, p4) {
    let $res = natives.addPoliceRestart(p0, p1, p2, p3, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.disablePoliceRestart = function (policeIndex, toggle) {
    let $res = natives.disablePoliceRestart(policeIndex, toggle | 0);
};
mp.game2.misc.setRestartCustomPosition = function (x, y, z, heading) {
    let $res = natives.setRestartCoordOverride(x, y, z, heading);
};
mp.game2.misc.clearRestartCustomPosition = function () {
    let $res = natives.clearRestartCoordOverride();
};
mp.game2.misc.pauseDeathArrestRestart = function (toggle) {
    let $res = natives.pauseDeathArrestRestart(toggle | 0);
};
mp.game2.misc.disableAutomaticRespawn = function (toggle) {
    let $res = natives.pauseDeathArrestRestart(toggle | 0);
};
mp.game2.misc.ignoreNextRestart = function (toggle) {
    let $res = natives.ignoreNextRestart(toggle | 0);
};
mp.game2.misc.setFadeOutAfterDeath = function (toggle) {
    let $res = natives.setFadeOutAfterDeath(toggle | 0);
};
mp.game2.misc.setFadeOutAfterArrest = function (toggle) {
    let $res = natives.setFadeOutAfterArrest(toggle | 0);
};
mp.game2.misc.setFadeInAfterDeathArrest = function (toggle) {
    let $res = natives.setFadeInAfterDeathArrest(toggle | 0);
};
mp.game2.misc.setFadeInAfterLoad = function (toggle) {
    let $res = natives.setFadeInAfterLoad(toggle | 0);
};
mp.game2.misc.registerSaveHouse = function (p0, p1, p2, p3, p5, p6) {
    let $res = natives.registerSaveHouse(p0, p1, p2, p3, null, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p4 = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.misc.setSaveHouse = function (p0, p1, p2) {
    let $res = natives.setSaveHouse(p0, p1 | 0, p2 | 0);
};
mp.game2.misc.overrideSaveHouse = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.overrideSaveHouse(p0 | 0, p1, p2, p3, p4, p5 | 0, p6, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.doAutoSave = function () {
    let $res = natives.doAutoSave();
};
mp.game2.misc.getIsAutoSaveOff = function () {
    let $res = natives.getIsAutoSaveOff();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isAutoSaveInProgress = function () {
    let $res = natives.isAutoSaveInProgress();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.hasCodeRequestedAutosave = function () {
    let $res = natives.hasCodeRequestedAutosave();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.clearCodeRequestedAutosave = function () {
    let $res = natives.clearCodeRequestedAutosave();
};
mp.game2.misc.beginReplayStats = function (p0, p1) {
    let $res = natives.beginReplayStats(p0, p1);
};
mp.game2.misc.addReplayStatValue = function (value) {
    let $res = natives.addReplayStatValue(value);
};
mp.game2.misc.endReplayStats = function () {
    let $res = natives.endReplayStats();
};
mp.game2.misc.haveReplayStatsBeenStored = function () {
    let $res = natives.haveReplayStatsBeenStored();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getReplayStatMissionId = function () {
    let $res = natives.getReplayStatMissionId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getReplayStatMissionType = function () {
    let $res = natives.getReplayStatMissionType();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getReplayStatCount = function () {
    let $res = natives.getReplayStatCount();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getReplayStatAtIndex = function (index) {
    let $res = natives.getReplayStatAtIndex(index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.clearReplayStats = function () {
    let $res = natives.clearReplayStats();
};
mp.game2.misc.queueMissionRepeatLoad = function () {
    let $res = natives.queueMissionRepeatLoad();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.queueMissionRepeatSave = function () {
    let $res = natives.queueMissionRepeatSave();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.getStatusOfMissionRepeatSave = function () {
    let $res = natives.getStatusOfMissionRepeatSave();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.isMemoryCardInUse = function () {
    let $res = natives.isMemoryCardInUse();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.shootSingleBulletBetweenCoords = function (x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed) {
    let $res = natives.shootSingleBulletBetweenCoords(x1, y1, z1, x2, y2, z2, damage, p7 | 0, weaponHash, ownerPed, isAudible | 0, isInvisible | 0, speed);
};
mp.game2.misc.shootSingleBulletBetweenCoordsIgnoreEntity = function (x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14) {
    let $res = natives.shootSingleBulletBetweenCoordsIgnoreEntity(x1, y1, z1, x2, y2, z2, damage, p7 | 0, weaponHash, ownerPed, isAudible | 0, isInvisible | 0, speed, entity, p14);
};
mp.game2.misc.shootSingleBulletBetweenCoordsIgnoreEntityNew = function (x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, p16, p17, p18, p19, p20) {
    let $res = natives.shootSingleBulletBetweenCoordsIgnoreEntityNew(x1, y1, z1, x2, y2, z2, damage, p7 | 0, weaponHash, ownerPed, isAudible | 0, isInvisible | 0, speed, entity, p14 | 0, p15 | 0, p16 | 0, p17 | 0, p18, p19, p20);
};
mp.game2.misc.getModelDimensions = function (modelHash) {
    let $res = natives.getModelDimensions(modelHash, undefined, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.minimum = new mp.Vector3($res[1]);
    $resObj.maximum = new mp.Vector3($res[2]);
    return $resObj;
};
mp.game2.misc.setFakeWantedLevel = function (fakeWantedLevel) {
    let $res = natives.setFakeWantedLevel(fakeWantedLevel);
};
mp.game2.misc.getFakeWantedLevel = function () {
    let $res = natives.getFakeWantedLevel();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.usingMissionCreator = function (toggle) {
    let $res = natives.usingMissionCreator(toggle | 0);
};
mp.game2.misc.allowMissionCreatorWarp = function (toggle) {
    let $res = natives.allowMissionCreatorWarp(toggle | 0);
};
mp.game2.misc.setMinigameInProgress = function (toggle) {
    let $res = natives.setMinigameInProgress(toggle | 0);
};
mp.game2.misc.isMinigameInProgress = function () {
    let $res = natives.isMinigameInProgress();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isThisAMinigameScript = function () {
    let $res = natives.isThisAMinigameScript();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isSniperInverted = function () {
    let $res = natives.isSniperInverted();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.shouldUseMetricMeasurements = function () {
    let $res = natives.shouldUseMetricMeasurements();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.getProfileSetting = function (profileSetting) {
    let $res = natives.getProfileSetting(profileSetting);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.areStringsEqual = function (string1, string2) {
    let $res = natives.areStringsEqual(string1, string2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.compareStrings = function (str1, str2, matchCase, maxLength) {
    let $res = natives.compareStrings(str1, str2, matchCase | 0, maxLength);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.absi = function (value) {
    let $res = natives.absi(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.absf = function (value) {
    let $res = natives.absf(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.isSniperBulletInArea = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.isSniperBulletInArea(x1, y1, z1, x2, y2, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isProjectileInArea = function (x1, y1, z1, x2, y2, z2, ownedByPlayer) {
    let $res = natives.isProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isProjectileTypeInArea = function (x1, y1, z1, x2, y2, z2, type, ownedByPlayer) {
    let $res = natives.isProjectileTypeInArea(x1, y1, z1, x2, y2, z2, type, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isProjectileTypeInAngledArea = function (x1, y1, z1, x2, y2, z2, width, p7, ownedByPlayer) {
    let $res = natives.isProjectileTypeInAngledArea(x1, y1, z1, x2, y2, z2, width, p7, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isProjectileTypeWithinDistance = function (x, y, z, projectileHash, radius, ownedByPlayer) {
    let $res = natives.isProjectileTypeWithinDistance(x, y, z, projectileHash, radius, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.getCoordsOfProjectileTypeInArea = function (x1, y1, z1, x2, y2, z2, projectileHash, ownedByPlayer) {
    let $res = natives.getCoordsOfProjectileTypeInArea(x1, y1, z1, x2, y2, z2, projectileHash, undefined, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.projectilePos = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.projectilePos : undefined;
};
mp.game2.misc.getCoordsOfProjectileTypeWithinDistance = function (ped, weaponHash, distance, p4) {
    let $res = natives.getCoordsOfProjectileTypeWithinDistance(ped, weaponHash, distance, undefined, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outCoords = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.outCoords : undefined;
};
mp.game2.misc.getProjectileNearPed = function (ped, weaponHash, distance, p5) {
    let $res = natives.getProjectileOfProjectileTypeWithinDistance(ped, weaponHash, distance, undefined, 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outCoords = new mp.Vector3($res[1]);
    $resObj.outProjectile = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.misc.isBulletInAngledArea = function (x1, y1, z1, x2, y2, z2, width, ownedByPlayer) {
    let $res = natives.isBulletInAngledArea(x1, y1, z1, x2, y2, z2, width, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isBulletInArea = function (x, y, z, radius, ownedByPlayer) {
    let $res = natives.isBulletInArea(x, y, z, radius, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isBulletInBox = function (x1, y1, z1, x2, y2, z2, ownedByPlayer) {
    let $res = natives.isBulletInBox(x1, y1, z1, x2, y2, z2, ownedByPlayer | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.hasBulletImpactedInArea = function (x, y, z, p3, p4, p5) {
    let $res = natives.hasBulletImpactedInArea(x, y, z, p3, p4 | 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.hasBulletImpactedInBox = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.hasBulletImpactedInBox(p0, p1, p2, p3, p4, p5, p6 | 0, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isOrbisVersion = function () {
    let $res = natives.isOrbisVersion();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isDurangoVersion = function () {
    let $res = natives.isDurangoVersion();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isXbox360Version = function () {
    let $res = natives.isXbox360Version();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isPs3Version = function () {
    let $res = natives.isPs3Version();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isPcVersion = function () {
    let $res = natives.isPcVersion();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isAussieVersion = function () {
    let $res = natives.isAussieVersion();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isStringNull = function (string) {
    let $res = natives.isStringNull(string);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isStringNullOrEmpty = function (string) {
    let $res = natives.isStringNullOrEmpty(string);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.stringToInt = function (string) {
    let $res = natives.stringToInt(string, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outInteger = $res[1];
    return $res[0] == 1 ? $resObj.outInteger : undefined;
};
mp.game2.misc.setBitsInRange = function (rangeStart, rangeEnd, p3) {
    let $res = natives.setBitsInRange(0, rangeStart, rangeEnd, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.variable = $res[1];
    return $resObj.variable;
};
mp.game2.misc.getBitsInRange = function (variable, rangeStart, rangeEnd) {
    let $res = natives.getBitsInRange(variable, rangeStart, rangeEnd);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.addStuntJump = function (x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, p15, p16, p17) {
    let $res = natives.addStuntJump(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, p15, p16, p17 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.addStuntJumpAngled = function (x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, p17, p18, p19) {
    let $res = natives.addStuntJumpAngled(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, p17, p18, p19 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.deleteStuntJump = function (p0) {
    let $res = natives.deleteStuntJump(p0);
};
mp.game2.misc.enableStuntJumpSet = function (p0) {
    let $res = natives.enableStuntJumpSet(p0);
};
mp.game2.misc.disableStuntJumpSet = function (p0) {
    let $res = natives.disableStuntJumpSet(p0);
};
mp.game2.misc.setStuntJumpsCanTrigger = function (toggle) {
    let $res = natives.setStuntJumpsCanTrigger(toggle | 0);
};
mp.game2.misc.isStuntJumpInProgress = function () {
    let $res = natives.isStuntJumpInProgress();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isStuntJumpMessageShowing = function () {
    let $res = natives.isStuntJumpMessageShowing();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.getNumSuccessfulStuntJumps = function () {
    let $res = natives.getNumSuccessfulStuntJumps();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getTotalSuccessfulStuntJumps = function () {
    let $res = natives.getTotalSuccessfulStuntJumps();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.cancelStuntJump = function () {
    let $res = natives.cancelStuntJump();
};
mp.game2.misc.setGamePaused = function (toggle) {
    let $res = natives.setGamePaused(toggle | 0);
};
mp.game2.misc.setThisScriptCanBePaused = function (toggle) {
    let $res = natives.setThisScriptCanBePaused(toggle | 0);
};
mp.game2.misc.setThisScriptCanRemoveBlipsCreatedByAnyScript = function (toggle) {
    let $res = natives.setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle | 0);
};
mp.game2.misc.hasButtonCombinationJustBeenEntered = function (hash, amount) {
    let $res = natives.hasCheatWithHashBeenActivated(hash, amount);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.hasCheatStringJustBeenEntered = function (hash) {
    let $res = natives.hasPcCheatWithHashBeenActivated(hash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.setInstancePriorityMode = function (p0) {
    let $res = natives.setInstancePriorityMode(p0 | 0);
};
mp.game2.misc.enableMpDlcMaps = function (p0) {
    let $res = natives.setInstancePriorityMode(p0 | 0);
};
mp.game2.misc.setInstancePriorityHint = function (flag) {
    let $res = natives.setInstancePriorityHint(flag);
};
mp.game2.misc.setUnkMapFlag = function (flag) {
    let $res = natives.setInstancePriorityHint(flag);
};
mp.game2.misc.isFrontendFading = function () {
    let $res = natives.isFrontendFading();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.populateNow = function () {
    let $res = natives.populateNow();
};
mp.game2.misc.getIndexOfCurrentLevel = function () {
    let $res = natives.getIndexOfCurrentLevel();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.setGravityLevel = function (level) {
    let $res = natives.setGravityLevel(level);
};
mp.game2.misc.startSaveData = function (p1, p2) {
    let $res = natives.startSaveData(0, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.stopSaveData = function () {
    let $res = natives.stopSaveData();
};
mp.game2.misc.getSizeOfSaveData = function (p0) {
    let $res = natives.getSizeOfSaveData(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.registerIntToSave = function (name) {
    let $res = natives.registerIntToSave(0, name);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.registerInt64ToSave = function (name) {
    let $res = natives.registerInt64ToSave(0, name);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.registerEnumToSave = function (name) {
    let $res = natives.registerEnumToSave(0, name);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.registerFloatToSave = function (name) {
    let $res = natives.registerFloatToSave(0, name);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.registerBoolToSave = function (name) {
    let $res = natives.registerBoolToSave(0, name);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.registerTextLabelToSave = function (name) {
    let $res = natives.registerTextLabelToSave(0, name);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.registerTextLabelToSave2 = function (name) {
    let $res = natives.registerTextLabel15ToSave(0, name);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.startSaveStructWithSize = function (size, structName) {
    let $res = natives.startSaveStructWithSize(0, size, structName);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.startSaveStruct = function (size, structName) {
    let $res = natives.startSaveStructWithSize(0, size, structName);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.stopSaveStruct = function () {
    let $res = natives.stopSaveStruct();
};
mp.game2.misc.startSaveArrayWithSize = function (size, arrayName) {
    let $res = natives.startSaveArrayWithSize(0, size, arrayName);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.startSaveArray = function (size, arrayName) {
    let $res = natives.startSaveArrayWithSize(0, size, arrayName);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.stopSaveArray = function () {
    let $res = natives.stopSaveArray();
};
mp.game2.misc.copyMemory = function (size) {
    let $res = natives.copyScriptStruct(0, 0, size);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.dst = $res[0];
    $resObj.src = $res[0];
    return $resObj;
};
mp.game2.misc.enableDispatchService = function (dispatchService, toggle) {
    let $res = natives.enableDispatchService(dispatchService, toggle | 0);
};
mp.game2.misc.blockDispatchServiceResourceCreation = function (dispatchService, toggle) {
    let $res = natives.blockDispatchServiceResourceCreation(dispatchService, toggle | 0);
};
mp.game2.misc.getNumDispatchedUnitsForPlayer = function (dispatchService) {
    let $res = natives.getNumberResourcesAllocatedToWantedLevel(dispatchService);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.createIncident = function (dispatchService, x, y, z, numUnits, radius, p7, p8) {
    let $res = natives.createIncident(dispatchService, x, y, z, numUnits, radius, 0, p7 | 0, p8 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outIncidentID = $res[1];
    return $res[0] == 1 ? $resObj.outIncidentID : undefined;
};
mp.game2.misc.createIncidentWithEntity = function (dispatchService, ped, numUnits, radius, p5, p6) {
    let $res = natives.createIncidentWithEntity(dispatchService, ped, numUnits, radius, 0, p5 | 0, p6 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outIncidentID = $res[1];
    return $res[0] == 1 ? $resObj.outIncidentID : undefined;
};
mp.game2.misc.deleteIncident = function (incidentId) {
    let $res = natives.deleteIncident(incidentId);
};
mp.game2.misc.isIncidentValid = function (incidentId) {
    let $res = natives.isIncidentValid(incidentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.setIncidentRequestedUnits = function (incidentId, dispatchService, numUnits) {
    let $res = natives.setIncidentRequestedUnits(incidentId, dispatchService, numUnits);
};
mp.game2.misc.setIncidentUnk = function (incidentId, p1) {
    let $res = natives.setIdealSpawnDistanceForIncident(incidentId, p1);
};
mp.game2.misc.findSpawnPointInDirection = function (x1, y1, z1, x2, y2, z2, distance) {
    let $res = natives.findSpawnPointInDirection(x1, y1, z1, x2, y2, z2, distance, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.spawnPoint = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.spawnPoint : undefined;
};
mp.game2.misc.addPopMultiplierArea = function (x1, y1, z1, x2, y2, z2, p6, p7, p8, p9) {
    let $res = natives.addPopMultiplierArea(x1, y1, z1, x2, y2, z2, p6, p7, p8 | 0, p9 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.doesPopMultiplierAreaExist = function (id) {
    let $res = natives.doesPopMultiplierAreaExist(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.removePopMultiplierArea = function (id, p1) {
    let $res = natives.removePopMultiplierArea(id, p1 | 0);
};
mp.game2.misc.isPopMultiplierAreaUnk = function (id) {
    let $res = natives.isPopMultiplierAreaNetworked(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.addPopMultiplierSphere = function (x, y, z, radius, pedMultiplier, vehicleMultiplier, p6, p7) {
    let $res = natives.addPopMultiplierSphere(x, y, z, radius, pedMultiplier, vehicleMultiplier, p6 | 0, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.doesPopMultiplierSphereExist = function (id) {
    let $res = natives.doesPopMultiplierSphereExist(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.removePopMultiplierSphere = function (id, p1) {
    let $res = natives.removePopMultiplierSphere(id, p1 | 0);
};
mp.game2.misc.enableTennisMode = function (ped, toggle, p2) {
    let $res = natives.enableTennisMode(ped, toggle | 0, p2 | 0);
};
mp.game2.misc.isTennisMode = function (ped) {
    let $res = natives.isTennisMode(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.playTennisSwingAnim = function (ped, animDict, animName, p3, p4, p5) {
    let $res = natives.playTennisSwingAnim(ped, animDict, animName, p3, p4, p5 | 0);
};
mp.game2.misc.getTennisSwingAnimComplete = function (ped) {
    let $res = natives.getTennisSwingAnimComplete(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.playTennisDiveAnim = function (ped, p1, p2, p3, p4, p5) {
    let $res = natives.playTennisDiveAnim(ped, p1, p2, p3, p4, p5 | 0);
};
mp.game2.misc.resetDispatchSpawnLocation = function () {
    let $res = natives.resetDispatchSpawnLocation();
};
mp.game2.misc.setDispatchSpawnLocation = function (x, y, z) {
    let $res = natives.setDispatchSpawnLocation(x, y, z);
};
mp.game2.misc.resetDispatchIdealSpawnDistance = function () {
    let $res = natives.resetDispatchIdealSpawnDistance();
};
mp.game2.misc.setDispatchIdealSpawnDistance = function (p0) {
    let $res = natives.setDispatchIdealSpawnDistance(p0);
};
mp.game2.misc.resetDispatchTimeBetweenSpawnAttempts = function (p0) {
    let $res = natives.resetDispatchTimeBetweenSpawnAttempts(p0);
};
mp.game2.misc.setDispatchTimeBetweenSpawnAttempts = function (p0, p1) {
    let $res = natives.setDispatchTimeBetweenSpawnAttempts(p0, p1);
};
mp.game2.misc.setDispatchTimeBetweenSpawnAttemptsMultiplier = function (p0, p1) {
    let $res = natives.setDispatchTimeBetweenSpawnAttemptsMultiplier(p0, p1);
};
mp.game2.misc.addDispatchSpawnBlockingAngledArea = function (x1, y1, z1, x2, y2, z2, width) {
    let $res = natives.addDispatchSpawnAngledBlockingArea(x1, y1, z1, x2, y2, z2, width);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.addDispatchSpawnBlockingArea = function (x1, y1, x2, y2) {
    let $res = natives.addDispatchSpawnSphereBlockingArea(x1, y1, x2, y2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.removeDispatchSpawnBlockingArea = function (p0) {
    let $res = natives.removeDispatchSpawnBlockingArea(p0);
};
mp.game2.misc.resetDispatchSpawnBlockingAreas = function () {
    let $res = natives.resetDispatchSpawnBlockingAreas();
};
mp.game2.misc.addTacticalAnalysisPoint = function (x, y, z) {
    let $res = natives.addTacticalNavMeshPoint(x, y, z);
};
mp.game2.misc.clearTacticalAnalysisPoints = function () {
    let $res = natives.clearTacticalNavMeshPoints();
};
mp.game2.misc.setRiotModeEnabled = function (toggle) {
    let $res = natives.setRiotModeEnabled(toggle | 0);
};
mp.game2.misc.displayOnscreenKeyboardWithLongerInitialString = function (p0, windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength) {
    let $res = natives.displayOnscreenKeyboardWithLongerInitialString(p0, windowTitle, 0, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p2 = $res[0];
    return $resObj.p2;
};
mp.game2.misc.displayOnscreenKeyboard = function (p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength) {
    let $res = natives.displayOnscreenKeyboard(p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
};
mp.game2.misc.updateOnscreenKeyboard = function () {
    let $res = natives.updateOnscreenKeyboard();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getOnscreenKeyboardResult = function () {
    let $res = natives.getOnscreenKeyboardResult();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.cancelOnscreenKeyboard = function () {
    let $res = natives.cancelOnscreenKeyboard();
};
mp.game2.misc.nextOnscreenKeyboardResultWillDisplayUsingTheseFonts = function (p0) {
    let $res = natives.nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(p0);
};
mp.game2.misc.actionManagerEnableAction = function (hash, enable) {
    let $res = natives.actionManagerEnableAction(hash, enable | 0);
};
mp.game2.misc.setExplosiveAmmoThisFrame = function (player) {
    let $res = natives.setExplosiveAmmoThisFrame(player);
};
mp.game2.misc.setFireAmmoThisFrame = function (player) {
    let $res = natives.setFireAmmoThisFrame(player);
};
mp.game2.misc.setExplosiveMeleeThisFrame = function (player) {
    let $res = natives.setExplosiveMeleeThisFrame(player);
};
mp.game2.misc.setSuperJumpThisFrame = function (player) {
    let $res = natives.setSuperJumpThisFrame(player);
};
mp.game2.misc.setBeastModeActive = function (player) {
    let $res = natives.setBeastJumpThisFrame(player);
};
mp.game2.misc.setForcePlayerToJump = function (player) {
    let $res = natives.setForcedJumpThisFrame(player);
};
mp.game2.misc.areProfileSettingsValid = function () {
    let $res = natives.areProfileSettingsValid();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.forceGameStatePlaying = function () {
    let $res = natives.forceGameStatePlaying();
};
mp.game2.misc.scriptRaceInit = function (p0, p1, p2, p3) {
    let $res = natives.scriptRaceInit(p0, p1, p2, p3);
};
mp.game2.misc.scriptRaceShutdown = function () {
    let $res = natives.scriptRaceShutdown();
};
mp.game2.misc.scriptRaceGetPlayerSplitTime = function (player) {
    let $res = natives.scriptRaceGetPlayerSplitTime(player, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    $resObj.p2 = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.misc.startBenchmarkRecording = function () {
    let $res = natives.startEndUserBenchmark();
};
mp.game2.misc.stopBenchmarkRecording = function () {
    let $res = natives.stopEndUserBenchmark();
};
mp.game2.misc.resetBenchmarkRecording = function () {
    let $res = natives.resetEndUserBenchmark();
};
mp.game2.misc.saveBenchmarkRecording = function () {
    let $res = natives.saveEndUserBenchmark();
};
mp.game2.misc.uiIsSingleplayerPauseMenuActive = function () {
    let $res = natives.uiStartedEndUserBenchmark();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.landingMenuIsActive = function () {
    let $res = natives.landingScreenStartedEndUserBenchmark();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.isCommandLineBenchmarkValueSet = function () {
    let $res = natives.isCommandlineEndUserBenchmark();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.getBenchmarkIterationsFromCommandLine = function () {
    let $res = natives.getBenchmarkIterations();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.getBenchmarkPassFromCommandLine = function () {
    let $res = natives.getBenchmarkPass();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.restartGame = function () {
    let $res = natives.restartGame();
};
mp.game2.misc.forceSocialClubUpdate = function () {
    let $res = natives.quitGame();
};
mp.game2.misc.hasAsyncInstallFinished = function () {
    let $res = natives.hasAsyncInstallFinished();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.cleanupAsyncInstall = function () {
    let $res = natives.cleanupAsyncInstall();
};
mp.game2.misc.isInPowerSavingMode = function () {
    let $res = natives.plmIsInConstrainedMode();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.getPowerSavingModeDuration = function () {
    let $res = natives.plmGetConstrainedDurationMs();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.setPlayerIsInAnimalForm = function (toggle) {
    let $res = natives.setPlayerIsInAnimalForm(toggle | 0);
};
mp.game2.misc.getIsPlayerInAnimalForm = function () {
    let $res = natives.getIsPlayerInAnimalForm();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.setPlayerRockstarEditorDisabled = function (toggle) {
    let $res = natives.setPlayerIsRepeatingAMission(toggle | 0);
};
if (!mp.game2.misc) mp.game2.misc = {};
if (!mp.game2.misc.unk) mp.game2.misc.unk = {};
mp.game2.misc.unk._0x4DCDF92BF64236CD = function (p0, p1) {
    let $res = natives.activityFeedCreate(p0, p1);
};
mp.game2.misc.unk._0x31125FD509D9043F = function (p0) {
    let $res = natives.activityFeedAddSubstringToCaption(p0);
};
mp.game2.misc.unk._0xEBD3205A207939ED = function (p0) {
    let $res = natives.activityFeedAddLiteralSubstringToCaption(p0);
};
mp.game2.misc.unk._0x97E7E2C04245115B = function (p0) {
    let $res = natives.activityFeedAddIntToCaption(p0);
};
mp.game2.misc.unk._0x916CA67D26FD1E37 = function (p0) {
    let $res = natives.activityFeedLargeImageUrl(p0);
};
mp.game2.misc.unk._0xEB078CA2B5E82ADD = function (p0, p1) {
    let $res = natives.activityFeedActionStartWithCommandLine(p0, p1);
};
mp.game2.misc.unk._0x703CC7F60CBB2B57 = function (p0) {
    let $res = natives.activityFeedActionStartWithCommandLineAdd(p0);
};
mp.game2.misc.unk._0x8951EB9C6906D3C8 = function () {
    let $res = natives.activityFeedPost();
};
mp.game2.misc.unk._0xBA4B8D83BDC75551 = function (p0) {
    let $res = natives.activityFeedOnlinePlayedWithPost(p0);
};
mp.game2.misc.unk._0x65D2EBB47E1CEC21 = function (toggle) {
    let $res = natives.setScriptHighPrio(toggle | 0);
};
mp.game2.misc.unk._0x6F2135B6129620C1 = function (toggle) {
    let $res = natives.setThisIsATriggerScript(toggle | 0);
};
mp.game2.misc.unk._0x8D74E26F54B4E5C3 = function (p0) {
    let $res = natives.informCodeOfContentIdOfCurrentUgcMission(p0);
};
mp.game2.misc.unk._0x1178E104409FE58C = function (weatherType, p1) {
    let $res = natives.setOverrideWeatherex(weatherType, p1 | 0);
};
mp.game2.misc.unk._0x02DEAAC8F8EA7FE7 = function (p0) {
    let $res = natives.setCloudSettingsOverride(p0);
};
mp.game2.misc.unk._0x7F8F6405F4777AF6 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.getRatioOfClosestPointOnLine(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.unk._0x21C235BC64831E5A = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.getClosestPointOnLine(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.misc.unk._0xF56DFB7B61BE7276 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    let $res = natives.getLinePlaneIntersection(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p12 = $res[1];
    return $res[0] == 1 ? $resObj.p12 : undefined;
};
mp.game2.misc.unk._0xA0AD167E4B39D9A2 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    let $res = natives.getPointAreaOverlap(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.unk._0x39455BF4F4F55186 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    let $res = natives.isAreaOccupiedSlow(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.unk._0x7EC6F9A478A6A512 = function () {
    let $res = natives.clearScenarioSpawnHistory();
};
mp.game2.misc.unk._0x397BAA01068BAA96 = function () {
    let $res = natives.getStatusOfManualSave();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.unk._0xB51B9AB9EF81868C = function (toggle) {
    let $res = natives.setCreditsFadeOutWithScreen(toggle | 0);
};
mp.game2.misc.unk._0xA4A0065E39C9F25C = function () {
    let $res = natives.getSaveHouseDetailsAfterSuccessfulLoad(undefined, 0, false, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = new mp.Vector3($res[1]);
    $resObj.p1 = $res[2];
    $resObj.fadeInAfterLoad = $res[3] == 1;
    $resObj.p3 = $res[4] == 1;
    $resObj.result = $res[1] == 1;
    return $resObj;
};
mp.game2.misc.unk._0xEB2104E905C6F2E9 = function () {
    let $res = natives.queueMissionRepeatSaveForBenchmarkTest();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.unk._0xFB80AB299D2EE1BD = function (toggle) {
    let $res = natives.toggleShowOptionalStuntJumpCamera(toggle | 0);
};
mp.game2.misc.unk._0xFA3FFB0EEBC288A3 = function (p0) {
    let $res = natives.overrideFreezeFlags(p0 | 0);
};
mp.game2.misc.unk._0x48F069265A0E4BEC = function (name) {
    let $res = natives.registerTextLabel23ToSave(0, name);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.unk._0x8269816F6CFD40F8 = function (name) {
    let $res = natives.registerTextLabel31ToSave(0, name);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.unk._0xFAA457EF263E8763 = function (name) {
    let $res = natives.registerTextLabel63ToSave(0, name);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.misc.unk._0x19BFED045C647C49 = function (ped) {
    let $res = natives.getTennisSwingAnimCanBeInterrupted(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.unk._0xE95B0C7D5BA3B96B = function (ped) {
    let $res = natives.getTennisSwingAnimSwung(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.unk._0x54F157E0336A3822 = function (ped, p1, p2) {
    let $res = natives.setTennisMoveNetworkSignalFloat(ped, p1, p2);
};
mp.game2.misc.unk._0xD9F692D349249528 = function () {
    let $res = natives.resetWantedResponseNumPedsToSpawn();
};
mp.game2.misc.unk._0xE532EC1A63231B4F = function (p0, p1) {
    let $res = natives.setWantedResponseNumPedsToSpawn(p0, p1);
};
mp.game2.misc.unk._0x1EAE0A6E978894A2 = function (p0, p1) {
    let $res = natives.supressRandomEventThisFrame(p0, p1 | 0);
};
mp.game2.misc.unk._0x6FDDF453C0C756EC = function () {
    let $res = natives.hasGameInstalledThisSession();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.misc.unk._0xFB00CA71DA386228 = function () {
    let $res = natives.setTickerJohnmarstonIsDone();
};
mp.game2.misc.unk._0xE3D969D2785FFB5E = function () {
    let $res = natives.preventArrestStateThisFrame();
};
mp.game2.misc.unk._0x1BB299305C3E8C13 = function (p0, p1, p2, p3) {
    let $res = natives.scriptRacePlayerHitCheckpoint(p0, p1, p2, p3);
};
mp.game2.misc.unk._0x23227DF0B2115469 = function () {
    let $res = natives.disableScreenDimmingThisFrame();
};
mp.game2.misc.unk._0xD10282B6E3751BA0 = function () {
    let $res = natives.getCityDensity();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.misc.unk._0x693478ACBD7F18E7 = function () {
    let $res = natives.useActiveCameraForTimeslicingCentre();
};
mp.Player.prototype.cellCamIsCharVisibleNoFaceCheck = function () {
    let $res = natives.cellCamIsCharVisibleNoFaceCheck(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.cellCamIsCharVisibleNoFaceCheck = function () {
    let $res = natives.cellCamIsCharVisibleNoFaceCheck(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.cellCamIsCharVisibleNoFaceCheck = function () {
    let $res = natives.cellCamIsCharVisibleNoFaceCheck(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.cellCamIsCharVisibleNoFaceCheck = function () {
    let $res = natives.cellCamIsCharVisibleNoFaceCheck(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.mobile) mp.game2.mobile = {};
mp.game2.mobile.createPhone = function (phoneType) {
    let $res = natives.createMobilePhone(phoneType);
};
mp.game2.mobile.createMobilePhone = function (phoneType) {
    let $res = natives.createMobilePhone(phoneType);
};
mp.game2.mobile.destroyPhone = function () {
    let $res = natives.destroyMobilePhone();
};
mp.game2.mobile.setPhoneScale = function (scale) {
    let $res = natives.setMobilePhoneScale(scale);
};
mp.game2.mobile.setMobilePhoneScale = function (scale) {
    let $res = natives.setMobilePhoneScale(scale);
};
mp.game2.mobile.setPhoneRotation = function (rotX, rotY, rotZ, p3) {
    let $res = natives.setMobilePhoneRotation(rotX, rotY, rotZ, p3);
};
mp.game2.mobile.setMobilePhoneRotation = function (rotX, rotY, rotZ, p3) {
    let $res = natives.setMobilePhoneRotation(rotX, rotY, rotZ, p3);
};
mp.game2.mobile.getPhoneRotation = function (p1) {
    let $res = natives.getMobilePhoneRotation(undefined, p1);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.rotation = new mp.Vector3($res[1]);
    return $resObj.rotation;
};
mp.game2.mobile.getMobilePhoneRotation = function (p1) {
    let $res = natives.getMobilePhoneRotation(undefined, p1);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.rotation = new mp.Vector3($res[1]);
    return $resObj.rotation;
};
mp.game2.mobile.setPhonePosition = function (posX, posY, posZ) {
    let $res = natives.setMobilePhonePosition(posX, posY, posZ);
};
mp.game2.mobile.setMobilePhonePosition = function (posX, posY, posZ) {
    let $res = natives.setMobilePhonePosition(posX, posY, posZ);
};
mp.game2.mobile.getPhonePosition = function () {
    let $res = natives.getMobilePhonePosition(undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.position = new mp.Vector3($res[1]);
    return $resObj.position;
};
mp.game2.mobile.getMobilePhonePosition = function () {
    let $res = natives.getMobilePhonePosition(undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.position = new mp.Vector3($res[1]);
    return $resObj.position;
};
mp.game2.mobile.scriptIsMovingPhoneOffscreen = function (toggle) {
    let $res = natives.scriptIsMovingMobilePhoneOffscreen(toggle | 0);
};
mp.game2.mobile.scriptIsMovingMobilePhoneOffscreen = function (toggle) {
    let $res = natives.scriptIsMovingMobilePhoneOffscreen(toggle | 0);
};
mp.game2.mobile.canPhoneBeSeenOnScreen = function () {
    let $res = natives.canPhoneBeSeenOnScreen();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.mobile.setPhoneUnk = function (toggle) {
    let $res = natives.setMobilePhoneDofState(toggle | 0);
};
mp.game2.mobile.cellCamMoveFinger = function (direction) {
    let $res = natives.cellSetInput(direction);
};
mp.game2.mobile.moveFinger = function (direction) {
    let $res = natives.cellSetInput(direction);
};
mp.game2.mobile.cellCamSetLean = function (toggle) {
    let $res = natives.cellHorizontalModeToggle(toggle | 0);
};
mp.game2.mobile.setPhoneLean = function (toggle) {
    let $res = natives.cellHorizontalModeToggle(toggle | 0);
};
mp.game2.mobile.cellCamActivate = function (p0, p1) {
    let $res = natives.cellCamActivate(p0 | 0, p1 | 0);
};
mp.game2.mobile.cellCamDisableThisFrame = function (toggle) {
    let $res = natives.cellCamActivateSelfieMode(toggle | 0);
};
mp.game2.mobile.getPhoneRenderId = function () {
    let $res = natives.getMobilePhoneRenderId(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.renderId = $res[1];
    return $resObj.renderId;
};
mp.game2.mobile.getMobilePhoneRenderId = function () {
    let $res = natives.getMobilePhoneRenderId(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.renderId = $res[1];
    return $resObj.renderId;
};
if (!mp.game2.mobile) mp.game2.mobile = {};
if (!mp.game2.mobile.unk) mp.game2.mobile.unk = {};
mp.game2.mobile.unk._0xA2CCBE62CD4C91A4 = function () {
    let $res = natives.cellCamActivateShallowDofMode(false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.toggle = $res[0];
    return $resObj.toggle;
};
mp.game2.mobile.unk._0x1B0B4AEED5B9B41C = function (p0) {
    let $res = natives.cellCamSetSelfieModeSideOffsetScaling(p0);
};
mp.game2.mobile.unk._0x53F4892D18EC90A4 = function (p0) {
    let $res = natives.cellCamSetSelfieModeHorzPanOffset(p0);
};
mp.game2.mobile.unk._0x3117D84EFA60F77B = function (p0) {
    let $res = natives.cellCamSetSelfieModeVertPanOffset(p0);
};
mp.game2.mobile.unk._0x15E69E2802C24B8D = function (p0) {
    let $res = natives.cellCamSetSelfieModeRollOffset(p0);
};
mp.game2.mobile.unk._0xAC2890471901861C = function (p0) {
    let $res = natives.cellCamSetSelfieModeDistanceScaling(p0);
};
mp.game2.mobile.unk._0xD6ADE981781FCA09 = function (p0) {
    let $res = natives.cellCamSetSelfieModeHeadYawOffset(p0);
};
mp.game2.mobile.unk._0xF1E22DC13F5EEBAD = function (p0) {
    let $res = natives.cellCamSetSelfieModeHeadRollOffset(p0);
};
mp.game2.mobile.unk._0x466DA42C89865553 = function (p0) {
    let $res = natives.cellCamSetSelfieModeHeadPitchOffset(p0);
};
mp.Player.prototype.applyPedScarData = function (p1) {
    let $res = natives.networkApplyPedScarData(this.handle, p1);
};
mp.Ped.prototype.applyPedScarData = function (p1) {
    let $res = natives.networkApplyPedScarData(this.handle, p1);
};
mp.Player.prototype.getPlayerIndexFromPed = function () {
    let $res = natives.networkGetPlayerIndexFromPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPlayerIndexFromPed = function () {
    let $res = natives.networkGetPlayerIndexFromPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getDestroyerOfEntity = function () {
    let $res = natives.networkGetAssistedDamageOfEntity(this.handle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.Ped.prototype.getDestroyerOfEntity = function () {
    let $res = natives.networkGetAssistedDamageOfEntity(this.handle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.Object.prototype.getDestroyerOfEntity = function () {
    let $res = natives.networkGetAssistedDamageOfEntity(this.handle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.Vehicle.prototype.getDestroyerOfEntity = function () {
    let $res = natives.networkGetAssistedDamageOfEntity(this.handle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.Player.prototype.pedForceGameStateUpdate = function () {
    let $res = natives.networkPatchPostCutsceneHs4fTunEnt(this.handle);
};
mp.Ped.prototype.pedForceGameStateUpdate = function () {
    let $res = natives.networkPatchPostCutsceneHs4fTunEnt(this.handle);
};
mp.Player.prototype.hasEntityBeenRegisteredWithThisThread = function () {
    let $res = natives.networkHasEntityBeenRegisteredWithThisThread(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasEntityBeenRegisteredWithThisThread = function () {
    let $res = natives.networkHasEntityBeenRegisteredWithThisThread(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasEntityBeenRegisteredWithThisThread = function () {
    let $res = natives.networkHasEntityBeenRegisteredWithThisThread(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasEntityBeenRegisteredWithThisThread = function () {
    let $res = natives.networkHasEntityBeenRegisteredWithThisThread(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getNetworkIdFromEntity = function () {
    let $res = natives.networkGetNetworkIdFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getNetworkIdFromEntity = function () {
    let $res = natives.networkGetNetworkIdFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getNetworkIdFromEntity = function () {
    let $res = natives.networkGetNetworkIdFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getNetworkIdFromEntity = function () {
    let $res = natives.networkGetNetworkIdFromEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getEntityIsNetworked = function () {
    let $res = natives.networkGetEntityIsNetworked(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getEntityIsNetworked = function () {
    let $res = natives.networkGetEntityIsNetworked(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.getEntityIsNetworked = function () {
    let $res = natives.networkGetEntityIsNetworked(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getEntityIsNetworked = function () {
    let $res = natives.networkGetEntityIsNetworked(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getEntityIsLocal = function () {
    let $res = natives.networkGetEntityIsLocal(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getEntityIsLocal = function () {
    let $res = natives.networkGetEntityIsLocal(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.getEntityIsLocal = function () {
    let $res = natives.networkGetEntityIsLocal(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getEntityIsLocal = function () {
    let $res = natives.networkGetEntityIsLocal(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.registerEntityAsNetworked = function () {
    let $res = natives.networkRegisterEntityAsNetworked(this.handle);
};
mp.Ped.prototype.registerEntityAsNetworked = function () {
    let $res = natives.networkRegisterEntityAsNetworked(this.handle);
};
mp.Object.prototype.registerEntityAsNetworked = function () {
    let $res = natives.networkRegisterEntityAsNetworked(this.handle);
};
mp.Vehicle.prototype.registerEntityAsNetworked = function () {
    let $res = natives.networkRegisterEntityAsNetworked(this.handle);
};
mp.Player.prototype.unregisterNetworkedEntity = function () {
    let $res = natives.networkUnregisterNetworkedEntity(this.handle);
};
mp.Ped.prototype.unregisterNetworkedEntity = function () {
    let $res = natives.networkUnregisterNetworkedEntity(this.handle);
};
mp.Object.prototype.unregisterNetworkedEntity = function () {
    let $res = natives.networkUnregisterNetworkedEntity(this.handle);
};
mp.Vehicle.prototype.unregisterNetworkedEntity = function () {
    let $res = natives.networkUnregisterNetworkedEntity(this.handle);
};
mp.Player.prototype.requestControlOfEntity = function () {
    let $res = natives.networkRequestControlOfEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.requestControlOfEntity = function () {
    let $res = natives.networkRequestControlOfEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.requestControlOfEntity = function () {
    let $res = natives.networkRequestControlOfEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.requestControlOfEntity = function () {
    let $res = natives.networkRequestControlOfEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasControlOfEntity = function () {
    let $res = natives.networkHasControlOfEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasControlOfEntity = function () {
    let $res = natives.networkHasControlOfEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasControlOfEntity = function () {
    let $res = natives.networkHasControlOfEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasControlOfEntity = function () {
    let $res = natives.networkHasControlOfEntity(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.vehToNet = function () {
    let $res = natives.vehToNet(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.pedToNet = function () {
    let $res = natives.pedToNet(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.pedToNet = function () {
    let $res = natives.pedToNet(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.objToNet = function () {
    let $res = natives.objToNet(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getEntityNetScriptId = function () {
    let $res = natives.networkEntityGetObjectId(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getEntityNetScriptId = function () {
    let $res = natives.networkEntityGetObjectId(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getEntityNetScriptId = function () {
    let $res = natives.networkEntityGetObjectId(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getEntityNetScriptId = function () {
    let $res = natives.networkEntityGetObjectId(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.removeAllStickyBombsFromEntity = function (ped) {
    let $res = natives.removeAllStickyBombsFromEntity(this.handle, ped);
};
mp.Ped.prototype.removeAllStickyBombsFromEntity = function (ped) {
    let $res = natives.removeAllStickyBombsFromEntity(this.handle, ped);
};
mp.Object.prototype.removeAllStickyBombsFromEntity = function (ped) {
    let $res = natives.removeAllStickyBombsFromEntity(this.handle, ped);
};
mp.Vehicle.prototype.removeAllStickyBombsFromEntity = function (ped) {
    let $res = natives.removeAllStickyBombsFromEntity(this.handle, ped);
};
mp.Player.prototype.setEntityCanBlend = function (toggle) {
    let $res = natives.networkSetEntityCanBlend(this.handle, toggle | 0);
};
mp.Ped.prototype.setEntityCanBlend = function (toggle) {
    let $res = natives.networkSetEntityCanBlend(this.handle, toggle | 0);
};
mp.Object.prototype.setEntityCanBlend = function (toggle) {
    let $res = natives.networkSetEntityCanBlend(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setEntityCanBlend = function (toggle) {
    let $res = natives.networkSetEntityCanBlend(this.handle, toggle | 0);
};
mp.Player.prototype.setEntityInvisibleToNetwork = function (toggle) {
    let $res = natives.networkSetEntityOnlyExistsForParticipants(this.handle, toggle | 0);
};
mp.Ped.prototype.setEntityInvisibleToNetwork = function (toggle) {
    let $res = natives.networkSetEntityOnlyExistsForParticipants(this.handle, toggle | 0);
};
mp.Object.prototype.setEntityInvisibleToNetwork = function (toggle) {
    let $res = natives.networkSetEntityOnlyExistsForParticipants(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setEntityInvisibleToNetwork = function (toggle) {
    let $res = natives.networkSetEntityOnlyExistsForParticipants(this.handle, toggle | 0);
};
mp.Player.prototype.fadeOutEntity = function (normal, slow) {
    let $res = natives.networkFadeOutEntity(this.handle, normal | 0, slow | 0);
};
mp.Ped.prototype.fadeOutEntity = function (normal, slow) {
    let $res = natives.networkFadeOutEntity(this.handle, normal | 0, slow | 0);
};
mp.Object.prototype.fadeOutEntity = function (normal, slow) {
    let $res = natives.networkFadeOutEntity(this.handle, normal | 0, slow | 0);
};
mp.Vehicle.prototype.fadeOutEntity = function (normal, slow) {
    let $res = natives.networkFadeOutEntity(this.handle, normal | 0, slow | 0);
};
mp.Player.prototype.fadeInEntity = function (state, p2) {
    let $res = natives.networkFadeInEntity(this.handle, state | 0, p2 | 0);
};
mp.Ped.prototype.fadeInEntity = function (state, p2) {
    let $res = natives.networkFadeInEntity(this.handle, state | 0, p2 | 0);
};
mp.Object.prototype.fadeInEntity = function (state, p2) {
    let $res = natives.networkFadeInEntity(this.handle, state | 0, p2 | 0);
};
mp.Vehicle.prototype.fadeInEntity = function (state, p2) {
    let $res = natives.networkFadeInEntity(this.handle, state | 0, p2 | 0);
};
mp.Player.prototype.isEntityFading = function () {
    let $res = natives.networkIsEntityFading(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isEntityFading = function () {
    let $res = natives.networkIsEntityFading(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isEntityFading = function () {
    let $res = natives.networkIsEntityFading(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isEntityFading = function () {
    let $res = natives.networkIsEntityFading(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setEntityVisibleInCutscene = function (p1, p2) {
    let $res = natives.setEntityVisibleInCutscene(this.handle, p1 | 0, p2 | 0);
};
mp.Ped.prototype.setEntityVisibleInCutscene = function (p1, p2) {
    let $res = natives.setEntityVisibleInCutscene(this.handle, p1 | 0, p2 | 0);
};
mp.Object.prototype.setEntityVisibleInCutscene = function (p1, p2) {
    let $res = natives.setEntityVisibleInCutscene(this.handle, p1 | 0, p2 | 0);
};
mp.Vehicle.prototype.setEntityVisibleInCutscene = function (p1, p2) {
    let $res = natives.setEntityVisibleInCutscene(this.handle, p1 | 0, p2 | 0);
};
mp.Player.prototype.setEntityLocallyInvisible = function () {
    let $res = natives.setEntityLocallyInvisible(this.handle);
};
mp.Ped.prototype.setEntityLocallyInvisible = function () {
    let $res = natives.setEntityLocallyInvisible(this.handle);
};
mp.Object.prototype.setEntityLocallyInvisible = function () {
    let $res = natives.setEntityLocallyInvisible(this.handle);
};
mp.Vehicle.prototype.setEntityLocallyInvisible = function () {
    let $res = natives.setEntityLocallyInvisible(this.handle);
};
mp.Player.prototype.setEntityLocallyVisible = function () {
    let $res = natives.setEntityLocallyVisible(this.handle);
};
mp.Ped.prototype.setEntityLocallyVisible = function () {
    let $res = natives.setEntityLocallyVisible(this.handle);
};
mp.Object.prototype.setEntityLocallyVisible = function () {
    let $res = natives.setEntityLocallyVisible(this.handle);
};
mp.Vehicle.prototype.setEntityLocallyVisible = function () {
    let $res = natives.setEntityLocallyVisible(this.handle);
};
mp.Object.prototype.setObjectInterestRange = function (range) {
    let $res = natives.networkSetObjectScopeDistance(this.handle, range);
};
mp.Vehicle.prototype.setVehicleAsGhost = function (toggle) {
    let $res = natives.setNetworkVehicleAsGhost(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setVehiclePositionUpdateMultiplier = function (multiplier) {
    let $res = natives.setNetworkVehicleMaxPositionDeltaMultiplier(this.handle, multiplier);
};
mp.Vehicle.prototype.setEnableVehiclePositionCorrection = function (toggle) {
    let $res = natives.setNetworkEnableHighSpeedEdgeFallDetection(this.handle, toggle | 0);
};
mp.Player.prototype.isEntityGhostedToLocalPlayer = function () {
    let $res = natives.isEntityAGhost(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isEntityGhostedToLocalPlayer = function () {
    let $res = natives.isEntityAGhost(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isEntityGhostedToLocalPlayer = function () {
    let $res = natives.isEntityAGhost(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isEntityGhostedToLocalPlayer = function () {
    let $res = natives.isEntityAGhost(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setEntityGhostedWithOwner = function (p1) {
    let $res = natives.setEntityGhostedForGhostPlayers(this.handle, p1 | 0);
};
mp.Ped.prototype.setEntityGhostedWithOwner = function (p1) {
    let $res = natives.setEntityGhostedForGhostPlayers(this.handle, p1 | 0);
};
mp.Object.prototype.setEntityGhostedWithOwner = function (p1) {
    let $res = natives.setEntityGhostedForGhostPlayers(this.handle, p1 | 0);
};
mp.Vehicle.prototype.setEntityGhostedWithOwner = function (p1) {
    let $res = natives.setEntityGhostedForGhostPlayers(this.handle, p1 | 0);
};
mp.Player.prototype.addPedToSynchronisedScene = function (netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9) {
    let $res = natives.networkAddPedToSynchronisedScene(this.handle, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9);
};
mp.Ped.prototype.addPedToSynchronisedScene = function (netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9) {
    let $res = natives.networkAddPedToSynchronisedScene(this.handle, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9);
};
mp.Player.prototype.addEntityToSynchronisedScene = function (netScene, animDict, animName, speed, speedMulitiplier, flag) {
    let $res = natives.networkAddEntityToSynchronisedScene(this.handle, netScene, animDict, animName, speed, speedMulitiplier, flag);
};
mp.Ped.prototype.addEntityToSynchronisedScene = function (netScene, animDict, animName, speed, speedMulitiplier, flag) {
    let $res = natives.networkAddEntityToSynchronisedScene(this.handle, netScene, animDict, animName, speed, speedMulitiplier, flag);
};
mp.Object.prototype.addEntityToSynchronisedScene = function (netScene, animDict, animName, speed, speedMulitiplier, flag) {
    let $res = natives.networkAddEntityToSynchronisedScene(this.handle, netScene, animDict, animName, speed, speedMulitiplier, flag);
};
mp.Vehicle.prototype.addEntityToSynchronisedScene = function (netScene, animDict, animName, speed, speedMulitiplier, flag) {
    let $res = natives.networkAddEntityToSynchronisedScene(this.handle, netScene, animDict, animName, speed, speedMulitiplier, flag);
};
mp.Player.prototype.concealEntity = function (toggle) {
    let $res = natives.networkConcealEntity(this.handle, toggle | 0);
};
mp.Ped.prototype.concealEntity = function (toggle) {
    let $res = natives.networkConcealEntity(this.handle, toggle | 0);
};
mp.Object.prototype.concealEntity = function (toggle) {
    let $res = natives.networkConcealEntity(this.handle, toggle | 0);
};
mp.Vehicle.prototype.concealEntity = function (toggle) {
    let $res = natives.networkConcealEntity(this.handle, toggle | 0);
};
mp.Player.prototype.isEntityConcealed = function () {
    let $res = natives.networkIsEntityConcealed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isEntityConcealed = function () {
    let $res = natives.networkIsEntityConcealed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isEntityConcealed = function () {
    let $res = natives.networkIsEntityConcealed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isEntityConcealed = function () {
    let $res = natives.networkIsEntityConcealed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setVehicleWheelsDestructible = function (toggle) {
    let $res = natives.networkTriggerDamageEventForZeroDamage(this.handle, toggle | 0);
};
mp.Ped.prototype.setVehicleWheelsDestructible = function (toggle) {
    let $res = natives.networkTriggerDamageEventForZeroDamage(this.handle, toggle | 0);
};
mp.Object.prototype.setVehicleWheelsDestructible = function (toggle) {
    let $res = natives.networkTriggerDamageEventForZeroDamage(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setVehicleWheelsDestructible = function (toggle) {
    let $res = natives.networkTriggerDamageEventForZeroDamage(this.handle, toggle | 0);
};
mp.Vehicle.prototype.explodeVehicle = function (isAudible, isInvisible, netId) {
    let $res = natives.networkExplodeVehicle(this.handle, isAudible | 0, isInvisible | 0, netId | 0);
};
mp.Vehicle.prototype.explodeHeli = function (isAudible, isInvisible, netId) {
    let $res = natives.networkExplodeHeli(this.handle, isAudible | 0, isInvisible | 0, netId);
};
mp.Player.prototype.useLogarithmicBlendingThisFrame = function () {
    let $res = natives.networkUseLogarithmicBlendingThisFrame(this.handle);
};
mp.Ped.prototype.useLogarithmicBlendingThisFrame = function () {
    let $res = natives.networkUseLogarithmicBlendingThisFrame(this.handle);
};
mp.Object.prototype.useLogarithmicBlendingThisFrame = function () {
    let $res = natives.networkUseLogarithmicBlendingThisFrame(this.handle);
};
mp.Vehicle.prototype.useLogarithmicBlendingThisFrame = function () {
    let $res = natives.networkUseLogarithmicBlendingThisFrame(this.handle);
};
mp.Player.prototype.overrideCoordsAndHeading = function (x, y, z, heading) {
    let $res = natives.networkOverrideCoordsAndHeading(this.handle, x, y, z, heading);
};
mp.Ped.prototype.overrideCoordsAndHeading = function (x, y, z, heading) {
    let $res = natives.networkOverrideCoordsAndHeading(this.handle, x, y, z, heading);
};
mp.Object.prototype.overrideCoordsAndHeading = function (x, y, z, heading) {
    let $res = natives.networkOverrideCoordsAndHeading(this.handle, x, y, z, heading);
};
mp.Vehicle.prototype.overrideCoordsAndHeading = function (x, y, z, heading) {
    let $res = natives.networkOverrideCoordsAndHeading(this.handle, x, y, z, heading);
};
mp.Player.prototype.applyCachedPlayerHeadBlendData = function (player) {
    let $res = natives.networkApplyCachedPlayerHeadBlendData(this.handle, player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.applyCachedPlayerHeadBlendData = function (player) {
    let $res = natives.networkApplyCachedPlayerHeadBlendData(this.handle, player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.allowLocalEntityAttachment = function (toggle) {
    let $res = natives.networkAllowRemoteAttachmentModification(this.handle, toggle | 0);
};
mp.Ped.prototype.allowLocalEntityAttachment = function (toggle) {
    let $res = natives.networkAllowRemoteAttachmentModification(this.handle, toggle | 0);
};
mp.Object.prototype.allowLocalEntityAttachment = function (toggle) {
    let $res = natives.networkAllowRemoteAttachmentModification(this.handle, toggle | 0);
};
mp.Vehicle.prototype.allowLocalEntityAttachment = function (toggle) {
    let $res = natives.networkAllowRemoteAttachmentModification(this.handle, toggle | 0);
};
mp.Player.prototype.getLastVelocityReceived = function () {
    let $res = natives.networkGetLastVelReceivedOverNetwork(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getLastVelocityReceived = function () {
    let $res = natives.networkGetLastVelReceivedOverNetwork(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getLastVelocityReceived = function () {
    let $res = natives.networkGetLastVelReceivedOverNetwork(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getLastVelocityReceived = function () {
    let $res = natives.networkGetLastVelReceivedOverNetwork(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
if (!mp.game2.network) mp.game2.network = {};
mp.game2.network.getOnlineVersion = function () {
    let $res = natives.getOnlineVersion();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isSignedIn = function () {
    let $res = natives.networkIsSignedIn();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isSignedOnline = function () {
    let $res = natives.networkIsSignedOnline();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasValidRosCredentials = function () {
    let $res = natives.networkHasValidRosCredentials();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isCloudAvailable = function () {
    let $res = natives.networkIsCloudAvailable();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasSocialClubAccount = function () {
    let $res = natives.networkHasSocialClubAccount();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.areSocialClubPoliciesCurrent = function () {
    let $res = natives.networkAreSocialClubPoliciesCurrent();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isHost = function () {
    let $res = natives.networkIsHost();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.haveOnlinePrivileges = function () {
    let $res = natives.networkHaveOnlinePrivileges();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasAgeRestrictedProfile = function () {
    let $res = natives.networkHasAgeRestrictions();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.haveUserContentPrivileges = function (p0) {
    let $res = natives.networkHaveUserContentPrivileges(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.haveCommunicationPrivileges = function (p0, player) {
    let $res = natives.networkHaveCommunicationPrivileges(p0, player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.checkUserContentPrivileges = function (p0, p1, p2) {
    let $res = natives.networkCheckUserContentPrivileges(p0, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.checkCommunicationPrivileges = function (p0, p1, p2) {
    let $res = natives.networkCheckCommunicationPrivileges(p0, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasSocialNetworkingSharingPriv = function () {
    let $res = natives.networkHasSocialNetworkingSharingPriv();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getAgeGroup = function () {
    let $res = natives.networkGetAgeGroup();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.haveOnlinePrivilege2 = function () {
    let $res = natives.networkHavePlatformSubscription();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.canBail = function () {
    let $res = natives.networkCanBail();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.bail = function (p0, p1, p2) {
    let $res = natives.networkBail(p0 | 0, p1 | 0, p2 | 0);
};
mp.game2.network.transitionTrack = function (hash, p1, p2, state, p4) {
    let $res = natives.networkTransitionAddStage(hash, p1, p2, state, p4);
};
mp.game2.network.canAccessMultiplayer = function () {
    let $res = natives.networkCanAccessMultiplayer(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.loadingState = $res[1];
    return $res[1] == 1 ? $resObj.loadingState : undefined;
};
mp.game2.network.isMultiplayerDisabled = function () {
    let $res = natives.networkIsMultiplayerDisabled();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.canEnterMultiplayer = function () {
    let $res = natives.networkCanEnterMultiplayer();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionEnter = function (p0, p1, p2, maxPlayers, p4, p5) {
    let $res = natives.networkSessionDoFreeroamQuickmatch(p0, p1, p2, maxPlayers, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.sessionFriendMatchmaking = function (p0, p1, maxPlayers, p3) {
    let $res = natives.networkSessionDoFriendMatchmaking(p0, p1, maxPlayers, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionCrewMatchmaking = function (p0, p1, p2, maxPlayers, p4) {
    let $res = natives.networkSessionDoCrewMatchmaking(p0, p1, p2, maxPlayers, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionActivityQuickmatch = function (p0, p1, p2, p3) {
    let $res = natives.networkSessionDoActivityQuickmatch(p0, p1, p2, p3, 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionHost = function (p0, maxPlayers, p2) {
    let $res = natives.networkSessionHost(p0, maxPlayers, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionHostClosed = function (p0, maxPlayers) {
    let $res = natives.networkSessionHostClosed(p0, maxPlayers);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionHostFriendsOnly = function (p0, maxPlayers) {
    let $res = natives.networkSessionHostFriendsOnly(p0, maxPlayers);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionIsClosedFriends = function () {
    let $res = natives.networkSessionIsClosedFriends();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionIsClosedCrew = function () {
    let $res = natives.networkSessionIsClosedCrew();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionIsSolo = function () {
    let $res = natives.networkSessionIsSolo();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionIsPrivate = function () {
    let $res = natives.networkSessionIsPrivate();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionEnd = function (p0, p1) {
    let $res = natives.networkSessionEnd(p0 | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionKickPlayer = function (player) {
    let $res = natives.networkSessionKickPlayer(player);
};
mp.game2.network.sessionGetKickVote = function (player) {
    let $res = natives.networkSessionGetKickVote(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.joinPreviouslyFailedSession = function () {
    let $res = natives.networkJoinPreviouslyFailedSession();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.joinPreviouslyFailedTransition = function () {
    let $res = natives.networkJoinPreviouslyFailedTransition();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionSetMatchmakingGroup = function (matchmakingGroup) {
    let $res = natives.networkSessionSetMatchmakingGroup(matchmakingGroup);
};
mp.game2.network.sessionSetMatchmakingGroupMax = function (playerType, playerCount) {
    let $res = natives.networkSessionSetMatchmakingGroupMax(playerType, playerCount);
};
mp.game2.network.sessionGetMatchmakingGroupFree = function (p0) {
    let $res = natives.networkSessionGetMatchmakingGroupFree(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.sessionAddActiveMatchmakingGroup = function (groupId) {
    let $res = natives.networkSessionAddActiveMatchmakingGroup(groupId);
};
mp.game2.network.sessionSetMatchmakingPropertyId = function (p0) {
    let $res = natives.networkSessionSetMatchmakingPropertyId(p0 | 0);
};
mp.game2.network.sessionSetMatchmakingMentalState = function (p0) {
    let $res = natives.networkSessionSetMatchmakingMentalState(p0);
};
mp.game2.network.sessionValidateJoin = function (p0) {
    let $res = natives.networkSessionValidateJoin(p0 | 0);
};
mp.game2.network.addFollowers = function (p1) {
    let $res = natives.networkAddFollowers(0, p1);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1];
    return $resObj.p0;
};
mp.game2.network.clearFollowers = function () {
    let $res = natives.networkClearFollowers();
};
mp.game2.network.getGlobalMultiplayerClock = function () {
    let $res = natives.networkGetGlobalMultiplayerClock(0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.hours = $res[1];
    $resObj.minutes = $res[2];
    $resObj.seconds = $res[3];
    return $resObj;
};
mp.game2.network.getTargetingMode = function () {
    let $res = natives.networkSessionGetHostAimPreference();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.findGamersInCrew = function (p0) {
    let $res = natives.networkFindGamersInCrew(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.findMatchedGamers = function (p0, p1, p2, p3) {
    let $res = natives.networkFindMatchedGamers(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isFindingGamers = function () {
    let $res = natives.networkIsFindingGamers();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.didFindGamersSucceed = function () {
    let $res = natives.networkDidFindGamersSucceed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getNumFoundGamers = function () {
    let $res = natives.networkGetNumFoundGamers();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getFoundGamer = function (p1) {
    let $res = natives.networkGetFoundGamer(0, p1);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.clearFoundGamers = function () {
    let $res = natives.networkClearFoundGamers();
};
mp.game2.network.queueGamerForStatus = function () {
    let $res = natives.networkQueueGamerForStatus(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.getGamerStatusFromQueue = function () {
    let $res = natives.networkGetGamerStatusFromQueue();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isGettingGamerStatus = function () {
    let $res = natives.networkIsGettingGamerStatus();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.didGetGamerStatusSucceed = function () {
    let $res = natives.networkDidGetGamerStatusSucceed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getGamerStatusResult = function (p1) {
    let $res = natives.networkGetGamerStatusResult(0, p1);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.clearGetGamerStatus = function () {
    let $res = natives.networkClearGetGamerStatus();
};
mp.game2.network.sessionJoinInvite = function () {
    let $res = natives.networkSessionJoinInvite();
};
mp.game2.network.sessionCancelInvite = function () {
    let $res = natives.networkSessionCancelInvite();
};
mp.game2.network.sessionForceCancelInvite = function () {
    let $res = natives.networkSessionForceCancelInvite();
};
mp.game2.network.hasPendingInvite = function () {
    let $res = natives.networkHasPendingInvite();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.acceptInvite = function () {
    let $res = natives.networkRequestInviteConfirmedEvent();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionWasInvited = function () {
    let $res = natives.networkSessionWasInvited();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionGetInviter = function () {
    let $res = natives.networkSessionGetInviter(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $resObj.gamerHandle;
};
mp.game2.network.suppressInvite = function (toggle) {
    let $res = natives.networkSuppressInvite(toggle | 0);
};
mp.game2.network.blockInvites = function (toggle) {
    let $res = natives.networkBlockInvites(toggle | 0);
};
mp.game2.network.blockJoinQueueInvites = function (toggle) {
    let $res = natives.networkBlockJoinQueueInvites(toggle | 0);
};
mp.game2.network.blockKickedPlayers = function (p0) {
    let $res = natives.networkAllowInviteProcessInPlayerSwitch(p0 | 0);
};
mp.game2.network.setScriptReadyForEvents = function (toggle) {
    let $res = natives.networkSetScriptReadyForEvents(toggle | 0);
};
mp.game2.network.isOfflineInvitePending = function () {
    let $res = natives.networkIsOfflineInvitePending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.clearOfflineInvitePending = function () {
    let $res = natives.networkClearOfflineInvitePending();
};
mp.game2.network.sessionHostSinglePlayer = function (p0) {
    let $res = natives.networkSessionHostSinglePlayer(p0);
};
mp.game2.network.sessionLeaveSinglePlayer = function () {
    let $res = natives.networkSessionLeaveSinglePlayer();
};
mp.game2.network.isGameInProgress = function () {
    let $res = natives.networkIsGameInProgress();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isSessionActive = function () {
    let $res = natives.networkIsSessionActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isInSession = function () {
    let $res = natives.networkIsInSession();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isSessionStarted = function () {
    let $res = natives.networkIsSessionStarted();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isSessionBusy = function () {
    let $res = natives.networkIsSessionBusy();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.canSessionEnd = function () {
    let $res = natives.networkCanSessionEnd();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionMarkVisible = function (toggle) {
    let $res = natives.networkSessionMarkVisible(toggle | 0);
};
mp.game2.network.sessionIsVisible = function () {
    let $res = natives.networkSessionIsVisible();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionBlockJoinRequests = function (toggle) {
    let $res = natives.networkSessionBlockJoinRequests(toggle | 0);
};
mp.game2.network.sessionChangeSlots = function (p0, p1) {
    let $res = natives.networkSessionChangeSlots(p0, p1 | 0);
};
mp.game2.network.sessionGetPrivateSlots = function () {
    let $res = natives.networkSessionGetPrivateSlots();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.sessionVoiceHost = function () {
    let $res = natives.networkSessionVoiceHost();
};
mp.game2.network.sessionVoiceLeave = function () {
    let $res = natives.networkSessionVoiceLeave();
};
mp.game2.network.sessionVoiceConnectToPlayer = function () {
    let $res = natives.networkSessionVoiceConnectToPlayer(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.network.sessionVoiceRespondToRequest = function (p0, p1) {
    let $res = natives.networkSessionVoiceRespondToRequest(p0 | 0, p1);
};
mp.game2.network.sessionVoiceSetTimeout = function (timeout) {
    let $res = natives.networkSessionVoiceSetTimeout(timeout);
};
mp.game2.network.sessionIsInVoiceSession = function () {
    let $res = natives.networkSessionIsInVoiceSession();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sessionIsVoiceSessionBusy = function () {
    let $res = natives.networkSessionIsVoiceSessionBusy();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sendTextMessage = function (message) {
    let $res = natives.networkSendTextMessage(message, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.setActivitySpectator = function (toggle) {
    let $res = natives.networkSetActivitySpectator(toggle | 0);
};
mp.game2.network.isActivitySpectator = function () {
    let $res = natives.networkIsActivitySpectator();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setActivitySpectatorMax = function (maxSpectators) {
    let $res = natives.networkSetActivitySpectatorMax(maxSpectators);
};
mp.game2.network.getActivityPlayerNum = function (p0) {
    let $res = natives.networkGetActivityPlayerNum(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isActivitySpectatorFromHandle = function () {
    let $res = natives.networkIsActivitySpectatorFromHandle(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.hostTransition = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.networkHostTransition(p0, p1, p2, p3, p4, p5 | 0, p6 | 0, p7 | 0, p8 | 0, p9 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.doTransitionQuickmatch = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.networkDoTransitionQuickmatch(p0, p1, p2, p3, p4 | 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.doTransitionQuickmatchAsync = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.networkDoTransitionQuickmatchAsync(p0, p1, p2, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.doTransitionQuickmatchWithGroup = function (p0, p1, p2, p3, p5, p6, p7) {
    let $res = natives.networkDoTransitionQuickmatchWithGroup(p0, p1, p2, p3, 0, p5, p6 | 0, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p4 = $res[0];
    return $res[0] == 1 ? $resObj.p4 : undefined;
};
mp.game2.network.joinGroupActivity = function () {
    let $res = natives.networkJoinGroupActivity();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isTransitionClosedFriends = function () {
    let $res = natives.networkIsTransitionClosedFriends();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isTransitionClosedCrew = function () {
    let $res = natives.networkIsTransitionClosedCrew();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isTransitionSolo = function () {
    let $res = natives.networkIsTransitionSolo();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isTransitionPrivate = function () {
    let $res = natives.networkIsTransitionPrivate();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setTransitionCreatorHandle = function () {
    let $res = natives.networkSetTransitionCreatorHandle(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.network.clearTransitionCreatorHandle = function () {
    let $res = natives.networkClearTransitionCreatorHandle();
};
mp.game2.network.inviteGamersToTransition = function (p1) {
    let $res = natives.networkInviteGamersToTransition(0, p1);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.setGamerInvitedToTransition = function () {
    let $res = natives.networkSetGamerInvitedToTransition(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $resObj.gamerHandle;
};
mp.game2.network.leaveTransition = function () {
    let $res = natives.networkLeaveTransition();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.launchTransition = function () {
    let $res = natives.networkLaunchTransition();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.bailTransition = function (p0, p1, p2) {
    let $res = natives.networkBailTransition(p0 | 0, p1 | 0, p2 | 0);
};
mp.game2.network.doTransitionToGame = function (p0, maxPlayers) {
    let $res = natives.networkDoTransitionToGame(p0 | 0, maxPlayers);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.doTransitionToNewGame = function (p0, maxPlayers, p2) {
    let $res = natives.networkDoTransitionToNewGame(p0 | 0, maxPlayers, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.doTransitionToFreemode = function (p1, p2, players, p4) {
    let $res = natives.networkDoTransitionToFreemode(0, p1, p2 | 0, players, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.doTransitionToNewFreemode = function (players, p3, p4, p5) {
    let $res = natives.networkDoTransitionToNewFreemode(0, 0, players, p3 | 0, p4 | 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.isTransitionToGame = function () {
    let $res = natives.networkIsTransitionToGame();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getTransitionMembers = function (dataCount) {
    let $res = natives.networkGetTransitionMembers(0, dataCount);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.applyTransitionParameter = function (p0, p1) {
    let $res = natives.networkApplyTransitionParameter(p0, p1);
};
mp.game2.network.applyTransitionParameterString = function (p0, string, p2) {
    let $res = natives.networkApplyTransitionParameterString(p0, string, p2 | 0);
};
mp.game2.network.sendTransitionGamerInstruction = function (p1, p2, p3, p4) {
    let $res = natives.networkSendTransitionGamerInstruction(0, p1, p2, p3, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.markTransitionGamerAsFullyJoined = function () {
    let $res = natives.networkMarkTransitionGamerAsFullyJoined(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.isTransitionHost = function () {
    let $res = natives.networkIsTransitionHost();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isTransitionHostFromHandle = function () {
    let $res = natives.networkIsTransitionHostFromHandle(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.getTransitionHost = function () {
    let $res = natives.networkGetTransitionHost(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.isInTransition = function () {
    let $res = natives.networkIsInTransition();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isTransitionStarted = function () {
    let $res = natives.networkIsTransitionStarted();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isTransitionBusy = function () {
    let $res = natives.networkIsTransitionBusy();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isTransitionMatchmaking = function () {
    let $res = natives.networkIsTransitionMatchmaking();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.openTransitionMatchmaking = function () {
    let $res = natives.networkOpenTransitionMatchmaking();
};
mp.game2.network.closeTransitionMatchmaking = function () {
    let $res = natives.networkCloseTransitionMatchmaking();
};
mp.game2.network.isTransitionOpenToMatchmaking = function () {
    let $res = natives.networkIsTransitionOpenToMatchmaking();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setTransitionVisibilityLock = function (p0, p1) {
    let $res = natives.networkSetTransitionVisibilityLock(p0 | 0, p1 | 0);
};
mp.game2.network.isTransitionVisibilityLocked = function () {
    let $res = natives.networkIsTransitionVisibilityLocked();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setTransitionActivityId = function (p0) {
    let $res = natives.networkSetTransitionActivityId(p0);
};
mp.game2.network.changeTransitionSlots = function (p0, p1) {
    let $res = natives.networkChangeTransitionSlots(p0, p1);
};
mp.game2.network.hasPlayerStartedTransition = function (player) {
    let $res = natives.networkHasPlayerStartedTransition(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.areTransitionDetailsValid = function (p0) {
    let $res = natives.networkAreTransitionDetailsValid(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.joinTransition = function (player) {
    let $res = natives.networkJoinTransition(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasInvitedGamerToTransition = function () {
    let $res = natives.networkHasInvitedGamerToTransition(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.isActivitySession = function () {
    let $res = natives.networkIsActivitySession();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.sendInviteViaPresence = function (p2, p3) {
    let $res = natives.networkSendInviteViaPresence(0, null, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.sendPresenceTransitionInvite = function (p2, p3) {
    let $res = natives.networkSendTransitionInviteViaPresence(0, null, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.getNumPresenceInvites = function () {
    let $res = natives.networkGetNumPresenceInvites();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.acceptPresenceInvite = function (p0) {
    let $res = natives.networkAcceptPresenceInvite(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.removePresenceInvite = function (p0) {
    let $res = natives.networkRemovePresenceInvite(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getPresenceInviteId = function (p0) {
    let $res = natives.networkGetPresenceInviteId(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPresenceInviteInviter = function (p0) {
    let $res = natives.networkGetPresenceInviteInviter(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPresenceInviteHandle = function (p0) {
    let $res = natives.networkGetPresenceInviteHandle(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.network.getPresenceInviteSessionId = function (p0) {
    let $res = natives.networkGetPresenceInviteSessionId(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPresenceInviteContentId = function (p0) {
    let $res = natives.networkGetPresenceInviteContentId(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPresenceInvitePlaylistLength = function (p0) {
    let $res = natives.networkGetPresenceInvitePlaylistLength(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPresenceInvitePlaylistCurrent = function (p0) {
    let $res = natives.networkGetPresenceInvitePlaylistCurrent(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPresenceInviteFromAdmin = function (p0) {
    let $res = natives.networkGetPresenceInviteFromAdmin(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getPresenceInviteIsTournament = function (p0) {
    let $res = natives.networkGetPresenceInviteIsTournament(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasFollowInvite = function () {
    let $res = natives.networkHasFollowInvite();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.actionFollowInvite = function () {
    let $res = natives.networkActionFollowInvite();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.clearFollowInvite = function () {
    let $res = natives.networkClearFollowInvite();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.removeTransitionInvite = function () {
    let $res = natives.networkRemoveTransitionInvite(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.network.removeAllTransitionInvite = function () {
    let $res = natives.networkRemoveAllTransitionInvite();
};
mp.game2.network.inviteGamers = function (p1) {
    let $res = natives.networkInviteGamers(0, p1, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.hasInvitedGamer = function () {
    let $res = natives.networkHasInvitedGamer(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.getCurrentlySelectedGamerHandleFromInviteMenu = function () {
    let $res = natives.networkGetCurrentlySelectedGamerHandleFromInviteMenu(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.setCurrentlySelectedGamerHandleFromInviteMenu = function () {
    let $res = natives.networkSetCurrentlySelectedGamerHandleFromInviteMenu(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.setInviteOnCallForInviteMenu = function () {
    let $res = natives.networkSetInviteOnCallForInviteMenu(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.network.checkDataManagerSucceededForHandle = function (p0) {
    let $res = natives.networkCheckDataManagerSucceededForHandle(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.network.filloutPmPlayerList = function (p1, p2) {
    let $res = natives.filloutPmPlayerList(0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.filloutPmPlayerListWithNames = function (p2, p3) {
    let $res = natives.filloutPmPlayerListWithNames(0, 0, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.refreshPlayerListStats = function (p0) {
    let $res = natives.refreshPlayerListStats(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setCurrentDataManagerHandle = function () {
    let $res = natives.networkSetCurrentDataManagerHandle(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.isInPlatformParty = function () {
    let $res = natives.networkIsInPlatformParty();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getPlatformPartyUnk = function () {
    let $res = natives.networkGetPlatformPartyMemberCount();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPlatformPartyMembers = function (dataSize) {
    let $res = natives.networkGetPlatformPartyMembers(0, dataSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.isInPlatformPartyChat = function () {
    let $res = natives.networkIsInPlatformPartyChat();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isChattingInPlatformParty = function () {
    let $res = natives.networkIsChattingInPlatformParty(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.seedRandomNumberGenerator = function (seed) {
    let $res = natives.networkSeedRandomNumberGenerator(seed);
};
mp.game2.network.getRandomInt = function () {
    let $res = natives.networkGetRandomInt();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getRandomIntRanged = function (rangeStart, rangeEnd) {
    let $res = natives.networkGetRandomIntRanged(rangeStart, rangeEnd);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.playerIsCheater = function () {
    let $res = natives.networkPlayerIsCheater();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.playerGetCheaterReason = function () {
    let $res = natives.networkPlayerGetCheaterReason();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.playerIsBadsport = function () {
    let $res = natives.networkPlayerIsBadsport();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.triggerScriptCrcCheckOnPlayer = function (player, p1, scriptHash) {
    let $res = natives.triggerPlayerCrcHackerCheck(player, p1, scriptHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.remoteCheatDetected = function (player, a, b) {
    let $res = natives.remoteCheaterPlayerDetected(player, a, b);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.badSportPlayerLeftDetected = function (event, amountReceived) {
    let $res = natives.badSportPlayerLeftDetected(0, event, amountReceived);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.applyPedScarData = function (ped, p1) {
    let $res = natives.networkApplyPedScarData(ped, p1);
};
mp.game2.network.setThisScriptIsNetworkScript = function (maxNumMissionParticipants, p1, instanceId) {
    let $res = natives.networkSetThisScriptIsNetworkScript(maxNumMissionParticipants, p1 | 0, instanceId);
};
mp.game2.network.isThisScriptMarked = function (p0, p1, p2) {
    let $res = natives.networkTryToSetThisScriptIsNetworkScript(p0, p1 | 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getThisScriptIsNetworkScript = function () {
    let $res = natives.networkGetThisScriptIsNetworkScript();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getMaxNumParticipants = function () {
    let $res = natives.networkGetMaxNumParticipants();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getNumParticipants = function () {
    let $res = natives.networkGetNumParticipants();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getScriptStatus = function () {
    let $res = natives.networkGetScriptStatus();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.registerHostBroadcastVariables = function (numVars) {
    let $res = natives.networkRegisterHostBroadcastVariables(0, numVars, null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.vars = $res[1];
    return $resObj.vars;
};
mp.game2.network.registerPlayerBroadcastVariables = function (numVars) {
    let $res = natives.networkRegisterPlayerBroadcastVariables(0, numVars, null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.vars = $res[1];
    return $resObj.vars;
};
mp.game2.network.finishBroadcastingData = function () {
    let $res = natives.networkFinishBroadcastingData();
};
mp.game2.network.hasReceivedHostBroadcastData = function () {
    let $res = natives.networkHasReceivedHostBroadcastData();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getPlayerIndex = function (player) {
    let $res = natives.networkGetPlayerIndex(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getParticipantIndex = function (index) {
    let $res = natives.networkGetParticipantIndex(index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPlayerIndexFromPed = function (ped) {
    let $res = natives.networkGetPlayerIndexFromPed(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getNumConnectedPlayers = function () {
    let $res = natives.networkGetNumConnectedPlayers();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isPlayerConnected = function (player) {
    let $res = natives.networkIsPlayerConnected(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getTotalNumPlayers = function () {
    let $res = natives.networkGetTotalNumPlayers();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isParticipantActive = function (p0) {
    let $res = natives.networkIsParticipantActive(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isPlayerActive = function (player) {
    let $res = natives.networkIsPlayerActive(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isPlayerAParticipant = function (player) {
    let $res = natives.networkIsPlayerAParticipant(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isHostOfThisScript = function () {
    let $res = natives.networkIsHostOfThisScript();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getHostOfThisScript = function () {
    let $res = natives.networkGetHostOfThisScript();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getHostOfScript = function (scriptName, p1, p2) {
    let $res = natives.networkGetHostOfScript(scriptName, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.setMissionFinished = function () {
    let $res = natives.networkSetMissionFinished();
};
mp.game2.network.isScriptActive = function (scriptName, player, p2, p3) {
    let $res = natives.networkIsScriptActive(scriptName, player, p2 | 0, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isScriptActiveByHash = function (scriptHash, p1, p2, p3) {
    let $res = natives.networkIsScriptActiveByHash(scriptHash, p1, p2 | 0, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isThreadActive = function (threadId) {
    let $res = natives.networkIsThreadANetworkScript(threadId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getNumScriptParticipants = function (p1, p2) {
    let $res = natives.networkGetNumScriptParticipants(null, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.getInstanceIdOfThisScript = function () {
    let $res = natives.networkGetInstanceIdOfThisScript();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPositionHashOfThisScript = function () {
    let $res = natives.networkGetPositionHashOfThisScript();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isPlayerAParticipantOnScript = function (player1, script, player2) {
    let $res = natives.networkIsPlayerAParticipantOnScript(player1, script, player2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.participantId = function () {
    let $res = natives.participantId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.participantIdToInt = function () {
    let $res = natives.participantIdToInt();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPlayerKillerOfPlayer = function (player) {
    let $res = natives.networkGetKillerOfPlayer(player, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[1];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.getDestroyerOfNetworkId = function (netId) {
    let $res = natives.networkGetDestroyerOfNetworkId(netId, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[1];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.getDestroyerOfEntity = function (entity) {
    let $res = natives.networkGetAssistedDamageOfEntity(entity, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.getAssistedDamageOfDeadEntity = function (player, entity) {
    let $res = natives.networkGetAssistedKillOfEntity(player, entity, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p2 = $res[1];
    return $res[0] == 1 ? $resObj.p2 : undefined;
};
mp.game2.network.getAssistedDamageOfEntity = function (player, entity) {
    let $res = natives.networkGetAssistedDamageOfEntity(player, entity, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p2 = $res[1];
    return $res[0] == 1 ? $resObj.p2 : undefined;
};
mp.game2.network.getEntityKillerOfPlayer = function (player) {
    let $res = natives.networkGetEntityKillerOfPlayer(player, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[1];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.resurrectLocalPlayer = function (x, y, z, heading, unk, changetime, p6) {
    let $res = natives.networkResurrectLocalPlayer(x, y, z, heading, unk | 0, changetime | 0, p6 | 0, 0, 0);
};
mp.game2.network.setLocalPlayerInvincibleTime = function (time) {
    let $res = natives.networkSetLocalPlayerInvincibleTime(time);
};
mp.game2.network.isLocalPlayerInvincible = function () {
    let $res = natives.networkIsLocalPlayerInvincible();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.disableInvincibleFlashing = function (player, toggle) {
    let $res = natives.networkDisableInvincibleFlashing(player, toggle | 0);
};
mp.game2.network.pedForceGameStateUpdate = function (ped) {
    let $res = natives.networkPatchPostCutsceneHs4fTunEnt(ped);
};
mp.game2.network.setLocalPlayerSyncLookAt = function (toggle) {
    let $res = natives.networkSetLocalPlayerSyncLookAt(toggle | 0);
};
mp.game2.network.hasEntityBeenRegisteredWithThisThread = function (entity) {
    let $res = natives.networkHasEntityBeenRegisteredWithThisThread(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getNetworkIdFromEntity = function (entity) {
    let $res = natives.networkGetNetworkIdFromEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getEntityFromNetworkId = function (netId) {
    let $res = natives.networkGetEntityFromNetworkId(netId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getEntityIsNetworked = function (entity) {
    let $res = natives.networkGetEntityIsNetworked(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getEntityIsLocal = function (entity) {
    let $res = natives.networkGetEntityIsLocal(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.registerEntityAsNetworked = function (entity) {
    let $res = natives.networkRegisterEntityAsNetworked(entity);
};
mp.game2.network.unregisterNetworkedEntity = function (entity) {
    let $res = natives.networkUnregisterNetworkedEntity(entity);
};
mp.game2.network.doesNetworkIdExist = function (netId) {
    let $res = natives.networkDoesNetworkIdExist(netId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.doesEntityExistWithNetworkId = function (netId) {
    let $res = natives.networkDoesEntityExistWithNetworkId(netId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.requestControlOfNetworkId = function (netId) {
    let $res = natives.networkRequestControlOfNetworkId(netId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasControlOfNetworkId = function (netId) {
    let $res = natives.networkHasControlOfNetworkId(netId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isNetworkIdAClone = function (netId) {
    let $res = natives.networkIsNetworkIdRemotelyControlled(netId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.requestControlOfEntity = function (entity) {
    let $res = natives.networkRequestControlOfEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.requestControlOfDoor = function (doorID) {
    let $res = natives.networkRequestControlOfDoor(doorID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasControlOfEntity = function (entity) {
    let $res = natives.networkHasControlOfEntity(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasControlOfPickup = function (pickup) {
    let $res = natives.networkHasControlOfPickup(pickup);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasControlOfDoor = function (doorHash) {
    let $res = natives.networkHasControlOfDoor(doorHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isDoorNetworked = function (doorHash) {
    let $res = natives.networkIsDoorNetworked(doorHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.vehToNet = function (vehicle) {
    let $res = natives.vehToNet(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.pedToNet = function (ped) {
    let $res = natives.pedToNet(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.objToNet = function (object) {
    let $res = natives.objToNet(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.netToVeh = function (netHandle) {
    let $res = natives.netToVeh(netHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.netToPed = function (netHandle) {
    let $res = natives.netToPed(netHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.netToObj = function (netHandle) {
    let $res = natives.netToObj(netHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.netToEnt = function (netHandle) {
    let $res = natives.netToEnt(netHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getLocalHandle = function (gamerHandleSize) {
    let $res = natives.networkGetLocalHandle(0, gamerHandleSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $resObj.gamerHandle;
};
mp.game2.network.handleFromUserId = function (userId, gamerHandleSize) {
    let $res = natives.networkHandleFromUserId(userId, 0, gamerHandleSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $resObj.gamerHandle;
};
mp.game2.network.handleFromMemberId = function (memberId, gamerHandleSize) {
    let $res = natives.networkHandleFromMemberId(memberId, 0, gamerHandleSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $resObj.gamerHandle;
};
mp.game2.network.handleFromPlayer = function (player, gamerHandleSize) {
    let $res = natives.networkHandleFromPlayer(player, 0, gamerHandleSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $resObj.gamerHandle;
};
mp.game2.network.hashFromPlayerHandle = function (player) {
    let $res = natives.networkHashFromPlayerHandle(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.hashFromGamerHandle = function () {
    let $res = natives.networkHashFromGamerHandle(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.handleFromFriend = function (friendIndex, gamerHandleSize) {
    let $res = natives.networkHandleFromFriend(friendIndex, 0, gamerHandleSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $resObj.gamerHandle;
};
mp.game2.network.gamertagFromHandleStart = function () {
    let $res = natives.networkGamertagFromHandleStart(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.gamertagFromHandlePending = function () {
    let $res = natives.networkGamertagFromHandlePending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.gamertagFromHandleSucceeded = function () {
    let $res = natives.networkGamertagFromHandleSucceeded();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getGamertagFromHandle = function () {
    let $res = natives.networkGetGamertagFromHandle(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $resObj;
};
mp.game2.network.displaynamesFromHandlesStart = function (p1) {
    let $res = natives.networkDisplaynamesFromHandlesStart(0, p1);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.getDisplaynamesFromHandles = function (p0, p1, p2) {
    let $res = natives.networkGetDisplaynamesFromHandles(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.areHandlesTheSame = function () {
    let $res = natives.networkAreHandlesTheSame(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle1 = $res[0];
    $resObj.gamerHandle2 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.isHandleValid = function (gamerHandleSize) {
    let $res = natives.networkIsHandleValid(0, gamerHandleSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.getPlayerFromGamerHandle = function () {
    let $res = natives.networkGetPlayerFromGamerHandle(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.memberIdFromGamerHandle = function () {
    let $res = natives.networkMemberIdFromGamerHandle(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $resObj;
};
mp.game2.network.isGamerInMySession = function () {
    let $res = natives.networkIsGamerInMySession(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.showProfileUi = function () {
    let $res = natives.networkShowProfileUi(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $resObj.gamerHandle;
};
mp.game2.network.playerGetName = function (player) {
    let $res = natives.networkPlayerGetName(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.playerGetUserid = function (player) {
    let $res = natives.networkPlayerGetUserid(player, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.userID = $res[1];
    return $resObj;
};
mp.game2.network.playerIsRockstarDev = function (player) {
    let $res = natives.networkPlayerIsRockstarDev(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.playerIndexIsCheater = function (player) {
    let $res = natives.networkPlayerIndexIsCheater(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getEntityNetScriptId = function (entity) {
    let $res = natives.networkEntityGetObjectId(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isInactiveProfile = function () {
    let $res = natives.networkIsInactiveProfile(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.getMaxFriends = function () {
    let $res = natives.networkGetMaxFriends();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getFriendCount = function () {
    let $res = natives.networkGetFriendCount();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getFriendName = function (friendIndex) {
    let $res = natives.networkGetFriendName(friendIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getFriendNameFromIndex = function (friendIndex) {
    let $res = natives.networkGetFriendDisplayName(friendIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isFriendOnline = function (name) {
    let $res = natives.networkIsFriendOnline(name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isFriendHandleOnline = function () {
    let $res = natives.networkIsFriendHandleOnline(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.isFriendInSameTitle = function (friendName) {
    let $res = natives.networkIsFriendInSameTitle(friendName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isFriendInMultiplayer = function (friendName) {
    let $res = natives.networkIsFriendInMultiplayer(friendName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isFriend = function () {
    let $res = natives.networkIsFriend(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.isPendingFriend = function (p0) {
    let $res = natives.networkIsPendingFriend(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isAddingFriend = function () {
    let $res = natives.networkIsAddingFriend();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.addFriend = function (message) {
    let $res = natives.networkAddFriend(0, message);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.isFriendIndexOnline = function (friendIndex) {
    let $res = natives.networkIsFriendIndexOnline(friendIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setPlayerIsPassive = function (toggle) {
    let $res = natives.networkSetPlayerIsPassive(toggle | 0);
};
mp.game2.network.getPlayerOwnsWaypoint = function (player) {
    let $res = natives.networkGetPlayerOwnsWaypoint(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.canSetWaypoint = function () {
    let $res = natives.networkCanSetWaypoint();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasHeadset = function () {
    let $res = natives.networkHasHeadset();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isLocalTalking = function () {
    let $res = natives.networkIsPushToTalkActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.gamerHasHeadset = function () {
    let $res = natives.networkGamerHasHeadset(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.isGamerTalking = function () {
    let $res = natives.networkIsGamerTalking(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.canCommunicateWithGamer2 = function () {
    let $res = natives.networkCanCommunicateWithGamer(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.canCommunicateWithGamer = function () {
    let $res = natives.networkCanTextChatWithGamer(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.isGamerMutedByMe = function () {
    let $res = natives.networkIsGamerMutedByMe(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.amIMutedByGamer = function () {
    let $res = natives.networkAmIMutedByGamer(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.isGamerBlockedByMe = function () {
    let $res = natives.networkIsGamerBlockedByMe(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.amIBlockedByGamer = function () {
    let $res = natives.networkAmIBlockedByGamer(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.canViewGamerUserContent = function () {
    let $res = natives.networkCanViewGamerUserContent(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.hasViewGamerUserContentResult = function () {
    let $res = natives.networkHasViewGamerUserContentResult(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.canPlayMultiplayerWithGamer = function () {
    let $res = natives.networkCanPlayMultiplayerWithGamer(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.canGamerPlayMultiplayerWithMe = function () {
    let $res = natives.networkCanGamerPlayMultiplayerWithMe(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.isPlayerTalking = function (player) {
    let $res = natives.networkIsPlayerTalking(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.playerHasHeadset = function (player) {
    let $res = natives.networkPlayerHasHeadset(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isPlayerMutedByMe = function (player) {
    let $res = natives.networkIsPlayerMutedByMe(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.amIMutedByPlayer = function (player) {
    let $res = natives.networkAmIMutedByPlayer(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isPlayerBlockedByMe = function (player) {
    let $res = natives.networkIsPlayerBlockedByMe(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.amIBlockedByPlayer = function (player) {
    let $res = natives.networkAmIBlockedByPlayer(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getPlayerLoudness = function (player) {
    let $res = natives.networkGetPlayerLoudness(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.setTalkerProximity = function (value) {
    let $res = natives.networkSetTalkerProximity(value);
};
mp.game2.network.getTalkerProximity = function () {
    let $res = natives.networkGetTalkerProximity();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.setVoiceActive = function (toggle) {
    let $res = natives.networkSetVoiceActive(toggle | 0);
};
mp.game2.network.overrideTransitionChat = function (p0) {
    let $res = natives.networkOverrideTransitionChat(p0 | 0);
};
mp.game2.network.setTeamOnlyChat = function (toggle) {
    let $res = natives.networkSetTeamOnlyChat(toggle | 0);
};
mp.game2.network.overrideTeamRestrictions = function (team, toggle) {
    let $res = natives.networkOverrideTeamRestrictions(team, toggle | 0);
};
mp.game2.network.setOverrideSpectatorMode = function (toggle) {
    let $res = natives.networkSetOverrideSpectatorMode(toggle | 0);
};
mp.game2.network.setNoSpectatorChat = function (toggle) {
    let $res = natives.networkSetNoSpectatorChat(toggle | 0);
};
mp.game2.network.overrideChatRestrictions = function (player, toggle) {
    let $res = natives.networkOverrideChatRestrictions(player, toggle | 0);
};
mp.game2.network.overrideSendRestrictions = function (player, toggle) {
    let $res = natives.networkOverrideSendRestrictions(player, toggle | 0);
};
mp.game2.network.overrideSendRestrictionsAll = function (toggle) {
    let $res = natives.networkOverrideSendRestrictionsAll(toggle | 0);
};
mp.game2.network.overrideReceiveRestrictions = function (player, toggle) {
    let $res = natives.networkOverrideReceiveRestrictions(player, toggle | 0);
};
mp.game2.network.overrideReceiveRestrictionsAll = function (toggle) {
    let $res = natives.networkOverrideReceiveRestrictionsAll(toggle | 0);
};
mp.game2.network.setVoiceChannel = function (channel) {
    let $res = natives.networkSetVoiceChannel(channel);
};
mp.game2.network.clearVoiceChannel = function () {
    let $res = natives.networkClearVoiceChannel();
};
mp.game2.network.applyVoiceProximityOverride = function (x, y, z) {
    let $res = natives.networkApplyVoiceProximityOverride(x, y, z);
};
mp.game2.network.clearVoiceProximityOverride = function () {
    let $res = natives.networkClearVoiceProximityOverride();
};
mp.game2.network.enableVoiceBandwidthRestriction = function (player) {
    let $res = natives.networkEnableVoiceBandwidthRestriction(player);
};
mp.game2.network.disableVoiceBandwidthRestriction = function (player) {
    let $res = natives.networkDisableVoiceBandwidthRestriction(player);
};
mp.game2.network.isTextChatActive = function () {
    let $res = natives.networkTextChatIsTyping();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.shutdownAndLaunchSinglePlayerGame = function () {
    let $res = natives.shutdownAndLaunchSinglePlayerGame();
};
mp.game2.network.shutdownAndLoadMostRecentSave = function () {
    let $res = natives.shutdownAndLoadMostRecentSave();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setFriendlyFireOption = function (toggle) {
    let $res = natives.networkSetFriendlyFireOption(toggle | 0);
};
mp.game2.network.setRichPresence = function (p0, p1, p2, p3) {
    let $res = natives.networkSetRichPresence(p0, p1, p2, p3);
};
mp.game2.network.setRichPresenceString = function (p0, textLabel) {
    let $res = natives.networkSetRichPresenceString(p0, textLabel);
};
mp.game2.network.getTimeoutTime = function () {
    let $res = natives.networkGetTimeoutTime();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.leavePedBehindBeforeWarp = function (player, x, y, z, p4, p5) {
    let $res = natives.networkLeavePedBehindBeforeWarp(player, x, y, z, p4 | 0, p5 | 0);
};
mp.game2.network.leavePedBehindBeforeCutscene = function (player, p1) {
    let $res = natives.networkLeavePedBehindBeforeCutscene(player, p1 | 0);
};
mp.game2.network.removeAllStickyBombsFromEntity = function (entity, ped) {
    let $res = natives.removeAllStickyBombsFromEntity(entity, ped);
};
mp.game2.network.clanServiceIsValid = function () {
    let $res = natives.networkClanServiceIsValid();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.clanPlayerIsActive = function () {
    let $res = natives.networkClanPlayerIsActive(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.clanPlayerGetDesc = function (bufferSize) {
    let $res = natives.networkClanPlayerGetDesc(0, bufferSize, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.clanDesc = $res[0];
    $resObj.gamerHandle = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.clanIsRockstarClan = function (bufferSize) {
    let $res = natives.networkClanIsRockstarClan(0, bufferSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.clanDesc = $res[0];
    return $res[0] == 1 ? $resObj.clanDesc : undefined;
};
mp.game2.network.clanGetUiFormattedTag = function (bufferSize) {
    let $res = natives.networkClanGetUiFormattedTag(0, bufferSize, null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.clanDesc = $res[0];
    return $resObj;
};
mp.game2.network.clanGetLocalMembershipsCount = function () {
    let $res = natives.networkClanGetLocalMembershipsCount();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.clanGetMembershipDesc = function (p1) {
    let $res = natives.networkClanGetMembershipDesc(0, p1);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.memberDesc = $res[0];
    return $res[0] == 1 ? $resObj.memberDesc : undefined;
};
mp.game2.network.clanDownloadMembership = function () {
    let $res = natives.networkClanDownloadMembership(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.clanDownloadMembershipPending = function () {
    let $res = natives.networkClanDownloadMembershipPending(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.clanAnyDownloadMembershipPending = function () {
    let $res = natives.networkClanAnyDownloadMembershipPending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.clanRemoteMembershipsAreInCache = function () {
    let $res = natives.networkClanRemoteMembershipsAreInCache(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1];
    return $res[1] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.clanGetMembershipCount = function () {
    let $res = natives.networkClanGetMembershipCount(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1];
    $resObj.result = $res[1];
    return $resObj;
};
mp.game2.network.clanGetMembershipValid = function (p1) {
    let $res = natives.networkClanGetMembershipValid(0, p1);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1];
    return $res[1] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.clanGetMembership = function (p2) {
    let $res = natives.networkClanGetMembership(0, 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1];
    $resObj.clanMembership = $res[0];
    $resObj.result = $res[1] == 1;
    return $resObj;
};
mp.game2.network.clanJoin = function (clanDesc) {
    let $res = natives.networkClanJoin(clanDesc);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.clanAnimation = function (animDict, animName) {
    let $res = natives.networkClanCrewinfoGetStringValue(animDict, animName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.clanGetEmblemTxdName = function () {
    let $res = natives.networkClanGetEmblemTxdName(0, null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.netHandle = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.clanRequestEmblem = function (p0) {
    let $res = natives.networkClanRequestEmblem(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.clanIsEmblemReady = function (p0) {
    let $res = natives.networkClanIsEmblemReady(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.network.clanReleaseEmblem = function (p0) {
    let $res = natives.networkClanReleaseEmblem(p0);
};
mp.game2.network.getPrimaryClanDataClear = function () {
    let $res = natives.networkGetPrimaryClanDataClear();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPrimaryClanDataCancel = function () {
    let $res = natives.networkGetPrimaryClanDataCancel();
};
mp.game2.network.getPrimaryClanDataStart = function (p1) {
    let $res = natives.networkGetPrimaryClanDataStart(0, p1);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.getPrimaryClanDataPending = function () {
    let $res = natives.networkGetPrimaryClanDataPending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPrimaryClanDataSuccess = function () {
    let $res = natives.networkGetPrimaryClanDataSuccess();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPrimaryClanDataNew = function () {
    let $res = natives.networkGetPrimaryClanDataNew(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.setIdCanMigrate = function (netId, toggle) {
    let $res = natives.setNetworkIdCanMigrate(netId, toggle | 0);
};
mp.game2.network.setIdExistsOnAllMachines = function (netId, toggle) {
    let $res = natives.setNetworkIdExistsOnAllMachines(netId, toggle | 0);
};
mp.game2.network.setIdAlwaysExistsForPlayer = function (netId, player, toggle) {
    let $res = natives.setNetworkIdAlwaysExistsForPlayer(netId, player, toggle | 0);
};
mp.game2.network.setEntityCanBlend = function (entity, toggle) {
    let $res = natives.networkSetEntityCanBlend(entity, toggle | 0);
};
mp.game2.network.setEntityInvisibleToNetwork = function (entity, toggle) {
    let $res = natives.networkSetEntityOnlyExistsForParticipants(entity, toggle | 0);
};
mp.game2.network.setIdVisibleInCutscene = function (netId, p1, p2) {
    let $res = natives.setNetworkIdVisibleInCutscene(netId, p1 | 0, p2 | 0);
};
mp.game2.network.setCutsceneEntities = function (toggle) {
    let $res = natives.setNetworkCutsceneEntities(toggle | 0);
};
mp.game2.network.isIdOwnedByParticipant = function (netId) {
    let $res = natives.isNetworkIdOwnedByParticipant(netId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setLocalPlayerVisibleInCutscene = function (p0, p1) {
    let $res = natives.setLocalPlayerVisibleInCutscene(p0 | 0, p1 | 0);
};
mp.game2.network.setLocalPlayerInvisibleLocally = function (p0) {
    let $res = natives.setLocalPlayerInvisibleLocally(p0 | 0);
};
mp.game2.network.setLocalPlayerVisibleLocally = function (p0) {
    let $res = natives.setLocalPlayerVisibleLocally(p0 | 0);
};
mp.game2.network.setPlayerInvisibleLocally = function (player, toggle) {
    let $res = natives.setPlayerInvisibleLocally(player, toggle | 0);
};
mp.game2.network.setPlayerVisibleLocally = function (player, toggle) {
    let $res = natives.setPlayerVisibleLocally(player, toggle | 0);
};
mp.game2.network.fadeOutLocalPlayer = function (p0) {
    let $res = natives.fadeOutLocalPlayer(p0 | 0);
};
mp.game2.network.fadeOutEntity = function (entity, normal, slow) {
    let $res = natives.networkFadeOutEntity(entity, normal | 0, slow | 0);
};
mp.game2.network.fadeInEntity = function (entity, state, p2) {
    let $res = natives.networkFadeInEntity(entity, state | 0, p2 | 0);
};
mp.game2.network.isPlayerFading = function (player) {
    let $res = natives.networkIsPlayerFading(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isEntityFading = function (entity) {
    let $res = natives.networkIsEntityFading(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isPlayerInCutscene = function (player) {
    let $res = natives.isPlayerInCutscene(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setEntityVisibleInCutscene = function (p0, p1, p2) {
    let $res = natives.setEntityVisibleInCutscene(p0, p1 | 0, p2 | 0);
};
mp.game2.network.setEntityLocallyInvisible = function (entity) {
    let $res = natives.setEntityLocallyInvisible(entity);
};
mp.game2.network.setEntityLocallyVisible = function (entity) {
    let $res = natives.setEntityLocallyVisible(entity);
};
mp.game2.network.isDamageTrackerActiveOnId = function (netID) {
    let $res = natives.isDamageTrackerActiveOnNetworkId(netID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.activateDamageTrackerOnId = function (netID, toggle) {
    let $res = natives.activateDamageTrackerOnNetworkId(netID, toggle | 0);
};
mp.game2.network.isDamageTrackerActiveOnPlayer = function (player) {
    let $res = natives.isDamageTrackerActiveOnPlayer(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.activateDamageTrackerOnPlayer = function (player, toggle) {
    let $res = natives.activateDamageTrackerOnPlayer(player, toggle | 0);
};
mp.game2.network.isSphereVisibleToAnotherMachine = function (p0, p1, p2, p3) {
    let $res = natives.isSphereVisibleToAnotherMachine(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isSphereVisibleToPlayer = function (p0, p1, p2, p3, p4) {
    let $res = natives.isSphereVisibleToPlayer(p0, p1, p2, p3, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.reserveMissionObjects = function (amount) {
    let $res = natives.reserveNetworkMissionObjects(amount);
};
mp.game2.network.reserveMissionPeds = function (amount) {
    let $res = natives.reserveNetworkMissionPeds(amount);
};
mp.game2.network.reserveMissionVehicles = function (amount) {
    let $res = natives.reserveNetworkMissionVehicles(amount);
};
mp.game2.network.reserveLocalObjects = function (amount) {
    let $res = natives.reserveLocalNetworkMissionObjects(amount);
};
mp.game2.network.reserveLocalPeds = function (amount) {
    let $res = natives.reserveLocalNetworkMissionPeds(amount);
};
mp.game2.network.reserveLocalVehicles = function (amount) {
    let $res = natives.reserveLocalNetworkMissionVehicles(amount);
};
mp.game2.network.canRegisterMissionObjects = function (amount) {
    let $res = natives.canRegisterMissionObjects(amount);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.canRegisterMissionPeds = function (amount) {
    let $res = natives.canRegisterMissionPeds(amount);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.canRegisterMissionVehicles = function (amount) {
    let $res = natives.canRegisterMissionVehicles(amount | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.canRegisterMissionPickups = function (amount) {
    let $res = natives.canRegisterMissionPickups(amount);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.canRegisterMissionEntities = function (ped_amt, vehicle_amt, object_amt, pickup_amt) {
    let $res = natives.canRegisterMissionEntities(ped_amt | 0, vehicle_amt, object_amt, pickup_amt);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getNumReservedMissionObjects = function (p0, p1) {
    let $res = natives.getNumReservedMissionObjects(p0 | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getNumReservedMissionPeds = function (p0, p1) {
    let $res = natives.getNumReservedMissionPeds(p0 | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getNumReservedMissionVehicles = function (p0, p1) {
    let $res = natives.getNumReservedMissionVehicles(p0 | 0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getNumCreatedMissionObjects = function (p0) {
    let $res = natives.getNumCreatedMissionObjects(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getNumCreatedMissionPeds = function (p0) {
    let $res = natives.getNumCreatedMissionPeds(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getNumCreatedMissionVehicles = function (p0) {
    let $res = natives.getNumCreatedMissionVehicles(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getMaxNumObjects = function () {
    let $res = natives.getMaxNumNetworkObjects();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getMaxNumPeds = function () {
    let $res = natives.getMaxNumNetworkPeds();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getMaxNumVehicles = function () {
    let $res = natives.getMaxNumNetworkVehicles();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getMaxNumPickups = function () {
    let $res = natives.getMaxNumNetworkPickups();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.setObjectInterestRange = function (object, range) {
    let $res = natives.networkSetObjectScopeDistance(object, range);
};
mp.game2.network.getTime = function () {
    let $res = natives.getNetworkTime();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getTimeAccurate = function () {
    let $res = natives.getNetworkTimeAccurate();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.hasTimeStarted = function () {
    let $res = natives.hasNetworkTimeStarted();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getTimeOffset = function (timeA, timeB) {
    let $res = natives.getTimeOffset(timeA, timeB);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isTimeLessThan = function (timeA, timeB) {
    let $res = natives.isTimeLessThan(timeA, timeB);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isTimeMoreThan = function (timeA, timeB) {
    let $res = natives.isTimeMoreThan(timeA, timeB);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isTimeEqualTo = function (timeA, timeB) {
    let $res = natives.isTimeEqualTo(timeA, timeB);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getTimeDifference = function (timeA, timeB) {
    let $res = natives.getTimeDifference(timeA, timeB);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getTimeAsString = function (time) {
    let $res = natives.getTimeAsString(time);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getCloudTimeAsString = function () {
    let $res = natives.getCloudTimeAsString();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getCloudTimeAsInt = function () {
    let $res = natives.getCloudTimeAsInt();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getPosixTime = function () {
    let $res = natives.getCloudTimeAsInt();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.convertPosixTime = function (posixTime) {
    let $res = natives.convertPosixTime(posixTime, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.timeStructure = $res[0];
    return $resObj.timeStructure;
};
mp.game2.network.setInSpectatorMode = function (toggle, playerPed) {
    let $res = natives.networkSetInSpectatorMode(toggle | 0, playerPed);
};
mp.game2.network.setInSpectatorModeExtended = function (toggle, playerPed, p2) {
    let $res = natives.networkSetInSpectatorModeExtended(toggle | 0, playerPed, p2 | 0);
};
mp.game2.network.setInFreeCamMode = function (toggle) {
    let $res = natives.networkSetInFreeCamMode(toggle | 0);
};
mp.game2.network.setChoiceMigrateOptions = function (toggle, player) {
    let $res = natives.networkSetAntagonisticToPlayer(toggle | 0, player);
};
mp.game2.network.isInSpectatorMode = function () {
    let $res = natives.networkIsInSpectatorMode();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setInMpCutscene = function (p0, p1) {
    let $res = natives.networkSetInMpCutscene(p0 | 0, p1 | 0);
};
mp.game2.network.isInMpCutscene = function () {
    let $res = natives.networkIsInMpCutscene();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isPlayerInMpCutscene = function (player) {
    let $res = natives.networkIsPlayerInMpCutscene(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setVehicleRespotTimer = function (netId, time, p2, p3) {
    let $res = natives.setNetworkVehicleRespotTimer(netId, time, p2 | 0, p3 | 0);
};
mp.game2.network.setVehicleAsGhost = function (vehicle, toggle) {
    let $res = natives.setNetworkVehicleAsGhost(vehicle, toggle | 0);
};
mp.game2.network.setVehiclePositionUpdateMultiplier = function (vehicle, multiplier) {
    let $res = natives.setNetworkVehicleMaxPositionDeltaMultiplier(vehicle, multiplier);
};
mp.game2.network.setEnableVehiclePositionCorrection = function (vehicle, toggle) {
    let $res = natives.setNetworkEnableHighSpeedEdgeFallDetection(vehicle, toggle | 0);
};
mp.game2.network.setLocalPlayerAsGhost = function (toggle, p1) {
    let $res = natives.setLocalPlayerAsGhost(toggle | 0, p1 | 0);
};
mp.game2.network.isEntityGhostedToLocalPlayer = function (entity) {
    let $res = natives.isEntityAGhost(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setRelationshipToPlayer = function (player, p1) {
    let $res = natives.setRemotePlayerAsGhost(player, p1 | 0);
};
mp.game2.network.setGhostedEntityAlpha = function (alpha) {
    let $res = natives.setGhostAlpha(alpha);
};
mp.game2.network.resetGhostedEntityAlpha = function () {
    let $res = natives.resetGhostAlpha();
};
mp.game2.network.setEntityGhostedWithOwner = function (entity, p1) {
    let $res = natives.setEntityGhostedForGhostPlayers(entity, p1 | 0);
};
mp.game2.network.usePlayerColourInsteadOfTeamColour = function (toggle) {
    let $res = natives.usePlayerColourInsteadOfTeamColour(toggle | 0);
};
mp.game2.network.createSynchronisedScene = function (x, y, z, xRot, yRot, zRot, rotationOrder, useOcclusionPortal, looped, p9, animTime, p11) {
    let $res = natives.networkCreateSynchronisedScene(x, y, z, xRot, yRot, zRot, rotationOrder, useOcclusionPortal | 0, looped | 0, p9, animTime || 0, p11 || 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.addPedToSynchronisedScene = function (ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9) {
    let $res = natives.networkAddPedToSynchronisedScene(ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9);
};
mp.game2.network.addEntityToSynchronisedScene = function (entity, netScene, animDict, animName, speed, speedMulitiplier, flag) {
    let $res = natives.networkAddEntityToSynchronisedScene(entity, netScene, animDict, animName, speed, speedMulitiplier, flag);
};
mp.game2.network.addSynchronisedSceneCamera = function (netScene, animDict, animName) {
    let $res = natives.networkAddSynchronisedSceneCamera(netScene, animDict, animName);
};
mp.game2.network.attachSynchronisedSceneToEntity = function (netScene, entity, bone) {
    let $res = natives.networkAttachSynchronisedSceneToEntity(netScene, entity, bone);
};
mp.game2.network.startSynchronisedScene = function (netScene) {
    let $res = natives.networkStartSynchronisedScene(netScene);
};
mp.game2.network.stopSynchronisedScene = function (netScene) {
    let $res = natives.networkStopSynchronisedScene(netScene);
};
mp.game2.network.getLocalSceneFromNetworkId = function (netId) {
    let $res = natives.networkGetLocalSceneFromNetworkId(netId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.startRespawnSearchForPlayer = function (player, x, y, z, radius, p5, p6, p7, flags) {
    let $res = natives.networkStartRespawnSearchForPlayer(player, x, y, z, radius, p5, p6, p7, flags);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.startRespawnSearchInAngledAreaForPlayer = function (player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags) {
    let $res = natives.networkStartRespawnSearchInAngledAreaForPlayer(player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.queryRespawnResults = function () {
    let $res = natives.networkQueryRespawnResults(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.cancelRespawnSearch = function () {
    let $res = natives.networkCancelRespawnSearch();
};
mp.game2.network.getRespawnResult = function (randomInt) {
    let $res = natives.networkGetRespawnResult(randomInt, undefined, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.coordinates = new mp.Vector3($res[1]);
    $resObj.heading = $res[2];
    return $resObj;
};
mp.game2.network.getRespawnResultFlags = function (p0) {
    let $res = natives.networkGetRespawnResultFlags(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.startSoloTutorialSession = function () {
    let $res = natives.networkStartSoloTutorialSession();
};
mp.game2.network.endTutorialSession = function () {
    let $res = natives.networkEndTutorialSession();
};
mp.game2.network.isInTutorialSession = function () {
    let $res = natives.networkIsInTutorialSession();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isTutorialSessionChangePending = function () {
    let $res = natives.networkIsTutorialSessionChangePending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getPlayerTutorialSessionInstance = function (player) {
    let $res = natives.networkGetPlayerTutorialSessionInstance(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isPlayerEqualToIndex = function (player, index) {
    let $res = natives.networkArePlayersInSameTutorialSession(player, index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.concealPlayer = function (player, toggle, p2) {
    let $res = natives.networkConcealPlayer(player, toggle | 0, p2 | 0);
};
mp.game2.network.isPlayerConcealed = function (player) {
    let $res = natives.networkIsPlayerConcealed(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.concealEntity = function (entity, toggle) {
    let $res = natives.networkConcealEntity(entity, toggle | 0);
};
mp.game2.network.isEntityConcealed = function (entity) {
    let $res = natives.networkIsEntityConcealed(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.overrideClockTime = function (hours, minutes, seconds) {
    let $res = natives.networkOverrideClockTime(hours, minutes, seconds);
};
mp.game2.network.overrideClockMillisecondsPerGameMinute = function (ms) {
    let $res = natives.networkOverrideClockRate(ms);
};
mp.game2.network.clearClockTimeOverride = function () {
    let $res = natives.networkClearClockTimeOverride();
};
mp.game2.network.isClockTimeOverridden = function () {
    let $res = natives.networkIsClockTimeOverridden();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.addEntityArea = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.networkAddEntityArea(p0, p1, p2, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.addEntityAngledArea = function (x1, y1, z1, x2, y2, z2, width) {
    let $res = natives.networkAddEntityAngledArea(x1, y1, z1, x2, y2, z2, width);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.addEntityDisplayedBoundaries = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.networkAddClientEntityArea(p0, p1, p2, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.removeEntityArea = function (p0) {
    let $res = natives.networkRemoveEntityArea(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.entityAreaDoesExist = function (areaHandle) {
    let $res = natives.networkEntityAreaDoesExist(areaHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.entityAreaHaveAllReplied = function (areaHandle) {
    let $res = natives.networkEntityAreaHaveAllReplied(areaHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.entityAreaIsOccupied = function (areaHandle) {
    let $res = natives.networkEntityAreaIsOccupied(areaHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.useHighPrecisionBlending = function (netID, toggle) {
    let $res = natives.networkUseHighPrecisionBlending(netID, toggle | 0);
};
mp.game2.network.requestCloudBackgroundScripts = function () {
    let $res = natives.networkRequestCloudBackgroundScripts();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isCloudBackgroundScriptRequestPending = function () {
    let $res = natives.networkIsCloudBackgroundScriptRequestPending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.requestCloudTunables = function () {
    let $res = natives.networkRequestCloudTunables();
};
mp.game2.network.isTunableCloudRequestPending = function () {
    let $res = natives.networkIsTunableCloudRequestPending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getTunableCloudCrc = function () {
    let $res = natives.networkGetTunableCloudCrc();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.doesTunableExist = function (tunableContext, tunableName) {
    let $res = natives.networkDoesTunableExist(tunableContext, tunableName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.accessTunableInt = function (tunableContext, tunableName) {
    let $res = natives.networkAccessTunableInt(tunableContext, tunableName, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.value = $res[1];
    return $res[0] == 1 ? $resObj.value : undefined;
};
mp.game2.network.accessTunableFloat = function (tunableContext, tunableName) {
    let $res = natives.networkAccessTunableFloat(tunableContext, tunableName, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.value = $res[1];
    return $res[0] == 1 ? $resObj.value : undefined;
};
mp.game2.network.accessTunableBool = function (tunableContext, tunableName) {
    let $res = natives.networkAccessTunableBool(tunableContext, tunableName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.doesTunableExistHash = function (tunableContext, tunableName) {
    let $res = natives.networkDoesTunableExistHash(tunableContext, tunableName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.allocateTunablesRegistrationDataMap = function () {
    let $res = natives.networkAccessTunableModificationDetectionClear();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.accessTunableIntHash = function (tunableContext, tunableName) {
    let $res = natives.networkAccessTunableIntHash(tunableContext, tunableName, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.value = $res[1];
    return $res[0] == 1 ? $resObj.value : undefined;
};
mp.game2.network.registerTunableIntHash = function (contextHash, nameHash) {
    let $res = natives.networkAccessTunableIntModificationDetectionRegistrationHash(contextHash, nameHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.value = $res[1];
    return $res[0] == 1 ? $resObj.value : undefined;
};
mp.game2.network.accessTunableFloatHash = function (tunableContext, tunableName) {
    let $res = natives.networkAccessTunableFloatHash(tunableContext, tunableName, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.value = $res[1];
    return $res[0] == 1 ? $resObj.value : undefined;
};
mp.game2.network.registerTunableFloatHash = function (contextHash, nameHash) {
    let $res = natives.networkAccessTunableFloatModificationDetectionRegistrationHash(contextHash, nameHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.value = $res[1];
    return $res[0] == 1 ? $resObj.value : undefined;
};
mp.game2.network.accessTunableBoolHash = function (tunableContext, tunableName) {
    let $res = natives.networkAccessTunableBoolHash(tunableContext, tunableName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.registerTunableBoolHash = function (contextHash, nameHash) {
    let $res = natives.networkAccessTunableBoolModificationDetectionRegistrationHash(contextHash, nameHash, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.value = $res[1] == 1;
    return $res[0] == 1 ? $resObj.value : undefined;
};
mp.game2.network.tryAccessTunableBoolHash = function (tunableContext, tunableName, defaultValue) {
    let $res = natives.networkTryAccessTunableBoolHash(tunableContext, tunableName, defaultValue | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getContentModifierListId = function (contentHash) {
    let $res = natives.networkGetContentModifierListId(contentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.resetBodyTracker = function () {
    let $res = natives.networkResetBodyTracker();
};
mp.game2.network.getNumBodyTrackers = function () {
    let $res = natives.networkGetNumberBodyTrackerHits();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.setVehicleWheelsDestructible = function (entity, toggle) {
    let $res = natives.networkTriggerDamageEventForZeroDamage(entity, toggle | 0);
};
mp.game2.network.explodeVehicle = function (vehicle, isAudible, isInvisible, netId) {
    let $res = natives.networkExplodeVehicle(vehicle, isAudible | 0, isInvisible | 0, netId | 0);
};
mp.game2.network.explodeHeli = function (vehicle, isAudible, isInvisible, netId) {
    let $res = natives.networkExplodeHeli(vehicle, isAudible | 0, isInvisible | 0, netId);
};
mp.game2.network.useLogarithmicBlendingThisFrame = function (entity) {
    let $res = natives.networkUseLogarithmicBlendingThisFrame(entity);
};
mp.game2.network.overrideCoordsAndHeading = function (entity, x, y, z, heading) {
    let $res = natives.networkOverrideCoordsAndHeading(entity, x, y, z, heading);
};
mp.game2.network.disableProximityMigration = function (netID) {
    let $res = natives.networkDisableProximityMigration(netID);
};
mp.game2.network.setPropertyId = function (id) {
    let $res = natives.networkSetPropertyId(id);
};
mp.game2.network.clearPropertyId = function () {
    let $res = natives.networkClearPropertyId();
};
mp.game2.network.cacheLocalPlayerHeadBlendData = function () {
    let $res = natives.networkCacheLocalPlayerHeadBlendData();
};
mp.game2.network.hasCachedPlayerHeadBlendData = function (player) {
    let $res = natives.networkHasCachedPlayerHeadBlendData(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.applyCachedPlayerHeadBlendData = function (ped, player) {
    let $res = natives.networkApplyCachedPlayerHeadBlendData(ped, player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getNumCommerceItems = function () {
    let $res = natives.getNumCommerceItems();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isCommerceDataValid = function () {
    let $res = natives.isCommerceDataValid();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getCommerceItemId = function (index) {
    let $res = natives.getCommerceItemId(index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getCommerceItemName = function (index) {
    let $res = natives.getCommerceItemName(index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getCommerceProductPrice = function (index) {
    let $res = natives.getCommerceProductPrice(index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getCommerceItemNumCats = function (index) {
    let $res = natives.getCommerceItemNumCats(index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getCommerceItemCat = function (index, index2) {
    let $res = natives.getCommerceItemCat(index, index2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.openCommerceStore = function (p0, p1, p2) {
    let $res = natives.openCommerceStore(p0, p1, p2);
};
mp.game2.network.isCommerceStoreOpen = function () {
    let $res = natives.isCommerceStoreOpen();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setStoreEnabled = function (toggle) {
    let $res = natives.setStoreEnabled(toggle | 0);
};
mp.game2.network.requestCommerceItemImage = function (index) {
    let $res = natives.requestCommerceItemImage(index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.releaseAllCommerceItemImages = function () {
    let $res = natives.releaseAllCommerceItemImages();
};
mp.game2.network.getCommerceItemTexturename = function (index) {
    let $res = natives.getCommerceItemTexturename(index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.isStoreAvailableToUser = function () {
    let $res = natives.isStoreAvailableToUser();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.cloudDeleteMemberFile = function (p0) {
    let $res = natives.cloudDeleteMemberFile(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.cloudHasRequestCompleted = function (handle) {
    let $res = natives.cloudHasRequestCompleted(handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.cloudDidRequestSucceed = function (handle) {
    let $res = natives.cloudDidRequestSucceed(handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.cloudCheckAvailability = function () {
    let $res = natives.cloudCheckAvailability();
};
mp.game2.network.cloudIsCheckingAvailability = function () {
    let $res = natives.cloudIsCheckingAvailability();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.cloudGetAvailabilityCheckResult = function () {
    let $res = natives.cloudGetAvailabilityCheckResult();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.clearLaunchParams = function () {
    let $res = natives.clearServiceEventArguments();
};
mp.game2.network.ugcCopyContent = function () {
    let $res = natives.ugcCopyContent(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.ugcHasCreateFinished = function () {
    let $res = natives.ugcHasCreateFinished();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcDidCreateSucceed = function () {
    let $res = natives.ugcDidCreateSucceed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetCreateResult = function () {
    let $res = natives.ugcGetCreateResult();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetCreateContentId = function () {
    let $res = natives.ugcGetCreateContentId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcClearCreateResult = function () {
    let $res = natives.ugcClearCreateResult();
};
mp.game2.network.ugcQueryMyContent = function (p0, p1, p3, p4, p5) {
    let $res = natives.ugcQueryMyContent(p0, p1, 0, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p2 = $res[0];
    return $res[0] == 1 ? $resObj.p2 : undefined;
};
mp.game2.network.ugcQueryByContentId = function (contentId, latestVersion, contentTypeName) {
    let $res = natives.ugcQueryByContentId(contentId, latestVersion | 0, contentTypeName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcQueryByContentIds = function (count, latestVersion, contentTypeName) {
    let $res = natives.ugcQueryByContentIds(0, count, latestVersion | 0, contentTypeName);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $res[0] == 1 ? $resObj.data : undefined;
};
mp.game2.network.ugcQueryRecentlyCreatedContent = function (offset, count, contentTypeName, p3) {
    let $res = natives.ugcQueryMostRecentlyCreatedContent(offset, count, contentTypeName, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcGetBookmarkedContent = function (p0, p1, p2) {
    let $res = natives.ugcGetBookmarkedContent(p0, p1, p2, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p3 = $res[0];
    return $res[0] == 1 ? $resObj.p3 : undefined;
};
mp.game2.network.ugcGetMyContent = function (p0, p1, p2) {
    let $res = natives.ugcGetMyContent(p0, p1, p2, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p3 = $res[0];
    return $res[0] == 1 ? $resObj.p3 : undefined;
};
mp.game2.network.ugcGetFriendContent = function (p0, p1, p2) {
    let $res = natives.ugcGetFriendContent(p0, p1, p2, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p3 = $res[0];
    return $res[0] == 1 ? $resObj.p3 : undefined;
};
mp.game2.network.ugcGetCrewContent = function (p0, p1, p2, p3) {
    let $res = natives.ugcGetCrewContent(p0, p1, p2, p3, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p4 = $res[0];
    return $res[0] == 1 ? $resObj.p4 : undefined;
};
mp.game2.network.ugcGetGetByCategory = function (p0, p1, p2, p3) {
    let $res = natives.ugcGetGetByCategory(p0, p1, p2, p3, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p4 = $res[0];
    return $res[0] == 1 ? $resObj.p4 : undefined;
};
mp.game2.network.setBalanceAddMachine = function (contentId, contentTypeName) {
    let $res = natives.ugcGetGetByContentId(contentId, contentTypeName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.setBalanceAddMachines = function (dataCount, contentTypeName) {
    let $res = natives.ugcGetGetByContentIds(0, dataCount, contentTypeName);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $res[0] == 1 ? $resObj.data : undefined;
};
mp.game2.network.ugcCancelQuery = function () {
    let $res = natives.ugcCancelQuery();
};
mp.game2.network.ugcIsGetting = function () {
    let $res = natives.ugcIsGetting();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcHasGetFinished = function () {
    let $res = natives.ugcHasGetFinished();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcDidGetSucceed = function () {
    let $res = natives.ugcDidGetSucceed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetQueryResult = function () {
    let $res = natives.ugcGetQueryResult();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentNum = function () {
    let $res = natives.ugcGetContentNum();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentTotal = function () {
    let $res = natives.ugcGetContentTotal();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentHash = function () {
    let $res = natives.ugcGetContentHash();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcClearQueryResults = function () {
    let $res = natives.ugcClearQueryResults();
};
mp.game2.network.ugcGetContentUserId = function (p0) {
    let $res = natives.ugcGetContentUserId(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentUserName = function (p0) {
    let $res = natives.ugcGetContentUserName(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentCategory = function (p0) {
    let $res = natives.ugcGetContentCategory(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentId = function (p0) {
    let $res = natives.ugcGetContentId(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetRootContentId = function (p0) {
    let $res = natives.ugcGetRootContentId(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentName = function (p0) {
    let $res = natives.ugcGetContentName(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentDescriptionHash = function (p0) {
    let $res = natives.ugcGetContentDescriptionHash(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentPath = function (p0, p1) {
    let $res = natives.ugcGetContentPath(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentUpdatedDate = function (p0) {
    let $res = natives.ugcGetContentUpdatedDate(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $resObj.p1;
};
mp.game2.network.ugcGetContentFileVersion = function (p0, p1) {
    let $res = natives.ugcGetContentFileVersion(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentLanguage = function (p0) {
    let $res = natives.ugcGetContentLanguage(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentIsPublished = function (p0) {
    let $res = natives.ugcGetContentIsPublished(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcGetContentIsVerified = function (p0) {
    let $res = natives.ugcGetContentIsVerified(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcGetContentRating = function (p0, p1) {
    let $res = natives.ugcGetContentRating(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentRatingCount = function (p0, p1) {
    let $res = natives.ugcGetContentRatingCount(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentRatingPositiveCount = function (p0, p1) {
    let $res = natives.ugcGetContentRatingPositiveCount(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentRatingNegativeCount = function (p0, p1) {
    let $res = natives.ugcGetContentRatingNegativeCount(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetContentHasPlayerRecord = function (p0) {
    let $res = natives.ugcGetContentHasPlayerRecord(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcGetContentHasPlayerBookmarked = function (p0) {
    let $res = natives.ugcGetContentHasPlayerBookmarked(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcRequestContentDataFromIndex = function (p0, p1) {
    let $res = natives.ugcRequestContentDataFromIndex(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcRequestContentDataFromParams = function (contentTypeName, contentId, p2, p3, p4) {
    let $res = natives.ugcRequestContentDataFromParams(contentTypeName, contentId, p2, p3, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcRequestCachedDescription = function (p0) {
    let $res = natives.ugcRequestCachedDescription(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcGetCachedDescription = function (p0, p1) {
    let $res = natives.ugcGetCachedDescription(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcPublish = function (contentId, baseContentId, contentTypeName) {
    let $res = natives.ugcPublish(contentId, baseContentId, contentTypeName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcSetBookmarked = function (contentId, bookmarked, contentTypeName) {
    let $res = natives.ugcSetBookmarked(contentId, bookmarked | 0, contentTypeName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcSetDeleted = function (p1, p2) {
    let $res = natives.ugcSetDeleted(0, p1 | 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.ugcHasModifyFinished = function () {
    let $res = natives.ugcHasModifyFinished();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcGetModifyResult = function () {
    let $res = natives.ugcGetModifyResult();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcClearModifyResult = function () {
    let $res = natives.ugcClearModifyResult();
};
mp.game2.network.ugcGetCreatorNum = function () {
    let $res = natives.ugcGetCreatorNum();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcPoliciesMakePrivate = function (p0) {
    let $res = natives.ugcLoadOfflineQuery(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.ugcClearOfflineQuery = function () {
    let $res = natives.ugcClearOfflineQuery();
};
mp.game2.network.ugcSetQueryDataFromOffline = function (p0) {
    let $res = natives.ugcSetQueryDataFromOffline(p0 | 0);
};
mp.game2.network.ugcIsLanguageSupported = function (p0) {
    let $res = natives.ugcIsLanguageSupported(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.facebookPostCompletedHeist = function (heistName, cashEarned, xpEarned) {
    let $res = natives.facebookPostCompletedHeist(heistName, cashEarned, xpEarned);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.facebookPostCreateCharacter = function () {
    let $res = natives.facebookPostCreateCharacter();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.facebookPostCompletedMilestone = function (milestoneId) {
    let $res = natives.facebookPostCompletedMilestone(milestoneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.facebookIsSendingData = function () {
    let $res = natives.facebookHasPostCompleted();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.facebookIsAvailable = function () {
    let $res = natives.facebookCanPostToFacebook();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.textureDownloadRequest = function (filePath, name, p3) {
    let $res = natives.textureDownloadRequest(0, filePath, name, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.network.titleTextureDownloadRequest = function (filePath, name, p2) {
    let $res = natives.titleTextureDownloadRequest(filePath, name, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.ugcTextureDownloadRequest = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.ugcTextureDownloadRequest(p0, p1, p2, p3, p4, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.textureDownloadRelease = function (p0) {
    let $res = natives.textureDownloadRelease(p0);
};
mp.game2.network.textureDownloadHasFailed = function (p0) {
    let $res = natives.textureDownloadHasFailed(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.textureDownloadGetName = function (p0) {
    let $res = natives.textureDownloadGetName(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getStatusOfTextureDownload = function (p0) {
    let $res = natives.getStatusOfTextureDownload(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.shouldShowConnectivityTroubleshooting = function () {
    let $res = natives.networkShouldShowStrictNatWarning();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.isCableConnected = function () {
    let $res = natives.networkIsCableConnected();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getRosPrivilege9 = function () {
    let $res = natives.networkHaveScsPrivateMsgPriv();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.haveRosSocialClubPriv = function () {
    let $res = natives.networkHaveRosSocialClubPriv();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.haveRosBannedPriv = function () {
    let $res = natives.networkHaveRosBannedPriv();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.haveRosCreateTicketPriv = function () {
    let $res = natives.networkHaveRosCreateTicketPriv();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.haveRosMultiplayerPriv = function () {
    let $res = natives.networkHaveRosMultiplayerPriv();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.haveRosLeaderboardWritePriv = function () {
    let $res = natives.networkHaveRosLeaderboardWritePriv();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasRosPrivilege = function (index) {
    let $res = natives.networkHasRosPrivilege(index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasRosPrivilegeEndDate = function (privilege) {
    let $res = natives.networkHasRosPrivilegeEndDate(privilege, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.banType = $res[1];
    $resObj.timeData = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.getRosPrivilege24 = function () {
    let $res = natives.networkHasRosPrivilegePlayedLastGen();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getRosPrivilege25 = function () {
    let $res = natives.networkHasRosPrivilegeSpecialEditionContent();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.hasGameBeenAltered = function () {
    let $res = natives.networkSkipRadioWarning();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.updatePlayerScars = function () {
    let $res = natives.networkForceLocalPlayerScarSync();
};
mp.game2.network.disableLeaveRemotePedBehind = function (toggle) {
    let $res = natives.networkDisableLeaveRemotePedBehind(toggle | 0);
};
mp.game2.network.allowLocalEntityAttachment = function (entity, toggle) {
    let $res = natives.networkAllowRemoteAttachmentModification(entity, toggle | 0);
};
mp.game2.network.isConnectionEndpointRelayServer = function (player) {
    let $res = natives.networkIsConnectedViaRelay(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.getAverageLatencyForPlayer = function (player) {
    let $res = natives.networkGetAverageLatency(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getAverageLatencyForPlayer2 = function (player) {
    let $res = natives.networkGetAveragePing(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getAveragePacketLossForPlayer = function (player) {
    let $res = natives.networkGetAveragePacketLoss(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getNumUnackedForPlayer = function (player) {
    let $res = natives.networkGetNumUnackedReliables(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getUnreliableResendCountForPlayer = function (player) {
    let $res = natives.networkGetUnreliableResendCount(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.getOldestResendCountForPlayer = function (player) {
    let $res = natives.networkGetHighestReliableResendCount(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.reportMyself = function () {
    let $res = natives.networkReportCodeTamper();
};
mp.game2.network.getPlayerCoords = function (player) {
    let $res = natives.networkGetLastPlayerPosReceivedOverNetwork(player);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.network.getLastVelocityReceived = function (entity) {
    let $res = natives.networkGetLastVelReceivedOverNetwork(entity);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.network.ugcNav = function (p0, p1) {
    let $res = natives.networkUgcNav(p0, p1);
};
if (!mp.game2.network) mp.game2.network = {};
if (!mp.game2.network.unk) mp.game2.network.unk = {};
mp.game2.network.unk._0xBD545D44CCE70597 = function () {
    let $res = natives.networkIsNpAvailable();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0xEBCAB9E5048434F4 = function () {
    let $res = natives.networkIsNpPending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x74FB3E29E6D10FA9 = function () {
    let $res = natives.networkGetNpUnavailableReason();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x7808619F31FF22DB = function () {
    let $res = natives.networkIsConnetedToNpPresence();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xA0FA4EC6A05DA44E = function () {
    let $res = natives.networkIsLoggedInToPsn();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x8D11E61A4ABF49CC = function () {
    let $res = natives.networkIsRefreshingRosCredentials();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x4237E822315D8BA9 = function () {
    let $res = natives.networkWasGameSuspended();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x78321BEA235FD8CD = function (p0, p1) {
    let $res = natives.networkCheckOnlinePrivileges(p0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x07EAB372C8841D99 = function (p0, p1, p2) {
    let $res = natives.networkCheckTextCommunicationPrivileges(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x906CA41A4B74ECA4 = function () {
    let $res = natives.networkIsUsingOnlinePromotion();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x023ACAB2DC9DC4A4 = function () {
    let $res = natives.networkShouldShowPromotionAlertScreen();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x0CF6CC51AA18F0F8 = function (p0, p1, p2) {
    let $res = natives.networkCheckPrivileges(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x64E5C4CC82847B73 = function () {
    let $res = natives.networkIsPrivilegeCheckInProgress();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x1F7BC3539F9E0224 = function () {
    let $res = natives.networkSetPrivilegeCheckResultNotNeeded();
};
mp.game2.network.unk._0xA8ACB6459542A8C8 = function () {
    let $res = natives.networkIsPlatformSubscriptionCheckPending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x83FE8D7229593017 = function () {
    let $res = natives.networkShowAccountUpgradeUi();
};
mp.game2.network.unk._0x53C10C8BD774F2C9 = function () {
    let $res = natives.networkNeedToStartNewGameButBlocked();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x283B6062A2C01E9B = function () {
    let $res = natives.networkOnReturnToSinglePlayer();
};
mp.game2.network.unk._0x8B4FFC790CA131EF = function (p0, p1, p2, p3) {
    let $res = natives.networkTransitionStart(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x04918A41BC9B8157 = function (p0, p1, p2) {
    let $res = natives.networkTransitionFinish(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xB9351A07A0D458B1 = function (p0) {
    let $res = natives.networkSessionLeave(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x041C7F2A6C9894E6 = function (p0, p1, p2) {
    let $res = natives.networkSessionReserveSlotsTransition(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xF49ABC20D8552257 = function (p0) {
    let $res = natives.networkSessionSetUniqueCrewLimit(p0);
};
mp.game2.network.unk._0x4811BBAC21C5FCD5 = function (p0) {
    let $res = natives.networkSessionSetUniqueCrewLimitTransition(p0);
};
mp.game2.network.unk._0x5539C3EBF104A53A = function (p0) {
    let $res = natives.networkSessionSetUniqueCrewOnlyCrewsTransition(p0 | 0);
};
mp.game2.network.unk._0x702BC4D605522539 = function (p0) {
    let $res = natives.networkSessionSetCrewLimitMaxMembersTransition(p0);
};
mp.game2.network.unk._0x59D421683D31835A = function (p0) {
    let $res = natives.networkSessionSetNumBosses(p0);
};
mp.game2.network.unk._0x1153FA02A659051C = function () {
    let $res = natives.networkSessionSetScriptValidateJoin();
};
mp.game2.network.unk._0x600F8CB31C7AAB6E = function (p0) {
    let $res = natives.networkSessionSetGamemode(p0);
};
mp.game2.network.unk._0xC42DD763159F3461 = function () {
    let $res = natives.networkHasConfirmedInvite();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0xD313DE83394AF134 = function () {
    let $res = natives.networkSessionIsAwaitingInviteResponse();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0xBDB6F89C729CF388 = function () {
    let $res = natives.networkSessionIsDisplayingInviteConfirmation();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0xF814FEC6A19FD6E0 = function () {
    let $res = natives.networkStoreInviteThroughRestart();
};
mp.game2.network.unk._0x4C9034162368E206 = function () {
    let $res = natives.networkGetGameMode();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xB5D3453C98456528 = function () {
    let $res = natives.networkSessionIsVoiceSessionActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x0E4F77F7B9D74D84 = function (p0) {
    let $res = natives.networkSetActivityPlayerMax(p0);
};
mp.game2.network.unk._0x1888694923EF4591 = function () {
    let $res = natives.networkClearGroupActivity();
};
mp.game2.network.unk._0xB13E88E655E5A3BC = function () {
    let $res = natives.networkRetainActivityGroup();
};
mp.game2.network.unk._0x617F49C2668E6155 = function () {
    let $res = natives.networkGetNumTransitionNonAsyncGamers();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x261E97AD7BCF3D40 = function (p0) {
    let $res = natives.networkMarkAsPreferredActivity(p0 | 0);
};
mp.game2.network.unk._0x39917E1B4CB0F911 = function (p0) {
    let $res = natives.networkMarkAsWaitingAsync(p0 | 0);
};
mp.game2.network.unk._0x2CE9D95E4051AECD = function (p0) {
    let $res = natives.networkSetInProgressFinishTime(p0);
};
mp.game2.network.unk._0xA2E9C1AB8A92E8CD = function (toggle) {
    let $res = natives.networkSetDoNotLaunchFromJoinAsMigratedHost(toggle | 0);
};
mp.game2.network.unk._0xC571D0E77D8BBC29 = function () {
    let $res = natives.networkIsTransitionLeavePostponed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x1398582B7F72B3ED = function (p0) {
    let $res = natives.networkTransitionSetInProgress(p0);
};
mp.game2.network.unk._0x1F8E00FB18239600 = function (p0) {
    let $res = natives.networkTransitionSetContentCreator(p0);
};
mp.game2.network.unk._0xF6F4383B7C92F11A = function (p0) {
    let $res = natives.networkTransitionSetActivityIsland(p0);
};
mp.game2.network.unk._0x973D76AA760A6CB6 = function (p0) {
    let $res = natives.networkTransitionBlockJoinRequests(p0 | 0);
};
mp.game2.network.unk._0x3F9990BF5F22759C = function () {
    let $res = natives.networkHasTransitionInviteBeenAcked(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.network.unk._0x4A9FDE3A5A6D0437 = function (toggle) {
    let $res = natives.networkSetPresenceSessionInvitesBlocked(toggle | 0);
};
mp.game2.network.unk._0x1171A97A3D3981B6 = function (p2, p3) {
    let $res = natives.networkSendImportantTransitionInviteViaPresence(0, null, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.unk._0x742B58F723233ED9 = function (p0) {
    let $res = natives.networkGetPresenceInviteIndexById(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xEBF8284D8CADEB53 = function () {
    let $res = natives.networkRemoveAndCancelAllInvites();
};
mp.game2.network.unk._0xF083835B70BA9BFE = function () {
    let $res = natives.networkRemoveAndCancelAllTransitionInvites();
};
mp.game2.network.unk._0x71DC455F5CD1C2B1 = function () {
    let $res = natives.networkHasMadeInviteDecision(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.gamerHandle = $res[0];
    return $res[0] == 1 ? $resObj.gamerHandle : undefined;
};
mp.game2.network.unk._0x3855FB5EB2C5E8B2 = function (p0) {
    let $res = natives.networkGetInviteReplyStatus(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x4AD490AE1536933B = function (p0, p1) {
    let $res = natives.networkCheckDataManagerForHandle(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x0D77A82DC2D0DA59 = function () {
    let $res = natives.networkSetInviteFailedMessageForInviteMenu(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    return $resObj;
};
mp.game2.network.unk._0x2BF66D2E7414F686 = function () {
    let $res = natives.networkCanQueueForPreviousSessionJoin();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x14922ED3E38761F0 = function () {
    let $res = natives.networkIsQueuingForSessionJoin();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x6CE50E47F5543D0C = function () {
    let $res = natives.networkClearQueuedJoinRequest();
};
mp.game2.network.unk._0xFA2888E3833C8E96 = function () {
    let $res = natives.networkSendQueuedJoinRequest();
};
mp.game2.network.unk._0x25D990F8E0E3F13C = function () {
    let $res = natives.networkRemoveAllQueuedJoinRequests();
};
mp.game2.network.unk._0xA12D3A5A3753CC23 = function () {
    let $res = natives.triggerTuningCrcHackerCheck(0, null, null);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xF287F506767CC8A9 = function () {
    let $res = natives.triggerFileCrcHackerCheck(0, null);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xEA8C0DDB10E2822A = function (p0, p1) {
    let $res = natives.networkRegisterHighFrequencyHostBroadcastVariables(p0, p1, 0);
};
mp.game2.network.unk._0xD6D7478CA62B8D41 = function (p0, p1) {
    let $res = natives.networkRegisterHighFrequencyPlayerBroadcastVariables(p0, p1, 0);
};
mp.game2.network.unk._0x2302C0264EA58D31 = function () {
    let $res = natives.networkPreventScriptHostMigration();
};
mp.game2.network.unk._0x741A3D8380319A81 = function () {
    let $res = natives.networkRequestToBeHostOfThisScript();
};
mp.game2.network.unk._0x37D5F739FD494675 = function (p0) {
    let $res = natives.networkGetEntityFromObjectId(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x4C2A9FDC22377075 = function () {
    let $res = natives.networkIgnoreRemoteWaypoints();
};
mp.game2.network.unk._0xB309EBEA797E001F = function (p0) {
    let $res = natives.networkSetScriptAutomuted(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x26F07DD83A5F7F98 = function () {
    let $res = natives.networkHasAutomuteOverride();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x7D395EA61622E116 = function (p0) {
    let $res = natives.networkSetLookAtTalkers(p0 | 0);
};
mp.game2.network.unk._0xCFEB46DCD7D8D5EB = function (p0) {
    let $res = natives.networkRemainInGameChat(p0 | 0);
};
mp.game2.network.unk._0x265559DA40B3F327 = function (p0) {
    let $res = natives.networkSetScriptControllingTeams(p0);
};
mp.game2.network.unk._0x4348BFDA56023A2F = function (p0, p1) {
    let $res = natives.networkSetSameTeamAsLocalPlayer(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x3C5C1E2C2FF814B1 = function (toggle) {
    let $res = natives.networkSetOverrideTutorialSessionChat(toggle | 0);
};
mp.game2.network.unk._0x9D7AFCBF21C51712 = function (toggle) {
    let $res = natives.networkSetProximityAffectsTeam(toggle | 0);
};
mp.game2.network.unk._0x6A5D89D7769A40D8 = function (toggle) {
    let $res = natives.networkSetIgnoreSpectatorChatLimitsSameTeam(toggle | 0);
};
mp.game2.network.unk._0xADB57E5B663CCA8B = function (p0) {
    let $res = natives.networkGetMuteCountForPlayer(p0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    $resObj.p2 = $res[2];
    return $resObj;
};
mp.game2.network.unk._0x8EF52ACAECC51D9C = function (toggle) {
    let $res = natives.networkSetSpectatorToNonSpectatorTextChat(toggle | 0);
};
mp.game2.network.unk._0x17C9E241111A674D = function (p0, p1) {
    let $res = natives.networkKeepEntityCollisionDisabledAfterAnimScene(p0, p1);
};
mp.game2.network.unk._0x2E4C123D1C8A710E = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.networkIsAnyPlayerNear(p0, p1, p2, p3, p4, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x2B51EDBEFC301339 = function (p0, p1) {
    let $res = natives.networkClanCrewinfoGetCrewranktitle(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0xC32EA7A2F6CA7557 = function () {
    let $res = natives.networkClanHasCrewinfoMetadataBeenReceived();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x9D724B400A7E8FFC = function (p0, p1) {
    let $res = natives.setNetworkIdCanBeReassigned(p0, p1);
};
mp.game2.network.unk._0x0379DAF89BA09AA5 = function (p0, p1) {
    let $res = natives.networkSetObjectCanBlendWhenFixed(p0, p1);
};
mp.game2.network.unk._0x32EBD154CB6B8B99 = function (p0, p1, p2) {
    let $res = natives.setNetworkIdVisibleInCutsceneHack(p0, p1, p2);
};
mp.game2.network.unk._0x76B3F29D3F967692 = function (p0, p1) {
    let $res = natives.setNetworkIdVisibleInCutsceneRemainHack(p0, p1);
};
mp.game2.network.unk._0x3FA36981311FA4FF = function (netId, state) {
    let $res = natives.setNetworkIdPassControlInTutorial(netId, state | 0);
};
mp.game2.network.unk._0xE16AA70CE9BEEDC3 = function (p0) {
    let $res = natives.canRegisterMissionDoors(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xE42D626EEC94E5D9 = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.getReservedMissionEntitiesInArea(p0, p1, p2, p3, p4, p5, p6);
};
mp.game2.network.unk._0x0F1A4B45B7693B95 = function (p0, p1) {
    let $res = natives.networkAllowCloningWhileInTutorial(p0, p1);
};
mp.game2.network.unk._0xFAC18E7356BD3210 = function () {
    let $res = natives.networkHideProjectileInCutscene();
};
mp.game2.network.unk._0x13F1FCB111B820B0 = function (p0) {
    let $res = natives.setNonParticipantsOfThisScriptAsGhosts(p0 | 0);
};
mp.game2.network.unk._0xD7B6C73CAD419BCF = function (p0) {
    let $res = natives.setInvertGhosting(p0 | 0);
};
mp.game2.network.unk._0x7EF7649B64D7FF10 = function (entity) {
    let $res = natives.isEntityInGhostCollision(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0xA5EAFE473E45C442 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.networkAddPedToSynchronisedSceneWithIk(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};
mp.game2.network.unk._0x45F35C0EDC33B03B = function (netScene, modelHash, x, y, z, p5, p6, p7, p8, flags) {
    let $res = natives.networkAddMapEntityToSynchronisedScene(netScene, modelHash, x, y, z, p5, p6, p7, p8, flags);
};
mp.game2.network.unk._0xC9B43A33D09CADA7 = function (p0) {
    let $res = natives.networkForceLocalUseOfSyncedSceneCamera(p0);
};
mp.game2.network.unk._0x144DA052257AE7D8 = function (p0) {
    let $res = natives.networkAllowRemoteSyncedSceneLocalPlayerRequests(p0);
};
mp.game2.network.unk._0xFB1F9381E80FA13F = function (p0, p1) {
    let $res = natives.networkFindLargestBunchOfPlayers(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xFB680D403909DC70 = function (teamId, instanceId) {
    let $res = natives.networkAllowGangToJoinTutorialSession(teamId, instanceId);
};
mp.game2.network.unk._0xB37E4E6A2388CA7B = function () {
    let $res = natives.networkWaitingPopClearTutorialSession();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x2B1C623823DB0D9D = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.networkAddClientEntityAngledArea(p0, p1, p2, p3, p4, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xA6FCECCF4721D679 = function (p0) {
    let $res = natives.networkSetCustomArenaBallParams(p0);
};
mp.game2.network.unk._0x95BAF97C82464629 = function (p0, p1) {
    let $res = natives.networkEntityUseHighPrecisionRotation(p0, p1);
};
mp.game2.network.unk._0x7DB53B37A2F211A0 = function () {
    let $res = natives.networkGetBoneIdOfFatalHit();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x2E0BF682CC778D49 = function (p0) {
    let $res = natives.networkHasBoneBeenHitByKiller(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x0EDE326D47CD0F3E = function (ped, player) {
    let $res = natives.networkSetAttributeDamageToPlayer(ped, player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x38B7C51AB1EDC7D8 = function (entity, toggle) {
    let $res = natives.networkTriggerDamageEventForZeroWeaponHash(entity, toggle | 0);
};
mp.game2.network.unk._0x3FC795691834481D = function (p0, p1) {
    let $res = natives.networkSetNoLongerNeeded(p0, p1);
};
mp.game2.network.unk._0xE6717E652B8C8D8A = function (p0, p1) {
    let $res = natives.networkEnableExtraVehicleOrientationBlendChecks(p0, p1);
};
mp.game2.network.unk._0x367EF5E2F439B4C6 = function (p0) {
    let $res = natives.networkSetPlayerMentalState(p0);
};
mp.game2.network.unk._0x94538037EE44F5CF = function (p0) {
    let $res = natives.networkSetMinimumRankForMission(p0 | 0);
};
mp.game2.network.unk._0xB606E6CC59664972 = function (p0) {
    let $res = natives.triggerCommerceDataFetch(p0);
};
mp.game2.network.unk._0x1D4DC17C38FEAFF0 = function () {
    let $res = natives.isCommerceDataFetchInProgress();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x265635150FB0D82E = function () {
    let $res = natives.delayMpStoreOpen();
};
mp.game2.network.unk._0x444C4525ECE0A4B9 = function () {
    let $res = natives.resetStoreNetworkGameTracking();
};
mp.game2.network.unk._0x59328EB08C5CEB2B = function () {
    let $res = natives.isUserOldEnoughToAccessStore();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0xFAE628F1E9ADB239 = function (p0, p1, p2) {
    let $res = natives.setLastViewedShopItem(p0, p1, p2);
};
mp.game2.network.unk._0x754615490A029508 = function () {
    let $res = natives.getUserPremiumAccess();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x155467ACA0F55705 = function () {
    let $res = natives.getUserStarterAccess();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x8B0C2964BA471961 = function () {
    let $res = natives.getContentToLoadType();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x88B588B41FF7868E = function () {
    let $res = natives.getIsLaunchFromLiveArea();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x67FC09BC554A75E5 = function () {
    let $res = natives.getIsLiveAreaLaunchWithContent();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x9FEDF86898F100E9 = function () {
    let $res = natives.ugcIsCreating();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x692D58DF40657E8C = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.ugcQueryByCategory(p0, p1, p2, p3, p4, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0xA7862BC5ED1DFD7E = function (p0, p1) {
    let $res = natives.ugcGetMostRecentlyCreatedContent(p0, p1, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.unk._0x97A770BEEF227E2B = function (p0, p1) {
    let $res = natives.ugcGetMostRecentlyPlayedContent(p0, p1, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.unk._0x5324A0E3E4CE3570 = function (p0, p1) {
    let $res = natives.ugcGetTopRatedContent(p0, p1, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.unk._0xC87E740D9F3872CC = function () {
    let $res = natives.ugcWasQueryForceCancelled();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x584770794D758C18 = function (p0) {
    let $res = natives.ugcGetContentCreatorGamerHandle(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.network.unk._0x8C8D2739BA44AF0F = function (p0) {
    let $res = natives.ugcGetContentCreatedByLocalPlayer(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0xAEAB987727C5A8A4 = function (p0) {
    let $res = natives.ugcGetContentIsUsingScNickname(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x1D610EB0FEA716D9 = function (p0) {
    let $res = natives.ugcGetContentHasLoResPhoto(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x7FCC39C46C3C03BD = function (p0) {
    let $res = natives.ugcGetContentHasHiResPhoto(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x2D5DC831176D0114 = function (p0) {
    let $res = natives.ugcIsDescriptionRequestInProgress(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0xEBFA8D50ADDC54C4 = function (p0) {
    let $res = natives.ugcHasDescriptionRequestFinished(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x162C23CA83ED0A62 = function (p0) {
    let $res = natives.ugcDidDescriptionRequestSucceed(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x5A34CD9C3C5BEC44 = function (p0) {
    let $res = natives.ugcReleaseCachedDescription(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x68103E2247887242 = function () {
    let $res = natives.ugcReleaseAllCachedDescriptions();
};
mp.game2.network.unk._0x45E816772E93A9DB = function () {
    let $res = natives.ugcIsModifying();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x793FF272D5B365F4 = function () {
    let $res = natives.ugcDidModifySucceed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xB746D20B17F2A229 = function () {
    let $res = natives.ugcGetCreatorsByUserId(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.network.unk._0x63B406D7884BFA95 = function () {
    let $res = natives.ugcHasQueryCreatorsFinished();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x4D02279C83BE69FE = function () {
    let $res = natives.ugcDidQueryCreatorsSucceed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xFD75DABC0957BF33 = function (p0) {
    let $res = natives.ugcSetUsingOfflineContent(p0 | 0);
};
mp.game2.network.unk._0x60EDD13EB3AC1FF3 = function () {
    let $res = natives.networkCheckRosLinkWentdownNotNet();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.network.unk._0x36391F397731595D = function (p0) {
    let $res = natives.networkStartCommunicationPermissionsCheck(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x9465E683B12D3F6B = function () {
    let $res = natives.networkSkipRadioResetNextClose();
};
mp.game2.network.unk._0xCA59CCAE5D01E4CE = function () {
    let $res = natives.networkSkipRadioResetNextOpen();
};
mp.game2.network.unk._0x6BFF5F84102DF80A = function (player) {
    let $res = natives.networkShowChatRestrictionMsc(player);
};
mp.game2.network.unk._0x5C497525F803486B = function () {
    let $res = natives.networkShowPsnUgcRestriction();
};
mp.game2.network.unk._0x6FB7BB3607D27FA2 = function () {
    let $res = natives.networkIsTitleUpdateRequired();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x45A83257ED02D9BC = function () {
    let $res = natives.networkQuitMpToDesktop();
};
mp.game2.network.unk._0x64D779659BC37B19 = function (entity) {
    let $res = natives.networkGetLastEntityPosReceivedOverNetwork(entity);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.network.unk._0xAA5FAFCD2C5F5E47 = function (entity) {
    let $res = natives.networkGetPredictedVelocity(entity);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.network.unk._0xAEDF1BC1C133D6E3 = function () {
    let $res = natives.networkDumpNetIfConfig();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x2555CF7DA5473794 = function () {
    let $res = natives.networkGetSignallingInfo(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0x6FD992C4A1C1B986 = function () {
    let $res = natives.networkGetNetStatisticsInfo(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.network.unk._0xDB663CC9FF3407A9 = function (player) {
    let $res = natives.networkGetPlayerAccountId(player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.placeOnGroundProperly = function () {
    let $res = natives.placeObjectOnGroundProperly(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.placeOnGroundProperly2 = function () {
    let $res = natives.placeObjectOnGroundOrObjectProperly(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.slide = function (toX, toY, toZ, speedX, speedY, speedZ, collision) {
    let $res = natives.slideObject(this.handle, toX, toY, toZ, speedX, speedY, speedZ, collision | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.setTargettable = function (targettable) {
    let $res = natives.setObjectTargettable(this.handle, targettable | 0);
};
mp.Object.prototype.setForceVehiclesToAvoid = function (toggle) {
    let $res = natives.setObjectForceVehiclesToAvoid(this.handle, toggle | 0);
};
mp.Object.prototype.hasBeenBroken = function (p1) {
    let $res = natives.hasObjectBeenBroken(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.getOffsetFromCoords = function (yPos, zPos, heading, xOffset, yOffset, zOffset) {
    let $res = natives.getOffsetFromCoordAndHeadingInWorldCoords(this.handle, yPos, zPos, heading, xOffset, yOffset, zOffset);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.isEntirelyInsideGarage = function (entity, p2, p3) {
    let $res = natives.isObjectEntirelyInsideGarage(this.handle, entity, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isPartiallyInsideGarage = function (entity, p2) {
    let $res = natives.isObjectPartiallyInsideGarage(this.handle, entity, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.doesOfTypeExistAtCoords = function (y, z, radius, hash, p5) {
    let $res = natives.doesObjectOfTypeExistAtCoords(this.handle, y, z, radius, hash, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.setAllowLowLodBuoyancy = function (toggle) {
    let $res = natives.setObjectAllowLowLodBuoyancy(this.handle, toggle | 0);
};
mp.Object.prototype.setPhysicsParams = function (weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy) {
    let $res = natives.setObjectPhysicsParams(this.handle, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy);
};
mp.Object.prototype.getFragmentDamageHealth = function (p1) {
    let $res = natives.getObjectFragmentDamageHealth(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.setActivatePhysicsAsSoonAsItIsUnfrozen = function (toggle) {
    let $res = natives.setActivateObjectPhysicsAsSoonAsItIsUnfrozen(this.handle, toggle | 0);
};
mp.Object.prototype.isNearPoint = function (x, y, z, range) {
    let $res = natives.isObjectNearPoint(this.handle, x, y, z, range);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.removeHighDetailModel = function () {
    let $res = natives.removeObjectHighDetailModel(this.handle);
};
mp.Object.prototype.breakFragmentChild = function (p1, p2) {
    let $res = natives.breakObjectFragmentChild(this.handle, p1, p2 | 0);
};
mp.Object.prototype.trackVisibility = function () {
    let $res = natives.trackObjectVisibility(this.handle);
};
mp.Object.prototype.isVisible = function () {
    let $res = natives.isObjectVisible(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.setCreateWeaponLightSource = function (toggle) {
    let $res = natives.setCutscenesWeaponFlashlightOnThisFrame(this.handle, toggle | 0);
};
mp.Object.prototype.setStateOfRayfireMap = function (state) {
    let $res = natives.setStateOfRayfireMapObject(this.handle, state);
};
mp.Object.prototype.getStateOfRayfireMap = function () {
    let $res = natives.getStateOfRayfireMapObject(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.doesRayfireMapExist = function () {
    let $res = natives.doesRayfireMapObjectExist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.getRayfireMapAnimPhase = function () {
    let $res = natives.getRayfireMapObjectAnimPhase(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.attachPortablePickupToPed = function (ped) {
    let $res = natives.attachPortablePickupToPed(this.handle, ped);
};
mp.Object.prototype.detachPortablePickupFromPed = function () {
    let $res = natives.detachPortablePickupFromPed(this.handle);
};
mp.Object.prototype.hidePickup = function (toggle) {
    let $res = natives.hidePortablePickupWhenDetached(this.handle, toggle | 0);
};
mp.Object.prototype.doesPickupExist = function () {
    let $res = natives.doesPickupObjectExist(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAPortablePickup = function () {
    let $res = natives.isObjectAPickup(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isAPickup = function () {
    let $res = natives.isObjectAPortablePickup(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.setTeamPickup = function (p1, p2) {
    let $res = natives.setTeamPickupObject(this.handle, p1, p2 | 0);
};
mp.Object.prototype.preventCollectionOfPortablePickup = function (p1, p2) {
    let $res = natives.preventCollectionOfPortablePickup(this.handle, p1 | 0, p2 | 0);
};
mp.Object.prototype.isPickupWeaponValid = function () {
    let $res = natives.isPickupWeaponObjectValid(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.getTextureVariation = function () {
    let $res = natives.getObjectTintIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.setTextureVariation = function (textureVariation) {
    let $res = natives.setObjectTintIndex(this.handle, textureVariation);
};
mp.Object.prototype.setLightColor = function (p1, r, g, b) {
    let $res = natives.setPropLightColor(this.handle, p1 | 0, r, g, b);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.setStuntPropSpeedup = function (p1) {
    let $res = natives.setObjectSpeedBoostAmount(this.handle, p1);
};
mp.Object.prototype.setStuntPropDuration = function (duration) {
    let $res = natives.setObjectSpeedBoostDuration(this.handle, duration);
};
mp.Object.prototype.markForDeletion = function () {
    let $res = natives.onlyCleanUpObjectWhenOutOfRange(this.handle);
};
mp.Object.prototype.setEnableArenaPropPhysics = function (toggle, p2) {
    let $res = natives.setDriveArticulatedJoint(this.handle, toggle | 0, p2);
};
mp.Object.prototype.setEnableArenaPropPhysicsOnPed = function (toggle, p2, ped) {
    let $res = natives.setDriveArticulatedJointWithInflictor(this.handle, toggle | 0, p2, ped);
};
mp.Object.prototype.getIsArenaPropPhysicsDisabled = function (p1) {
    let $res = natives.getIsArticulatedJointAtMinAngle(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.object) mp.game2.object = {};
mp.game2.object.create = function (modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic) {
    let $res = natives.createObject(modelHash, x, y, z, isNetwork | 0, bScriptHostObj | 0, dynamic | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.createObject = function (modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic) {
    let $res = natives.createObject(modelHash, x, y, z, isNetwork | 0, bScriptHostObj | 0, dynamic | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.createNoOffset = function (modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic) {
    let $res = natives.createObjectNoOffset(modelHash, x, y, z, isNetwork | 0, bScriptHostObj | 0, dynamic | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.createObjectNoOffset = function (modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic) {
    let $res = natives.createObjectNoOffset(modelHash, x, y, z, isNetwork | 0, bScriptHostObj | 0, dynamic | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.delete = function (object) {
    let $res = natives.deleteObject(object);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.object = $res[1];
    return $resObj.object;
};
mp.game2.object.deleteObject = function (object) {
    let $res = natives.deleteObject(object);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.object = $res[1];
    return $resObj.object;
};
mp.game2.object.placeOnGroundProperly = function (object) {
    let $res = natives.placeObjectOnGroundProperly(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.placeOnGroundProperly2 = function (object) {
    let $res = natives.placeObjectOnGroundOrObjectProperly(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.slide = function (object, toX, toY, toZ, speedX, speedY, speedZ, collision) {
    let $res = natives.slideObject(object, toX, toY, toZ, speedX, speedY, speedZ, collision | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.setTargettable = function (object, targettable) {
    let $res = natives.setObjectTargettable(object, targettable | 0);
};
mp.game2.object.setForceVehiclesToAvoid = function (object, toggle) {
    let $res = natives.setObjectForceVehiclesToAvoid(object, toggle | 0);
};
mp.game2.object.getClosestOfType = function (x, y, z, radius, modelHash, isMission, p6, p7) {
    let $res = natives.getClosestObjectOfType(x, y, z, radius, modelHash, isMission | 0, p6 | 0, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.getClosestObjectOfType = function (x, y, z, radius, modelHash, isMission, p6, p7) {
    let $res = natives.getClosestObjectOfType(x, y, z, radius, modelHash, isMission | 0, p6 | 0, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.hasBeenBroken = function (object, p1) {
    let $res = natives.hasObjectBeenBroken(object, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.hasClosestOfTypeBeenBroken = function (p0, p1, p2, p3, modelHash, p5) {
    let $res = natives.hasClosestObjectOfTypeBeenBroken(p0, p1, p2, p3, modelHash, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.hasClosestObjectOfTypeBeenBroken = function (p0, p1, p2, p3, modelHash, p5) {
    let $res = natives.hasClosestObjectOfTypeBeenBroken(p0, p1, p2, p3, modelHash, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.hasClosestOfTypeBeenCompletelyDestroyed = function (x, y, z, radius, modelHash, p5) {
    let $res = natives.hasClosestObjectOfTypeBeenCompletelyDestroyed(x, y, z, radius, modelHash, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.getOffsetFromCoords = function (xPos, yPos, zPos, heading, xOffset, yOffset, zOffset) {
    let $res = natives.getOffsetFromCoordAndHeadingInWorldCoords(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.object.getObjectOffsetFromCoords = function (xPos, yPos, zPos, heading, xOffset, yOffset, zOffset) {
    let $res = natives.getOffsetFromCoordAndHeadingInWorldCoords(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.object.getCoordsAndRotationOfClosestOfType = function (x, y, z, radius, modelHash, rotationOrder) {
    let $res = natives.getCoordsAndRotationOfClosestObjectOfType(x, y, z, radius, modelHash, undefined, undefined, rotationOrder);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    $resObj.outRotation = new mp.Vector3($res[2]);
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.object.setStateOfClosestDoorOfType = function (type, x, y, z, locked, heading, p6) {
    let $res = natives.setStateOfClosestDoorOfType(type, x, y, z, locked | 0, heading, p6 | 0);
};
mp.game2.object.getStateOfClosestDoorOfType = function (type, x, y, z) {
    let $res = natives.getStateOfClosestDoorOfType(type, x, y, z, false, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.locked = $res[1] == 1;
    $resObj.heading = $res[2];
    return $resObj;
};
mp.game2.object.doorControl = function (modelHash, x, y, z, locked, xRotMult, yRotMult, zRotMult) {
    let $res = natives.setLockedUnstreamedInDoorOfType(modelHash, x, y, z, locked | 0, xRotMult, yRotMult, zRotMult);
};
mp.game2.object.addDoorToSystem = function (doorHash, modelHash, x, y, z, p5, scriptDoor, isLocal) {
    let $res = natives.addDoorToSystem(doorHash, modelHash, x, y, z, p5 | 0, scriptDoor | 0, isLocal | 0);
};
mp.game2.object.removeDoorFromSystem = function (doorHash) {
    let $res = natives.removeDoorFromSystem(doorHash, 0);
};
mp.game2.object.doorSystemSetDoorState = function (doorHash, state, requestDoor, forceUpdate) {
    let $res = natives.doorSystemSetDoorState(doorHash, state, requestDoor | 0, forceUpdate | 0);
};
mp.game2.object.setDoorAccelerationLimit = function (doorHash, state, requestDoor, forceUpdate) {
    let $res = natives.doorSystemSetDoorState(doorHash, state, requestDoor | 0, forceUpdate | 0);
};
mp.game2.object.doorSystemGetDoorState = function (doorHash) {
    let $res = natives.doorSystemGetDoorState(doorHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.doorSystemGetDoorPendingState = function (doorHash) {
    let $res = natives.doorSystemGetDoorPendingState(doorHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.doorSystemSetAutomaticRate = function (doorHash, rate, requestDoor, forceUpdate) {
    let $res = natives.doorSystemSetAutomaticRate(doorHash, rate, requestDoor | 0, forceUpdate | 0);
};
mp.game2.object.doorSystemSetAutomaticDistance = function (doorHash, distance, requestDoor, forceUpdate) {
    let $res = natives.doorSystemSetAutomaticDistance(doorHash, distance, requestDoor | 0, forceUpdate | 0);
};
mp.game2.object.doorSystemSetOpenRatio = function (doorHash, ajar, requestDoor, forceUpdate) {
    let $res = natives.doorSystemSetOpenRatio(doorHash, ajar, requestDoor | 0, forceUpdate | 0);
};
mp.game2.object.setDoorAjarAngle = function (doorHash, ajar, requestDoor, forceUpdate) {
    let $res = natives.doorSystemSetOpenRatio(doorHash, ajar, requestDoor | 0, forceUpdate | 0);
};
mp.game2.object.doorSystemGetAutomaticDistance = function (doorHash) {
    let $res = natives.doorSystemGetAutomaticDistance(doorHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.doorSystemGetOpenRatio = function (doorHash) {
    let $res = natives.doorSystemGetOpenRatio(doorHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.doorSystemSetSpringRemoved = function (doorHash, removed, requestDoor, forceUpdate) {
    let $res = natives.doorSystemSetSpringRemoved(doorHash, removed | 0, requestDoor | 0, forceUpdate | 0);
};
mp.game2.object.doorSystemSetHoldOpen = function (doorHash, toggle) {
    let $res = natives.doorSystemSetHoldOpen(doorHash, toggle | 0);
};
mp.game2.object.isDoorRegisteredWithSystem = function (doorHash) {
    let $res = natives.isDoorRegisteredWithSystem(doorHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.doesDoorExist = function (doorHash) {
    let $res = natives.isDoorRegisteredWithSystem(doorHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isDoorClosed = function (doorHash) {
    let $res = natives.isDoorClosed(doorHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.doorSystemGetIsPhysicsLoaded = function (p0) {
    let $res = natives.doorSystemGetIsPhysicsLoaded(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.doorSystemFindExistingDoor = function (x, y, z, modelHash) {
    let $res = natives.doorSystemFindExistingDoor(x, y, z, modelHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outDoorHash = $res[1];
    return $res[0] == 1 ? $resObj.outDoorHash : undefined;
};
mp.game2.object.isGarageEmpty = function (garageHash, p1, p2) {
    let $res = natives.isGarageEmpty(garageHash, p1 | 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isPlayerEntirelyInsideGarage = function (garageHash, player, p2, p3) {
    let $res = natives.isPlayerEntirelyInsideGarage(garageHash, player, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isPlayerPartiallyInsideGarage = function (garageHash, player, p2) {
    let $res = natives.isPlayerPartiallyInsideGarage(garageHash, player, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.areEntitiesEntirelyInsideGarage = function (garageHash, p1, p2, p3, p4) {
    let $res = natives.areEntitiesEntirelyInsideGarage(garageHash, p1 | 0, p2 | 0, p3 | 0, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isAnyEntityEntirelyInsideGarage = function (garageHash, p1, p2, p3, p4) {
    let $res = natives.isAnyEntityEntirelyInsideGarage(garageHash, p1 | 0, p2 | 0, p3 | 0, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isEntirelyInsideGarage = function (garageHash, entity, p2, p3) {
    let $res = natives.isObjectEntirelyInsideGarage(garageHash, entity, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isPartiallyInsideGarage = function (garageHash, entity, p2) {
    let $res = natives.isObjectPartiallyInsideGarage(garageHash, entity, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.clearGarageArea = function (garageHash, isNetwork) {
    let $res = natives.clearGarage(garageHash, isNetwork | 0);
};
mp.game2.object.clearObjectsInsideGarage = function (garageHash, vehicles, peds, objects, isNetwork) {
    let $res = natives.clearObjectsInsideGarage(garageHash, vehicles | 0, peds | 0, objects | 0, isNetwork | 0);
};
mp.game2.object.enableSavingInGarage = function (garageHash, toggle) {
    let $res = natives.enableSavingInGarage(garageHash, toggle | 0);
};
mp.game2.object.doesOfTypeExistAtCoords = function (x, y, z, radius, hash, p5) {
    let $res = natives.doesObjectOfTypeExistAtCoords(x, y, z, radius, hash, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.doesObjectOfTypeExistAtCoords = function (x, y, z, radius, hash, p5) {
    let $res = natives.doesObjectOfTypeExistAtCoords(x, y, z, radius, hash, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isPointInAngledArea = function (xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, debug, includeZ) {
    let $res = natives.isPointInAngledArea(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, debug | 0, includeZ | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.setAllowLowLodBuoyancy = function (object, toggle) {
    let $res = natives.setObjectAllowLowLodBuoyancy(object, toggle | 0);
};
mp.game2.object.setPhysicsParams = function (object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy) {
    let $res = natives.setObjectPhysicsParams(object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy);
};
mp.game2.object.getFragmentDamageHealth = function (p0, p1) {
    let $res = natives.getObjectFragmentDamageHealth(p0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.getObjectFragmentDamageHealth = function (p0, p1) {
    let $res = natives.getObjectFragmentDamageHealth(p0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.setActivatePhysicsAsSoonAsItIsUnfrozen = function (object, toggle) {
    let $res = natives.setActivateObjectPhysicsAsSoonAsItIsUnfrozen(object, toggle | 0);
};
mp.game2.object.isAnyNearPoint = function (x, y, z, range, p4) {
    let $res = natives.isAnyObjectNearPoint(x, y, z, range, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isAnyObjectNearPoint = function (x, y, z, range, p4) {
    let $res = natives.isAnyObjectNearPoint(x, y, z, range, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isNearPoint = function (objectHash, x, y, z, range) {
    let $res = natives.isObjectNearPoint(objectHash, x, y, z, range);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isObjectNearPoint = function (objectHash, x, y, z, range) {
    let $res = natives.isObjectNearPoint(objectHash, x, y, z, range);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.removeHighDetailModel = function (object) {
    let $res = natives.removeObjectHighDetailModel(object);
};
mp.game2.object.breakFragmentChild = function (p0, p1, p2) {
    let $res = natives.breakObjectFragmentChild(p0, p1, p2 | 0);
};
mp.game2.object.trackVisibility = function (object) {
    let $res = natives.trackObjectVisibility(object);
};
mp.game2.object.trackObjectVisibility = function (object) {
    let $res = natives.trackObjectVisibility(object);
};
mp.game2.object.isVisible = function (object) {
    let $res = natives.isObjectVisible(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.setUnkGlobalBoolRelatedToDamage = function (value) {
    let $res = natives.allowDamageEventsForNonNetworkedObjects(value | 0);
};
mp.game2.object.setCreateWeaponLightSource = function (object, toggle) {
    let $res = natives.setCutscenesWeaponFlashlightOnThisFrame(object, toggle | 0);
};
mp.game2.object.getRayfireMap = function (x, y, z, radius, name) {
    let $res = natives.getRayfireMapObject(x, y, z, radius, name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.setStateOfRayfireMap = function (object, state) {
    let $res = natives.setStateOfRayfireMapObject(object, state);
};
mp.game2.object.getStateOfRayfireMap = function (object) {
    let $res = natives.getStateOfRayfireMapObject(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.doesRayfireMapExist = function (object) {
    let $res = natives.doesRayfireMapObjectExist(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.getRayfireMapAnimPhase = function (object) {
    let $res = natives.getRayfireMapObjectAnimPhase(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.createPickup = function (pickupHash, posX, posY, posZ, p4, value, p6, modelHash) {
    let $res = natives.createPickup(pickupHash, posX, posY, posZ, p4, value, p6 | 0, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.createPickupRotate = function (pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash) {
    let $res = natives.createPickupRotate(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10 | 0, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.createAmbientPickup = function (pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8) {
    let $res = natives.createAmbientPickup(pickupHash, posX, posY, posZ, flags, value, modelHash, p7 | 0, p8 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.createNonNetworkedAmbientPickup = function (pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8) {
    let $res = natives.createNonNetworkedAmbientPickup(pickupHash, posX, posY, posZ, flags, value, modelHash, p7 | 0, p8 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.createPortablePickup = function (pickupHash, x, y, z, placeOnGround, modelHash) {
    let $res = natives.createPortablePickup(pickupHash, x, y, z, placeOnGround | 0, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.createNonNetworkedPortablePickup = function (pickupHash, x, y, z, placeOnGround, modelHash) {
    let $res = natives.createNonNetworkedPortablePickup(pickupHash, x, y, z, placeOnGround | 0, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.createPortablePickup2 = function (pickupHash, x, y, z, placeOnGround, modelHash) {
    let $res = natives.createNonNetworkedPortablePickup(pickupHash, x, y, z, placeOnGround | 0, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.attachPortablePickupToPed = function (pickupObject, ped) {
    let $res = natives.attachPortablePickupToPed(pickupObject, ped);
};
mp.game2.object.detachPortablePickupFromPed = function (pickupObject) {
    let $res = natives.detachPortablePickupFromPed(pickupObject);
};
mp.game2.object.hidePickup = function (pickupObject, toggle) {
    let $res = natives.hidePortablePickupWhenDetached(pickupObject, toggle | 0);
};
mp.game2.object.setMaxNumPortablePickupsCarriedByPlayer = function (modelHash, p1) {
    let $res = natives.setMaxNumPortablePickupsCarriedByPlayer(modelHash, p1);
};
mp.game2.object.setLocalPlayerCanCollectPortablePickups = function (p0) {
    let $res = natives.setLocalPlayerCanCollectPortablePickups(p0 | 0);
};
mp.game2.object.getSafePickupCoords = function (x, y, z, p3, p4) {
    let $res = natives.getSafePickupCoords(x, y, z, p3, p4);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.object.getPickupCoords = function (pickup) {
    let $res = natives.getPickupCoords(pickup);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.object.removeAllPickupsOfType = function (pickupHash) {
    let $res = natives.removeAllPickupsOfType(pickupHash);
};
mp.game2.object.hasPickupBeenCollected = function (pickup) {
    let $res = natives.hasPickupBeenCollected(pickup);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.removePickup = function (pickup) {
    let $res = natives.removePickup(pickup);
};
mp.game2.object.createMoneyPickups = function (x, y, z, value, amount, model) {
    let $res = natives.createMoneyPickups(x, y, z, value, amount, model);
};
mp.game2.object.doesPickupExist = function (pickup) {
    let $res = natives.doesPickupExist(pickup);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.doesPickupExist = function (pickupObject) {
    let $res = natives.doesPickupObjectExist(pickupObject);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.doesPickupObjectExist = function (pickupObject) {
    let $res = natives.doesPickupObjectExist(pickupObject);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.getPickup = function (pickup) {
    let $res = natives.getPickupObject(pickup);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.isAPortablePickup = function (object) {
    let $res = natives.isObjectAPickup(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isAPickup = function (object) {
    let $res = natives.isObjectAPortablePickup(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.doesPickupOfTypeExistInArea = function (pickupHash, x, y, z, radius) {
    let $res = natives.doesPickupOfTypeExistInArea(pickupHash, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.isPickupWithinRadius = function (pickupHash, x, y, z, radius) {
    let $res = natives.doesPickupOfTypeExistInArea(pickupHash, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.setPickupRegenerationTime = function (pickup, duration) {
    let $res = natives.setPickupRegenerationTime(pickup, duration);
};
mp.game2.object.forcePickupRegenerate = function (p0) {
    let $res = natives.forcePickupRegenerate(p0);
};
mp.game2.object.toggleUsePickupsForPlayer = function (player, pickupHash, toggle) {
    let $res = natives.setPlayerPermittedToCollectPickupsOfType(player, pickupHash, toggle | 0);
};
mp.game2.object.setLocalPlayerCanUsePickupsWithThisModel = function (modelHash, toggle) {
    let $res = natives.setLocalPlayerPermittedToCollectPickupsWithModel(modelHash, toggle | 0);
};
mp.game2.object.setTeamPickup = function (object, p1, p2) {
    let $res = natives.setTeamPickupObject(object, p1, p2 | 0);
};
mp.game2.object.setTeamPickupObject = function (object, p1, p2) {
    let $res = natives.setTeamPickupObject(object, p1, p2 | 0);
};
mp.game2.object.preventCollectionOfPortablePickup = function (object, p1, p2) {
    let $res = natives.preventCollectionOfPortablePickup(object, p1 | 0, p2 | 0);
};
mp.game2.object.setPickupGenerationRangeMultiplier = function (multiplier) {
    let $res = natives.setPickupGenerationRangeMultiplier(multiplier);
};
mp.game2.object.getPickupGenerationRangeMultiplier = function () {
    let $res = natives.getPickupGenerationRangeMultiplier();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.setPickupUncollectable = function (p0, p1) {
    let $res = natives.setPickupUncollectable(p0, p1);
};
mp.game2.object.setPickupHiddenWhenUncollectable = function (p0, p1) {
    let $res = natives.setPickupHiddenWhenUncollectable(p0, p1);
};
mp.game2.object.renderFakePickupGlow = function (x, y, z, colorIndex) {
    let $res = natives.renderFakePickupGlow(x, y, z, colorIndex);
};
mp.game2.object.highlightPlacementCoords = function (x, y, z, colorIndex) {
    let $res = natives.renderFakePickupGlow(x, y, z, colorIndex);
};
mp.game2.object.getWeaponTypeFromPickupType = function (pickupHash) {
    let $res = natives.getWeaponTypeFromPickupType(pickupHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.getPickupHashFromWeapon = function (weaponHash) {
    let $res = natives.getPickupTypeFromWeaponHash(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.isPickupWeaponValid = function (object) {
    let $res = natives.isPickupWeaponObjectValid(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.getTextureVariation = function (object) {
    let $res = natives.getObjectTintIndex(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.setTextureVariation = function (object, textureVariation) {
    let $res = natives.setObjectTintIndex(object, textureVariation);
};
mp.game2.object.setTextureVariationOfClosestOfType = function (x, y, z, radius, modelHash, textureVariation) {
    let $res = natives.setTintIndexClosestBuildingOfType(x, y, z, radius, modelHash, textureVariation);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.setLightColor = function (object, p1, r, g, b) {
    let $res = natives.setPropLightColor(object, p1 | 0, r, g, b);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.setStuntPropSpeedup = function (object, p1) {
    let $res = natives.setObjectSpeedBoostAmount(object, p1);
};
mp.game2.object.setStuntPropDuration = function (object, duration) {
    let $res = natives.setObjectSpeedBoostDuration(object, duration);
};
mp.game2.object.getPickupHash = function (pickupHash) {
    let $res = natives.convertOldPickupTypeToNew(pickupHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.setForceThisFrame = function (x, y, z, p3) {
    let $res = natives.setForceObjectThisFrame(x, y, z, p3);
};
mp.game2.object.setForceObjectThisFrame = function (x, y, z, p3) {
    let $res = natives.setForceObjectThisFrame(x, y, z, p3);
};
mp.game2.object.markForDeletion = function (object) {
    let $res = natives.onlyCleanUpObjectWhenOutOfRange(object);
};
mp.game2.object.setEnableArenaPropPhysics = function (object, toggle, p2) {
    let $res = natives.setDriveArticulatedJoint(object, toggle | 0, p2);
};
mp.game2.object.setEnableArenaPropPhysicsOnPed = function (object, toggle, p2, ped) {
    let $res = natives.setDriveArticulatedJointWithInflictor(object, toggle | 0, p2, ped);
};
mp.game2.object.getIsArenaPropPhysicsDisabled = function (object, p1) {
    let $res = natives.getIsArticulatedJointAtMinAngle(object, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.object) mp.game2.object = {};
if (!mp.game2.object.unk) mp.game2.object.unk = {};
mp.game2.object.unk._0xAFE24E4D29249E4A = function (object, p1, p2, p3) {
    let $res = natives.rotateObject(object, p1, p2, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.unk._0x2542269291C6AC84 = function (p0) {
    let $res = natives.getHasObjectBeenCompletelyDestroyed(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.unk._0x006E4B040ED37EC3 = function (p0) {
    let $res = natives.playObjectAutoStartAnim(p0);
};
mp.game2.object.unk._0xA85A21582451E951 = function (doorHash, p1) {
    let $res = natives.doorSystemSetDoorOpenForRaces(doorHash, p1 | 0);
};
mp.game2.object.unk._0xC7F29CA00F46350E = function (p0) {
    let $res = natives.openAllBarriersForRace(p0 | 0);
};
mp.game2.object.unk._0x701FDA1E82076BA4 = function () {
    let $res = natives.closeAllBarriersForRace();
};
mp.game2.object.unk._0x659F9D71F52843F8 = function (id, toggle) {
    let $res = natives.disableTidyingUpInGarage(id, toggle | 0);
};
mp.game2.object.unk._0x66A49D021870FE88 = function () {
    let $res = natives.closeSafehouseGarages();
};
mp.game2.object.unk._0xE05F6AEEFEB0BB02 = function (p0, p1, p2) {
    let $res = natives.damageObjectFragmentChild(p0, p1, p2);
};
mp.game2.object.unk._0xF9C1681347C8BD15 = function (object) {
    let $res = natives.fixObjectFragment(object);
};
mp.game2.object.unk._0xC6033D32241F6FB5 = function (object, toggle) {
    let $res = natives.setObjectIsSpecialGolfball(object, toggle | 0);
};
mp.game2.object.unk._0xEB6F1A9B5510A5D2 = function (p0, p1) {
    let $res = natives.setObjectTakesDamageFromCollidingWithBuildings(p0, p1 | 0);
};
mp.game2.object.unk._0x394CD08E31313C28 = function () {
    let $res = natives.forcePickupRotateFaceUp();
};
mp.game2.object.unk._0x826D1EE4D1CAFC78 = function (p0, p1) {
    let $res = natives.setCustomPickupWeaponHash(p0, p1);
};
mp.game2.object.unk._0x1E3F1B1B891A2AAA = function (p0, p1) {
    let $res = natives.blockPlayersForAmbientPickup(p0, p1);
};
mp.game2.object.unk._0xD4A7A435B3710D05 = function (x, y, z, radius) {
    let $res = natives.addExtendedPickupProbeArea(x, y, z, radius);
};
mp.game2.object.unk._0xB7C6D80FB371659A = function () {
    let $res = natives.clearExtendedPickupProbeAreas();
};
mp.game2.object.unk._0x8DCA505A5C196F05 = function (p0, p1) {
    let $res = natives.suppressPickupSoundForPickup(p0, p1);
};
mp.game2.object.unk._0xFDC07C58E8AAB715 = function (pickupHash) {
    let $res = natives.allowAllPlayersToCollectPickupsOfType(pickupHash);
};
mp.game2.object.unk._0x27F248C3FEBFAAD3 = function (p0, p1) {
    let $res = natives.setPickupObjectGlowWhenUncollectable(p0, p1);
};
mp.game2.object.unk._0x0596843B34B95CE5 = function (p0, p1) {
    let $res = natives.setPickupGlowOffset(p0, p1);
};
mp.game2.object.unk._0xA08FE5E49BDC39DD = function (p0, p1, p2) {
    let $res = natives.setPickupObjectGlowOffset(p0, p1, p2 | 0);
};
mp.game2.object.unk._0x62454A641B41F3C5 = function (p0) {
    let $res = natives.setObjectGlowInSameTeam(p0);
};
mp.game2.object.unk._0x39A5FB7EAF150840 = function (p0, p1) {
    let $res = natives.setPickupObjectArrowMarker(p0, p1);
};
mp.game2.object.unk._0x834344A414C7C85D = function (p0, p1) {
    let $res = natives.allowPickupArrowMarkerWhenUncollectable(p0, p1);
};
mp.game2.object.unk._0xDB41D07A45A6D4B7 = function (p0) {
    let $res = natives.getDefaultAmmoForWeaponPickup(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.unk._0x31F924B53EADDF65 = function (p0) {
    let $res = natives.setOnlyAllowAmmoCollectionWhenLow(p0 | 0);
};
mp.game2.object.unk._0x858EC9FD25DE04AA = function (p0, p1) {
    let $res = natives.setPickupTransparentWhenUncollectable(p0, p1);
};
mp.game2.object.unk._0x8881C98A31117998 = function (p0, p1) {
    let $res = natives.setPickupObjectTransparentWhenUncollectable(p0, p1);
};
mp.game2.object.unk._0x8CFF648FBD7330F1 = function (p0) {
    let $res = natives.setPickupObjectAlphaWhenTransparent(p0);
};
mp.game2.object.unk._0x46F3ADD1E2D5BAF2 = function (p0, p1) {
    let $res = natives.setPortablePickupPersist(p0, p1);
};
mp.game2.object.unk._0x641F272B52E2F0F8 = function (p0, p1) {
    let $res = natives.allowPortablePickupToMigrateToNonParticipants(p0, p1);
};
mp.game2.object.unk._0x4C134B4DF76025D0 = function (pickup, toggle) {
    let $res = natives.forceActivatePhysicsOnUnfixedPickup(pickup, toggle | 0);
};
mp.game2.object.unk._0xAA059C615DE9DD03 = function (pickup, toggle) {
    let $res = natives.allowPickupByNoneParticipant(pickup, toggle | 0);
};
mp.game2.object.unk._0xF92099527DB8E2A7 = function (p0, p1) {
    let $res = natives.suppressPickupRewardType(p0, p1);
};
mp.game2.object.unk._0xA2C1F5E92AFE49ED = function () {
    let $res = natives.clearAllPickupRewardTypeSuppression();
};
mp.game2.object.unk._0x762DB2D380B48D04 = function (p0) {
    let $res = natives.clearPickupRewardTypeSuppression(p0);
};
mp.game2.object.unk._0x7813E8B8C4AE4799 = function (pickup) {
    let $res = natives.setPickupObjectCollectableInVehicle(pickup);
};
mp.game2.object.unk._0xBFFE53AE7E67FCDC = function (pickup, toggle) {
    let $res = natives.setPickupTrackDamageEvents(pickup, toggle | 0);
};
mp.game2.object.unk._0xD05A3241B9A86F19 = function (entity, toggle) {
    let $res = natives.setEntityFlagSuppressShadow(entity, toggle | 0);
};
mp.game2.object.unk._0xB2D0BDE54F0E8E5A = function (object, toggle) {
    let $res = natives.setEntityFlagRenderSmallShadow(object, toggle | 0);
};
mp.game2.object.unk._0x31574B1B41268673 = function (p0, p1) {
    let $res = natives.setPropTintIndex(p0, p1);
};
mp.game2.object.unk._0xADF084FB8F075D06 = function (object) {
    let $res = natives.isPropLightOverriden(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.object.unk._0x3B2FD68DB5F8331C = function (object, toggle) {
    let $res = natives.setObjectIsVisibleInMirrors(object, toggle | 0);
};
mp.game2.object.unk._0x8CAAB2BD3EA58BD4 = function (p0) {
    let $res = natives.setDisableCollisionsBetweenCarsAndCarParachute(p0);
};
mp.game2.object.unk._0x63ECF581BC70E363 = function (p0, p1) {
    let $res = natives.setProjectilesShouldExplodeOnContact(p0, p1);
};
mp.game2.object.unk._0x734E1714D077DA9A = function (object, toggle) {
    let $res = natives.setObjectIsAPressurePlate(object, toggle | 0);
};
mp.game2.object.unk._0x1A6CBB06E2D0D79D = function (object, p1) {
    let $res = natives.setWeaponImpactsApplyGreaterForce(object, p1 | 0);
};
mp.game2.object.unk._0x3BD770D281982DB5 = function (p0, p1) {
    let $res = natives.getIsArticulatedJointAtMaxAngle(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.object.unk._0x1C57C94A6446492A = function (object, toggle) {
    let $res = natives.setIsObjectArticulated(object, toggle | 0);
};
mp.game2.object.unk._0xB5B7742424BD4445 = function (object, toggle) {
    let $res = natives.setIsObjectBall(object, toggle | 0);
};
if (!mp.game2.pad) mp.game2.pad = {};
mp.game2.pad.isControlEnabled = function (padIndex, control) {
    let $res = natives.isControlEnabled(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isControlPressed = function (padIndex, control) {
    let $res = natives.isControlPressed(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isControlReleased = function (padIndex, control) {
    let $res = natives.isControlReleased(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isControlJustPressed = function (padIndex, control) {
    let $res = natives.isControlJustPressed(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isControlJustReleased = function (padIndex, control) {
    let $res = natives.isControlJustReleased(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.getControlValue = function (padIndex, control) {
    let $res = natives.getControlValue(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.getControlNormal = function (padIndex, control) {
    let $res = natives.getControlNormal(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.getControlUnboundNormal = function (padIndex, control) {
    let $res = natives.getControlUnboundNormal(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.setControlNormal = function (padIndex, control, amount) {
    let $res = natives.setControlValueNextFrame(padIndex, control, amount);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isDisabledControlPressed = function (padIndex, control) {
    let $res = natives.isDisabledControlPressed(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isDisabledControlReleased = function (padIndex, control) {
    let $res = natives.isDisabledControlReleased(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isDisabledControlJustPressed = function (padIndex, control) {
    let $res = natives.isDisabledControlJustPressed(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isDisabledControlJustReleased = function (padIndex, control) {
    let $res = natives.isDisabledControlJustReleased(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.getDisabledControlNormal = function (padIndex, control) {
    let $res = natives.getDisabledControlNormal(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.getDisabledControlUnboundNormal = function (padIndex, control) {
    let $res = natives.getDisabledControlUnboundNormal(padIndex, control);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.isUsingKeyboard = function (padIndex) {
    let $res = natives.isUsingKeyboardAndMouse(padIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isInputDisabled = function (padIndex) {
    let $res = natives.isUsingKeyboardAndMouse(padIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isUsingKeyboard2 = function (padIndex) {
    let $res = natives.isUsingCursor(padIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.isInputJustDisabled = function (padIndex) {
    let $res = natives.isUsingCursor(padIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.setCursorLocation = function (x, y) {
    let $res = natives.setCursorPosition(x, y);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.getControlInstructionalButton = function (padIndex, control, p2) {
    let $res = natives.getControlInstructionalButtonsString(padIndex, control, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.getControlActionName = function (padIndex, control, p2) {
    let $res = natives.getControlInstructionalButtonsString(padIndex, control, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.getControlGroupInstructionalButton = function (padIndex, controlGroup, p2) {
    let $res = natives.getControlGroupInstructionalButtonsString(padIndex, controlGroup, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.setControlLightEffectColor = function (padIndex, red, green, blue) {
    let $res = natives.setControlLightEffectColor(padIndex, red, green, blue);
};
mp.game2.pad.setShake = function (padIndex, duration, frequency) {
    let $res = natives.setControlShake(padIndex, duration, frequency);
};
mp.game2.pad.setPadShake = function (padIndex, duration, frequency) {
    let $res = natives.setControlShake(padIndex, duration, frequency);
};
mp.game2.pad.stopShake = function (padIndex) {
    let $res = natives.stopControlShake(padIndex);
};
mp.game2.pad.stopPadShake = function (padIndex) {
    let $res = natives.stopControlShake(padIndex);
};
mp.game2.pad.setShakeSuppressedId = function (padIndex, p1) {
    let $res = natives.setControlShakeSuppressedId(padIndex, p1);
};
mp.game2.pad.isLookInverted = function () {
    let $res = natives.isLookInverted();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.getLocalPlayerAimState = function () {
    let $res = natives.getLocalPlayerAimState();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.getLocalPlayerAimState2 = function () {
    let $res = natives.getLocalPlayerGamepadAimState();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.getIsUsingAlternateDriveby = function () {
    let $res = natives.getIsUsingAlternateDriveby();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.getAllowMovementWhileZoomed = function () {
    let $res = natives.getAllowMovementWhileZoomed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.setPlayerShakesWhenControllerDisabled = function (toggle) {
    let $res = natives.setPlayerpadShakesWhenControllerDisabled(toggle | 0);
};
mp.game2.pad.setPlayerpadShakesWhenControllerDisabled = function (toggle) {
    let $res = natives.setPlayerpadShakesWhenControllerDisabled(toggle | 0);
};
mp.game2.pad.setInputExclusive = function (padIndex, control) {
    let $res = natives.setInputExclusive(padIndex, control);
};
mp.game2.pad.disableControlAction = function (padIndex, control, disable) {
    let $res = natives.disableControlAction(padIndex, control, disable | 0);
};
mp.game2.pad.enableControlAction = function (padIndex, control, enable) {
    let $res = natives.enableControlAction(padIndex, control, enable | 0);
};
mp.game2.pad.disableAllControlActions = function (padIndex) {
    let $res = natives.disableAllControlActions(padIndex);
};
mp.game2.pad.enableAllControlActions = function (padIndex) {
    let $res = natives.enableAllControlActions(padIndex);
};
mp.game2.pad.switchToInputMappingScheme = function (name) {
    let $res = natives.initPcScriptedControls(name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.switchToInputMappingScheme2 = function (name) {
    let $res = natives.switchPcScriptedControls(name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.resetInputMappingScheme = function () {
    let $res = natives.shutdownPcScriptedControls();
};
if (!mp.game2.pad) mp.game2.pad = {};
if (!mp.game2.pad.unk) mp.game2.pad.unk = {};
mp.game2.pad.unk._0x5B73C77D9EB66E24 = function (p0) {
    let $res = natives.setUseAdjustedMouseCoords(p0 | 0);
};
mp.game2.pad.unk._0xD7D22F5592AED8BA = function (p0) {
    let $res = natives.getControlHowLongAgo(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.unk._0x23F09EADC01449D6 = function (padIndex) {
    let $res = natives.isUsingRemotePlay(padIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.unk._0x6CD79468A1E595C6 = function (padIndex) {
    let $res = natives.haveControlsChanged(padIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.unk._0xCB0360EFEFB2580D = function (padIndex) {
    let $res = natives.clearControlLightEffect(padIndex);
};
mp.game2.pad.unk._0x14D29BB12D47F68C = function (p0, p1, p2, p3, p4) {
    let $res = natives.setControlTriggerShake(p0, p1, p2, p3, p4);
};
mp.game2.pad.unk._0xA0CEFCEA390AAB9B = function (p0) {
    let $res = natives.clearControlShakeSuppressedId(p0);
};
mp.game2.pad.unk._0xE1615EC03B3BB4FD = function () {
    let $res = natives.isMouseLookInverted();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pad.unk._0x25AAA32BDC98F2A3 = function () {
    let $res = natives.getIsUsingAlternateHandbrake();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pad.unk._0x7F4724035FDCA1DD = function (padIndex) {
    let $res = natives.disableInputGroup(padIndex);
};
mp.Player.prototype.setPedPathsInArea = function (y1, z1, x2, y2, z2, unknown, p7) {
    let $res = natives.setPedPathsInArea(this.handle, y1, z1, x2, y2, z2, unknown | 0, p7 | 0);
};
mp.Ped.prototype.setPedPathsInArea = function (y1, z1, x2, y2, z2, unknown, p7) {
    let $res = natives.setPedPathsInArea(this.handle, y1, z1, x2, y2, z2, unknown | 0, p7 | 0);
};
mp.Vehicle.prototype.getVehicleNodeProperties = function (y, z) {
    let $res = natives.getVehicleNodeProperties(this.handle, y, z, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.density = $res[1];
    $resObj.flags = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.Vehicle.prototype.isVehicleNodeIdValid = function () {
    let $res = natives.isVehicleNodeIdValid(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getVehicleNodePosition = function () {
    let $res = natives.getVehicleNodePosition(this.handle, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    return $resObj.outPosition;
};
mp.Vehicle.prototype.getVehicleNodeIsGpsAllowed = function () {
    let $res = natives.getVehicleNodeIsGpsAllowed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getVehicleNodeIsSwitchedOff = function () {
    let $res = natives.getVehicleNodeIsSwitchedOff(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setPedPathsBackToOriginal = function (p1, p2, p3, p4, p5, p6) {
    let $res = natives.setPedPathsBackToOriginal(this.handle, p1, p2, p3, p4, p5, p6 | 0);
};
mp.Ped.prototype.setPedPathsBackToOriginal = function (p1, p2, p3, p4, p5, p6) {
    let $res = natives.setPedPathsBackToOriginal(this.handle, p1, p2, p3, p4, p5, p6 | 0);
};
if (!mp.game2.pathfind) mp.game2.pathfind = {};
mp.game2.pathfind.setRoadsInArea = function (x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2) {
    let $res = natives.setRoadsInArea(x1, y1, z1, x2, y2, z2, nodeEnabled | 0, unknown2 | 0);
};
mp.game2.pathfind.setRoadsInAngledArea = function (x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3) {
    let $res = natives.setRoadsInAngledArea(x1, y1, z1, x2, y2, z2, width, unknown1 | 0, unknown2 | 0, unknown3 | 0);
};
mp.game2.pathfind.setPedPathsInArea = function (x1, y1, z1, x2, y2, z2, unknown, p7) {
    let $res = natives.setPedPathsInArea(x1, y1, z1, x2, y2, z2, unknown | 0, p7 | 0);
};
mp.game2.pathfind.getSafeCoordForPed = function (x, y, z, onGround, flags) {
    let $res = natives.getSafeCoordForPed(x, y, z, onGround | 0, undefined, flags);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.outPosition : undefined;
};
mp.game2.pathfind.getClosestVehicleNode = function (x, y, z, nodeType, p5, p6) {
    let $res = natives.getClosestVehicleNode(x, y, z, undefined, nodeType, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.outPosition : undefined;
};
mp.game2.pathfind.getClosestMajorVehicleNode = function (x, y, z, unknown1, unknown2) {
    let $res = natives.getClosestMajorVehicleNode(x, y, z, undefined, unknown1, unknown2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.outPosition : undefined;
};
mp.game2.pathfind.getClosestVehicleNodeWithHeading = function (x, y, z, nodeType, p6, p7) {
    let $res = natives.getClosestVehicleNodeWithHeading(x, y, z, undefined, 0, nodeType, p6, p7);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    $resObj.outHeading = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.pathfind.getNthClosestVehicleNode = function (x, y, z, nthClosest, unknown1, unknown2, unknown3) {
    let $res = natives.getNthClosestVehicleNode(x, y, z, nthClosest, undefined, unknown1, unknown2, unknown3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.outPosition : undefined;
};
mp.game2.pathfind.getNthClosestVehicleNodeId = function (x, y, z, nth, nodetype, p5, p6) {
    let $res = natives.getNthClosestVehicleNodeId(x, y, z, nth, nodetype, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pathfind.getNthClosestVehicleNodeWithHeading = function (x, y, z, nthClosest, unknown2, unknown3, unknown4) {
    let $res = natives.getNthClosestVehicleNodeWithHeading(x, y, z, nthClosest, undefined, 0, 0, unknown2, unknown3, unknown4);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    $resObj.outHeading = $res[2];
    $resObj.unknown1 = $res[3];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.pathfind.getNthClosestVehicleNodeIdWithHeading = function (x, y, z, nthClosest, p6, p7, p8) {
    let $res = natives.getNthClosestVehicleNodeIdWithHeading(x, y, z, nthClosest, undefined, 0, p6, p7, p8);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    $resObj.outHeading = $res[2];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.pathfind.getNthClosestVehicleNodeFavourDirection = function (x, y, z, desiredX, desiredY, desiredZ, nthClosest, nodetype, p10, p11) {
    let $res = natives.getNthClosestVehicleNodeFavourDirection(x, y, z, desiredX, desiredY, desiredZ, nthClosest, undefined, 0, nodetype, p10, p11);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    $resObj.outHeading = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.pathfind.getVehicleNodeProperties = function (x, y, z) {
    let $res = natives.getVehicleNodeProperties(x, y, z, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.density = $res[1];
    $resObj.flags = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.pathfind.isVehicleNodeIdValid = function (vehicleNodeId) {
    let $res = natives.isVehicleNodeIdValid(vehicleNodeId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.getVehicleNodePosition = function (nodeId) {
    let $res = natives.getVehicleNodePosition(nodeId, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    return $resObj.outPosition;
};
mp.game2.pathfind.getVehicleNodeIsGpsAllowed = function (nodeID) {
    let $res = natives.getVehicleNodeIsGpsAllowed(nodeID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.getSupportsGpsRouteFlag = function (nodeID) {
    let $res = natives.getVehicleNodeIsGpsAllowed(nodeID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.getVehicleNodeIsSwitchedOff = function (nodeID) {
    let $res = natives.getVehicleNodeIsSwitchedOff(nodeID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.getIsSlowRoadFlag = function (nodeID) {
    let $res = natives.getVehicleNodeIsSwitchedOff(nodeID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.getClosestRoad = function (x, y, z, p3, p4, p10) {
    let $res = natives.getClosestRoad(x, y, z, p3, p4, undefined, undefined, 0, 0, 0, p10 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p5 = new mp.Vector3($res[1]);
    $resObj.p6 = new mp.Vector3($res[2]);
    $resObj.p7 = $res[0];
    $resObj.p8 = $res[0];
    $resObj.p9 = $res[3];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.pathfind.setAllPathsCacheBoundingstruct = function (toggle) {
    let $res = natives.setAllowStreamPrologueNodes(toggle | 0);
};
mp.game2.pathfind.setAiGlobalPathNodesType = function (type) {
    let $res = natives.setAllowStreamHeistIslandNodes(type);
};
mp.game2.pathfind.areNodesLoadedForArea = function (x1, y1, x2, y2) {
    let $res = natives.areNodesLoadedForArea(x1, y1, x2, y2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.requestPathsPreferAccurateBoundingstruct = function (x1, y1, x2, y2) {
    let $res = natives.requestPathNodesInAreaThisFrame(x1, y1, x2, y2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.setRoadsBackToOriginal = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.setRoadsBackToOriginal(p0, p1, p2, p3, p4, p5, p6 | 0);
};
mp.game2.pathfind.setRoadsBackToOriginalInAngledArea = function (x1, y1, z1, x2, y2, z2, width, p7) {
    let $res = natives.setRoadsBackToOriginalInAngledArea(x1, y1, z1, x2, y2, z2, width, p7 | 0);
};
mp.game2.pathfind.setAmbientPedRangeMultiplierThisFrame = function (multiplier) {
    let $res = natives.setAmbientPedRangeMultiplierThisFrame(multiplier);
};
mp.game2.pathfind.setPedPathsBackToOriginal = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.setPedPathsBackToOriginal(p0, p1, p2, p3, p4, p5, p6 | 0);
};
mp.game2.pathfind.getRandomVehicleNode = function (x, y, z, radius, p4, p5, p6) {
    let $res = natives.getRandomVehicleNode(x, y, z, radius, p4 | 0, p5 | 0, p6 | 0, undefined, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    $resObj.nodeId = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.pathfind.getStreetNameAtCoord = function (x, y, z) {
    let $res = natives.getStreetNameAtCoord(x, y, z, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.streetName = $res[1];
    $resObj.crossingRoad = $res[2];
    return $resObj;
};
mp.game2.pathfind.generateDirectionsToCoord = function (x, y, z, p3) {
    let $res = natives.generateDirectionsToCoord(x, y, z, p3 | 0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.direction = $res[1];
    $resObj.p5 = $res[2];
    $resObj.distToNxJunction = $res[3];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.pathfind.setIgnoreNoGpsFlag = function (toggle) {
    let $res = natives.setIgnoreNoGpsFlag(toggle | 0);
};
mp.game2.pathfind.setIgnoreSecondaryRouteNodes = function (toggle) {
    let $res = natives.setIgnoreNoGpsFlagUntilFirstNormalNode(toggle | 0);
};
mp.game2.pathfind.setGpsDisabledZone = function (x1, y1, z1, x2, y2, z3) {
    let $res = natives.setGpsDisabledZone(x1, y1, z1, x2, y2, z3);
};
mp.game2.pathfind.getGpsBlipRouteLength = function () {
    let $res = natives.getGpsBlipRouteLength();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pathfind.getGpsBlipRouteFound = function () {
    let $res = natives.getGpsBlipRouteFound();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.getRoadSidePointWithHeading = function (x, y, z, heading) {
    let $res = natives.getRoadBoundaryUsingHeading(x, y, z, heading, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.outPosition : undefined;
};
mp.game2.pathfind.getPointOnRoadSide = function (x, y, z, p3) {
    let $res = natives.getPositionBySideOfRoad(x, y, z, p3, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPosition = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.outPosition : undefined;
};
mp.game2.pathfind.isPointOnRoad = function (x, y, z, vehicle) {
    let $res = natives.isPointOnRoad(x, y, z, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.getNextGpsDisabledZoneIndex = function () {
    let $res = natives.getNextGpsDisabledZoneIndex();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pathfind.setGpsDisabledZoneAtIndex = function (x1, y1, z1, x2, y2, z2, index) {
    let $res = natives.setGpsDisabledZoneAtIndex(x1, y1, z1, x2, y2, z2, index);
};
mp.game2.pathfind.clearGpsDisabledZoneAtIndex = function (index) {
    let $res = natives.clearGpsDisabledZoneAtIndex(index);
};
mp.game2.pathfind.addNavmeshRequiredRegion = function (x, y, radius) {
    let $res = natives.addNavmeshRequiredRegion(x, y, radius);
};
mp.game2.pathfind.removeNavmeshRequiredRegions = function () {
    let $res = natives.removeNavmeshRequiredRegions();
};
mp.game2.pathfind.isNavmeshRequiredRegionOwnedByAnyThread = function () {
    let $res = natives.isNavmeshRequiredRegionInUse();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.disableNavmeshInArea = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.disableNavmeshInArea(p0, p1, p2, p3, p4, p5, p6);
};
mp.game2.pathfind.areAllNavmeshRegionsLoaded = function () {
    let $res = natives.areAllNavmeshRegionsLoaded();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.isNavmeshLoadedInArea = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.isNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.addNavmeshBlockingObject = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.addNavmeshBlockingObject(p0, p1, p2, p3, p4, p5, p6, p7 | 0, p8);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pathfind.updateNavmeshBlockingObject = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.updateNavmeshBlockingObject(p0, p1, p2, p3, p4, p5, p6, p7, p8);
};
mp.game2.pathfind.removeNavmeshBlockingObject = function (p0) {
    let $res = natives.removeNavmeshBlockingObject(p0);
};
mp.game2.pathfind.doesNavmeshBlockingObjectExist = function (p0) {
    let $res = natives.doesNavmeshBlockingObjectExist(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.pathfind.getApproxHeightForPoint = function (x, y) {
    let $res = natives.getApproxHeightForPoint(x, y);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pathfind.getApproxHeightForArea = function (x1, y1, x2, y2) {
    let $res = natives.getApproxHeightForArea(x1, y1, x2, y2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pathfind.getApproxFloorForPoint = function (x, y) {
    let $res = natives.getApproxFloorForPoint(x, y);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pathfind.getApproxFloorForArea = function (x1, y1, x2, y2) {
    let $res = natives.getApproxFloorForArea(x1, y1, x2, y2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.pathfind.calculateTravelDistanceBetweenPoints = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.calculateTravelDistanceBetweenPoints(x1, y1, z1, x2, y2, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
if (!mp.game2.pathfind) mp.game2.pathfind = {};
if (!mp.game2.pathfind.unk) mp.game2.pathfind.unk = {};
mp.game2.pathfind.unk._0xAA76052DDA9BFC3E = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.adjustAmbientPedSpawnDensitiesThisFrame(p0, p1, p2, p3, p4, p5, p6);
};
mp.game2.pathfind.unk._0xF3162836C28F9DA5 = function (p0, p1, p2, p3) {
    let $res = natives.getPosAlongGpsTypeRoute(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[1];
};
mp.game2.pathfind.unk._0x01708E8DD3FF8C65 = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.getNumNavmeshesExistingInArea(p0, p1, p2, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.clone = function (isNetwork, bScriptHostPed, copyHeadBlendFlag) {
    let $res = natives.clonePed(this.handle, isNetwork | 0, bScriptHostPed | 0, copyHeadBlendFlag | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.clone = function (isNetwork, bScriptHostPed, copyHeadBlendFlag) {
    let $res = natives.clonePed(this.handle, isNetwork | 0, bScriptHostPed | 0, copyHeadBlendFlag | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.cloneEx = function (isNetwork, bScriptHostPed, copyHeadBlendFlag, p4) {
    let $res = natives.clonePedAlt(this.handle, isNetwork | 0, bScriptHostPed | 0, copyHeadBlendFlag | 0, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.cloneEx = function (isNetwork, bScriptHostPed, copyHeadBlendFlag, p4) {
    let $res = natives.clonePedAlt(this.handle, isNetwork | 0, bScriptHostPed | 0, copyHeadBlendFlag | 0, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.cloneToTarget = function (targetPed) {
    let $res = natives.clonePedToTarget(this.handle, targetPed);
};
mp.Ped.prototype.cloneToTarget = function (targetPed) {
    let $res = natives.clonePedToTarget(this.handle, targetPed);
};
mp.Player.prototype.cloneToTargetEx = function (targetPed, p2) {
    let $res = natives.clonePedToTargetAlt(this.handle, targetPed, p2 | 0);
};
mp.Ped.prototype.cloneToTargetEx = function (targetPed, p2) {
    let $res = natives.clonePedToTargetAlt(this.handle, targetPed, p2 | 0);
};
mp.Player.prototype.isInVehicle = function (vehicle, atGetIn) {
    let $res = natives.isPedInVehicle(this.handle, vehicle, atGetIn | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInVehicle = function (vehicle, atGetIn) {
    let $res = natives.isPedInVehicle(this.handle, vehicle, atGetIn | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInModel = function (modelHash) {
    let $res = natives.isPedInModel(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInModel = function (modelHash) {
    let $res = natives.isPedInModel(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInAnyVehicle = function (atGetIn) {
    let $res = natives.isPedInAnyVehicle(this.handle, atGetIn | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInAnyVehicle = function (atGetIn) {
    let $res = natives.isPedInAnyVehicle(this.handle, atGetIn | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInjured = function () {
    let $res = natives.isPedInjured(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInjured = function () {
    let $res = natives.isPedInjured(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isHurt = function () {
    let $res = natives.isPedHurt(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHurt = function () {
    let $res = natives.isPedHurt(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isFatallyInjured = function () {
    let $res = natives.isPedFatallyInjured(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isFatallyInjured = function () {
    let $res = natives.isPedFatallyInjured(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isDeadOrDying = function (p1) {
    let $res = natives.isPedDeadOrDying(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isDeadOrDying = function (p1) {
    let $res = natives.isPedDeadOrDying(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isConversationDead = function () {
    let $res = natives.isConversationPedDead(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isConversationDead = function () {
    let $res = natives.isConversationPedDead(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAimingFromCover = function () {
    let $res = natives.isPedAimingFromCover(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAimingFromCover = function () {
    let $res = natives.isPedAimingFromCover(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isReloading = function () {
    let $res = natives.isPedReloading(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isReloading = function () {
    let $res = natives.isPedReloading(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isAPlayer = function () {
    let $res = natives.isPedAPlayer(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAPlayer = function () {
    let $res = natives.isPedAPlayer(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.createInsideVehicle = function (pedType, modelHash, seat, isNetwork, bScriptHostPed) {
    let $res = natives.createPedInsideVehicle(this.handle, pedType, modelHash, seat, isNetwork | 0, bScriptHostPed | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setDesiredHeading = function (heading) {
    let $res = natives.setPedDesiredHeading(this.handle, heading);
};
mp.Ped.prototype.setDesiredHeading = function (heading) {
    let $res = natives.setPedDesiredHeading(this.handle, heading);
};
mp.Player.prototype.freezeCameraRotation = function () {
    let $res = natives.forceAllHeadingValuesToAlign(this.handle);
};
mp.Ped.prototype.freezeCameraRotation = function () {
    let $res = natives.forceAllHeadingValuesToAlign(this.handle);
};
mp.Player.prototype.isFacingPed = function (otherPed, angle) {
    let $res = natives.isPedFacingPed(this.handle, otherPed, angle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isFacingPed = function (otherPed, angle) {
    let $res = natives.isPedFacingPed(this.handle, otherPed, angle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInMeleeCombat = function () {
    let $res = natives.isPedInMeleeCombat(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInMeleeCombat = function () {
    let $res = natives.isPedInMeleeCombat(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isStopped = function () {
    let $res = natives.isPedStopped(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isStopped = function () {
    let $res = natives.isPedStopped(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isShootingInArea = function (x1, y1, z1, x2, y2, z2, p7, p8) {
    let $res = natives.isPedShootingInArea(this.handle, x1, y1, z1, x2, y2, z2, p7 | 0, p8 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isShootingInArea = function (x1, y1, z1, x2, y2, z2, p7, p8) {
    let $res = natives.isPedShootingInArea(this.handle, x1, y1, z1, x2, y2, z2, p7 | 0, p8 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isShooting = function () {
    let $res = natives.isPedShooting(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isShooting = function () {
    let $res = natives.isPedShooting(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setAccuracy = function (accuracy) {
    let $res = natives.setPedAccuracy(this.handle, accuracy);
};
mp.Ped.prototype.setAccuracy = function (accuracy) {
    let $res = natives.setPedAccuracy(this.handle, accuracy);
};
mp.Player.prototype.getAccuracy = function () {
    let $res = natives.getPedAccuracy(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAccuracy = function () {
    let $res = natives.getPedAccuracy(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.isModel = function (modelHash) {
    let $res = natives.isPedModel(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isModel = function (modelHash) {
    let $res = natives.isPedModel(this.handle, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.explodeHead = function (weaponHash) {
    let $res = natives.explodePedHead(this.handle, weaponHash);
};
mp.Ped.prototype.explodeHead = function (weaponHash) {
    let $res = natives.explodePedHead(this.handle, weaponHash);
};
mp.Player.prototype.addArmourTo = function (amount) {
    let $res = natives.addArmourToPed(this.handle, amount);
};
mp.Ped.prototype.addArmourTo = function (amount) {
    let $res = natives.addArmourToPed(this.handle, amount);
};
mp.Player.prototype.setArmour = function (amount) {
    let $res = natives.setPedArmour(this.handle, amount);
};
mp.Ped.prototype.setArmour = function (amount) {
    let $res = natives.setPedArmour(this.handle, amount);
};
mp.Player.prototype.setIntoVehicle = function (vehicle, seatIndex) {
    let $res = natives.setPedIntoVehicle(this.handle, vehicle, seatIndex);
};
mp.Ped.prototype.setIntoVehicle = function (vehicle, seatIndex) {
    let $res = natives.setPedIntoVehicle(this.handle, vehicle, seatIndex);
};
mp.Player.prototype.setAllowVehiclesOverride = function (toggle) {
    let $res = natives.setPedAllowVehiclesOverride(this.handle, toggle | 0);
};
mp.Ped.prototype.setAllowVehiclesOverride = function (toggle) {
    let $res = natives.setPedAllowVehiclesOverride(this.handle, toggle | 0);
};
mp.Vehicle.prototype.createRandomAsDriver = function (returnHandle) {
    let $res = natives.createRandomPedAsDriver(this.handle, returnHandle | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setMoveAnimsBlendOut = function () {
    let $res = natives.setPedMoveAnimsBlendOut(this.handle);
};
mp.Ped.prototype.setMoveAnimsBlendOut = function () {
    let $res = natives.setPedMoveAnimsBlendOut(this.handle);
};
mp.Player.prototype.setCanBeDraggedOut = function (toggle) {
    let $res = natives.setPedCanBeDraggedOut(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanBeDraggedOut = function (toggle) {
    let $res = natives.setPedCanBeDraggedOut(this.handle, toggle | 0);
};
mp.Player.prototype.isMale = function () {
    let $res = natives.isPedMale(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isMale = function () {
    let $res = natives.isPedMale(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isHuman = function () {
    let $res = natives.isPedHuman(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHuman = function () {
    let $res = natives.isPedHuman(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getVehicleIsIn = function (includeLastVehicle) {
    let $res = natives.getVehiclePedIsIn(this.handle, includeLastVehicle | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.resetLastVehicle = function () {
    let $res = natives.resetPedLastVehicle(this.handle);
};
mp.Ped.prototype.resetLastVehicle = function () {
    let $res = natives.resetPedLastVehicle(this.handle);
};
mp.Player.prototype.setDensityMultiplierThisFrame = function () {
    let $res = natives.setPedDensityMultiplierThisFrame(this.handle);
};
mp.Ped.prototype.setDensityMultiplierThisFrame = function () {
    let $res = natives.setPedDensityMultiplierThisFrame(this.handle);
};
mp.Player.prototype.setNonCreationArea = function (y1, z1, x2, y2, z2) {
    let $res = natives.setPedNonCreationArea(this.handle, y1, z1, x2, y2, z2);
};
mp.Ped.prototype.setNonCreationArea = function (y1, z1, x2, y2, z2) {
    let $res = natives.setPedNonCreationArea(this.handle, y1, z1, x2, y2, z2);
};
mp.Player.prototype.isOnMount = function () {
    let $res = natives.isPedOnMount(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isOnMount = function () {
    let $res = natives.isPedOnMount(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getMount = function () {
    let $res = natives.getMount(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getMount = function () {
    let $res = natives.getMount(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.isOnVehicle = function () {
    let $res = natives.isPedOnVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isOnVehicle = function () {
    let $res = natives.isPedOnVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isOnSpecificVehicle = function (vehicle) {
    let $res = natives.isPedOnSpecificVehicle(this.handle, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isOnSpecificVehicle = function (vehicle) {
    let $res = natives.isPedOnSpecificVehicle(this.handle, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setMoney = function (amount) {
    let $res = natives.setPedMoney(this.handle, amount);
};
mp.Ped.prototype.setMoney = function (amount) {
    let $res = natives.setPedMoney(this.handle, amount);
};
mp.Player.prototype.getMoney = function () {
    let $res = natives.getPedMoney(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getMoney = function () {
    let $res = natives.getPedMoney(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setSuffersCriticalHits = function (toggle) {
    let $res = natives.setPedSuffersCriticalHits(this.handle, toggle | 0);
};
mp.Ped.prototype.setSuffersCriticalHits = function (toggle) {
    let $res = natives.setPedSuffersCriticalHits(this.handle, toggle | 0);
};
mp.Player.prototype.isSittingInVehicle = function (vehicle) {
    let $res = natives.isPedSittingInVehicle(this.handle, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isSittingInVehicle = function (vehicle) {
    let $res = natives.isPedSittingInVehicle(this.handle, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isSittingInAnyVehicle = function () {
    let $res = natives.isPedSittingInAnyVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isSittingInAnyVehicle = function () {
    let $res = natives.isPedSittingInAnyVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isOnFoot = function () {
    let $res = natives.isPedOnFoot(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isOnFoot = function () {
    let $res = natives.isPedOnFoot(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isOnAnyBike = function () {
    let $res = natives.isPedOnAnyBike(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isOnAnyBike = function () {
    let $res = natives.isPedOnAnyBike(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPlantingBomb = function () {
    let $res = natives.isPedPlantingBomb(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPlantingBomb = function () {
    let $res = natives.isPedPlantingBomb(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getDeadPickupCoords = function (p1, p2) {
    let $res = natives.getDeadPedPickupCoords(this.handle, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getDeadPickupCoords = function (p1, p2) {
    let $res = natives.getDeadPedPickupCoords(this.handle, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.isInAnyBoat = function () {
    let $res = natives.isPedInAnyBoat(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInAnyBoat = function () {
    let $res = natives.isPedInAnyBoat(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInAnySub = function () {
    let $res = natives.isPedInAnySub(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInAnySub = function () {
    let $res = natives.isPedInAnySub(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInAnyHeli = function () {
    let $res = natives.isPedInAnyHeli(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInAnyHeli = function () {
    let $res = natives.isPedInAnyHeli(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInAnyPlane = function () {
    let $res = natives.isPedInAnyPlane(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInAnyPlane = function () {
    let $res = natives.isPedInAnyPlane(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInFlyingVehicle = function () {
    let $res = natives.isPedInFlyingVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInFlyingVehicle = function () {
    let $res = natives.isPedInFlyingVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setDiesInWater = function (toggle) {
    let $res = natives.setPedDiesInWater(this.handle, toggle | 0);
};
mp.Ped.prototype.setDiesInWater = function (toggle) {
    let $res = natives.setPedDiesInWater(this.handle, toggle | 0);
};
mp.Player.prototype.setDiesInSinkingVehicle = function (toggle) {
    let $res = natives.setPedDiesInSinkingVehicle(this.handle, toggle | 0);
};
mp.Ped.prototype.setDiesInSinkingVehicle = function (toggle) {
    let $res = natives.setPedDiesInSinkingVehicle(this.handle, toggle | 0);
};
mp.Player.prototype.getArmour = function () {
    let $res = natives.getPedArmour(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getArmour = function () {
    let $res = natives.getPedArmour(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setStayInVehicleWhenJacked = function (toggle) {
    let $res = natives.setPedStayInVehicleWhenJacked(this.handle, toggle | 0);
};
mp.Ped.prototype.setStayInVehicleWhenJacked = function (toggle) {
    let $res = natives.setPedStayInVehicleWhenJacked(this.handle, toggle | 0);
};
mp.Player.prototype.setCanBeShotInVehicle = function (toggle) {
    let $res = natives.setPedCanBeShotInVehicle(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanBeShotInVehicle = function (toggle) {
    let $res = natives.setPedCanBeShotInVehicle(this.handle, toggle | 0);
};
mp.Player.prototype.getLastDamageBone = function () {
    let $res = natives.getPedLastDamageBone(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outBone = $res[1];
    return $res[0] == 1 ? $resObj.outBone : undefined;
};
mp.Ped.prototype.getLastDamageBone = function () {
    let $res = natives.getPedLastDamageBone(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outBone = $res[1];
    return $res[0] == 1 ? $resObj.outBone : undefined;
};
mp.Player.prototype.clearLastDamageBone = function () {
    let $res = natives.clearPedLastDamageBone(this.handle);
};
mp.Ped.prototype.clearLastDamageBone = function () {
    let $res = natives.clearPedLastDamageBone(this.handle);
};
mp.Player.prototype.setCanBeTargetted = function (toggle) {
    let $res = natives.setPedCanBeTargetted(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanBeTargetted = function (toggle) {
    let $res = natives.setPedCanBeTargetted(this.handle, toggle | 0);
};
mp.Player.prototype.setCanBeTargettedByTeam = function (team, toggle) {
    let $res = natives.setPedCanBeTargettedByTeam(this.handle, team, toggle | 0);
};
mp.Ped.prototype.setCanBeTargettedByTeam = function (team, toggle) {
    let $res = natives.setPedCanBeTargettedByTeam(this.handle, team, toggle | 0);
};
mp.Player.prototype.setCanBeTargettedByPlayer = function (player, toggle) {
    let $res = natives.setPedCanBeTargettedByPlayer(this.handle, player, toggle | 0);
};
mp.Ped.prototype.setCanBeTargettedByPlayer = function (player, toggle) {
    let $res = natives.setPedCanBeTargettedByPlayer(this.handle, player, toggle | 0);
};
mp.Player.prototype.isInAnyPoliceVehicle = function () {
    let $res = natives.isPedInAnyPoliceVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInAnyPoliceVehicle = function () {
    let $res = natives.isPedInAnyPoliceVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.forceToOpenParachute = function () {
    let $res = natives.forcePedToOpenParachute(this.handle);
};
mp.Ped.prototype.forceToOpenParachute = function () {
    let $res = natives.forcePedToOpenParachute(this.handle);
};
mp.Player.prototype.isInParachuteFreeFall = function () {
    let $res = natives.isPedInParachuteFreeFall(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInParachuteFreeFall = function () {
    let $res = natives.isPedInParachuteFreeFall(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isFalling = function () {
    let $res = natives.isPedFalling(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isFalling = function () {
    let $res = natives.isPedFalling(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isJumping = function () {
    let $res = natives.isPedJumping(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isJumping = function () {
    let $res = natives.isPedJumping(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isClimbing = function () {
    let $res = natives.isPedClimbing(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isClimbing = function () {
    let $res = natives.isPedClimbing(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isVaulting = function () {
    let $res = natives.isPedVaulting(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isVaulting = function () {
    let $res = natives.isPedVaulting(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isDiving = function () {
    let $res = natives.isPedDiving(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isDiving = function () {
    let $res = natives.isPedDiving(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isJumpingOutOfVehicle = function () {
    let $res = natives.isPedJumpingOutOfVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isJumpingOutOfVehicle = function () {
    let $res = natives.isPedJumpingOutOfVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isOpeningADoor = function () {
    let $res = natives.isPedOpeningDoor(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isOpeningADoor = function () {
    let $res = natives.isPedOpeningDoor(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getParachuteState = function () {
    let $res = natives.getPedParachuteState(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getParachuteState = function () {
    let $res = natives.getPedParachuteState(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getParachuteLandingType = function () {
    let $res = natives.getPedParachuteLandingType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getParachuteLandingType = function () {
    let $res = natives.getPedParachuteLandingType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setParachuteTintIndex = function (tintIndex) {
    let $res = natives.setPedParachuteTintIndex(this.handle, tintIndex);
};
mp.Ped.prototype.setParachuteTintIndex = function (tintIndex) {
    let $res = natives.setPedParachuteTintIndex(this.handle, tintIndex);
};
mp.Player.prototype.getParachuteTintIndex = function () {
    let $res = natives.getPedParachuteTintIndex(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outTintIndex = $res[1];
    return $resObj.outTintIndex;
};
mp.Ped.prototype.getParachuteTintIndex = function () {
    let $res = natives.getPedParachuteTintIndex(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outTintIndex = $res[1];
    return $resObj.outTintIndex;
};
mp.Player.prototype.setReserveParachuteTintIndex = function (p1) {
    let $res = natives.setPedReserveParachuteTintIndex(this.handle, p1);
};
mp.Ped.prototype.setReserveParachuteTintIndex = function (p1) {
    let $res = natives.setPedReserveParachuteTintIndex(this.handle, p1);
};
mp.Player.prototype.createParachuteBagObject = function (p1, p2) {
    let $res = natives.createParachuteBagObject(this.handle, p1 | 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.createParachuteBagObject = function (p1, p2) {
    let $res = natives.createParachuteBagObject(this.handle, p1 | 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setDucking = function (toggle) {
    let $res = natives.setPedDucking(this.handle, toggle | 0);
};
mp.Ped.prototype.setDucking = function (toggle) {
    let $res = natives.setPedDucking(this.handle, toggle | 0);
};
mp.Player.prototype.isDucking = function () {
    let $res = natives.isPedDucking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isDucking = function () {
    let $res = natives.isPedDucking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInAnyTaxi = function () {
    let $res = natives.isPedInAnyTaxi(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInAnyTaxi = function () {
    let $res = natives.isPedInAnyTaxi(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setIdRange = function (value) {
    let $res = natives.setPedIdRange(this.handle, value);
};
mp.Ped.prototype.setIdRange = function (value) {
    let $res = natives.setPedIdRange(this.handle, value);
};
mp.Player.prototype.setHighlyPerceptive = function (toggle) {
    let $res = natives.setPedHighlyPerceptive(this.handle, toggle | 0);
};
mp.Ped.prototype.setHighlyPerceptive = function (toggle) {
    let $res = natives.setPedHighlyPerceptive(this.handle, toggle | 0);
};
mp.Player.prototype.setSeeingRange = function (value) {
    let $res = natives.setPedSeeingRange(this.handle, value);
};
mp.Ped.prototype.setSeeingRange = function (value) {
    let $res = natives.setPedSeeingRange(this.handle, value);
};
mp.Player.prototype.setHearingRange = function (value) {
    let $res = natives.setPedHearingRange(this.handle, value);
};
mp.Ped.prototype.setHearingRange = function (value) {
    let $res = natives.setPedHearingRange(this.handle, value);
};
mp.Player.prototype.setVisualFieldMinAngle = function (value) {
    let $res = natives.setPedVisualFieldMinAngle(this.handle, value);
};
mp.Ped.prototype.setVisualFieldMinAngle = function (value) {
    let $res = natives.setPedVisualFieldMinAngle(this.handle, value);
};
mp.Player.prototype.setVisualFieldMaxAngle = function (value) {
    let $res = natives.setPedVisualFieldMaxAngle(this.handle, value);
};
mp.Ped.prototype.setVisualFieldMaxAngle = function (value) {
    let $res = natives.setPedVisualFieldMaxAngle(this.handle, value);
};
mp.Player.prototype.setVisualFieldMinElevationAngle = function (angle) {
    let $res = natives.setPedVisualFieldMinElevationAngle(this.handle, angle);
};
mp.Ped.prototype.setVisualFieldMinElevationAngle = function (angle) {
    let $res = natives.setPedVisualFieldMinElevationAngle(this.handle, angle);
};
mp.Player.prototype.setVisualFieldMaxElevationAngle = function (angle) {
    let $res = natives.setPedVisualFieldMaxElevationAngle(this.handle, angle);
};
mp.Ped.prototype.setVisualFieldMaxElevationAngle = function (angle) {
    let $res = natives.setPedVisualFieldMaxElevationAngle(this.handle, angle);
};
mp.Player.prototype.setVisualFieldPeripheralRange = function (range) {
    let $res = natives.setPedVisualFieldPeripheralRange(this.handle, range);
};
mp.Ped.prototype.setVisualFieldPeripheralRange = function (range) {
    let $res = natives.setPedVisualFieldPeripheralRange(this.handle, range);
};
mp.Player.prototype.setVisualFieldCenterAngle = function (angle) {
    let $res = natives.setPedVisualFieldCenterAngle(this.handle, angle);
};
mp.Ped.prototype.setVisualFieldCenterAngle = function (angle) {
    let $res = natives.setPedVisualFieldCenterAngle(this.handle, angle);
};
mp.Player.prototype.getVisualFieldCenterAngle = function () {
    let $res = natives.getPedVisualFieldCenterAngle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getVisualFieldCenterAngle = function () {
    let $res = natives.getPedVisualFieldCenterAngle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setStealthMovement = function (p1, action) {
    let $res = natives.setPedStealthMovement(this.handle, p1 | 0, action);
};
mp.Ped.prototype.setStealthMovement = function (p1, action) {
    let $res = natives.setPedStealthMovement(this.handle, p1 | 0, action);
};
mp.Player.prototype.getStealthMovement = function () {
    let $res = natives.getPedStealthMovement(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getStealthMovement = function () {
    let $res = natives.getPedStealthMovement(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setAsGroupLeader = function (groupId) {
    let $res = natives.setPedAsGroupLeader(this.handle, groupId);
};
mp.Ped.prototype.setAsGroupLeader = function (groupId) {
    let $res = natives.setPedAsGroupLeader(this.handle, groupId);
};
mp.Player.prototype.setAsGroupMember = function (groupId) {
    let $res = natives.setPedAsGroupMember(this.handle, groupId);
};
mp.Ped.prototype.setAsGroupMember = function (groupId) {
    let $res = natives.setPedAsGroupMember(this.handle, groupId);
};
mp.Player.prototype.setCanTeleportToGroupLeader = function (groupHandle, toggle) {
    let $res = natives.setPedCanTeleportToGroupLeader(this.handle, groupHandle, toggle | 0);
};
mp.Ped.prototype.setCanTeleportToGroupLeader = function (groupHandle, toggle) {
    let $res = natives.setPedCanTeleportToGroupLeader(this.handle, groupHandle, toggle | 0);
};
mp.Player.prototype.removeFromGroup = function () {
    let $res = natives.removePedFromGroup(this.handle);
};
mp.Ped.prototype.removeFromGroup = function () {
    let $res = natives.removePedFromGroup(this.handle);
};
mp.Player.prototype.isGroupMember = function (groupId) {
    let $res = natives.isPedGroupMember(this.handle, groupId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isGroupMember = function (groupId) {
    let $res = natives.isPedGroupMember(this.handle, groupId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isHangingOnToVehicle = function () {
    let $res = natives.isPedHangingOnToVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHangingOnToVehicle = function () {
    let $res = natives.isPedHangingOnToVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setMinGroundTimeForStungun = function (ms) {
    let $res = natives.setPedMinGroundTimeForStungun(this.handle, ms);
};
mp.Ped.prototype.setMinGroundTimeForStungun = function (ms) {
    let $res = natives.setPedMinGroundTimeForStungun(this.handle, ms);
};
mp.Player.prototype.isProne = function () {
    let $res = natives.isPedProne(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isProne = function () {
    let $res = natives.isPedProne(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInCombat = function (target) {
    let $res = natives.isPedInCombat(this.handle, target);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInCombat = function (target) {
    let $res = natives.isPedInCombat(this.handle, target);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getTaskCombatTarget = function (p1) {
    let $res = natives.getPedTargetFromCombatPed(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getTaskCombatTarget = function (p1) {
    let $res = natives.getPedTargetFromCombatPed(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.canInCombatSeeTarget = function (target) {
    let $res = natives.canPedInCombatSeeTarget(this.handle, target);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.canInCombatSeeTarget = function (target) {
    let $res = natives.canPedInCombatSeeTarget(this.handle, target);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isDoingDriveby = function () {
    let $res = natives.isPedDoingDriveby(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isDoingDriveby = function () {
    let $res = natives.isPedDoingDriveby(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isJacking = function () {
    let $res = natives.isPedJacking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isJacking = function () {
    let $res = natives.isPedJacking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isBeingJacked = function () {
    let $res = natives.isPedBeingJacked(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isBeingJacked = function () {
    let $res = natives.isPedBeingJacked(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isBeingStunned = function (p1) {
    let $res = natives.isPedBeingStunned(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isBeingStunned = function (p1) {
    let $res = natives.isPedBeingStunned(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getPedsJacker = function () {
    let $res = natives.getPedsJacker(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedsJacker = function () {
    let $res = natives.getPedsJacker(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getJackTarget = function () {
    let $res = natives.getJackTarget(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getJackTarget = function () {
    let $res = natives.getJackTarget(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.isFleeing = function () {
    let $res = natives.isPedFleeing(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isFleeing = function () {
    let $res = natives.isPedFleeing(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInCover = function (exceptUseWeapon) {
    let $res = natives.isPedInCover(this.handle, exceptUseWeapon | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInCover = function (exceptUseWeapon) {
    let $res = natives.isPedInCover(this.handle, exceptUseWeapon | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInCoverFacingLeft = function () {
    let $res = natives.isPedInCoverFacingLeft(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInCoverFacingLeft = function () {
    let $res = natives.isPedInCoverFacingLeft(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isInHighCover = function () {
    let $res = natives.isPedInHighCover(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInHighCover = function () {
    let $res = natives.isPedInHighCover(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isGoingIntoCover = function () {
    let $res = natives.isPedGoingIntoCover(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isGoingIntoCover = function () {
    let $res = natives.isPedGoingIntoCover(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setPinnedDown = function (pinned, i) {
    let $res = natives.setPedPinnedDown(this.handle, pinned | 0, i);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.setPinnedDown = function (pinned, i) {
    let $res = natives.setPedPinnedDown(this.handle, pinned | 0, i);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getSeatIsTryingToEnter = function () {
    let $res = natives.getSeatPedIsTryingToEnter(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getSeatIsTryingToEnter = function () {
    let $res = natives.getSeatPedIsTryingToEnter(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getVehicleIsTryingToEnter = function () {
    let $res = natives.getVehiclePedIsTryingToEnter(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getSourceOfDeath = function () {
    let $res = natives.getPedSourceOfDeath(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getSourceOfDeath = function () {
    let $res = natives.getPedSourceOfDeath(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getCauseOfDeath = function () {
    let $res = natives.getPedCauseOfDeath(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getCauseOfDeath = function () {
    let $res = natives.getPedCauseOfDeath(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getTimeOfDeath = function () {
    let $res = natives.getPedTimeOfDeath(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getTimeOfDeath = function () {
    let $res = natives.getPedTimeOfDeath(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setRelationshipGroupDefaultHash = function (hash) {
    let $res = natives.setPedRelationshipGroupDefaultHash(this.handle, hash);
};
mp.Ped.prototype.setRelationshipGroupDefaultHash = function (hash) {
    let $res = natives.setPedRelationshipGroupDefaultHash(this.handle, hash);
};
mp.Player.prototype.setRelationshipGroupHash = function (hash) {
    let $res = natives.setPedRelationshipGroupHash(this.handle, hash);
};
mp.Ped.prototype.setRelationshipGroupHash = function (hash) {
    let $res = natives.setPedRelationshipGroupHash(this.handle, hash);
};
mp.Player.prototype.getRelationshipBetweenS = function (ped2) {
    let $res = natives.getRelationshipBetweenPeds(this.handle, ped2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getRelationshipBetweenS = function (ped2) {
    let $res = natives.getRelationshipBetweenPeds(this.handle, ped2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getRelationshipGroupDefaultHash = function () {
    let $res = natives.getPedRelationshipGroupDefaultHash(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getRelationshipGroupDefaultHash = function () {
    let $res = natives.getPedRelationshipGroupDefaultHash(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getRelationshipGroupHash = function () {
    let $res = natives.getPedRelationshipGroupHash(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getRelationshipGroupHash = function () {
    let $res = natives.getPedRelationshipGroupHash(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setCanBeTargetedWithoutLos = function (toggle) {
    let $res = natives.setPedCanBeTargetedWithoutLos(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanBeTargetedWithoutLos = function (toggle) {
    let $res = natives.setPedCanBeTargetedWithoutLos(this.handle, toggle | 0);
};
mp.Player.prototype.setToInformRespectedFriends = function (radius, maxFriends) {
    let $res = natives.setPedToInformRespectedFriends(this.handle, radius, maxFriends);
};
mp.Ped.prototype.setToInformRespectedFriends = function (radius, maxFriends) {
    let $res = natives.setPedToInformRespectedFriends(this.handle, radius, maxFriends);
};
mp.Player.prototype.isRespondingToEvent = function (event) {
    let $res = natives.isPedRespondingToEvent(this.handle, event);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isRespondingToEvent = function (event) {
    let $res = natives.isPedRespondingToEvent(this.handle, event);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getEventData = function (eventType) {
    let $res = natives.getPosFromFiredEvent(this.handle, eventType, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outData = $res[0];
    return $res[0] == 1 ? $resObj.outData : undefined;
};
mp.Ped.prototype.getEventData = function (eventType) {
    let $res = natives.getPosFromFiredEvent(this.handle, eventType, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outData = $res[0];
    return $res[0] == 1 ? $resObj.outData : undefined;
};
mp.Player.prototype.setFiringPattern = function (patternHash) {
    let $res = natives.setPedFiringPattern(this.handle, patternHash);
};
mp.Ped.prototype.setFiringPattern = function (patternHash) {
    let $res = natives.setPedFiringPattern(this.handle, patternHash);
};
mp.Player.prototype.setShootRate = function (shootRate) {
    let $res = natives.setPedShootRate(this.handle, shootRate);
};
mp.Ped.prototype.setShootRate = function (shootRate) {
    let $res = natives.setPedShootRate(this.handle, shootRate);
};
mp.Player.prototype.setCombatFloat = function (combatType, p2) {
    let $res = natives.setCombatFloat(this.handle, combatType, p2);
};
mp.Ped.prototype.setCombatFloat = function (combatType, p2) {
    let $res = natives.setCombatFloat(this.handle, combatType, p2);
};
mp.Player.prototype.getCombatFloat = function (p1) {
    let $res = natives.getCombatFloat(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getCombatFloat = function (p1) {
    let $res = natives.getCombatFloat(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getGroupIndex = function () {
    let $res = natives.getPedGroupIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getGroupIndex = function () {
    let $res = natives.getPedGroupIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.isInGroup = function () {
    let $res = natives.isPedInGroup(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInGroup = function () {
    let $res = natives.isPedInGroup(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getPlayerIsFollowing = function () {
    let $res = natives.getPlayerPedIsFollowing(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPlayerIsFollowing = function () {
    let $res = natives.getPlayerPedIsFollowing(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getVehicleIsUsing = function () {
    let $res = natives.getVehiclePedIsUsing(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getVehicleIsEntering = function () {
    let $res = natives.getVehiclePedIsEntering(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setGravity = function (toggle) {
    let $res = natives.setPedGravity(this.handle, toggle | 0);
};
mp.Ped.prototype.setGravity = function (toggle) {
    let $res = natives.setPedGravity(this.handle, toggle | 0);
};
mp.Player.prototype.applyDamageTo = function (damageAmount, p2, p3) {
    let $res = natives.applyDamageToPed(this.handle, damageAmount, p2 | 0, p3 | 0);
};
mp.Ped.prototype.applyDamageTo = function (damageAmount, p2, p3) {
    let $res = natives.applyDamageToPed(this.handle, damageAmount, p2 | 0, p3 | 0);
};
mp.Player.prototype.getTimeOfLastWeaponDamage = function (weaponHash) {
    let $res = natives.getTimePedDamagedByWeapon(this.handle, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getTimeOfLastWeaponDamage = function (weaponHash) {
    let $res = natives.getTimePedDamagedByWeapon(this.handle, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setAllowedToDuck = function (toggle) {
    let $res = natives.setPedAllowedToDuck(this.handle, toggle | 0);
};
mp.Ped.prototype.setAllowedToDuck = function (toggle) {
    let $res = natives.setPedAllowedToDuck(this.handle, toggle | 0);
};
mp.Player.prototype.setNeverLeavesGroup = function (toggle) {
    let $res = natives.setPedNeverLeavesGroup(this.handle, toggle | 0);
};
mp.Ped.prototype.setNeverLeavesGroup = function (toggle) {
    let $res = natives.setPedNeverLeavesGroup(this.handle, toggle | 0);
};
mp.Player.prototype.getType = function () {
    let $res = natives.getPedType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getType = function () {
    let $res = natives.getPedType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setAsCop = function (toggle) {
    let $res = natives.setPedAsCop(this.handle, toggle | 0);
};
mp.Ped.prototype.setAsCop = function (toggle) {
    let $res = natives.setPedAsCop(this.handle, toggle | 0);
};
mp.Player.prototype.setMaxHealth = function (value) {
    let $res = natives.setPedMaxHealth(this.handle, value);
};
mp.Ped.prototype.setMaxHealth = function (value) {
    let $res = natives.setPedMaxHealth(this.handle, value);
};
mp.Player.prototype.getMaxHealth = function () {
    let $res = natives.getPedMaxHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getMaxHealth = function () {
    let $res = natives.getPedMaxHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setMaxTimeInWater = function (value) {
    let $res = natives.setPedMaxTimeInWater(this.handle, value);
};
mp.Ped.prototype.setMaxTimeInWater = function (value) {
    let $res = natives.setPedMaxTimeInWater(this.handle, value);
};
mp.Player.prototype.setMaxTimeUnderwater = function (value) {
    let $res = natives.setPedMaxTimeUnderwater(this.handle, value);
};
mp.Ped.prototype.setMaxTimeUnderwater = function (value) {
    let $res = natives.setPedMaxTimeUnderwater(this.handle, value);
};
mp.Player.prototype.setVehicleForcedSeatUsage = function (vehicle, seatIndex, flags, p4) {
    let $res = natives.setPedVehicleForcedSeatUsage(this.handle, vehicle, seatIndex, flags, p4);
};
mp.Ped.prototype.setVehicleForcedSeatUsage = function (vehicle, seatIndex, flags, p4) {
    let $res = natives.setPedVehicleForcedSeatUsage(this.handle, vehicle, seatIndex, flags, p4);
};
mp.Player.prototype.clearAllVehicleForcedSeatUsage = function () {
    let $res = natives.clearAllPedVehicleForcedSeatUsage(this.handle);
};
mp.Ped.prototype.clearAllVehicleForcedSeatUsage = function () {
    let $res = natives.clearAllPedVehicleForcedSeatUsage(this.handle);
};
mp.Player.prototype.setCanBeKnockedOffVehicle = function (state) {
    let $res = natives.setPedCanBeKnockedOffVehicle(this.handle, state);
};
mp.Ped.prototype.setCanBeKnockedOffVehicle = function (state) {
    let $res = natives.setPedCanBeKnockedOffVehicle(this.handle, state);
};
mp.Player.prototype.canKnockOffVehicle = function () {
    let $res = natives.canKnockPedOffVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.canKnockOffVehicle = function () {
    let $res = natives.canKnockPedOffVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.knockOffVehicle = function () {
    let $res = natives.knockPedOffVehicle(this.handle);
};
mp.Ped.prototype.knockOffVehicle = function () {
    let $res = natives.knockPedOffVehicle(this.handle);
};
mp.Player.prototype.setCoordsNoGang = function (posX, posY, posZ) {
    let $res = natives.setPedCoordsNoGang(this.handle, posX, posY, posZ);
};
mp.Ped.prototype.setCoordsNoGang = function (posX, posY, posZ) {
    let $res = natives.setPedCoordsNoGang(this.handle, posX, posY, posZ);
};
mp.Player.prototype.getAsGroupMember = function (memberNumber) {
    let $res = natives.getPedAsGroupMember(this.handle, memberNumber);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAsGroupMember = function (memberNumber) {
    let $res = natives.getPedAsGroupMember(this.handle, memberNumber);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getAsGroupLeader = function () {
    let $res = natives.getPedAsGroupLeader(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAsGroupLeader = function () {
    let $res = natives.getPedAsGroupLeader(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setKeepTask = function (toggle) {
    let $res = natives.setPedKeepTask(this.handle, toggle | 0);
};
mp.Ped.prototype.setKeepTask = function (toggle) {
    let $res = natives.setPedKeepTask(this.handle, toggle | 0);
};
mp.Player.prototype.isSwimming = function () {
    let $res = natives.isPedSwimming(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isSwimming = function () {
    let $res = natives.isPedSwimming(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isSwimmingUnderWater = function () {
    let $res = natives.isPedSwimmingUnderWater(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isSwimmingUnderWater = function () {
    let $res = natives.isPedSwimmingUnderWater(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setCoordsKeepVehicle = function (posX, posY, posZ) {
    let $res = natives.setPedCoordsKeepVehicle(this.handle, posX, posY, posZ);
};
mp.Ped.prototype.setCoordsKeepVehicle = function (posX, posY, posZ) {
    let $res = natives.setPedCoordsKeepVehicle(this.handle, posX, posY, posZ);
};
mp.Player.prototype.setDiesInVehicle = function (toggle) {
    let $res = natives.setPedDiesInVehicle(this.handle, toggle | 0);
};
mp.Ped.prototype.setDiesInVehicle = function (toggle) {
    let $res = natives.setPedDiesInVehicle(this.handle, toggle | 0);
};
mp.Player.prototype.setAsEnemy = function (toggle) {
    let $res = natives.setPedAsEnemy(this.handle, toggle | 0);
};
mp.Ped.prototype.setAsEnemy = function (toggle) {
    let $res = natives.setPedAsEnemy(this.handle, toggle | 0);
};
mp.Player.prototype.setCanSmashGlass = function (p1, p2) {
    let $res = natives.setPedCanSmashGlass(this.handle, p1 | 0, p2 | 0);
};
mp.Ped.prototype.setCanSmashGlass = function (p1, p2) {
    let $res = natives.setPedCanSmashGlass(this.handle, p1 | 0, p2 | 0);
};
mp.Player.prototype.isInAnyTrain = function () {
    let $res = natives.isPedInAnyTrain(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isInAnyTrain = function () {
    let $res = natives.isPedInAnyTrain(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isGettingIntoAVehicle = function () {
    let $res = natives.isPedGettingIntoAVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isGettingIntoAVehicle = function () {
    let $res = natives.isPedGettingIntoAVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isTryingToEnterALockedVehicle = function () {
    let $res = natives.isPedTryingToEnterALockedVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isTryingToEnterALockedVehicle = function () {
    let $res = natives.isPedTryingToEnterALockedVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setEnableHandcuffs = function (toggle) {
    let $res = natives.setEnableHandcuffs(this.handle, toggle | 0);
};
mp.Ped.prototype.setEnableHandcuffs = function (toggle) {
    let $res = natives.setEnableHandcuffs(this.handle, toggle | 0);
};
mp.Player.prototype.setEnableBoundAnkles = function (toggle) {
    let $res = natives.setEnableBoundAnkles(this.handle, toggle | 0);
};
mp.Ped.prototype.setEnableBoundAnkles = function (toggle) {
    let $res = natives.setEnableBoundAnkles(this.handle, toggle | 0);
};
mp.Player.prototype.setEnableScuba = function (toggle) {
    let $res = natives.setEnableScuba(this.handle, toggle | 0);
};
mp.Ped.prototype.setEnableScuba = function (toggle) {
    let $res = natives.setEnableScuba(this.handle, toggle | 0);
};
mp.Player.prototype.setCanAttackFriendly = function (toggle, p2) {
    let $res = natives.setCanAttackFriendly(this.handle, toggle | 0, p2 | 0);
};
mp.Ped.prototype.setCanAttackFriendly = function (toggle, p2) {
    let $res = natives.setCanAttackFriendly(this.handle, toggle | 0, p2 | 0);
};
mp.Player.prototype.getAlertness = function () {
    let $res = natives.getPedAlertness(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAlertness = function () {
    let $res = natives.getPedAlertness(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setAlertness = function (value) {
    let $res = natives.setPedAlertness(this.handle, value);
};
mp.Ped.prototype.setAlertness = function (value) {
    let $res = natives.setPedAlertness(this.handle, value);
};
mp.Player.prototype.setGetOutUpsideDownVehicle = function (toggle) {
    let $res = natives.setPedGetOutUpsideDownVehicle(this.handle, toggle | 0);
};
mp.Ped.prototype.setGetOutUpsideDownVehicle = function (toggle) {
    let $res = natives.setPedGetOutUpsideDownVehicle(this.handle, toggle | 0);
};
mp.Player.prototype.setMovementClipset = function (clipSet, transitionSpeed) {
    let $res = natives.setPedMovementClipset(this.handle, clipSet, transitionSpeed);
};
mp.Ped.prototype.setMovementClipset = function (clipSet, transitionSpeed) {
    let $res = natives.setPedMovementClipset(this.handle, clipSet, transitionSpeed);
};
mp.Player.prototype.resetMovementClipset = function (p1) {
    let $res = natives.resetPedMovementClipset(this.handle, p1);
};
mp.Ped.prototype.resetMovementClipset = function (p1) {
    let $res = natives.resetPedMovementClipset(this.handle, p1);
};
mp.Player.prototype.setStrafeClipset = function (clipSet) {
    let $res = natives.setPedStrafeClipset(this.handle, clipSet);
};
mp.Ped.prototype.setStrafeClipset = function (clipSet) {
    let $res = natives.setPedStrafeClipset(this.handle, clipSet);
};
mp.Player.prototype.resetStrafeClipset = function () {
    let $res = natives.resetPedStrafeClipset(this.handle);
};
mp.Ped.prototype.resetStrafeClipset = function () {
    let $res = natives.resetPedStrafeClipset(this.handle);
};
mp.Player.prototype.setWeaponMovementClipset = function (clipSet) {
    let $res = natives.setPedWeaponMovementClipset(this.handle, clipSet);
};
mp.Ped.prototype.setWeaponMovementClipset = function (clipSet) {
    let $res = natives.setPedWeaponMovementClipset(this.handle, clipSet);
};
mp.Player.prototype.resetWeaponMovementClipset = function () {
    let $res = natives.resetPedWeaponMovementClipset(this.handle);
};
mp.Ped.prototype.resetWeaponMovementClipset = function () {
    let $res = natives.resetPedWeaponMovementClipset(this.handle);
};
mp.Player.prototype.setDriveByClipsetOverride = function (clipset) {
    let $res = natives.setPedDriveByClipsetOverride(this.handle, clipset);
};
mp.Ped.prototype.setDriveByClipsetOverride = function (clipset) {
    let $res = natives.setPedDriveByClipsetOverride(this.handle, clipset);
};
mp.Player.prototype.clearDriveByClipsetOverride = function () {
    let $res = natives.clearPedDriveByClipsetOverride(this.handle);
};
mp.Ped.prototype.clearDriveByClipsetOverride = function () {
    let $res = natives.clearPedDriveByClipsetOverride(this.handle);
};
mp.Player.prototype.setCoverClipsetOverride = function (p1) {
    let $res = natives.setPedMotionInCoverClipsetOverride(this.handle, p1);
};
mp.Ped.prototype.setCoverClipsetOverride = function (p1) {
    let $res = natives.setPedMotionInCoverClipsetOverride(this.handle, p1);
};
mp.Player.prototype.clearCoverClipsetOverride = function () {
    let $res = natives.clearPedMotionInCoverClipsetOverride(this.handle);
};
mp.Ped.prototype.clearCoverClipsetOverride = function () {
    let $res = natives.clearPedMotionInCoverClipsetOverride(this.handle);
};
mp.Player.prototype.setInVehicleContext = function (context) {
    let $res = natives.setPedInVehicleContext(this.handle, context);
};
mp.Ped.prototype.setInVehicleContext = function (context) {
    let $res = natives.setPedInVehicleContext(this.handle, context);
};
mp.Player.prototype.resetInVehicleContext = function () {
    let $res = natives.resetPedInVehicleContext(this.handle);
};
mp.Ped.prototype.resetInVehicleContext = function () {
    let $res = natives.resetPedInVehicleContext(this.handle);
};
mp.Player.prototype.isScriptedScenarioUsingConditionalAnim = function (animDict, anim) {
    let $res = natives.isScriptedScenarioPedUsingConditionalAnim(this.handle, animDict, anim);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isScriptedScenarioUsingConditionalAnim = function (animDict, anim) {
    let $res = natives.isScriptedScenarioPedUsingConditionalAnim(this.handle, animDict, anim);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setAlternateWalkAnim = function (animDict, animName, p3, p4) {
    let $res = natives.setPedAlternateWalkAnim(this.handle, animDict, animName, p3, p4 | 0);
};
mp.Ped.prototype.setAlternateWalkAnim = function (animDict, animName, p3, p4) {
    let $res = natives.setPedAlternateWalkAnim(this.handle, animDict, animName, p3, p4 | 0);
};
mp.Player.prototype.clearAlternateWalkAnim = function (p1) {
    let $res = natives.clearPedAlternateWalkAnim(this.handle, p1);
};
mp.Ped.prototype.clearAlternateWalkAnim = function (p1) {
    let $res = natives.clearPedAlternateWalkAnim(this.handle, p1);
};
mp.Player.prototype.setAlternateMovementAnim = function (stance, animDictionary, animationName, p4, p5) {
    let $res = natives.setPedAlternateMovementAnim(this.handle, stance, animDictionary, animationName, p4, p5 | 0);
};
mp.Ped.prototype.setAlternateMovementAnim = function (stance, animDictionary, animationName, p4, p5) {
    let $res = natives.setPedAlternateMovementAnim(this.handle, stance, animDictionary, animationName, p4, p5 | 0);
};
mp.Player.prototype.clearAlternateMovementAnim = function (stance, p2) {
    let $res = natives.clearPedAlternateMovementAnim(this.handle, stance, p2);
};
mp.Ped.prototype.clearAlternateMovementAnim = function (stance, p2) {
    let $res = natives.clearPedAlternateMovementAnim(this.handle, stance, p2);
};
mp.Player.prototype.setGestureGroup = function (animGroupGesture) {
    let $res = natives.setPedGestureGroup(this.handle, animGroupGesture);
};
mp.Ped.prototype.setGestureGroup = function (animGroupGesture) {
    let $res = natives.setPedGestureGroup(this.handle, animGroupGesture);
};
mp.Player.prototype.getDrawableVariation = function (componentId) {
    let $res = natives.getPedDrawableVariation(this.handle, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getDrawableVariation = function (componentId) {
    let $res = natives.getPedDrawableVariation(this.handle, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getNumberOfDrawableVariations = function (componentId) {
    let $res = natives.getNumberOfPedDrawableVariations(this.handle, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getNumberOfDrawableVariations = function (componentId) {
    let $res = natives.getNumberOfPedDrawableVariations(this.handle, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getTextureVariation = function (componentId) {
    let $res = natives.getPedTextureVariation(this.handle, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getTextureVariation = function (componentId) {
    let $res = natives.getPedTextureVariation(this.handle, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getNumberOfTextureVariations = function (componentId, drawableId) {
    let $res = natives.getNumberOfPedTextureVariations(this.handle, componentId, drawableId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getNumberOfTextureVariations = function (componentId, drawableId) {
    let $res = natives.getNumberOfPedTextureVariations(this.handle, componentId, drawableId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getNumberOfPropDrawableVariations = function (propId) {
    let $res = natives.getNumberOfPedPropDrawableVariations(this.handle, propId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getNumberOfPropDrawableVariations = function (propId) {
    let $res = natives.getNumberOfPedPropDrawableVariations(this.handle, propId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getNumberOfPropTextureVariations = function (propId, drawableId) {
    let $res = natives.getNumberOfPedPropTextureVariations(this.handle, propId, drawableId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getNumberOfPropTextureVariations = function (propId, drawableId) {
    let $res = natives.getNumberOfPedPropTextureVariations(this.handle, propId, drawableId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getPaletteVariation = function (componentId) {
    let $res = natives.getPedPaletteVariation(this.handle, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPaletteVariation = function (componentId) {
    let $res = natives.getPedPaletteVariation(this.handle, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.isComponentVariationValid = function (componentId, drawableId, textureId) {
    let $res = natives.isPedComponentVariationValid(this.handle, componentId, drawableId, textureId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isComponentVariationValid = function (componentId, drawableId, textureId) {
    let $res = natives.isPedComponentVariationValid(this.handle, componentId, drawableId, textureId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setComponentVariation = function (componentId, drawableId, textureId, paletteId) {
    let $res = natives.setPedComponentVariation(this.handle, componentId, drawableId, textureId, paletteId);
};
mp.Ped.prototype.setComponentVariation = function (componentId, drawableId, textureId, paletteId) {
    let $res = natives.setPedComponentVariation(this.handle, componentId, drawableId, textureId, paletteId);
};
mp.Player.prototype.setRandomComponentVariation = function (p1) {
    let $res = natives.setPedRandomComponentVariation(this.handle, p1 | 0);
};
mp.Ped.prototype.setRandomComponentVariation = function (p1) {
    let $res = natives.setPedRandomComponentVariation(this.handle, p1 | 0);
};
mp.Player.prototype.setRandomProps = function () {
    let $res = natives.setPedRandomProps(this.handle);
};
mp.Ped.prototype.setRandomProps = function () {
    let $res = natives.setPedRandomProps(this.handle);
};
mp.Player.prototype.setDefaultComponentVariation = function () {
    let $res = natives.setPedDefaultComponentVariation(this.handle);
};
mp.Ped.prototype.setDefaultComponentVariation = function () {
    let $res = natives.setPedDefaultComponentVariation(this.handle);
};
mp.Player.prototype.setBlendFromParents = function (p1, p2, p3, p4) {
    let $res = natives.setPedBlendFromParents(this.handle, p1, p2, p3, p4);
};
mp.Ped.prototype.setBlendFromParents = function (p1, p2, p3, p4) {
    let $res = natives.setPedBlendFromParents(this.handle, p1, p2, p3, p4);
};
mp.Player.prototype.setHeadBlendData = function (shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent) {
    let $res = natives.setPedHeadBlendData(this.handle, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent | 0);
};
mp.Ped.prototype.setHeadBlendData = function (shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent) {
    let $res = natives.setPedHeadBlendData(this.handle, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent | 0);
};
mp.Player.prototype.getHeadBlendData = function () {
    let $res = natives.getPedHeadBlendData(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.headBlendData = $res[0];
    return $res[0] == 1 ? $resObj.headBlendData : undefined;
};
mp.Ped.prototype.getHeadBlendData = function () {
    let $res = natives.getPedHeadBlendData(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.headBlendData = $res[0];
    return $res[0] == 1 ? $resObj.headBlendData : undefined;
};
mp.Player.prototype.updateHeadBlendData = function (shapeMix, skinMix, thirdMix) {
    let $res = natives.updatePedHeadBlendData(this.handle, shapeMix, skinMix, thirdMix);
};
mp.Ped.prototype.updateHeadBlendData = function (shapeMix, skinMix, thirdMix) {
    let $res = natives.updatePedHeadBlendData(this.handle, shapeMix, skinMix, thirdMix);
};
mp.Ped.prototype.setEyeColor = function (index) {
    let $res = natives.setHeadBlendEyeColor(this.handle, index);
};
mp.Player.prototype.getEyeColor = function () {
    let $res = natives.getHeadBlendEyeColor(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getEyeColor = function () {
    let $res = natives.getHeadBlendEyeColor(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.setHeadOverlay = function (overlayID, index, opacity) {
    let $res = natives.setPedHeadOverlay(this.handle, overlayID, index, opacity);
};
mp.Player.prototype.getHeadOverlayValue = function (overlayID) {
    let $res = natives.getPedHeadOverlay(this.handle, overlayID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHeadOverlayValue = function (overlayID) {
    let $res = natives.getPedHeadOverlay(this.handle, overlayID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getHeadOverlayNum = function () {
    let $res = natives.getPedHeadOverlayNum(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHeadOverlayNum = function () {
    let $res = natives.getPedHeadOverlayNum(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setHeadOverlayColor = function (overlayID, colorType, colorID, secondColorID) {
    let $res = natives.setPedHeadOverlayTint(this.handle, overlayID, colorType, colorID, secondColorID);
};
mp.Ped.prototype.setHeadOverlayColor = function (overlayID, colorType, colorID, secondColorID) {
    let $res = natives.setPedHeadOverlayTint(this.handle, overlayID, colorType, colorID, secondColorID);
};
mp.Ped.prototype.setHairColor = function (colorID, highlightColorID) {
    let $res = natives.setPedHairTint(this.handle, colorID, highlightColorID);
};
mp.Player.prototype.getHairRgbColor = function () {
    let $res = natives.getPedHairTintColor(this.handle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outR = $res[1];
    $resObj.outG = $res[2];
    $resObj.outB = $res[3];
    return $resObj;
};
mp.Ped.prototype.getHairRgbColor = function () {
    let $res = natives.getPedHairTintColor(this.handle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outR = $res[1];
    $resObj.outG = $res[2];
    $resObj.outB = $res[3];
    return $resObj;
};
mp.Player.prototype.getMakeupRgbColor = function () {
    let $res = natives.getPedMakeupTintColor(this.handle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outR = $res[1];
    $resObj.outG = $res[2];
    $resObj.outB = $res[3];
    return $resObj;
};
mp.Ped.prototype.getMakeupRgbColor = function () {
    let $res = natives.getPedMakeupTintColor(this.handle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outR = $res[1];
    $resObj.outG = $res[2];
    $resObj.outB = $res[3];
    return $resObj;
};
mp.Player.prototype.isHairColorValid2 = function () {
    let $res = natives.isPedHairTintForCreator(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHairColorValid2 = function () {
    let $res = natives.isPedHairTintForCreator(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isLipstickColorValid2 = function () {
    let $res = natives.isPedLipstickTintForCreator(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isLipstickColorValid2 = function () {
    let $res = natives.isPedLipstickTintForCreator(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isBlushColorValid2 = function () {
    let $res = natives.isPedBlushTintForCreator(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isBlushColorValid2 = function () {
    let $res = natives.isPedBlushTintForCreator(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isHairColorValid = function () {
    let $res = natives.isPedHairTintForBarber(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHairColorValid = function () {
    let $res = natives.isPedHairTintForBarber(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isLipstickColorValid = function () {
    let $res = natives.isPedLipstickTintForBarber(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isLipstickColorValid = function () {
    let $res = natives.isPedLipstickTintForBarber(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isBlushColorValid = function () {
    let $res = natives.isPedBlushTintForBarber(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isBlushColorValid = function () {
    let $res = natives.isPedBlushTintForBarber(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isBodyBlemishValid = function () {
    let $res = natives.isPedBlushFacepaintTintForBarber(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isBodyBlemishValid = function () {
    let $res = natives.isPedBlushFacepaintTintForBarber(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.setFaceFeature = function (index, scale) {
    let $res = natives.setPedMicroMorph(this.handle, index, scale);
};
mp.Player.prototype.hasHeadBlendFinished = function () {
    let $res = natives.hasPedHeadBlendFinished(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasHeadBlendFinished = function () {
    let $res = natives.hasPedHeadBlendFinished(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.finalizeHeadBlend = function () {
    let $res = natives.finalizeHeadBlend(this.handle);
};
mp.Ped.prototype.finalizeHeadBlend = function () {
    let $res = natives.finalizeHeadBlend(this.handle);
};
mp.Player.prototype.setHeadBlendPaletteColor = function (r, g, b, id) {
    let $res = natives.setHeadBlendPaletteColor(this.handle, r, g, b, id);
};
mp.Ped.prototype.setHeadBlendPaletteColor = function (r, g, b, id) {
    let $res = natives.setHeadBlendPaletteColor(this.handle, r, g, b, id);
};
mp.Player.prototype.disableHeadBlendPaletteColor = function () {
    let $res = natives.disableHeadBlendPaletteColor(this.handle);
};
mp.Ped.prototype.disableHeadBlendPaletteColor = function () {
    let $res = natives.disableHeadBlendPaletteColor(this.handle);
};
mp.Player.prototype.getHeadBlendFirstIndex = function () {
    let $res = natives.getPedHeadBlendFirstIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHeadBlendFirstIndex = function () {
    let $res = natives.getPedHeadBlendFirstIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getHeadBlendNumHeads = function () {
    let $res = natives.getPedHeadBlendNumHeads(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHeadBlendNumHeads = function () {
    let $res = natives.getPedHeadBlendNumHeads(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setPreloadVariationData = function (slot, drawableId, textureId) {
    let $res = natives.setPedPreloadVariationData(this.handle, slot, drawableId, textureId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.setPreloadVariationData = function (slot, drawableId, textureId) {
    let $res = natives.setPedPreloadVariationData(this.handle, slot, drawableId, textureId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.hasPreloadVariationDataFinished = function () {
    let $res = natives.hasPedPreloadVariationDataFinished(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasPreloadVariationDataFinished = function () {
    let $res = natives.hasPedPreloadVariationDataFinished(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.releasePreloadVariationData = function () {
    let $res = natives.releasePedPreloadVariationData(this.handle);
};
mp.Ped.prototype.releasePreloadVariationData = function () {
    let $res = natives.releasePedPreloadVariationData(this.handle);
};
mp.Player.prototype.setPreloadPropData = function (componentId, drawableId, TextureId) {
    let $res = natives.setPedPreloadPropData(this.handle, componentId, drawableId, TextureId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.setPreloadPropData = function (componentId, drawableId, TextureId) {
    let $res = natives.setPedPreloadPropData(this.handle, componentId, drawableId, TextureId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasPreloadPropDataFinished = function () {
    let $res = natives.hasPedPreloadPropDataFinished(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasPreloadPropDataFinished = function () {
    let $res = natives.hasPedPreloadPropDataFinished(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.releasePreloadPropData = function () {
    let $res = natives.releasePedPreloadPropData(this.handle);
};
mp.Ped.prototype.releasePreloadPropData = function () {
    let $res = natives.releasePedPreloadPropData(this.handle);
};
mp.Player.prototype.getPropIndex = function (componentId) {
    let $res = natives.getPedPropIndex(this.handle, componentId, 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPropIndex = function (componentId) {
    let $res = natives.getPedPropIndex(this.handle, componentId, 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setPropIndex = function (componentId, drawableId, TextureId, attach) {
    let $res = natives.setPedPropIndex(this.handle, componentId, drawableId, TextureId, attach | 0, 0);
};
mp.Ped.prototype.setPropIndex = function (componentId, drawableId, TextureId, attach) {
    let $res = natives.setPedPropIndex(this.handle, componentId, drawableId, TextureId, attach | 0, 0);
};
mp.Player.prototype.knockOffProp = function (p1, p2, p3, p4) {
    let $res = natives.knockOffPedProp(this.handle, p1 | 0, p2 | 0, p3 | 0, p4 | 0);
};
mp.Ped.prototype.knockOffProp = function (p1, p2, p3, p4) {
    let $res = natives.knockOffPedProp(this.handle, p1 | 0, p2 | 0, p3 | 0, p4 | 0);
};
mp.Player.prototype.clearProp = function (propId) {
    let $res = natives.clearPedProp(this.handle, propId, 0);
};
mp.Ped.prototype.clearProp = function (propId) {
    let $res = natives.clearPedProp(this.handle, propId, 0);
};
mp.Player.prototype.clearAllProps = function () {
    let $res = natives.clearAllPedProps(this.handle, 0);
};
mp.Ped.prototype.clearAllProps = function () {
    let $res = natives.clearAllPedProps(this.handle, 0);
};
mp.Player.prototype.dropAmbientProp = function () {
    let $res = natives.dropAmbientProp(this.handle);
};
mp.Ped.prototype.dropAmbientProp = function () {
    let $res = natives.dropAmbientProp(this.handle);
};
mp.Player.prototype.getPropTextureIndex = function (componentId) {
    let $res = natives.getPedPropTextureIndex(this.handle, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPropTextureIndex = function (componentId) {
    let $res = natives.getPedPropTextureIndex(this.handle, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.clearParachutePackVariation = function () {
    let $res = natives.clearPedParachutePackVariation(this.handle);
};
mp.Ped.prototype.clearParachutePackVariation = function () {
    let $res = natives.clearPedParachutePackVariation(this.handle);
};
mp.Player.prototype.setScubaGearVariation = function () {
    let $res = natives.setPedScubaGearVariation(this.handle);
};
mp.Ped.prototype.setScubaGearVariation = function () {
    let $res = natives.setPedScubaGearVariation(this.handle);
};
mp.Player.prototype.clearScubaGearVariation = function () {
    let $res = natives.clearPedScubaGearVariation(this.handle);
};
mp.Ped.prototype.clearScubaGearVariation = function () {
    let $res = natives.clearPedScubaGearVariation(this.handle);
};
mp.Blip.prototype.setBlockingOfNonTemporaryEvents = function (toggle) {
    let $res = natives.setBlockingOfNonTemporaryEvents(this.handle, toggle | 0);
};
mp.Player.prototype.setBoundsOrientation = function (p1, p2, p3, p4, p5) {
    let $res = natives.setPedBoundsOrientation(this.handle, p1, p2, p3, p4, p5);
};
mp.Ped.prototype.setBoundsOrientation = function (p1, p2, p3, p4, p5) {
    let $res = natives.setPedBoundsOrientation(this.handle, p1, p2, p3, p4, p5);
};
mp.Player.prototype.registerTarget = function (target) {
    let $res = natives.registerTarget(this.handle, target);
};
mp.Ped.prototype.registerTarget = function (target) {
    let $res = natives.registerTarget(this.handle, target);
};
mp.Player.prototype.registerHatedTargetsAround = function (radius) {
    let $res = natives.registerHatedTargetsAroundPed(this.handle, radius);
};
mp.Ped.prototype.registerHatedTargetsAround = function (radius) {
    let $res = natives.registerHatedTargetsAroundPed(this.handle, radius);
};
mp.Player.prototype.setDriverRacingModifier = function (modifier) {
    let $res = natives.setDriverRacingModifier(this.handle, modifier);
};
mp.Ped.prototype.setDriverRacingModifier = function (modifier) {
    let $res = natives.setDriverRacingModifier(this.handle, modifier);
};
mp.Player.prototype.setDriverAbility = function (ability) {
    let $res = natives.setDriverAbility(this.handle, ability);
};
mp.Ped.prototype.setDriverAbility = function (ability) {
    let $res = natives.setDriverAbility(this.handle, ability);
};
mp.Player.prototype.setDriverAggressiveness = function (aggressiveness) {
    let $res = natives.setDriverAggressiveness(this.handle, aggressiveness);
};
mp.Ped.prototype.setDriverAggressiveness = function (aggressiveness) {
    let $res = natives.setDriverAggressiveness(this.handle, aggressiveness);
};
mp.Player.prototype.canRagdoll = function () {
    let $res = natives.canPedRagdoll(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.canRagdoll = function () {
    let $res = natives.canPedRagdoll(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setToRagdoll = function (time1, time2, ragdollType, p4, p5, p6) {
    let $res = natives.setPedToRagdoll(this.handle, time1, time2, ragdollType, p4 | 0, p5 | 0, p6 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.setToRagdoll = function (time1, time2, ragdollType, p4, p5, p6) {
    let $res = natives.setPedToRagdoll(this.handle, time1, time2, ragdollType, p4 | 0, p5 | 0, p6 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setToRagdollWithFall = function (time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13) {
    let $res = natives.setPedToRagdollWithFall(this.handle, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.setToRagdollWithFall = function (time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13) {
    let $res = natives.setPedToRagdollWithFall(this.handle, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setRagdollOnCollision = function (toggle) {
    let $res = natives.setPedRagdollOnCollision(this.handle, toggle | 0);
};
mp.Ped.prototype.setRagdollOnCollision = function (toggle) {
    let $res = natives.setPedRagdollOnCollision(this.handle, toggle | 0);
};
mp.Player.prototype.isRagdoll = function () {
    let $res = natives.isPedRagdoll(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isRagdoll = function () {
    let $res = natives.isPedRagdoll(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isRunningRagdollTask = function () {
    let $res = natives.isPedRunningRagdollTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isRunningRagdollTask = function () {
    let $res = natives.isPedRunningRagdollTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setRagdollForceFall = function () {
    let $res = natives.setPedRagdollForceFall(this.handle);
};
mp.Ped.prototype.setRagdollForceFall = function () {
    let $res = natives.setPedRagdollForceFall(this.handle);
};
mp.Player.prototype.resetRagdollTimer = function () {
    let $res = natives.resetPedRagdollTimer(this.handle);
};
mp.Ped.prototype.resetRagdollTimer = function () {
    let $res = natives.resetPedRagdollTimer(this.handle);
};
mp.Player.prototype.setCanRagdoll = function (toggle) {
    let $res = natives.setPedCanRagdoll(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanRagdoll = function (toggle) {
    let $res = natives.setPedCanRagdoll(this.handle, toggle | 0);
};
mp.Player.prototype.isRunningMeleeTask = function () {
    let $res = natives.isPedRunningMeleeTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isRunningMeleeTask = function () {
    let $res = natives.isPedRunningMeleeTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isRunningMobilePhoneTask = function () {
    let $res = natives.isPedRunningMobilePhoneTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isRunningMobilePhoneTask = function () {
    let $res = natives.isPedRunningMobilePhoneTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isMobilePhoneToEar = function () {
    let $res = natives.isMobilePhoneToPedEar(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isMobilePhoneToEar = function () {
    let $res = natives.isMobilePhoneToPedEar(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setRagdollBlockingFlags = function (flags) {
    let $res = natives.setRagdollBlockingFlags(this.handle, flags);
};
mp.Ped.prototype.setRagdollBlockingFlags = function (flags) {
    let $res = natives.setRagdollBlockingFlags(this.handle, flags);
};
mp.Player.prototype.clearRagdollBlockingFlags = function (flags) {
    let $res = natives.clearRagdollBlockingFlags(this.handle, flags);
};
mp.Ped.prototype.clearRagdollBlockingFlags = function (flags) {
    let $res = natives.clearRagdollBlockingFlags(this.handle, flags);
};
mp.Player.prototype.setAngledDefensiveArea = function (p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.setPedAngledDefensiveArea(this.handle, p1, p2, p3, p4, p5, p6, p7, p8 | 0, p9 | 0);
};
mp.Ped.prototype.setAngledDefensiveArea = function (p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.setPedAngledDefensiveArea(this.handle, p1, p2, p3, p4, p5, p6, p7, p8 | 0, p9 | 0);
};
mp.Player.prototype.setSphereDefensiveArea = function (x, y, z, radius, p5, p6) {
    let $res = natives.setPedSphereDefensiveArea(this.handle, x, y, z, radius, p5 | 0, p6 | 0);
};
mp.Ped.prototype.setSphereDefensiveArea = function (x, y, z, radius, p5, p6) {
    let $res = natives.setPedSphereDefensiveArea(this.handle, x, y, z, radius, p5 | 0, p6 | 0);
};
mp.Player.prototype.setDefensiveSphereAttachedToPed = function (target, xOffset, yOffset, zOffset, radius, p6) {
    let $res = natives.setPedDefensiveSphereAttachedToPed(this.handle, target, xOffset, yOffset, zOffset, radius, p6 | 0);
};
mp.Ped.prototype.setDefensiveSphereAttachedToPed = function (target, xOffset, yOffset, zOffset, radius, p6) {
    let $res = natives.setPedDefensiveSphereAttachedToPed(this.handle, target, xOffset, yOffset, zOffset, radius, p6 | 0);
};
mp.Player.prototype.setDefensiveSphereAttachedToVehicle = function (target, xOffset, yOffset, zOffset, radius, p6) {
    let $res = natives.setPedDefensiveSphereAttachedToVehicle(this.handle, target, xOffset, yOffset, zOffset, radius, p6 | 0);
};
mp.Ped.prototype.setDefensiveSphereAttachedToVehicle = function (target, xOffset, yOffset, zOffset, radius, p6) {
    let $res = natives.setPedDefensiveSphereAttachedToVehicle(this.handle, target, xOffset, yOffset, zOffset, radius, p6 | 0);
};
mp.Player.prototype.setDefensiveAreaAttachedToPed = function (attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.setPedDefensiveAreaAttachedToPed(this.handle, attachPed, p2, p3, p4, p5, p6, p7, p8, p9 | 0, p10 | 0);
};
mp.Ped.prototype.setDefensiveAreaAttachedToPed = function (attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.setPedDefensiveAreaAttachedToPed(this.handle, attachPed, p2, p3, p4, p5, p6, p7, p8, p9 | 0, p10 | 0);
};
mp.Player.prototype.setDefensiveAreaDirection = function (p1, p2, p3, p4) {
    let $res = natives.setPedDefensiveAreaDirection(this.handle, p1, p2, p3, p4 | 0);
};
mp.Ped.prototype.setDefensiveAreaDirection = function (p1, p2, p3, p4) {
    let $res = natives.setPedDefensiveAreaDirection(this.handle, p1, p2, p3, p4 | 0);
};
mp.Player.prototype.removeDefensiveArea = function (toggle) {
    let $res = natives.removePedDefensiveArea(this.handle, toggle | 0);
};
mp.Ped.prototype.removeDefensiveArea = function (toggle) {
    let $res = natives.removePedDefensiveArea(this.handle, toggle | 0);
};
mp.Player.prototype.getDefensiveAreaPosition = function (p1) {
    let $res = natives.getPedDefensiveAreaPosition(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getDefensiveAreaPosition = function (p1) {
    let $res = natives.getPedDefensiveAreaPosition(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.isDefensiveAreaActive = function (p1) {
    let $res = natives.isPedDefensiveAreaActive(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isDefensiveAreaActive = function (p1) {
    let $res = natives.isPedDefensiveAreaActive(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setPreferredCoverSet = function (itemSet) {
    let $res = natives.setPedPreferredCoverSet(this.handle, itemSet);
};
mp.Ped.prototype.setPreferredCoverSet = function (itemSet) {
    let $res = natives.setPedPreferredCoverSet(this.handle, itemSet);
};
mp.Player.prototype.removePreferredCoverSet = function () {
    let $res = natives.removePedPreferredCoverSet(this.handle);
};
mp.Ped.prototype.removePreferredCoverSet = function () {
    let $res = natives.removePedPreferredCoverSet(this.handle);
};
mp.Player.prototype.reviveInjured = function () {
    let $res = natives.reviveInjuredPed(this.handle);
};
mp.Ped.prototype.reviveInjured = function () {
    let $res = natives.reviveInjuredPed(this.handle);
};
mp.Player.prototype.resurrect = function () {
    let $res = natives.resurrectPed(this.handle);
};
mp.Ped.prototype.resurrect = function () {
    let $res = natives.resurrectPed(this.handle);
};
mp.Player.prototype.setNameDebug = function (name) {
    let $res = natives.setPedNameDebug(this.handle, name);
};
mp.Ped.prototype.setNameDebug = function (name) {
    let $res = natives.setPedNameDebug(this.handle, name);
};
mp.Player.prototype.getExtractedDisplacement = function (worldSpace) {
    let $res = natives.getPedExtractedDisplacement(this.handle, worldSpace | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getExtractedDisplacement = function (worldSpace) {
    let $res = natives.getPedExtractedDisplacement(this.handle, worldSpace | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.setDiesWhenInjured = function (toggle) {
    let $res = natives.setPedDiesWhenInjured(this.handle, toggle | 0);
};
mp.Ped.prototype.setDiesWhenInjured = function (toggle) {
    let $res = natives.setPedDiesWhenInjured(this.handle, toggle | 0);
};
mp.Player.prototype.setEnableWeaponBlocking = function (toggle) {
    let $res = natives.setPedEnableWeaponBlocking(this.handle, toggle | 0);
};
mp.Ped.prototype.setEnableWeaponBlocking = function (toggle) {
    let $res = natives.setPedEnableWeaponBlocking(this.handle, toggle | 0);
};
mp.Player.prototype.resetVisibleDamage = function () {
    let $res = natives.resetPedVisibleDamage(this.handle);
};
mp.Ped.prototype.resetVisibleDamage = function () {
    let $res = natives.resetPedVisibleDamage(this.handle);
};
mp.Player.prototype.applyBloodDamageByZone = function (p1, p2, p3, p4) {
    let $res = natives.applyPedBloodDamageByZone(this.handle, p1, p2, p3, p4);
};
mp.Ped.prototype.applyBloodDamageByZone = function (p1, p2, p3, p4) {
    let $res = natives.applyPedBloodDamageByZone(this.handle, p1, p2, p3, p4);
};
mp.Player.prototype.applyBlood = function (boneIndex, xRot, yRot, zRot, woundType) {
    let $res = natives.applyPedBlood(this.handle, boneIndex, xRot, yRot, zRot, woundType);
};
mp.Ped.prototype.applyBlood = function (boneIndex, xRot, yRot, zRot, woundType) {
    let $res = natives.applyPedBlood(this.handle, boneIndex, xRot, yRot, zRot, woundType);
};
mp.Player.prototype.applyBloodByZone = function (p1, p2, p3, p4) {
    let $res = natives.applyPedBloodByZone(this.handle, p1, p2, p3, p4);
};
mp.Ped.prototype.applyBloodByZone = function (p1, p2, p3, p4) {
    let $res = natives.applyPedBloodByZone(this.handle, p1, p2, p3, p4);
};
mp.Player.prototype.applyBloodSpecific = function (p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.applyPedBloodSpecific(this.handle, p1, p2, p3, p4, p5, p6, p7, p8);
};
mp.Ped.prototype.applyBloodSpecific = function (p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.applyPedBloodSpecific(this.handle, p1, p2, p3, p4, p5, p6, p7, p8);
};
mp.Player.prototype.applyDamageDecal = function (damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName) {
    let $res = natives.applyPedDamageDecal(this.handle, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn | 0, decalName);
};
mp.Ped.prototype.applyDamageDecal = function (damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName) {
    let $res = natives.applyPedDamageDecal(this.handle, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn | 0, decalName);
};
mp.Player.prototype.applyDamagePack = function (damagePack, damage, mult) {
    let $res = natives.applyPedDamagePack(this.handle, damagePack, damage, mult);
};
mp.Ped.prototype.applyDamagePack = function (damagePack, damage, mult) {
    let $res = natives.applyPedDamagePack(this.handle, damagePack, damage, mult);
};
mp.Player.prototype.clearBloodDamage = function () {
    let $res = natives.clearPedBloodDamage(this.handle);
};
mp.Ped.prototype.clearBloodDamage = function () {
    let $res = natives.clearPedBloodDamage(this.handle);
};
mp.Player.prototype.clearBloodDamageByZone = function (p1) {
    let $res = natives.clearPedBloodDamageByZone(this.handle, p1);
};
mp.Ped.prototype.clearBloodDamageByZone = function (p1) {
    let $res = natives.clearPedBloodDamageByZone(this.handle, p1);
};
mp.Player.prototype.hideBloodDamageByZone = function (p1, p2) {
    let $res = natives.hidePedBloodDamageByZone(this.handle, p1, p2 | 0);
};
mp.Ped.prototype.hideBloodDamageByZone = function (p1, p2) {
    let $res = natives.hidePedBloodDamageByZone(this.handle, p1, p2 | 0);
};
mp.Player.prototype.clearDamageDecalByZone = function (p1, p2) {
    let $res = natives.clearPedDamageDecalByZone(this.handle, p1, p2);
};
mp.Ped.prototype.clearDamageDecalByZone = function (p1, p2) {
    let $res = natives.clearPedDamageDecalByZone(this.handle, p1, p2);
};
mp.Player.prototype.getDecorationsState = function () {
    let $res = natives.getPedDecorationsState(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getDecorationsState = function () {
    let $res = natives.getPedDecorationsState(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.clearWetness = function () {
    let $res = natives.clearPedWetness(this.handle);
};
mp.Ped.prototype.clearWetness = function () {
    let $res = natives.clearPedWetness(this.handle);
};
mp.Player.prototype.setWetnessHeight = function (height) {
    let $res = natives.setPedWetnessHeight(this.handle, height);
};
mp.Ped.prototype.setWetnessHeight = function (height) {
    let $res = natives.setPedWetnessHeight(this.handle, height);
};
mp.Player.prototype.setWetnessEnabledThisFrame = function () {
    let $res = natives.setPedWetnessEnabledThisFrame(this.handle);
};
mp.Ped.prototype.setWetnessEnabledThisFrame = function () {
    let $res = natives.setPedWetnessEnabledThisFrame(this.handle);
};
mp.Player.prototype.clearEnvDirt = function () {
    let $res = natives.clearPedEnvDirt(this.handle);
};
mp.Ped.prototype.clearEnvDirt = function () {
    let $res = natives.clearPedEnvDirt(this.handle);
};
mp.Player.prototype.setSweat = function (sweat) {
    let $res = natives.setPedSweat(this.handle, sweat);
};
mp.Ped.prototype.setSweat = function (sweat) {
    let $res = natives.setPedSweat(this.handle, sweat);
};
mp.Player.prototype.addDecorationFromHashes = function (collection, overlay) {
    let $res = natives.addPedDecorationFromHashes(this.handle, collection, overlay);
};
mp.Ped.prototype.addDecorationFromHashes = function (collection, overlay) {
    let $res = natives.addPedDecorationFromHashes(this.handle, collection, overlay);
};
mp.Player.prototype.addDecorationFromHashesInCorona = function (collection, overlay) {
    let $res = natives.addPedDecorationFromHashesInCorona(this.handle, collection, overlay);
};
mp.Ped.prototype.addDecorationFromHashesInCorona = function (collection, overlay) {
    let $res = natives.addPedDecorationFromHashesInCorona(this.handle, collection, overlay);
};
mp.Player.prototype.getDecorationZoneFromHashes = function (overlay) {
    let $res = natives.getPedDecorationZoneFromHashes(this.handle, overlay);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getDecorationZoneFromHashes = function (overlay) {
    let $res = natives.getPedDecorationZoneFromHashes(this.handle, overlay);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.clearDecorations = function () {
    let $res = natives.clearPedDecorations(this.handle);
};
mp.Ped.prototype.clearDecorations = function () {
    let $res = natives.clearPedDecorations(this.handle);
};
mp.Player.prototype.clearDecorationsLeaveScars = function () {
    let $res = natives.clearPedDecorationsLeaveScars(this.handle);
};
mp.Ped.prototype.clearDecorationsLeaveScars = function () {
    let $res = natives.clearPedDecorationsLeaveScars(this.handle);
};
mp.Player.prototype.wasSkeletonUpdated = function () {
    let $res = natives.wasPedSkeletonUpdated(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.wasSkeletonUpdated = function () {
    let $res = natives.wasPedSkeletonUpdated(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getBoneCoords = function (boneId, offsetX, offsetY, offsetZ) {
    let $res = natives.getPedBoneCoords(this.handle, boneId, offsetX, offsetY, offsetZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getBoneCoords = function (boneId, offsetX, offsetY, offsetZ) {
    let $res = natives.getPedBoneCoords(this.handle, boneId, offsetX, offsetY, offsetZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.giveNmMessage = function () {
    let $res = natives.givePedNmMessage(this.handle);
};
mp.Ped.prototype.giveNmMessage = function () {
    let $res = natives.givePedNmMessage(this.handle);
};
mp.Player.prototype.isUsingScenario = function (scenario) {
    let $res = natives.isPedUsingScenario(this.handle, scenario);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isUsingScenario = function (scenario) {
    let $res = natives.isPedUsingScenario(this.handle, scenario);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isUsingAnyScenario = function () {
    let $res = natives.isPedUsingAnyScenario(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isUsingAnyScenario = function () {
    let $res = natives.isPedUsingAnyScenario(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setPanicExitScenario = function (p1, p2, p3) {
    let $res = natives.setPedPanicExitScenario(this.handle, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.setPanicExitScenario = function (p1, p2, p3) {
    let $res = natives.setPedPanicExitScenario(this.handle, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setShouldPlayDirectedScenarioExit = function (p1, p2, p3) {
    let $res = natives.setPedShouldPlayDirectedNormalScenarioExit(this.handle, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.setShouldPlayDirectedScenarioExit = function (p1, p2, p3) {
    let $res = natives.setPedShouldPlayDirectedNormalScenarioExit(this.handle, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setShouldPlayNormalScenarioExit = function () {
    let $res = natives.setPedShouldPlayNormalScenarioExit(this.handle);
};
mp.Ped.prototype.setShouldPlayNormalScenarioExit = function () {
    let $res = natives.setPedShouldPlayNormalScenarioExit(this.handle);
};
mp.Player.prototype.setShouldPlayImmediateScenarioExit = function () {
    let $res = natives.setPedShouldPlayImmediateScenarioExit(this.handle);
};
mp.Ped.prototype.setShouldPlayImmediateScenarioExit = function () {
    let $res = natives.setPedShouldPlayImmediateScenarioExit(this.handle);
};
mp.Player.prototype.setShouldPlayFleeScenarioExit = function (p1, p2, p3) {
    let $res = natives.setPedShouldPlayFleeScenarioExit(this.handle, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.setShouldPlayFleeScenarioExit = function (p1, p2, p3) {
    let $res = natives.setPedShouldPlayFleeScenarioExit(this.handle, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.playFacialAnim = function (animName, animDict) {
    let $res = natives.playFacialAnim(this.handle, animName, animDict);
};
mp.Ped.prototype.playFacialAnim = function (animName, animDict) {
    let $res = natives.playFacialAnim(this.handle, animName, animDict);
};
mp.Player.prototype.setFacialClipsetOverride = function (animDict) {
    let $res = natives.setFacialClipset(this.handle, animDict);
};
mp.Ped.prototype.setFacialClipsetOverride = function (animDict) {
    let $res = natives.setFacialClipset(this.handle, animDict);
};
mp.Player.prototype.setFacialIdleAnimOverride = function (animName, animDict) {
    let $res = natives.setFacialIdleAnimOverride(this.handle, animName, animDict);
};
mp.Ped.prototype.setFacialIdleAnimOverride = function (animName, animDict) {
    let $res = natives.setFacialIdleAnimOverride(this.handle, animName, animDict);
};
mp.Player.prototype.clearFacialIdleAnimOverride = function () {
    let $res = natives.clearFacialIdleAnimOverride(this.handle);
};
mp.Ped.prototype.clearFacialIdleAnimOverride = function () {
    let $res = natives.clearFacialIdleAnimOverride(this.handle);
};
mp.Player.prototype.setCanPlayGestureAnims = function (toggle) {
    let $res = natives.setPedCanPlayGestureAnims(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanPlayGestureAnims = function (toggle) {
    let $res = natives.setPedCanPlayGestureAnims(this.handle, toggle | 0);
};
mp.Player.prototype.setCanPlayVisemeAnims = function (toggle, p2) {
    let $res = natives.setPedCanPlayVisemeAnims(this.handle, toggle | 0, p2 | 0);
};
mp.Ped.prototype.setCanPlayVisemeAnims = function (toggle, p2) {
    let $res = natives.setPedCanPlayVisemeAnims(this.handle, toggle | 0, p2 | 0);
};
mp.Player.prototype.setCanPlayInjuredAnims = function (p1) {
    let $res = natives.setPedIsIgnoredByAutoOpenDoors(this.handle, p1 | 0);
};
mp.Ped.prototype.setCanPlayInjuredAnims = function (p1) {
    let $res = natives.setPedIsIgnoredByAutoOpenDoors(this.handle, p1 | 0);
};
mp.Player.prototype.setCanPlayAmbientAnims = function (toggle) {
    let $res = natives.setPedCanPlayAmbientAnims(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanPlayAmbientAnims = function (toggle) {
    let $res = natives.setPedCanPlayAmbientAnims(this.handle, toggle | 0);
};
mp.Player.prototype.setCanPlayAmbientBaseAnims = function (toggle) {
    let $res = natives.setPedCanPlayAmbientBaseAnims(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanPlayAmbientBaseAnims = function (toggle) {
    let $res = natives.setPedCanPlayAmbientBaseAnims(this.handle, toggle | 0);
};
mp.Player.prototype.setCanArmIk = function (toggle) {
    let $res = natives.setPedCanArmIk(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanArmIk = function (toggle) {
    let $res = natives.setPedCanArmIk(this.handle, toggle | 0);
};
mp.Player.prototype.setCanHeadIk = function (toggle) {
    let $res = natives.setPedCanHeadIk(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanHeadIk = function (toggle) {
    let $res = natives.setPedCanHeadIk(this.handle, toggle | 0);
};
mp.Player.prototype.setCanLegIk = function (toggle) {
    let $res = natives.setPedCanLegIk(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanLegIk = function (toggle) {
    let $res = natives.setPedCanLegIk(this.handle, toggle | 0);
};
mp.Player.prototype.setCanTorsoIk = function (toggle) {
    let $res = natives.setPedCanTorsoIk(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanTorsoIk = function (toggle) {
    let $res = natives.setPedCanTorsoIk(this.handle, toggle | 0);
};
mp.Player.prototype.setCanTorsoReactIk = function (p1) {
    let $res = natives.setPedCanTorsoReactIk(this.handle, p1 | 0);
};
mp.Ped.prototype.setCanTorsoReactIk = function (p1) {
    let $res = natives.setPedCanTorsoReactIk(this.handle, p1 | 0);
};
mp.Player.prototype.setCanUseAutoConversationLookat = function (toggle) {
    let $res = natives.setPedCanUseAutoConversationLookat(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanUseAutoConversationLookat = function (toggle) {
    let $res = natives.setPedCanUseAutoConversationLookat(this.handle, toggle | 0);
};
mp.Player.prototype.isHeadtrackingPed = function (ped2) {
    let $res = natives.isPedHeadtrackingPed(this.handle, ped2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHeadtrackingPed = function (ped2) {
    let $res = natives.isPedHeadtrackingPed(this.handle, ped2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isHeadtrackingEntity = function (entity) {
    let $res = natives.isPedHeadtrackingEntity(this.handle, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHeadtrackingEntity = function (entity) {
    let $res = natives.isPedHeadtrackingEntity(this.handle, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setPrimaryLookat = function (lookAt) {
    let $res = natives.setPedPrimaryLookat(this.handle, lookAt);
};
mp.Ped.prototype.setPrimaryLookat = function (lookAt) {
    let $res = natives.setPedPrimaryLookat(this.handle, lookAt);
};
mp.Player.prototype.setClothPackageIndex = function (p1) {
    let $res = natives.setPedClothPinFrames(this.handle, p1);
};
mp.Ped.prototype.setClothPackageIndex = function (p1) {
    let $res = natives.setPedClothPinFrames(this.handle, p1);
};
mp.Player.prototype.setClothProne = function (p1) {
    let $res = natives.setPedClothPackageIndex(this.handle, p1);
};
mp.Ped.prototype.setClothProne = function (p1) {
    let $res = natives.setPedClothPackageIndex(this.handle, p1);
};
mp.Player.prototype.setConfigFlag = function (flagId, value) {
    let $res = natives.setPedConfigFlag(this.handle, flagId, value | 0);
};
mp.Ped.prototype.setConfigFlag = function (flagId, value) {
    let $res = natives.setPedConfigFlag(this.handle, flagId, value | 0);
};
mp.Player.prototype.setResetFlag = function (flagId, doReset) {
    let $res = natives.setPedResetFlag(this.handle, flagId, doReset | 0);
};
mp.Ped.prototype.setResetFlag = function (flagId, doReset) {
    let $res = natives.setPedResetFlag(this.handle, flagId, doReset | 0);
};
mp.Player.prototype.getConfigFlag = function (flagId, p2) {
    let $res = natives.getPedConfigFlag(this.handle, flagId, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getConfigFlag = function (flagId, p2) {
    let $res = natives.getPedConfigFlag(this.handle, flagId, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getResetFlag = function (flagId) {
    let $res = natives.getPedResetFlag(this.handle, flagId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getResetFlag = function (flagId) {
    let $res = natives.getPedResetFlag(this.handle, flagId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setGroupMemberPassengerIndex = function (index) {
    let $res = natives.setPedGroupMemberPassengerIndex(this.handle, index);
};
mp.Ped.prototype.setGroupMemberPassengerIndex = function (index) {
    let $res = natives.setPedGroupMemberPassengerIndex(this.handle, index);
};
mp.Player.prototype.setCanEvasiveDive = function (toggle) {
    let $res = natives.setPedCanEvasiveDive(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanEvasiveDive = function (toggle) {
    let $res = natives.setPedCanEvasiveDive(this.handle, toggle | 0);
};
mp.Player.prototype.isEvasiveDiving = function () {
    let $res = natives.isPedEvasiveDiving(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.evadingEntity = $res[1];
    return $res[0] == 1 ? $resObj.evadingEntity : undefined;
};
mp.Ped.prototype.isEvasiveDiving = function () {
    let $res = natives.isPedEvasiveDiving(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.evadingEntity = $res[1];
    return $res[0] == 1 ? $resObj.evadingEntity : undefined;
};
mp.Player.prototype.setShootsAtCoord = function (x, y, z, toggle) {
    let $res = natives.setPedShootsAtCoord(this.handle, x, y, z, toggle | 0);
};
mp.Ped.prototype.setShootsAtCoord = function (x, y, z, toggle) {
    let $res = natives.setPedShootsAtCoord(this.handle, x, y, z, toggle | 0);
};
mp.Player.prototype.setModelIsSuppressed = function (toggle) {
    let $res = natives.setPedModelIsSuppressed(this.handle, toggle | 0);
};
mp.Ped.prototype.setModelIsSuppressed = function (toggle) {
    let $res = natives.setPedModelIsSuppressed(this.handle, toggle | 0);
};
mp.Player.prototype.setCanBeTargetedWhenInjured = function (toggle) {
    let $res = natives.setPedCanBeTargetedWhenInjured(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanBeTargetedWhenInjured = function (toggle) {
    let $res = natives.setPedCanBeTargetedWhenInjured(this.handle, toggle | 0);
};
mp.Player.prototype.setGeneratesDeadBodyEvents = function (toggle) {
    let $res = natives.setPedGeneratesDeadBodyEvents(this.handle, toggle | 0);
};
mp.Ped.prototype.setGeneratesDeadBodyEvents = function (toggle) {
    let $res = natives.setPedGeneratesDeadBodyEvents(this.handle, toggle | 0);
};
mp.Player.prototype.blockDeadBodyShockingEvents = function (toggle) {
    let $res = natives.blockPedFromGeneratingDeadBodyEventsWhenDead(this.handle, toggle | 0);
};
mp.Ped.prototype.blockDeadBodyShockingEvents = function (toggle) {
    let $res = natives.blockPedFromGeneratingDeadBodyEventsWhenDead(this.handle, toggle | 0);
};
mp.Player.prototype.setCanRagdollFromPlayerImpact = function (toggle) {
    let $res = natives.setPedCanRagdollFromPlayerImpact(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanRagdollFromPlayerImpact = function (toggle) {
    let $res = natives.setPedCanRagdollFromPlayerImpact(this.handle, toggle | 0);
};
mp.Player.prototype.giveHelmet = function (cannotRemove, helmetFlag, textureIndex) {
    let $res = natives.givePedHelmet(this.handle, cannotRemove | 0, helmetFlag, textureIndex);
};
mp.Ped.prototype.giveHelmet = function (cannotRemove, helmetFlag, textureIndex) {
    let $res = natives.givePedHelmet(this.handle, cannotRemove | 0, helmetFlag, textureIndex);
};
mp.Player.prototype.removeHelmet = function (instantly) {
    let $res = natives.removePedHelmet(this.handle, instantly | 0);
};
mp.Ped.prototype.removeHelmet = function (instantly) {
    let $res = natives.removePedHelmet(this.handle, instantly | 0);
};
mp.Player.prototype.isTakingOffHelmet = function () {
    let $res = natives.isPedTakingOffHelmet(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isTakingOffHelmet = function () {
    let $res = natives.isPedTakingOffHelmet(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setHelmet = function (canWearHelmet) {
    let $res = natives.setPedHelmet(this.handle, canWearHelmet | 0);
};
mp.Ped.prototype.setHelmet = function (canWearHelmet) {
    let $res = natives.setPedHelmet(this.handle, canWearHelmet | 0);
};
mp.Player.prototype.setHelmetFlag = function (helmetFlag) {
    let $res = natives.setPedHelmetFlag(this.handle, helmetFlag);
};
mp.Ped.prototype.setHelmetFlag = function (helmetFlag) {
    let $res = natives.setPedHelmetFlag(this.handle, helmetFlag);
};
mp.Player.prototype.setHelmetPropIndex = function (propIndex, p2) {
    let $res = natives.setPedHelmetPropIndex(this.handle, propIndex, p2 | 0);
};
mp.Ped.prototype.setHelmetPropIndex = function (propIndex, p2) {
    let $res = natives.setPedHelmetPropIndex(this.handle, propIndex, p2 | 0);
};
mp.Player.prototype.setHelmetUnk = function (p1, p2, p3) {
    let $res = natives.setPedHelmetVisorPropIndices(this.handle, p1 | 0, p2, p3);
};
mp.Ped.prototype.setHelmetUnk = function (p1, p2, p3) {
    let $res = natives.setPedHelmetVisorPropIndices(this.handle, p1 | 0, p2, p3);
};
mp.Player.prototype.isHelmetUnk = function () {
    let $res = natives.isPedHelmetVisorUp(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHelmetUnk = function () {
    let $res = natives.isPedHelmetVisorUp(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setHelmetTextureIndex = function (textureIndex) {
    let $res = natives.setPedHelmetTextureIndex(this.handle, textureIndex);
};
mp.Ped.prototype.setHelmetTextureIndex = function (textureIndex) {
    let $res = natives.setPedHelmetTextureIndex(this.handle, textureIndex);
};
mp.Player.prototype.isWearingHelmet = function () {
    let $res = natives.isPedWearingHelmet(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isWearingHelmet = function () {
    let $res = natives.isPedWearingHelmet(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.clearStoredHatProp = function () {
    let $res = natives.clearPedStoredHatProp(this.handle);
};
mp.Ped.prototype.clearStoredHatProp = function () {
    let $res = natives.clearPedStoredHatProp(this.handle);
};
mp.Player.prototype.getHelmetStoredHatPropIndex = function () {
    let $res = natives.getPedHelmetStoredHatPropIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHelmetStoredHatPropIndex = function () {
    let $res = natives.getPedHelmetStoredHatPropIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getHelmetStoredHatTexIndex = function () {
    let $res = natives.getPedHelmetStoredHatTexIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHelmetStoredHatTexIndex = function () {
    let $res = natives.getPedHelmetStoredHatTexIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setToLoadCover = function (toggle) {
    let $res = natives.setPedToLoadCover(this.handle, toggle | 0);
};
mp.Ped.prototype.setToLoadCover = function (toggle) {
    let $res = natives.setPedToLoadCover(this.handle, toggle | 0);
};
mp.Player.prototype.setCanCowerInCover = function (toggle) {
    let $res = natives.setPedCanCowerInCover(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanCowerInCover = function (toggle) {
    let $res = natives.setPedCanCowerInCover(this.handle, toggle | 0);
};
mp.Player.prototype.setCanPeekInCover = function (toggle) {
    let $res = natives.setPedCanPeekInCover(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanPeekInCover = function (toggle) {
    let $res = natives.setPedCanPeekInCover(this.handle, toggle | 0);
};
mp.Player.prototype.setPlaysHeadOnHornAnimWhenDiesInVehicle = function (toggle) {
    let $res = natives.setPedPlaysHeadOnHornAnimWhenDiesInVehicle(this.handle, toggle | 0);
};
mp.Ped.prototype.setPlaysHeadOnHornAnimWhenDiesInVehicle = function (toggle) {
    let $res = natives.setPedPlaysHeadOnHornAnimWhenDiesInVehicle(this.handle, toggle | 0);
};
mp.Player.prototype.setLegIkMode = function (mode) {
    let $res = natives.setPedLegIkMode(this.handle, mode);
};
mp.Ped.prototype.setLegIkMode = function (mode) {
    let $res = natives.setPedLegIkMode(this.handle, mode);
};
mp.Player.prototype.setMotionBlur = function (toggle) {
    let $res = natives.setPedMotionBlur(this.handle, toggle | 0);
};
mp.Ped.prototype.setMotionBlur = function (toggle) {
    let $res = natives.setPedMotionBlur(this.handle, toggle | 0);
};
mp.Player.prototype.setCanSwitchWeapon = function (toggle) {
    let $res = natives.setPedCanSwitchWeapon(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanSwitchWeapon = function (toggle) {
    let $res = natives.setPedCanSwitchWeapon(this.handle, toggle | 0);
};
mp.Player.prototype.setDiesInstantlyInWater = function (toggle) {
    let $res = natives.setPedDiesInstantlyInWater(this.handle, toggle | 0);
};
mp.Ped.prototype.setDiesInstantlyInWater = function (toggle) {
    let $res = natives.setPedDiesInstantlyInWater(this.handle, toggle | 0);
};
mp.Player.prototype.stopWeaponFiringWhenDropped = function () {
    let $res = natives.stopPedWeaponFiringWhenDropped(this.handle);
};
mp.Ped.prototype.stopWeaponFiringWhenDropped = function () {
    let $res = natives.stopPedWeaponFiringWhenDropped(this.handle);
};
mp.Player.prototype.setScriptedAnimSeatOffset = function (p1) {
    let $res = natives.setScriptedAnimSeatOffset(this.handle, p1);
};
mp.Ped.prototype.setScriptedAnimSeatOffset = function (p1) {
    let $res = natives.setScriptedAnimSeatOffset(this.handle, p1);
};
mp.Player.prototype.setCombatMovement = function (combatMovement) {
    let $res = natives.setPedCombatMovement(this.handle, combatMovement);
};
mp.Ped.prototype.setCombatMovement = function (combatMovement) {
    let $res = natives.setPedCombatMovement(this.handle, combatMovement);
};
mp.Player.prototype.getCombatMovement = function () {
    let $res = natives.getPedCombatMovement(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getCombatMovement = function () {
    let $res = natives.getPedCombatMovement(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setCombatAbility = function (abilityLevel) {
    let $res = natives.setPedCombatAbility(this.handle, abilityLevel);
};
mp.Ped.prototype.setCombatAbility = function (abilityLevel) {
    let $res = natives.setPedCombatAbility(this.handle, abilityLevel);
};
mp.Player.prototype.setCombatRange = function (combatRange) {
    let $res = natives.setPedCombatRange(this.handle, combatRange);
};
mp.Ped.prototype.setCombatRange = function (combatRange) {
    let $res = natives.setPedCombatRange(this.handle, combatRange);
};
mp.Player.prototype.getCombatRange = function () {
    let $res = natives.getPedCombatRange(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getCombatRange = function () {
    let $res = natives.getPedCombatRange(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setCombatAttributes = function (attributeId, enabled) {
    let $res = natives.setPedCombatAttributes(this.handle, attributeId, enabled | 0);
};
mp.Ped.prototype.setCombatAttributes = function (attributeId, enabled) {
    let $res = natives.setPedCombatAttributes(this.handle, attributeId, enabled | 0);
};
mp.Player.prototype.setTargetLossResponse = function (responseType) {
    let $res = natives.setPedTargetLossResponse(this.handle, responseType);
};
mp.Ped.prototype.setTargetLossResponse = function (responseType) {
    let $res = natives.setPedTargetLossResponse(this.handle, responseType);
};
mp.Player.prototype.isPerformingMeleeAction = function () {
    let $res = natives.isPedPerformingMeleeAction(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPerformingMeleeAction = function () {
    let $res = natives.isPedPerformingMeleeAction(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPerformingStealthKill = function () {
    let $res = natives.isPedPerformingStealthKill(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPerformingStealthKill = function () {
    let $res = natives.isPedPerformingStealthKill(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPerformingDependentComboLimit = function () {
    let $res = natives.isPedPerformingACounterAttack(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPerformingDependentComboLimit = function () {
    let $res = natives.isPedPerformingACounterAttack(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isBeingStealthKilled = function () {
    let $res = natives.isPedBeingStealthKilled(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isBeingStealthKilled = function () {
    let $res = natives.isPedBeingStealthKilled(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getMeleeTargetFor = function () {
    let $res = natives.getMeleeTargetForPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getMeleeTargetFor = function () {
    let $res = natives.getMeleeTargetForPed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.wasKilledByStealth = function () {
    let $res = natives.wasPedKilledByStealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.wasKilledByStealth = function () {
    let $res = natives.wasPedKilledByStealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.wasKilledByTakedown = function () {
    let $res = natives.wasPedKilledByTakedown(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.wasKilledByTakedown = function () {
    let $res = natives.wasPedKilledByTakedown(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.wasKnockedOut = function () {
    let $res = natives.wasPedKnockedOut(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.wasKnockedOut = function () {
    let $res = natives.wasPedKnockedOut(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setFleeAttributes = function (attributeFlags, enable) {
    let $res = natives.setPedFleeAttributes(this.handle, attributeFlags, enable | 0);
};
mp.Ped.prototype.setFleeAttributes = function (attributeFlags, enable) {
    let $res = natives.setPedFleeAttributes(this.handle, attributeFlags, enable | 0);
};
mp.Player.prototype.setCowerHash = function (p1) {
    let $res = natives.setPedCowerHash(this.handle, p1);
};
mp.Ped.prototype.setCowerHash = function (p1) {
    let $res = natives.setPedCowerHash(this.handle, p1);
};
mp.Player.prototype.setSteersAroundPeds = function (toggle) {
    let $res = natives.setPedSteersAroundPeds(this.handle, toggle | 0);
};
mp.Ped.prototype.setSteersAroundPeds = function (toggle) {
    let $res = natives.setPedSteersAroundPeds(this.handle, toggle | 0);
};
mp.Player.prototype.setSteersAroundObjects = function (toggle) {
    let $res = natives.setPedSteersAroundObjects(this.handle, toggle | 0);
};
mp.Ped.prototype.setSteersAroundObjects = function (toggle) {
    let $res = natives.setPedSteersAroundObjects(this.handle, toggle | 0);
};
mp.Player.prototype.setSteersAroundVehicles = function (toggle) {
    let $res = natives.setPedSteersAroundVehicles(this.handle, toggle | 0);
};
mp.Ped.prototype.setSteersAroundVehicles = function (toggle) {
    let $res = natives.setPedSteersAroundVehicles(this.handle, toggle | 0);
};
mp.Player.prototype.setIncreasedAvoidanceRadius = function () {
    let $res = natives.setPedIncreasedAvoidanceRadius(this.handle);
};
mp.Ped.prototype.setIncreasedAvoidanceRadius = function () {
    let $res = natives.setPedIncreasedAvoidanceRadius(this.handle);
};
mp.Player.prototype.setBlocksPathingWhenDead = function (toggle) {
    let $res = natives.setPedBlocksPathingWhenDead(this.handle, toggle | 0);
};
mp.Ped.prototype.setBlocksPathingWhenDead = function (toggle) {
    let $res = natives.setPedBlocksPathingWhenDead(this.handle, toggle | 0);
};
mp.Player.prototype.forceAiAndAnimationUpdate = function (p1, p2) {
    let $res = natives.forcePedAiAndAnimationUpdate(this.handle, p1 | 0, p2 | 0);
};
mp.Ped.prototype.forceAiAndAnimationUpdate = function (p1, p2) {
    let $res = natives.forcePedAiAndAnimationUpdate(this.handle, p1 | 0, p2 | 0);
};
mp.Player.prototype.isHeadingTowardsPosition = function (x, y, z, p4) {
    let $res = natives.isPedHeadingTowardsPosition(this.handle, x, y, z, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHeadingTowardsPosition = function (x, y, z, p4) {
    let $res = natives.isPedHeadingTowardsPosition(this.handle, x, y, z, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.requestVisibilityTracking = function () {
    let $res = natives.requestPedVisibilityTracking(this.handle);
};
mp.Ped.prototype.requestVisibilityTracking = function () {
    let $res = natives.requestPedVisibilityTracking(this.handle);
};
mp.Player.prototype.requestVehicleVisibilityTracking = function (p1) {
    let $res = natives.requestPedVehicleVisibilityTracking(this.handle, p1 | 0);
};
mp.Ped.prototype.requestVehicleVisibilityTracking = function (p1) {
    let $res = natives.requestPedVehicleVisibilityTracking(this.handle, p1 | 0);
};
mp.Player.prototype.isTrackedVisible = function () {
    let $res = natives.isTrackedPedVisible(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isTrackedVisible = function () {
    let $res = natives.isTrackedPedVisible(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isTracked = function () {
    let $res = natives.isPedTracked(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isTracked = function () {
    let $res = natives.isPedTracked(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasReceivedEvent = function (eventId) {
    let $res = natives.hasPedReceivedEvent(this.handle, eventId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasReceivedEvent = function (eventId) {
    let $res = natives.hasPedReceivedEvent(this.handle, eventId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.canSeeHatedPed = function (ped2) {
    let $res = natives.canPedSeeHatedPed(this.handle, ped2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.canSeeHatedPed = function (ped2) {
    let $res = natives.canPedSeeHatedPed(this.handle, ped2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getBoneIndex = function (boneId) {
    let $res = natives.getPedBoneIndex(this.handle, boneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getBoneIndex = function (boneId) {
    let $res = natives.getPedBoneIndex(this.handle, boneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getRagdollBoneIndex = function (bone) {
    let $res = natives.getPedRagdollBoneIndex(this.handle, bone);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getRagdollBoneIndex = function (bone) {
    let $res = natives.getPedRagdollBoneIndex(this.handle, bone);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setEnveffScale = function (value) {
    let $res = natives.setPedEnveffScale(this.handle, value);
};
mp.Ped.prototype.setEnveffScale = function (value) {
    let $res = natives.setPedEnveffScale(this.handle, value);
};
mp.Player.prototype.getEnveffScale = function () {
    let $res = natives.getPedEnveffScale(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getEnveffScale = function () {
    let $res = natives.getPedEnveffScale(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setEnableEnveffScale = function (toggle) {
    let $res = natives.setEnablePedEnveffScale(this.handle, toggle | 0);
};
mp.Ped.prototype.setEnableEnveffScale = function (toggle) {
    let $res = natives.setEnablePedEnveffScale(this.handle, toggle | 0);
};
mp.Player.prototype.setEnveffColorModulator = function (p1, p2, p3) {
    let $res = natives.setPedEnveffColorModulator(this.handle, p1, p2, p3);
};
mp.Ped.prototype.setEnveffColorModulator = function (p1, p2, p3) {
    let $res = natives.setPedEnveffColorModulator(this.handle, p1, p2, p3);
};
mp.Player.prototype.setEmissiveIntensity = function (intensity) {
    let $res = natives.setPedEmissiveScale(this.handle, intensity);
};
mp.Ped.prototype.setEmissiveIntensity = function (intensity) {
    let $res = natives.setPedEmissiveScale(this.handle, intensity);
};
mp.Player.prototype.getEmissiveIntensity = function () {
    let $res = natives.getPedEmissiveScale(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getEmissiveIntensity = function () {
    let $res = natives.getPedEmissiveScale(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.isShaderEffectValid = function () {
    let $res = natives.isPedShaderReady(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isShaderEffectValid = function () {
    let $res = natives.isPedShaderReady(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setAoBlobRendering = function (toggle) {
    let $res = natives.setPedAoBlobRendering(this.handle, toggle | 0);
};
mp.Ped.prototype.setAoBlobRendering = function (toggle) {
    let $res = natives.setPedAoBlobRendering(this.handle, toggle | 0);
};
mp.Player.prototype.forceMotionState = function (motionStateHash, p2, p3, p4) {
    let $res = natives.forcePedMotionState(this.handle, motionStateHash, p2 | 0, p3 | 0, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.forceMotionState = function (motionStateHash, p2, p3, p4) {
    let $res = natives.forcePedMotionState(this.handle, motionStateHash, p2 | 0, p3 | 0, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getCurrentMovementSpeed = function () {
    let $res = natives.getPedCurrentMoveBlendRatio(this.handle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.speedX = $res[1];
    $resObj.speedY = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.Ped.prototype.getCurrentMovementSpeed = function () {
    let $res = natives.getPedCurrentMoveBlendRatio(this.handle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.speedX = $res[1];
    $resObj.speedY = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.Player.prototype.setMaxMoveBlendRatio = function (value) {
    let $res = natives.setPedMaxMoveBlendRatio(this.handle, value);
};
mp.Ped.prototype.setMaxMoveBlendRatio = function (value) {
    let $res = natives.setPedMaxMoveBlendRatio(this.handle, value);
};
mp.Player.prototype.setMinMoveBlendRatio = function (value) {
    let $res = natives.setPedMinMoveBlendRatio(this.handle, value);
};
mp.Ped.prototype.setMinMoveBlendRatio = function (value) {
    let $res = natives.setPedMinMoveBlendRatio(this.handle, value);
};
mp.Player.prototype.setMoveRateOverride = function (value) {
    let $res = natives.setPedMoveRateOverride(this.handle, value);
};
mp.Ped.prototype.setMoveRateOverride = function (value) {
    let $res = natives.setPedMoveRateOverride(this.handle, value);
};
mp.Player.prototype.getNearbyVehicles = function () {
    let $res = natives.getPedNearbyVehicles(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.sizeAndVehs = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.Ped.prototype.getNearbyVehicles = function () {
    let $res = natives.getPedNearbyVehicles(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.sizeAndVehs = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.Player.prototype.getNearbyPeds = function (ignore) {
    let $res = natives.getPedNearbyPeds(this.handle, 0, ignore);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.sizeAndPeds = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.Ped.prototype.getNearbyPeds = function (ignore) {
    let $res = natives.getPedNearbyPeds(this.handle, 0, ignore);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.sizeAndPeds = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.Player.prototype.haveAllStreamingRequestsCompleted = function () {
    let $res = natives.haveAllStreamingRequestsCompleted(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.haveAllStreamingRequestsCompleted = function () {
    let $res = natives.haveAllStreamingRequestsCompleted(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isUsingActionMode = function () {
    let $res = natives.isPedUsingActionMode(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isUsingActionMode = function () {
    let $res = natives.isPedUsingActionMode(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setUsingActionMode = function (p1, p2, action) {
    let $res = natives.setPedUsingActionMode(this.handle, p1 | 0, p2, action);
};
mp.Ped.prototype.setUsingActionMode = function (p1, p2, action) {
    let $res = natives.setPedUsingActionMode(this.handle, p1 | 0, p2, action);
};
mp.Player.prototype.setMovementModeOverride = function (name) {
    let $res = natives.setMovementModeOverride(this.handle, name);
};
mp.Ped.prototype.setMovementModeOverride = function (name) {
    let $res = natives.setMovementModeOverride(this.handle, name);
};
mp.Player.prototype.setCapsule = function (value) {
    let $res = natives.setPedCapsule(this.handle, value);
};
mp.Ped.prototype.setCapsule = function (value) {
    let $res = natives.setPedCapsule(this.handle, value);
};
mp.Player.prototype.registerHeadshot = function () {
    let $res = natives.registerPedheadshot(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.registerHeadshot = function () {
    let $res = natives.registerPedheadshot(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.registerHeadshot3 = function () {
    let $res = natives.registerPedheadshotHires(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.registerHeadshot3 = function () {
    let $res = natives.registerPedheadshotHires(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.registerHeadshotTransparent = function () {
    let $res = natives.registerPedheadshotTransparent(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.registerHeadshotTransparent = function () {
    let $res = natives.registerPedheadshotTransparent(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.isHeadshotValid = function () {
    let $res = natives.isPedheadshotValid(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHeadshotValid = function () {
    let $res = natives.isPedheadshotValid(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isHeadshotReady = function () {
    let $res = natives.isPedheadshotReady(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isHeadshotReady = function () {
    let $res = natives.isPedheadshotReady(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getHeadshotTxdString = function () {
    let $res = natives.getPedheadshotTxdString(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getHeadshotTxdString = function () {
    let $res = natives.getPedheadshotTxdString(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setHeatscaleOverride = function (heatScale) {
    let $res = natives.setPedHeatscaleOverride(this.handle, heatScale);
};
mp.Ped.prototype.setHeatscaleOverride = function (heatScale) {
    let $res = natives.setPedHeatscaleOverride(this.handle, heatScale);
};
mp.Player.prototype.disableHeatscaleOverride = function () {
    let $res = natives.disablePedHeatscaleOverride(this.handle);
};
mp.Ped.prototype.disableHeatscaleOverride = function () {
    let $res = natives.disablePedHeatscaleOverride(this.handle);
};
mp.Player.prototype.setIkTarget = function (ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration) {
    let $res = natives.setIkTarget(this.handle, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration);
};
mp.Ped.prototype.setIkTarget = function (ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration) {
    let $res = natives.setIkTarget(this.handle, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration);
};
mp.Player.prototype.setLodMultiplier = function (multiplier) {
    let $res = natives.setPedLodMultiplier(this.handle, multiplier);
};
mp.Ped.prototype.setLodMultiplier = function (multiplier) {
    let $res = natives.setPedLodMultiplier(this.handle, multiplier);
};
mp.Player.prototype.setCanLosePropsOnDamage = function (toggle, p2) {
    let $res = natives.setPedCanLosePropsOnDamage(this.handle, toggle | 0, p2);
};
mp.Ped.prototype.setCanLosePropsOnDamage = function (toggle, p2) {
    let $res = natives.setPedCanLosePropsOnDamage(this.handle, toggle | 0, p2);
};
mp.Player.prototype.setForceFootstepUpdate = function (toggle) {
    let $res = natives.setForceFootstepUpdate(this.handle, toggle | 0);
};
mp.Ped.prototype.setForceFootstepUpdate = function (toggle) {
    let $res = natives.setForceFootstepUpdate(this.handle, toggle | 0);
};
mp.Player.prototype.setForceStepType = function (p1, type, p3) {
    let $res = natives.setForceStepType(this.handle, p1 | 0, type, p3);
};
mp.Ped.prototype.setForceStepType = function (p1, type, p3) {
    let $res = natives.setForceStepType(this.handle, p1 | 0, type, p3);
};
mp.Player.prototype.isAnyHostileNearPoint = function (x, y, z, radius) {
    let $res = natives.isAnyHostilePedNearPoint(this.handle, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isAnyHostileNearPoint = function (x, y, z, radius) {
    let $res = natives.isAnyHostilePedNearPoint(this.handle, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setCanPlayInCarIdles = function (toggle) {
    let $res = natives.setPedCanPlayInCarIdles(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanPlayInCarIdles = function (toggle) {
    let $res = natives.setPedCanPlayInCarIdles(this.handle, toggle | 0);
};
mp.Player.prototype.isTargetInPerceptionArea = function (targetPed, p2, p3, p4, p5) {
    let $res = natives.isTargetPedInPerceptionArea(this.handle, targetPed, p2, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isTargetInPerceptionArea = function (targetPed, p2, p3, p4, p5) {
    let $res = natives.isTargetPedInPerceptionArea(this.handle, targetPed, p2, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setDisableFallDamage = function (toggle) {
    let $res = natives.setDisableHighFallDeath(this.handle, toggle | 0);
};
mp.Ped.prototype.setDisableFallDamage = function (toggle) {
    let $res = natives.setDisableHighFallDeath(this.handle, toggle | 0);
};
mp.Player.prototype.isSwappingWeapon = function () {
    let $res = natives.isPedSwitchingWeapon(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isSwappingWeapon = function () {
    let $res = natives.isPedSwitchingWeapon(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setEnableScubaGearLight = function (toggle) {
    let $res = natives.enableMpLight(this.handle, toggle | 0);
};
mp.Ped.prototype.setEnableScubaGearLight = function (toggle) {
    let $res = natives.enableMpLight(this.handle, toggle | 0);
};
mp.Player.prototype.isScubaGearLightEnabled = function () {
    let $res = natives.getMpLightEnabled(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isScubaGearLightEnabled = function () {
    let $res = natives.getMpLightEnabled(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.clearFacialClipsetOverride = function () {
    let $res = natives.clearCoverPointForPed(this.handle);
};
mp.Ped.prototype.clearFacialClipsetOverride = function () {
    let $res = natives.clearCoverPointForPed(this.handle);
};
if (!mp.game2.ped) mp.game2.ped = {};
mp.game2.ped.create = function (pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed) {
    let $res = natives.createPed(pedType, modelHash, x, y, z, heading, isNetwork | 0, bScriptHostPed | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.createPed = function (pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed) {
    let $res = natives.createPed(pedType, modelHash, x, y, z, heading, isNetwork | 0, bScriptHostPed | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.delete = function (ped) {
    let $res = natives.deletePed(ped);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ped = $res[1];
    return $resObj.ped;
};
mp.game2.ped.clone = function (ped, isNetwork, bScriptHostPed, copyHeadBlendFlag) {
    let $res = natives.clonePed(ped, isNetwork | 0, bScriptHostPed | 0, copyHeadBlendFlag | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.cloneEx = function (ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, p4) {
    let $res = natives.clonePedAlt(ped, isNetwork | 0, bScriptHostPed | 0, copyHeadBlendFlag | 0, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.cloneToTarget = function (ped, targetPed) {
    let $res = natives.clonePedToTarget(ped, targetPed);
};
mp.game2.ped.cloneToTargetEx = function (ped, targetPed, p2) {
    let $res = natives.clonePedToTargetAlt(ped, targetPed, p2 | 0);
};
mp.game2.ped.isInVehicle = function (ped, vehicle, atGetIn) {
    let $res = natives.isPedInVehicle(ped, vehicle, atGetIn | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInModel = function (ped, modelHash) {
    let $res = natives.isPedInModel(ped, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInAnyVehicle = function (ped, atGetIn) {
    let $res = natives.isPedInAnyVehicle(ped, atGetIn | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isCopInArea3D = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.isCopPedInArea3d(x1, y1, z1, x2, y2, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInjured = function (ped) {
    let $res = natives.isPedInjured(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isHurt = function (ped) {
    let $res = natives.isPedHurt(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isFatallyInjured = function (ped) {
    let $res = natives.isPedFatallyInjured(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isDeadOrDying = function (ped, p1) {
    let $res = natives.isPedDeadOrDying(ped, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isConversationDead = function (ped) {
    let $res = natives.isConversationPedDead(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isAimingFromCover = function (ped) {
    let $res = natives.isPedAimingFromCover(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isReloading = function (ped) {
    let $res = natives.isPedReloading(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isAPlayer = function (ped) {
    let $res = natives.isPedAPlayer(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.createInsideVehicle = function (vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed) {
    let $res = natives.createPedInsideVehicle(vehicle, pedType, modelHash, seat, isNetwork | 0, bScriptHostPed | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setDesiredHeading = function (ped, heading) {
    let $res = natives.setPedDesiredHeading(ped, heading);
};
mp.game2.ped.freezeCameraRotation = function (ped) {
    let $res = natives.forceAllHeadingValuesToAlign(ped);
};
mp.game2.ped.isFacingPed = function (ped, otherPed, angle) {
    let $res = natives.isPedFacingPed(ped, otherPed, angle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInMeleeCombat = function (ped) {
    let $res = natives.isPedInMeleeCombat(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isStopped = function (ped) {
    let $res = natives.isPedStopped(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isShootingInArea = function (ped, x1, y1, z1, x2, y2, z2, p7, p8) {
    let $res = natives.isPedShootingInArea(ped, x1, y1, z1, x2, y2, z2, p7 | 0, p8 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isAnyShootingInArea = function (x1, y1, z1, x2, y2, z2, p6, p7) {
    let $res = natives.isAnyPedShootingInArea(x1, y1, z1, x2, y2, z2, p6 | 0, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isAnyPedShootingInArea = function (x1, y1, z1, x2, y2, z2, p6, p7) {
    let $res = natives.isAnyPedShootingInArea(x1, y1, z1, x2, y2, z2, p6 | 0, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isShooting = function (ped) {
    let $res = natives.isPedShooting(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setAccuracy = function (ped, accuracy) {
    let $res = natives.setPedAccuracy(ped, accuracy);
};
mp.game2.ped.getAccuracy = function (ped) {
    let $res = natives.getPedAccuracy(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.isModel = function (ped, modelHash) {
    let $res = natives.isPedModel(ped, modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.explodeHead = function (ped, weaponHash) {
    let $res = natives.explodePedHead(ped, weaponHash);
};
mp.game2.ped.removeElegantly = function () {
    let $res = natives.removePedElegantly(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ped = $res[1];
    return $resObj.ped;
};
mp.game2.ped.addArmourTo = function (ped, amount) {
    let $res = natives.addArmourToPed(ped, amount);
};
mp.game2.ped.setArmour = function (ped, amount) {
    let $res = natives.setPedArmour(ped, amount);
};
mp.game2.ped.setIntoVehicle = function (ped, vehicle, seatIndex) {
    let $res = natives.setPedIntoVehicle(ped, vehicle, seatIndex);
};
mp.game2.ped.setAllowVehiclesOverride = function (ped, toggle) {
    let $res = natives.setPedAllowVehiclesOverride(ped, toggle | 0);
};
mp.game2.ped.canCreateRandom = function (unk) {
    let $res = natives.canCreateRandomPed(unk | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.canCreateRandomPed = function (unk) {
    let $res = natives.canCreateRandomPed(unk | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.createRandom = function (posX, posY, posZ) {
    let $res = natives.createRandomPed(posX, posY, posZ);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.createRandomPed = function (posX, posY, posZ) {
    let $res = natives.createRandomPed(posX, posY, posZ);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.createRandomAsDriver = function (vehicle, returnHandle) {
    let $res = natives.createRandomPedAsDriver(vehicle, returnHandle | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.canCreateRandomDriver = function () {
    let $res = natives.canCreateRandomDriver();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.canCreateRandomBikeRider = function () {
    let $res = natives.canCreateRandomBikeRider();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setMoveAnimsBlendOut = function (ped) {
    let $res = natives.setPedMoveAnimsBlendOut(ped);
};
mp.game2.ped.setCanBeDraggedOut = function (ped, toggle) {
    let $res = natives.setPedCanBeDraggedOut(ped, toggle | 0);
};
mp.game2.ped.isMale = function (ped) {
    let $res = natives.isPedMale(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isHuman = function (ped) {
    let $res = natives.isPedHuman(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getVehicleIsIn = function (ped, includeLastVehicle) {
    let $res = natives.getVehiclePedIsIn(ped, includeLastVehicle | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.resetLastVehicle = function (ped) {
    let $res = natives.resetPedLastVehicle(ped);
};
mp.game2.ped.setDensityMultiplierThisFrame = function (multiplier) {
    let $res = natives.setPedDensityMultiplierThisFrame(multiplier);
};
mp.game2.ped.setPedDensityMultiplierThisFrame = function (multiplier) {
    let $res = natives.setPedDensityMultiplierThisFrame(multiplier);
};
mp.game2.ped.setScenarioDensityMultiplierThisFrame = function (p0, p1) {
    let $res = natives.setScenarioPedDensityMultiplierThisFrame(p0, p1);
};
mp.game2.ped.setScenarioPedDensityMultiplierThisFrame = function (p0, p1) {
    let $res = natives.setScenarioPedDensityMultiplierThisFrame(p0, p1);
};
mp.game2.ped.setScriptedConversionCoordThisFrame = function (x, y, z) {
    let $res = natives.setScriptedConversionCoordThisFrame(x, y, z);
};
mp.game2.ped.setNonCreationArea = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.setPedNonCreationArea(x1, y1, z1, x2, y2, z2);
};
mp.game2.ped.setPedNonCreationArea = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.setPedNonCreationArea(x1, y1, z1, x2, y2, z2);
};
mp.game2.ped.clearNonCreationArea = function () {
    let $res = natives.clearPedNonCreationArea();
};
mp.game2.ped.instantlyFillPopulation = function () {
    let $res = natives.instantlyFillPedPopulation();
};
mp.game2.ped.isOnMount = function (ped) {
    let $res = natives.isPedOnMount(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getMount = function (ped) {
    let $res = natives.getMount(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.isOnVehicle = function (ped) {
    let $res = natives.isPedOnVehicle(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isOnSpecificVehicle = function (ped, vehicle) {
    let $res = natives.isPedOnSpecificVehicle(ped, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setMoney = function (ped, amount) {
    let $res = natives.setPedMoney(ped, amount);
};
mp.game2.ped.getMoney = function (ped) {
    let $res = natives.getPedMoney(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setAmbientPedsDropMoney = function (p0) {
    let $res = natives.setAmbientPedsDropMoney(p0 | 0);
};
mp.game2.ped.setSuffersCriticalHits = function (ped, toggle) {
    let $res = natives.setPedSuffersCriticalHits(ped, toggle | 0);
};
mp.game2.ped.isSittingInVehicle = function (ped, vehicle) {
    let $res = natives.isPedSittingInVehicle(ped, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isSittingInAnyVehicle = function (ped) {
    let $res = natives.isPedSittingInAnyVehicle(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isOnFoot = function (ped) {
    let $res = natives.isPedOnFoot(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isOnAnyBike = function (ped) {
    let $res = natives.isPedOnAnyBike(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isPlantingBomb = function (ped) {
    let $res = natives.isPedPlantingBomb(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getDeadPickupCoords = function (ped, p1, p2) {
    let $res = natives.getDeadPedPickupCoords(ped, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.ped.isInAnyBoat = function (ped) {
    let $res = natives.isPedInAnyBoat(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInAnySub = function (ped) {
    let $res = natives.isPedInAnySub(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInAnyHeli = function (ped) {
    let $res = natives.isPedInAnyHeli(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInAnyPlane = function (ped) {
    let $res = natives.isPedInAnyPlane(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInFlyingVehicle = function (ped) {
    let $res = natives.isPedInFlyingVehicle(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setDiesInWater = function (ped, toggle) {
    let $res = natives.setPedDiesInWater(ped, toggle | 0);
};
mp.game2.ped.setDiesInSinkingVehicle = function (ped, toggle) {
    let $res = natives.setPedDiesInSinkingVehicle(ped, toggle | 0);
};
mp.game2.ped.getArmour = function (ped) {
    let $res = natives.getPedArmour(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setStayInVehicleWhenJacked = function (ped, toggle) {
    let $res = natives.setPedStayInVehicleWhenJacked(ped, toggle | 0);
};
mp.game2.ped.setCanBeShotInVehicle = function (ped, toggle) {
    let $res = natives.setPedCanBeShotInVehicle(ped, toggle | 0);
};
mp.game2.ped.getLastDamageBone = function (ped) {
    let $res = natives.getPedLastDamageBone(ped, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outBone = $res[1];
    return $res[0] == 1 ? $resObj.outBone : undefined;
};
mp.game2.ped.clearLastDamageBone = function (ped) {
    let $res = natives.clearPedLastDamageBone(ped);
};
mp.game2.ped.setAiWeaponDamageModifier = function (value) {
    let $res = natives.setAiWeaponDamageModifier(value);
};
mp.game2.ped.resetAiWeaponDamageModifier = function () {
    let $res = natives.resetAiWeaponDamageModifier();
};
mp.game2.ped.setAiMeleeWeaponDamageModifier = function (modifier) {
    let $res = natives.setAiMeleeWeaponDamageModifier(modifier);
};
mp.game2.ped.resetAiMeleeWeaponDamageModifier = function () {
    let $res = natives.resetAiMeleeWeaponDamageModifier();
};
mp.game2.ped.setCanBeTargetted = function (ped, toggle) {
    let $res = natives.setPedCanBeTargetted(ped, toggle | 0);
};
mp.game2.ped.setCanBeTargettedByTeam = function (ped, team, toggle) {
    let $res = natives.setPedCanBeTargettedByTeam(ped, team, toggle | 0);
};
mp.game2.ped.setCanBeTargettedByPlayer = function (ped, player, toggle) {
    let $res = natives.setPedCanBeTargettedByPlayer(ped, player, toggle | 0);
};
mp.game2.ped.isInAnyPoliceVehicle = function (ped) {
    let $res = natives.isPedInAnyPoliceVehicle(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.forceToOpenParachute = function (ped) {
    let $res = natives.forcePedToOpenParachute(ped);
};
mp.game2.ped.isInParachuteFreeFall = function (ped) {
    let $res = natives.isPedInParachuteFreeFall(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isFalling = function (ped) {
    let $res = natives.isPedFalling(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isJumping = function (ped) {
    let $res = natives.isPedJumping(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isClimbing = function (ped) {
    let $res = natives.isPedClimbing(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isVaulting = function (ped) {
    let $res = natives.isPedVaulting(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isDiving = function (ped) {
    let $res = natives.isPedDiving(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isJumpingOutOfVehicle = function (ped) {
    let $res = natives.isPedJumpingOutOfVehicle(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isOpeningADoor = function (ped) {
    let $res = natives.isPedOpeningDoor(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getParachuteState = function (ped) {
    let $res = natives.getPedParachuteState(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getParachuteLandingType = function (ped) {
    let $res = natives.getPedParachuteLandingType(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setParachuteTintIndex = function (ped, tintIndex) {
    let $res = natives.setPedParachuteTintIndex(ped, tintIndex);
};
mp.game2.ped.getParachuteTintIndex = function (ped) {
    let $res = natives.getPedParachuteTintIndex(ped, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outTintIndex = $res[1];
    return $resObj.outTintIndex;
};
mp.game2.ped.setReserveParachuteTintIndex = function (ped, p1) {
    let $res = natives.setPedReserveParachuteTintIndex(ped, p1);
};
mp.game2.ped.setPedReserveParachuteTintIndex = function (ped, p1) {
    let $res = natives.setPedReserveParachuteTintIndex(ped, p1);
};
mp.game2.ped.createParachuteBagObject = function (ped, p1, p2) {
    let $res = natives.createParachuteBagObject(ped, p1 | 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setDucking = function (ped, toggle) {
    let $res = natives.setPedDucking(ped, toggle | 0);
};
mp.game2.ped.isDucking = function (ped) {
    let $res = natives.isPedDucking(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInAnyTaxi = function (ped) {
    let $res = natives.isPedInAnyTaxi(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setIdRange = function (ped, value) {
    let $res = natives.setPedIdRange(ped, value);
};
mp.game2.ped.setHighlyPerceptive = function (ped, toggle) {
    let $res = natives.setPedHighlyPerceptive(ped, toggle | 0);
};
mp.game2.ped.setSeeingRange = function (ped, value) {
    let $res = natives.setPedSeeingRange(ped, value);
};
mp.game2.ped.setHearingRange = function (ped, value) {
    let $res = natives.setPedHearingRange(ped, value);
};
mp.game2.ped.setVisualFieldMinAngle = function (ped, value) {
    let $res = natives.setPedVisualFieldMinAngle(ped, value);
};
mp.game2.ped.setVisualFieldMaxAngle = function (ped, value) {
    let $res = natives.setPedVisualFieldMaxAngle(ped, value);
};
mp.game2.ped.setVisualFieldMinElevationAngle = function (ped, angle) {
    let $res = natives.setPedVisualFieldMinElevationAngle(ped, angle);
};
mp.game2.ped.setVisualFieldMaxElevationAngle = function (ped, angle) {
    let $res = natives.setPedVisualFieldMaxElevationAngle(ped, angle);
};
mp.game2.ped.setVisualFieldPeripheralRange = function (ped, range) {
    let $res = natives.setPedVisualFieldPeripheralRange(ped, range);
};
mp.game2.ped.setVisualFieldCenterAngle = function (ped, angle) {
    let $res = natives.setPedVisualFieldCenterAngle(ped, angle);
};
mp.game2.ped.getVisualFieldCenterAngle = function (ped) {
    let $res = natives.getPedVisualFieldCenterAngle(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setStealthMovement = function (ped, p1, action) {
    let $res = natives.setPedStealthMovement(ped, p1 | 0, action);
};
mp.game2.ped.getStealthMovement = function (ped) {
    let $res = natives.getPedStealthMovement(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.createGroup = function (unused) {
    let $res = natives.createGroup(unused);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setAsGroupLeader = function (ped, groupId) {
    let $res = natives.setPedAsGroupLeader(ped, groupId);
};
mp.game2.ped.setAsGroupMember = function (ped, groupId) {
    let $res = natives.setPedAsGroupMember(ped, groupId);
};
mp.game2.ped.setCanTeleportToGroupLeader = function (pedHandle, groupHandle, toggle) {
    let $res = natives.setPedCanTeleportToGroupLeader(pedHandle, groupHandle, toggle | 0);
};
mp.game2.ped.removeGroup = function (groupId) {
    let $res = natives.removeGroup(groupId);
};
mp.game2.ped.removeFromGroup = function (ped) {
    let $res = natives.removePedFromGroup(ped);
};
mp.game2.ped.isGroupMember = function (ped, groupId) {
    let $res = natives.isPedGroupMember(ped, groupId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isHangingOnToVehicle = function (ped) {
    let $res = natives.isPedHangingOnToVehicle(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setGroupSeparationRange = function (groupHandle, separationRange) {
    let $res = natives.setGroupSeparationRange(groupHandle, separationRange);
};
mp.game2.ped.setMinGroundTimeForStungun = function (ped, ms) {
    let $res = natives.setPedMinGroundTimeForStungun(ped, ms);
};
mp.game2.ped.isProne = function (ped) {
    let $res = natives.isPedProne(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInCombat = function (ped, target) {
    let $res = natives.isPedInCombat(ped, target);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getTaskCombatTarget = function (ped, p1) {
    let $res = natives.getPedTargetFromCombatPed(ped, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.canInCombatSeeTarget = function (ped, target) {
    let $res = natives.canPedInCombatSeeTarget(ped, target);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isDoingDriveby = function (ped) {
    let $res = natives.isPedDoingDriveby(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isJacking = function (ped) {
    let $res = natives.isPedJacking(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isBeingJacked = function (ped) {
    let $res = natives.isPedBeingJacked(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isBeingStunned = function (ped, p1) {
    let $res = natives.isPedBeingStunned(ped, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getPedsJacker = function (ped) {
    let $res = natives.getPedsJacker(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getJackTarget = function (ped) {
    let $res = natives.getJackTarget(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.isFleeing = function (ped) {
    let $res = natives.isPedFleeing(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInCover = function (ped, exceptUseWeapon) {
    let $res = natives.isPedInCover(ped, exceptUseWeapon | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInCoverFacingLeft = function (ped) {
    let $res = natives.isPedInCoverFacingLeft(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isInHighCover = function (ped) {
    let $res = natives.isPedInHighCover(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isGoingIntoCover = function (ped) {
    let $res = natives.isPedGoingIntoCover(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setPinnedDown = function (ped, pinned, i) {
    let $res = natives.setPedPinnedDown(ped, pinned | 0, i);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getSeatIsTryingToEnter = function (ped) {
    let $res = natives.getSeatPedIsTryingToEnter(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getVehicleIsTryingToEnter = function (ped) {
    let $res = natives.getVehiclePedIsTryingToEnter(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getSourceOfDeath = function (ped) {
    let $res = natives.getPedSourceOfDeath(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getCauseOfDeath = function (ped) {
    let $res = natives.getPedCauseOfDeath(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getTimeOfDeath = function (ped) {
    let $res = natives.getPedTimeOfDeath(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setRelationshipGroupDefaultHash = function (ped, hash) {
    let $res = natives.setPedRelationshipGroupDefaultHash(ped, hash);
};
mp.game2.ped.setRelationshipGroupHash = function (ped, hash) {
    let $res = natives.setPedRelationshipGroupHash(ped, hash);
};
mp.game2.ped.setRelationshipBetweenGroups = function (relationship, group1, group2) {
    let $res = natives.setRelationshipBetweenGroups(relationship, group1, group2);
};
mp.game2.ped.clearRelationshipBetweenGroups = function (relationship, group1, group2) {
    let $res = natives.clearRelationshipBetweenGroups(relationship, group1, group2);
};
mp.game2.ped.addRelationshipGroup = function (name) {
    let $res = natives.addRelationshipGroup(name, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.groupHash = $res[1];
    return $resObj.groupHash;
};
mp.game2.ped.removeRelationshipGroup = function (groupHash) {
    let $res = natives.removeRelationshipGroup(groupHash);
};
mp.game2.ped.doesRelationshipGroupExist = function (groupHash) {
    let $res = natives.doesRelationshipGroupExist(groupHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getRelationshipBetweenS = function (ped1, ped2) {
    let $res = natives.getRelationshipBetweenPeds(ped1, ped2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getRelationshipGroupDefaultHash = function (ped) {
    let $res = natives.getPedRelationshipGroupDefaultHash(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getRelationshipGroupHash = function (ped) {
    let $res = natives.getPedRelationshipGroupHash(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getRelationshipBetweenGroups = function (group1, group2) {
    let $res = natives.getRelationshipBetweenGroups(group1, group2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setRelationshipGroupDontAffectWantedLevel = function (group, p1) {
    let $res = natives.setRelationshipGroupAffectsWantedLevel(group, p1 | 0);
};
mp.game2.ped.setCanBeTargetedWithoutLos = function (ped, toggle) {
    let $res = natives.setPedCanBeTargetedWithoutLos(ped, toggle | 0);
};
mp.game2.ped.setToInformRespectedFriends = function (ped, radius, maxFriends) {
    let $res = natives.setPedToInformRespectedFriends(ped, radius, maxFriends);
};
mp.game2.ped.isRespondingToEvent = function (ped, event) {
    let $res = natives.isPedRespondingToEvent(ped, event);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isPedRespondingToEvent = function (ped, event) {
    let $res = natives.isPedRespondingToEvent(ped, event);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getEventData = function (ped, eventType) {
    let $res = natives.getPosFromFiredEvent(ped, eventType, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outData = $res[0];
    return $res[0] == 1 ? $resObj.outData : undefined;
};
mp.game2.ped.setFiringPattern = function (ped, patternHash) {
    let $res = natives.setPedFiringPattern(ped, patternHash);
};
mp.game2.ped.setShootRate = function (ped, shootRate) {
    let $res = natives.setPedShootRate(ped, shootRate);
};
mp.game2.ped.setCombatFloat = function (ped, combatType, p2) {
    let $res = natives.setCombatFloat(ped, combatType, p2);
};
mp.game2.ped.getCombatFloat = function (ped, p1) {
    let $res = natives.getCombatFloat(ped, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getGroupSize = function (groupID) {
    let $res = natives.getGroupSize(groupID, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.unknown = $res[0];
    $resObj.sizeInMembers = $res[1];
    return $resObj;
};
mp.game2.ped.doesGroupExist = function (groupId) {
    let $res = natives.doesGroupExist(groupId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getGroupIndex = function (ped) {
    let $res = natives.getPedGroupIndex(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.isInGroup = function (ped) {
    let $res = natives.isPedInGroup(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getPlayerIsFollowing = function (ped) {
    let $res = natives.getPlayerPedIsFollowing(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setGroupFormation = function (groupId, formationType) {
    let $res = natives.setGroupFormation(groupId, formationType);
};
mp.game2.ped.setGroupFormationSpacing = function (groupId, p1, p2, p3) {
    let $res = natives.setGroupFormationSpacing(groupId, p1, p2, p3);
};
mp.game2.ped.resetGroupFormationDefaultSpacing = function (groupHandle) {
    let $res = natives.resetGroupFormationDefaultSpacing(groupHandle);
};
mp.game2.ped.getVehicleIsUsing = function (ped) {
    let $res = natives.getVehiclePedIsUsing(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getVehicleIsEntering = function (ped) {
    let $res = natives.getVehiclePedIsEntering(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setExclusivePhoneRelationships = function (ped) {
    let $res = natives.getVehiclePedIsEntering(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setGravity = function (ped, toggle) {
    let $res = natives.setPedGravity(ped, toggle | 0);
};
mp.game2.ped.applyDamageTo = function (ped, damageAmount, p2, p3) {
    let $res = natives.applyDamageToPed(ped, damageAmount, p2 | 0, p3 | 0);
};
mp.game2.ped.getTimeOfLastWeaponDamage = function (ped, weaponHash) {
    let $res = natives.getTimePedDamagedByWeapon(ped, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setAllowedToDuck = function (ped, toggle) {
    let $res = natives.setPedAllowedToDuck(ped, toggle | 0);
};
mp.game2.ped.setNeverLeavesGroup = function (ped, toggle) {
    let $res = natives.setPedNeverLeavesGroup(ped, toggle | 0);
};
mp.game2.ped.getType = function (ped) {
    let $res = natives.getPedType(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setAsCop = function (ped, toggle) {
    let $res = natives.setPedAsCop(ped, toggle | 0);
};
mp.game2.ped.setMaxHealth = function (ped, value) {
    let $res = natives.setPedMaxHealth(ped, value);
};
mp.game2.ped.getMaxHealth = function (ped) {
    let $res = natives.getPedMaxHealth(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setMaxTimeInWater = function (ped, value) {
    let $res = natives.setPedMaxTimeInWater(ped, value);
};
mp.game2.ped.setMaxTimeUnderwater = function (ped, value) {
    let $res = natives.setPedMaxTimeUnderwater(ped, value);
};
mp.game2.ped.setVehicleForcedSeatUsage = function (ped, vehicle, seatIndex, flags, p4) {
    let $res = natives.setPedVehicleForcedSeatUsage(ped, vehicle, seatIndex, flags, p4);
};
mp.game2.ped.clearAllVehicleForcedSeatUsage = function (ped) {
    let $res = natives.clearAllPedVehicleForcedSeatUsage(ped);
};
mp.game2.ped.setCanBeKnockedOffVehicle = function (ped, state) {
    let $res = natives.setPedCanBeKnockedOffVehicle(ped, state);
};
mp.game2.ped.canKnockOffVehicle = function (ped) {
    let $res = natives.canKnockPedOffVehicle(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.knockOffVehicle = function (ped) {
    let $res = natives.knockPedOffVehicle(ped);
};
mp.game2.ped.setCoordsNoGang = function (ped, posX, posY, posZ) {
    let $res = natives.setPedCoordsNoGang(ped, posX, posY, posZ);
};
mp.game2.ped.getAsGroupMember = function (groupID, memberNumber) {
    let $res = natives.getPedAsGroupMember(groupID, memberNumber);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getPedAsGroupMember = function (groupID, memberNumber) {
    let $res = natives.getPedAsGroupMember(groupID, memberNumber);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getAsGroupLeader = function (groupID) {
    let $res = natives.getPedAsGroupLeader(groupID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getPedAsGroupLeader = function (groupID) {
    let $res = natives.getPedAsGroupLeader(groupID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setKeepTask = function (ped, toggle) {
    let $res = natives.setPedKeepTask(ped, toggle | 0);
};
mp.game2.ped.isSwimming = function (ped) {
    let $res = natives.isPedSwimming(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isSwimmingUnderWater = function (ped) {
    let $res = natives.isPedSwimmingUnderWater(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setCoordsKeepVehicle = function (ped, posX, posY, posZ) {
    let $res = natives.setPedCoordsKeepVehicle(ped, posX, posY, posZ);
};
mp.game2.ped.setDiesInVehicle = function (ped, toggle) {
    let $res = natives.setPedDiesInVehicle(ped, toggle | 0);
};
mp.game2.ped.setCreateRandomCops = function (toggle) {
    let $res = natives.setCreateRandomCops(toggle | 0);
};
mp.game2.ped.setCreateRandomCopsNotOnScenarios = function (toggle) {
    let $res = natives.setCreateRandomCopsNotOnScenarios(toggle | 0);
};
mp.game2.ped.setCreateRandomCopsOnScenarios = function (toggle) {
    let $res = natives.setCreateRandomCopsOnScenarios(toggle | 0);
};
mp.game2.ped.canCreateRandomCops = function () {
    let $res = natives.canCreateRandomCops();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setAsEnemy = function (ped, toggle) {
    let $res = natives.setPedAsEnemy(ped, toggle | 0);
};
mp.game2.ped.setCanSmashGlass = function (ped, p1, p2) {
    let $res = natives.setPedCanSmashGlass(ped, p1 | 0, p2 | 0);
};
mp.game2.ped.isInAnyTrain = function (ped) {
    let $res = natives.isPedInAnyTrain(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isGettingIntoAVehicle = function (ped) {
    let $res = natives.isPedGettingIntoAVehicle(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isTryingToEnterALockedVehicle = function (ped) {
    let $res = natives.isPedTryingToEnterALockedVehicle(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setEnableHandcuffs = function (ped, toggle) {
    let $res = natives.setEnableHandcuffs(ped, toggle | 0);
};
mp.game2.ped.setEnableBoundAnkles = function (ped, toggle) {
    let $res = natives.setEnableBoundAnkles(ped, toggle | 0);
};
mp.game2.ped.setEnableScuba = function (ped, toggle) {
    let $res = natives.setEnableScuba(ped, toggle | 0);
};
mp.game2.ped.setCanAttackFriendly = function (ped, toggle, p2) {
    let $res = natives.setCanAttackFriendly(ped, toggle | 0, p2 | 0);
};
mp.game2.ped.getAlertness = function (ped) {
    let $res = natives.getPedAlertness(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setAlertness = function (ped, value) {
    let $res = natives.setPedAlertness(ped, value);
};
mp.game2.ped.setGetOutUpsideDownVehicle = function (ped, toggle) {
    let $res = natives.setPedGetOutUpsideDownVehicle(ped, toggle | 0);
};
mp.game2.ped.setMovementClipset = function (ped, clipSet, transitionSpeed) {
    let $res = natives.setPedMovementClipset(ped, clipSet, transitionSpeed);
};
mp.game2.ped.resetMovementClipset = function (ped, p1) {
    let $res = natives.resetPedMovementClipset(ped, p1);
};
mp.game2.ped.setStrafeClipset = function (ped, clipSet) {
    let $res = natives.setPedStrafeClipset(ped, clipSet);
};
mp.game2.ped.resetStrafeClipset = function (ped) {
    let $res = natives.resetPedStrafeClipset(ped);
};
mp.game2.ped.setWeaponMovementClipset = function (ped, clipSet) {
    let $res = natives.setPedWeaponMovementClipset(ped, clipSet);
};
mp.game2.ped.resetWeaponMovementClipset = function (ped) {
    let $res = natives.resetPedWeaponMovementClipset(ped);
};
mp.game2.ped.setDriveByClipsetOverride = function (ped, clipset) {
    let $res = natives.setPedDriveByClipsetOverride(ped, clipset);
};
mp.game2.ped.clearDriveByClipsetOverride = function (ped) {
    let $res = natives.clearPedDriveByClipsetOverride(ped);
};
mp.game2.ped.setCoverClipsetOverride = function (ped, p1) {
    let $res = natives.setPedMotionInCoverClipsetOverride(ped, p1);
};
mp.game2.ped.clearCoverClipsetOverride = function (ped) {
    let $res = natives.clearPedMotionInCoverClipsetOverride(ped);
};
mp.game2.ped.setInVehicleContext = function (ped, context) {
    let $res = natives.setPedInVehicleContext(ped, context);
};
mp.game2.ped.resetInVehicleContext = function (ped) {
    let $res = natives.resetPedInVehicleContext(ped);
};
mp.game2.ped.isScriptedScenarioUsingConditionalAnim = function (ped, animDict, anim) {
    let $res = natives.isScriptedScenarioPedUsingConditionalAnim(ped, animDict, anim);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setAlternateWalkAnim = function (ped, animDict, animName, p3, p4) {
    let $res = natives.setPedAlternateWalkAnim(ped, animDict, animName, p3, p4 | 0);
};
mp.game2.ped.setPedAlternateWalkAnim = function (ped, animDict, animName, p3, p4) {
    let $res = natives.setPedAlternateWalkAnim(ped, animDict, animName, p3, p4 | 0);
};
mp.game2.ped.clearAlternateWalkAnim = function (ped, p1) {
    let $res = natives.clearPedAlternateWalkAnim(ped, p1);
};
mp.game2.ped.clearPedAlternateWalkAnim = function (ped, p1) {
    let $res = natives.clearPedAlternateWalkAnim(ped, p1);
};
mp.game2.ped.setAlternateMovementAnim = function (ped, stance, animDictionary, animationName, p4, p5) {
    let $res = natives.setPedAlternateMovementAnim(ped, stance, animDictionary, animationName, p4, p5 | 0);
};
mp.game2.ped.clearAlternateMovementAnim = function (ped, stance, p2) {
    let $res = natives.clearPedAlternateMovementAnim(ped, stance, p2);
};
mp.game2.ped.setGestureGroup = function (ped, animGroupGesture) {
    let $res = natives.setPedGestureGroup(ped, animGroupGesture);
};
mp.game2.ped.getAnimInitialOffsetPosition = function (animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9) {
    let $res = natives.getAnimInitialOffsetPosition(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.ped.getAnimInitialOffsetRotation = function (animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9) {
    let $res = natives.getAnimInitialOffsetRotation(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.ped.getDrawableVariation = function (ped, componentId) {
    let $res = natives.getPedDrawableVariation(ped, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getNumberOfDrawableVariations = function (ped, componentId) {
    let $res = natives.getNumberOfPedDrawableVariations(ped, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getTextureVariation = function (ped, componentId) {
    let $res = natives.getPedTextureVariation(ped, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getNumberOfTextureVariations = function (ped, componentId, drawableId) {
    let $res = natives.getNumberOfPedTextureVariations(ped, componentId, drawableId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getNumberOfPropDrawableVariations = function (ped, propId) {
    let $res = natives.getNumberOfPedPropDrawableVariations(ped, propId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getNumberOfPropTextureVariations = function (ped, propId, drawableId) {
    let $res = natives.getNumberOfPedPropTextureVariations(ped, propId, drawableId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getPaletteVariation = function (ped, componentId) {
    let $res = natives.getPedPaletteVariation(ped, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.isComponentVariationValid = function (ped, componentId, drawableId, textureId) {
    let $res = natives.isPedComponentVariationValid(ped, componentId, drawableId, textureId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setComponentVariation = function (ped, componentId, drawableId, textureId, paletteId) {
    let $res = natives.setPedComponentVariation(ped, componentId, drawableId, textureId, paletteId);
};
mp.game2.ped.setRandomComponentVariation = function (ped, p1) {
    let $res = natives.setPedRandomComponentVariation(ped, p1 | 0);
};
mp.game2.ped.setRandomProps = function (ped) {
    let $res = natives.setPedRandomProps(ped);
};
mp.game2.ped.setDefaultComponentVariation = function (ped) {
    let $res = natives.setPedDefaultComponentVariation(ped);
};
mp.game2.ped.setBlendFromParents = function (ped, p1, p2, p3, p4) {
    let $res = natives.setPedBlendFromParents(ped, p1, p2, p3, p4);
};
mp.game2.ped.setHeadBlendData = function (ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent) {
    let $res = natives.setPedHeadBlendData(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent | 0);
};
mp.game2.ped.getHeadBlendData = function (ped) {
    let $res = natives.getPedHeadBlendData(ped, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.headBlendData = $res[0];
    return $res[0] == 1 ? $resObj.headBlendData : undefined;
};
mp.game2.ped.updateHeadBlendData = function (ped, shapeMix, skinMix, thirdMix) {
    let $res = natives.updatePedHeadBlendData(ped, shapeMix, skinMix, thirdMix);
};
mp.game2.ped.setEyeColor = function (ped, index) {
    let $res = natives.setHeadBlendEyeColor(ped, index);
};
mp.game2.ped.getEyeColor = function (ped) {
    let $res = natives.getHeadBlendEyeColor(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setHeadOverlay = function (ped, overlayID, index, opacity) {
    let $res = natives.setPedHeadOverlay(ped, overlayID, index, opacity);
};
mp.game2.ped.getHeadOverlayValue = function (ped, overlayID) {
    let $res = natives.getPedHeadOverlay(ped, overlayID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getHeadOverlayNum = function (overlayID) {
    let $res = natives.getPedHeadOverlayNum(overlayID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getNumHeadOverlayValues = function (overlayID) {
    let $res = natives.getPedHeadOverlayNum(overlayID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setHeadOverlayColor = function (ped, overlayID, colorType, colorID, secondColorID) {
    let $res = natives.setPedHeadOverlayTint(ped, overlayID, colorType, colorID, secondColorID);
};
mp.game2.ped.setHairColor = function (ped, colorID, highlightColorID) {
    let $res = natives.setPedHairTint(ped, colorID, highlightColorID);
};
mp.game2.ped.getNumHairColors = function () {
    let $res = natives.getNumPedHairTints();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getNumMakeupColors = function () {
    let $res = natives.getNumPedMakeupTints();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getHairRgbColor = function (hairColorIndex) {
    let $res = natives.getPedHairTintColor(hairColorIndex, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outR = $res[1];
    $resObj.outG = $res[2];
    $resObj.outB = $res[3];
    return $resObj;
};
mp.game2.ped.getMakeupRgbColor = function (makeupColorIndex) {
    let $res = natives.getPedMakeupTintColor(makeupColorIndex, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outR = $res[1];
    $resObj.outG = $res[2];
    $resObj.outB = $res[3];
    return $resObj;
};
mp.game2.ped.isHairColorValid2 = function (colorId) {
    let $res = natives.isPedHairTintForCreator(colorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isLipstickColorValid2 = function (colorId) {
    let $res = natives.isPedLipstickTintForCreator(colorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isBlushColorValid2 = function (colorId) {
    let $res = natives.isPedBlushTintForCreator(colorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isHairColorValid = function (colorID) {
    let $res = natives.isPedHairTintForBarber(colorID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isAValidHairColor = function (colorID) {
    let $res = natives.isPedHairTintForBarber(colorID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isLipstickColorValid = function (colorID) {
    let $res = natives.isPedLipstickTintForBarber(colorID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isAValidLipstickColor = function (colorID) {
    let $res = natives.isPedLipstickTintForBarber(colorID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isBlushColorValid = function (colorID) {
    let $res = natives.isPedBlushTintForBarber(colorID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isAValidBlushColor = function (colorID) {
    let $res = natives.isPedBlushTintForBarber(colorID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isBodyBlemishValid = function (colorId) {
    let $res = natives.isPedBlushFacepaintTintForBarber(colorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setFaceFeature = function (ped, index, scale) {
    let $res = natives.setPedMicroMorph(ped, index, scale);
};
mp.game2.ped.hasHeadBlendFinished = function (ped) {
    let $res = natives.hasPedHeadBlendFinished(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.finalizeHeadBlend = function (ped) {
    let $res = natives.finalizeHeadBlend(ped);
};
mp.game2.ped.setHeadBlendPaletteColor = function (ped, r, g, b, id) {
    let $res = natives.setHeadBlendPaletteColor(ped, r, g, b, id);
};
mp.game2.ped.disableHeadBlendPaletteColor = function (ped) {
    let $res = natives.disableHeadBlendPaletteColor(ped);
};
mp.game2.ped.getHeadBlendFirstIndex = function (type) {
    let $res = natives.getPedHeadBlendFirstIndex(type);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getFirstParentIdForPedType = function (type) {
    let $res = natives.getPedHeadBlendFirstIndex(type);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getHeadBlendNumHeads = function (type) {
    let $res = natives.getPedHeadBlendNumHeads(type);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getNumParentPedsOfType = function (type) {
    let $res = natives.getPedHeadBlendNumHeads(type);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setPreloadVariationData = function (ped, slot, drawableId, textureId) {
    let $res = natives.setPedPreloadVariationData(ped, slot, drawableId, textureId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.hasPreloadVariationDataFinished = function (ped) {
    let $res = natives.hasPedPreloadVariationDataFinished(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.releasePreloadVariationData = function (ped) {
    let $res = natives.releasePedPreloadVariationData(ped);
};
mp.game2.ped.setPreloadPropData = function (ped, componentId, drawableId, TextureId) {
    let $res = natives.setPedPreloadPropData(ped, componentId, drawableId, TextureId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.hasPreloadPropDataFinished = function (ped) {
    let $res = natives.hasPedPreloadPropDataFinished(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.releasePreloadPropData = function (ped) {
    let $res = natives.releasePedPreloadPropData(ped);
};
mp.game2.ped.getPropIndex = function (ped, componentId) {
    let $res = natives.getPedPropIndex(ped, componentId, 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setPropIndex = function (ped, componentId, drawableId, TextureId, attach) {
    let $res = natives.setPedPropIndex(ped, componentId, drawableId, TextureId, attach | 0, 0);
};
mp.game2.ped.knockOffProp = function (ped, p1, p2, p3, p4) {
    let $res = natives.knockOffPedProp(ped, p1 | 0, p2 | 0, p3 | 0, p4 | 0);
};
mp.game2.ped.clearProp = function (ped, propId) {
    let $res = natives.clearPedProp(ped, propId, 0);
};
mp.game2.ped.clearAllProps = function (ped) {
    let $res = natives.clearAllPedProps(ped, 0);
};
mp.game2.ped.dropAmbientProp = function (ped) {
    let $res = natives.dropAmbientProp(ped);
};
mp.game2.ped.getPropTextureIndex = function (ped, componentId) {
    let $res = natives.getPedPropTextureIndex(ped, componentId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.clearParachutePackVariation = function (ped) {
    let $res = natives.clearPedParachutePackVariation(ped);
};
mp.game2.ped.setScubaGearVariation = function (ped) {
    let $res = natives.setPedScubaGearVariation(ped);
};
mp.game2.ped.clearScubaGearVariation = function (ped) {
    let $res = natives.clearPedScubaGearVariation(ped);
};
mp.game2.ped.setBlockingOfNonTemporaryEvents = function (ped, toggle) {
    let $res = natives.setBlockingOfNonTemporaryEvents(ped, toggle | 0);
};
mp.game2.ped.setBoundsOrientation = function (ped, p1, p2, p3, p4, p5) {
    let $res = natives.setPedBoundsOrientation(ped, p1, p2, p3, p4, p5);
};
mp.game2.ped.registerTarget = function (ped, target) {
    let $res = natives.registerTarget(ped, target);
};
mp.game2.ped.registerHatedTargetsAround = function (ped, radius) {
    let $res = natives.registerHatedTargetsAroundPed(ped, radius);
};
mp.game2.ped.getRandomAtCoord = function (x, y, z, xRadius, yRadius, zRadius, pedType) {
    let $res = natives.getRandomPedAtCoord(x, y, z, xRadius, yRadius, zRadius, pedType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getRandomPedAtCoord = function (x, y, z, xRadius, yRadius, zRadius, pedType) {
    let $res = natives.getRandomPedAtCoord(x, y, z, xRadius, yRadius, zRadius, pedType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getClosest = function (x, y, z, radius, p4, p5, p7, p8, pedType) {
    let $res = natives.getClosestPed(x, y, z, radius, p4 | 0, p5 | 0, 0, p7 | 0, p8 | 0, pedType);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPed = $res[1];
    return $res[0] == 1 ? $resObj.outPed : undefined;
};
mp.game2.ped.getClosestPed = function (x, y, z, radius, p4, p5, p7, p8, pedType) {
    let $res = natives.getClosestPed(x, y, z, radius, p4 | 0, p5 | 0, 0, p7 | 0, p8 | 0, pedType);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outPed = $res[1];
    return $res[0] == 1 ? $resObj.outPed : undefined;
};
mp.game2.ped.setScenarioPedsToBeReturnedByNextCommand = function (value) {
    let $res = natives.setScenarioPedsToBeReturnedByNextCommand(value | 0);
};
mp.game2.ped.setDriverRacingModifier = function (driver, modifier) {
    let $res = natives.setDriverRacingModifier(driver, modifier);
};
mp.game2.ped.setDriverAbility = function (driver, ability) {
    let $res = natives.setDriverAbility(driver, ability);
};
mp.game2.ped.setDriverAggressiveness = function (driver, aggressiveness) {
    let $res = natives.setDriverAggressiveness(driver, aggressiveness);
};
mp.game2.ped.canRagdoll = function (ped) {
    let $res = natives.canPedRagdoll(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setToRagdoll = function (ped, time1, time2, ragdollType, p4, p5, p6) {
    let $res = natives.setPedToRagdoll(ped, time1, time2, ragdollType, p4 | 0, p5 | 0, p6 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setPedToRagdoll = function (ped, time1, time2, ragdollType, p4, p5, p6) {
    let $res = natives.setPedToRagdoll(ped, time1, time2, ragdollType, p4 | 0, p5 | 0, p6 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setToRagdollWithFall = function (ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13) {
    let $res = natives.setPedToRagdollWithFall(ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setPedToRagdollWithFall = function (ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13) {
    let $res = natives.setPedToRagdollWithFall(ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setRagdollOnCollision = function (ped, toggle) {
    let $res = natives.setPedRagdollOnCollision(ped, toggle | 0);
};
mp.game2.ped.isRagdoll = function (ped) {
    let $res = natives.isPedRagdoll(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isRunningRagdollTask = function (ped) {
    let $res = natives.isPedRunningRagdollTask(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setRagdollForceFall = function (ped) {
    let $res = natives.setPedRagdollForceFall(ped);
};
mp.game2.ped.resetRagdollTimer = function (ped) {
    let $res = natives.resetPedRagdollTimer(ped);
};
mp.game2.ped.setCanRagdoll = function (ped, toggle) {
    let $res = natives.setPedCanRagdoll(ped, toggle | 0);
};
mp.game2.ped.isRunningMeleeTask = function (ped) {
    let $res = natives.isPedRunningMeleeTask(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isRunningMobilePhoneTask = function (ped) {
    let $res = natives.isPedRunningMobilePhoneTask(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isMobilePhoneToEar = function (ped) {
    let $res = natives.isMobilePhoneToPedEar(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setRagdollBlockingFlags = function (ped, flags) {
    let $res = natives.setRagdollBlockingFlags(ped, flags);
};
mp.game2.ped.clearRagdollBlockingFlags = function (ped, flags) {
    let $res = natives.clearRagdollBlockingFlags(ped, flags);
};
mp.game2.ped.setAngledDefensiveArea = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.setPedAngledDefensiveArea(ped, p1, p2, p3, p4, p5, p6, p7, p8 | 0, p9 | 0);
};
mp.game2.ped.setSphereDefensiveArea = function (ped, x, y, z, radius, p5, p6) {
    let $res = natives.setPedSphereDefensiveArea(ped, x, y, z, radius, p5 | 0, p6 | 0);
};
mp.game2.ped.setDefensiveSphereAttachedToPed = function (ped, target, xOffset, yOffset, zOffset, radius, p6) {
    let $res = natives.setPedDefensiveSphereAttachedToPed(ped, target, xOffset, yOffset, zOffset, radius, p6 | 0);
};
mp.game2.ped.setDefensiveSphereAttachedToVehicle = function (ped, target, xOffset, yOffset, zOffset, radius, p6) {
    let $res = natives.setPedDefensiveSphereAttachedToVehicle(ped, target, xOffset, yOffset, zOffset, radius, p6 | 0);
};
mp.game2.ped.setDefensiveAreaAttachedToPed = function (ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.setPedDefensiveAreaAttachedToPed(ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9 | 0, p10 | 0);
};
mp.game2.ped.setDefensiveAreaDirection = function (ped, p1, p2, p3, p4) {
    let $res = natives.setPedDefensiveAreaDirection(ped, p1, p2, p3, p4 | 0);
};
mp.game2.ped.removeDefensiveArea = function (ped, toggle) {
    let $res = natives.removePedDefensiveArea(ped, toggle | 0);
};
mp.game2.ped.getDefensiveAreaPosition = function (ped, p1) {
    let $res = natives.getPedDefensiveAreaPosition(ped, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.ped.isDefensiveAreaActive = function (ped, p1) {
    let $res = natives.isPedDefensiveAreaActive(ped, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setPreferredCoverSet = function (ped, itemSet) {
    let $res = natives.setPedPreferredCoverSet(ped, itemSet);
};
mp.game2.ped.removePreferredCoverSet = function (ped) {
    let $res = natives.removePedPreferredCoverSet(ped);
};
mp.game2.ped.reviveInjured = function (ped) {
    let $res = natives.reviveInjuredPed(ped);
};
mp.game2.ped.resurrect = function (ped) {
    let $res = natives.resurrectPed(ped);
};
mp.game2.ped.setNameDebug = function (ped, name) {
    let $res = natives.setPedNameDebug(ped, name);
};
mp.game2.ped.getExtractedDisplacement = function (ped, worldSpace) {
    let $res = natives.getPedExtractedDisplacement(ped, worldSpace | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.ped.setDiesWhenInjured = function (ped, toggle) {
    let $res = natives.setPedDiesWhenInjured(ped, toggle | 0);
};
mp.game2.ped.setEnableWeaponBlocking = function (ped, toggle) {
    let $res = natives.setPedEnableWeaponBlocking(ped, toggle | 0);
};
mp.game2.ped.resetVisibleDamage = function (ped) {
    let $res = natives.resetPedVisibleDamage(ped);
};
mp.game2.ped.applyBloodDamageByZone = function (ped, p1, p2, p3, p4) {
    let $res = natives.applyPedBloodDamageByZone(ped, p1, p2, p3, p4);
};
mp.game2.ped.applyBlood = function (ped, boneIndex, xRot, yRot, zRot, woundType) {
    let $res = natives.applyPedBlood(ped, boneIndex, xRot, yRot, zRot, woundType);
};
mp.game2.ped.applyBloodByZone = function (ped, p1, p2, p3, p4) {
    let $res = natives.applyPedBloodByZone(ped, p1, p2, p3, p4);
};
mp.game2.ped.applyBloodSpecific = function (ped, p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.applyPedBloodSpecific(ped, p1, p2, p3, p4, p5, p6, p7, p8);
};
mp.game2.ped.applyDamageDecal = function (ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName) {
    let $res = natives.applyPedDamageDecal(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn | 0, decalName);
};
mp.game2.ped.applyDamagePack = function (ped, damagePack, damage, mult) {
    let $res = natives.applyPedDamagePack(ped, damagePack, damage, mult);
};
mp.game2.ped.clearBloodDamage = function (ped) {
    let $res = natives.clearPedBloodDamage(ped);
};
mp.game2.ped.clearBloodDamageByZone = function (ped, p1) {
    let $res = natives.clearPedBloodDamageByZone(ped, p1);
};
mp.game2.ped.hideBloodDamageByZone = function (ped, p1, p2) {
    let $res = natives.hidePedBloodDamageByZone(ped, p1, p2 | 0);
};
mp.game2.ped.clearDamageDecalByZone = function (ped, p1, p2) {
    let $res = natives.clearPedDamageDecalByZone(ped, p1, p2);
};
mp.game2.ped.getDecorationsState = function (ped) {
    let $res = natives.getPedDecorationsState(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.clearWetness = function (ped) {
    let $res = natives.clearPedWetness(ped);
};
mp.game2.ped.setWetnessHeight = function (ped, height) {
    let $res = natives.setPedWetnessHeight(ped, height);
};
mp.game2.ped.setWetnessEnabledThisFrame = function (ped) {
    let $res = natives.setPedWetnessEnabledThisFrame(ped);
};
mp.game2.ped.clearEnvDirt = function (ped) {
    let $res = natives.clearPedEnvDirt(ped);
};
mp.game2.ped.setSweat = function (ped, sweat) {
    let $res = natives.setPedSweat(ped, sweat);
};
mp.game2.ped.addDecorationFromHashes = function (ped, collection, overlay) {
    let $res = natives.addPedDecorationFromHashes(ped, collection, overlay);
};
mp.game2.ped.addDecorationFromHashesInCorona = function (ped, collection, overlay) {
    let $res = natives.addPedDecorationFromHashesInCorona(ped, collection, overlay);
};
mp.game2.ped.getDecorationZoneFromHashes = function (collection, overlay) {
    let $res = natives.getPedDecorationZoneFromHashes(collection, overlay);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getTattooZone = function (collection, overlay) {
    let $res = natives.getPedDecorationZoneFromHashes(collection, overlay);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.clearDecorations = function (ped) {
    let $res = natives.clearPedDecorations(ped);
};
mp.game2.ped.clearDecorationsLeaveScars = function (ped) {
    let $res = natives.clearPedDecorationsLeaveScars(ped);
};
mp.game2.ped.wasSkeletonUpdated = function (ped) {
    let $res = natives.wasPedSkeletonUpdated(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getBoneCoords = function (ped, boneId, offsetX, offsetY, offsetZ) {
    let $res = natives.getPedBoneCoords(ped, boneId, offsetX, offsetY, offsetZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.ped.createNmMessage = function (startImmediately, messageId) {
    let $res = natives.createNmMessage(startImmediately | 0, messageId);
};
mp.game2.ped.giveNmMessage = function (ped) {
    let $res = natives.givePedNmMessage(ped);
};
mp.game2.ped.addScenarioBlockingArea = function (x1, y1, z1, x2, y2, z2, p6, p7, p8, p9) {
    let $res = natives.addScenarioBlockingArea(x1, y1, z1, x2, y2, z2, p6 | 0, p7 | 0, p8 | 0, p9 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.removeScenarioBlockingAreas = function () {
    let $res = natives.removeScenarioBlockingAreas();
};
mp.game2.ped.removeScenarioBlockingArea = function (p0, p1) {
    let $res = natives.removeScenarioBlockingArea(p0, p1 | 0);
};
mp.game2.ped.setScenarioPedsSpawnInSphereArea = function (x, y, z, range, p4) {
    let $res = natives.setScenarioPedsSpawnInSphereArea(x, y, z, range, p4);
};
mp.game2.ped.doesScenarioBlockingAreaExist = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.doesScenarioBlockingAreaExists(x1, y1, z1, x2, y2, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isUsingScenario = function (ped, scenario) {
    let $res = natives.isPedUsingScenario(ped, scenario);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isUsingAnyScenario = function (ped) {
    let $res = natives.isPedUsingAnyScenario(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setPanicExitScenario = function (p0, p1, p2, p3) {
    let $res = natives.setPedPanicExitScenario(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setShouldPlayDirectedScenarioExit = function (p0, p1, p2, p3) {
    let $res = natives.setPedShouldPlayDirectedNormalScenarioExit(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setShouldPlayNormalScenarioExit = function (ped) {
    let $res = natives.setPedShouldPlayNormalScenarioExit(ped);
};
mp.game2.ped.setShouldPlayImmediateScenarioExit = function (ped) {
    let $res = natives.setPedShouldPlayImmediateScenarioExit(ped);
};
mp.game2.ped.setShouldPlayFleeScenarioExit = function (ped, p1, p2, p3) {
    let $res = natives.setPedShouldPlayFleeScenarioExit(ped, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.playFacialAnim = function (ped, animName, animDict) {
    let $res = natives.playFacialAnim(ped, animName, animDict);
};
mp.game2.ped.setFacialClipsetOverride = function (ped, animDict) {
    let $res = natives.setFacialClipset(ped, animDict);
};
mp.game2.ped.setFacialIdleAnimOverride = function (ped, animName, animDict) {
    let $res = natives.setFacialIdleAnimOverride(ped, animName, animDict);
};
mp.game2.ped.clearFacialIdleAnimOverride = function (ped) {
    let $res = natives.clearFacialIdleAnimOverride(ped);
};
mp.game2.ped.setCanPlayGestureAnims = function (ped, toggle) {
    let $res = natives.setPedCanPlayGestureAnims(ped, toggle | 0);
};
mp.game2.ped.setCanPlayVisemeAnims = function (ped, toggle, p2) {
    let $res = natives.setPedCanPlayVisemeAnims(ped, toggle | 0, p2 | 0);
};
mp.game2.ped.setCanPlayInjuredAnims = function (ped, p1) {
    let $res = natives.setPedIsIgnoredByAutoOpenDoors(ped, p1 | 0);
};
mp.game2.ped.setCanPlayAmbientAnims = function (ped, toggle) {
    let $res = natives.setPedCanPlayAmbientAnims(ped, toggle | 0);
};
mp.game2.ped.setCanPlayAmbientBaseAnims = function (ped, toggle) {
    let $res = natives.setPedCanPlayAmbientBaseAnims(ped, toggle | 0);
};
mp.game2.ped.setCanArmIk = function (ped, toggle) {
    let $res = natives.setPedCanArmIk(ped, toggle | 0);
};
mp.game2.ped.setCanHeadIk = function (ped, toggle) {
    let $res = natives.setPedCanHeadIk(ped, toggle | 0);
};
mp.game2.ped.setCanLegIk = function (ped, toggle) {
    let $res = natives.setPedCanLegIk(ped, toggle | 0);
};
mp.game2.ped.setCanTorsoIk = function (ped, toggle) {
    let $res = natives.setPedCanTorsoIk(ped, toggle | 0);
};
mp.game2.ped.setCanTorsoReactIk = function (ped, p1) {
    let $res = natives.setPedCanTorsoReactIk(ped, p1 | 0);
};
mp.game2.ped.setCanUseAutoConversationLookat = function (ped, toggle) {
    let $res = natives.setPedCanUseAutoConversationLookat(ped, toggle | 0);
};
mp.game2.ped.isHeadtrackingPed = function (ped1, ped2) {
    let $res = natives.isPedHeadtrackingPed(ped1, ped2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isHeadtrackingEntity = function (ped, entity) {
    let $res = natives.isPedHeadtrackingEntity(ped, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setPrimaryLookat = function (ped, lookAt) {
    let $res = natives.setPedPrimaryLookat(ped, lookAt);
};
mp.game2.ped.setClothPackageIndex = function (p0, p1) {
    let $res = natives.setPedClothPinFrames(p0, p1);
};
mp.game2.ped.setClothProne = function (p0, p1) {
    let $res = natives.setPedClothPackageIndex(p0, p1);
};
mp.game2.ped.setConfigFlag = function (ped, flagId, value) {
    let $res = natives.setPedConfigFlag(ped, flagId, value | 0);
};
mp.game2.ped.setResetFlag = function (ped, flagId, doReset) {
    let $res = natives.setPedResetFlag(ped, flagId, doReset | 0);
};
mp.game2.ped.getConfigFlag = function (ped, flagId, p2) {
    let $res = natives.getPedConfigFlag(ped, flagId, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getResetFlag = function (ped, flagId) {
    let $res = natives.getPedResetFlag(ped, flagId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setGroupMemberPassengerIndex = function (ped, index) {
    let $res = natives.setPedGroupMemberPassengerIndex(ped, index);
};
mp.game2.ped.setCanEvasiveDive = function (ped, toggle) {
    let $res = natives.setPedCanEvasiveDive(ped, toggle | 0);
};
mp.game2.ped.isEvasiveDiving = function (ped) {
    let $res = natives.isPedEvasiveDiving(ped, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.evadingEntity = $res[1];
    return $res[0] == 1 ? $resObj.evadingEntity : undefined;
};
mp.game2.ped.setShootsAtCoord = function (ped, x, y, z, toggle) {
    let $res = natives.setPedShootsAtCoord(ped, x, y, z, toggle | 0);
};
mp.game2.ped.setModelIsSuppressed = function (modelHash, toggle) {
    let $res = natives.setPedModelIsSuppressed(modelHash, toggle | 0);
};
mp.game2.ped.stopAnyModelBeingSuppressed = function () {
    let $res = natives.stopAnyPedModelBeingSuppressed();
};
mp.game2.ped.setCanBeTargetedWhenInjured = function (ped, toggle) {
    let $res = natives.setPedCanBeTargetedWhenInjured(ped, toggle | 0);
};
mp.game2.ped.setGeneratesDeadBodyEvents = function (ped, toggle) {
    let $res = natives.setPedGeneratesDeadBodyEvents(ped, toggle | 0);
};
mp.game2.ped.blockDeadBodyShockingEvents = function (ped, toggle) {
    let $res = natives.blockPedFromGeneratingDeadBodyEventsWhenDead(ped, toggle | 0);
};
mp.game2.ped.setCanRagdollFromPlayerImpact = function (ped, toggle) {
    let $res = natives.setPedCanRagdollFromPlayerImpact(ped, toggle | 0);
};
mp.game2.ped.giveHelmet = function (ped, cannotRemove, helmetFlag, textureIndex) {
    let $res = natives.givePedHelmet(ped, cannotRemove | 0, helmetFlag, textureIndex);
};
mp.game2.ped.removeHelmet = function (ped, instantly) {
    let $res = natives.removePedHelmet(ped, instantly | 0);
};
mp.game2.ped.isTakingOffHelmet = function (ped) {
    let $res = natives.isPedTakingOffHelmet(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setHelmet = function (ped, canWearHelmet) {
    let $res = natives.setPedHelmet(ped, canWearHelmet | 0);
};
mp.game2.ped.setHelmetFlag = function (ped, helmetFlag) {
    let $res = natives.setPedHelmetFlag(ped, helmetFlag);
};
mp.game2.ped.setHelmetPropIndex = function (ped, propIndex, p2) {
    let $res = natives.setPedHelmetPropIndex(ped, propIndex, p2 | 0);
};
mp.game2.ped.setHelmetUnk = function (ped, p1, p2, p3) {
    let $res = natives.setPedHelmetVisorPropIndices(ped, p1 | 0, p2, p3);
};
mp.game2.ped.isHelmetUnk = function (ped) {
    let $res = natives.isPedHelmetVisorUp(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setHelmetTextureIndex = function (ped, textureIndex) {
    let $res = natives.setPedHelmetTextureIndex(ped, textureIndex);
};
mp.game2.ped.isWearingHelmet = function (ped) {
    let $res = natives.isPedWearingHelmet(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.clearStoredHatProp = function (ped) {
    let $res = natives.clearPedStoredHatProp(ped);
};
mp.game2.ped.getHelmetStoredHatPropIndex = function (ped) {
    let $res = natives.getPedHelmetStoredHatPropIndex(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getHelmetStoredHatTexIndex = function (ped) {
    let $res = natives.getPedHelmetStoredHatTexIndex(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setToLoadCover = function (ped, toggle) {
    let $res = natives.setPedToLoadCover(ped, toggle | 0);
};
mp.game2.ped.setCanCowerInCover = function (ped, toggle) {
    let $res = natives.setPedCanCowerInCover(ped, toggle | 0);
};
mp.game2.ped.setCanPeekInCover = function (ped, toggle) {
    let $res = natives.setPedCanPeekInCover(ped, toggle | 0);
};
mp.game2.ped.setPlaysHeadOnHornAnimWhenDiesInVehicle = function (ped, toggle) {
    let $res = natives.setPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped, toggle | 0);
};
mp.game2.ped.setLegIkMode = function (ped, mode) {
    let $res = natives.setPedLegIkMode(ped, mode);
};
mp.game2.ped.setMotionBlur = function (ped, toggle) {
    let $res = natives.setPedMotionBlur(ped, toggle | 0);
};
mp.game2.ped.setCanSwitchWeapon = function (ped, toggle) {
    let $res = natives.setPedCanSwitchWeapon(ped, toggle | 0);
};
mp.game2.ped.setDiesInstantlyInWater = function (ped, toggle) {
    let $res = natives.setPedDiesInstantlyInWater(ped, toggle | 0);
};
mp.game2.ped.stopWeaponFiringWhenDropped = function (ped) {
    let $res = natives.stopPedWeaponFiringWhenDropped(ped);
};
mp.game2.ped.setScriptedAnimSeatOffset = function (ped, p1) {
    let $res = natives.setScriptedAnimSeatOffset(ped, p1);
};
mp.game2.ped.setCombatMovement = function (ped, combatMovement) {
    let $res = natives.setPedCombatMovement(ped, combatMovement);
};
mp.game2.ped.getCombatMovement = function (ped) {
    let $res = natives.getPedCombatMovement(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setCombatAbility = function (ped, abilityLevel) {
    let $res = natives.setPedCombatAbility(ped, abilityLevel);
};
mp.game2.ped.setCombatRange = function (ped, combatRange) {
    let $res = natives.setPedCombatRange(ped, combatRange);
};
mp.game2.ped.getCombatRange = function (ped) {
    let $res = natives.getPedCombatRange(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setCombatAttributes = function (ped, attributeId, enabled) {
    let $res = natives.setPedCombatAttributes(ped, attributeId, enabled | 0);
};
mp.game2.ped.setTargetLossResponse = function (ped, responseType) {
    let $res = natives.setPedTargetLossResponse(ped, responseType);
};
mp.game2.ped.isPerformingMeleeAction = function (ped) {
    let $res = natives.isPedPerformingMeleeAction(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isPerformingStealthKill = function (ped) {
    let $res = natives.isPedPerformingStealthKill(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isPerformingDependentComboLimit = function (ped) {
    let $res = natives.isPedPerformingACounterAttack(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isBeingStealthKilled = function (ped) {
    let $res = natives.isPedBeingStealthKilled(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getMeleeTargetFor = function (ped) {
    let $res = natives.getMeleeTargetForPed(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.wasKilledByStealth = function (ped) {
    let $res = natives.wasPedKilledByStealth(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.wasKilledByTakedown = function (ped) {
    let $res = natives.wasPedKilledByTakedown(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.wasKnockedOut = function (ped) {
    let $res = natives.wasPedKnockedOut(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setFleeAttributes = function (ped, attributeFlags, enable) {
    let $res = natives.setPedFleeAttributes(ped, attributeFlags, enable | 0);
};
mp.game2.ped.setCowerHash = function (ped, p1) {
    let $res = natives.setPedCowerHash(ped, p1);
};
mp.game2.ped.setSteersAroundPeds = function (ped, toggle) {
    let $res = natives.setPedSteersAroundPeds(ped, toggle | 0);
};
mp.game2.ped.setSteersAroundObjects = function (ped, toggle) {
    let $res = natives.setPedSteersAroundObjects(ped, toggle | 0);
};
mp.game2.ped.setSteersAroundVehicles = function (ped, toggle) {
    let $res = natives.setPedSteersAroundVehicles(ped, toggle | 0);
};
mp.game2.ped.setIncreasedAvoidanceRadius = function (ped) {
    let $res = natives.setPedIncreasedAvoidanceRadius(ped);
};
mp.game2.ped.setBlocksPathingWhenDead = function (ped, toggle) {
    let $res = natives.setPedBlocksPathingWhenDead(ped, toggle | 0);
};
mp.game2.ped.isAnyNearPoint = function (x, y, z, radius) {
    let $res = natives.isAnyPedNearPoint(x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isAnyPedNearPoint = function (x, y, z, radius) {
    let $res = natives.isAnyPedNearPoint(x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.forceAiAndAnimationUpdate = function (ped, p1, p2) {
    let $res = natives.forcePedAiAndAnimationUpdate(ped, p1 | 0, p2 | 0);
};
mp.game2.ped.isHeadingTowardsPosition = function (ped, x, y, z, p4) {
    let $res = natives.isPedHeadingTowardsPosition(ped, x, y, z, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.requestVisibilityTracking = function (ped) {
    let $res = natives.requestPedVisibilityTracking(ped);
};
mp.game2.ped.requestVehicleVisibilityTracking = function (ped, p1) {
    let $res = natives.requestPedVehicleVisibilityTracking(ped, p1 | 0);
};
mp.game2.ped.isTrackedVisible = function (ped) {
    let $res = natives.isTrackedPedVisible(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isTracked = function (ped) {
    let $res = natives.isPedTracked(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.hasReceivedEvent = function (ped, eventId) {
    let $res = natives.hasPedReceivedEvent(ped, eventId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.hasPedReceivedEvent = function (ped, eventId) {
    let $res = natives.hasPedReceivedEvent(ped, eventId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.canSeeHatedPed = function (ped1, ped2) {
    let $res = natives.canPedSeeHatedPed(ped1, ped2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getBoneIndex = function (ped, boneId) {
    let $res = natives.getPedBoneIndex(ped, boneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getRagdollBoneIndex = function (ped, bone) {
    let $res = natives.getPedRagdollBoneIndex(ped, bone);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setEnveffScale = function (ped, value) {
    let $res = natives.setPedEnveffScale(ped, value);
};
mp.game2.ped.getEnveffScale = function (ped) {
    let $res = natives.getPedEnveffScale(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setEnableEnveffScale = function (ped, toggle) {
    let $res = natives.setEnablePedEnveffScale(ped, toggle | 0);
};
mp.game2.ped.setEnveffColorModulator = function (ped, p1, p2, p3) {
    let $res = natives.setPedEnveffColorModulator(ped, p1, p2, p3);
};
mp.game2.ped.setEmissiveIntensity = function (ped, intensity) {
    let $res = natives.setPedEmissiveScale(ped, intensity);
};
mp.game2.ped.getEmissiveIntensity = function (ped) {
    let $res = natives.getPedEmissiveScale(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.isShaderEffectValid = function (ped) {
    let $res = natives.isPedShaderReady(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setAoBlobRendering = function (ped, toggle) {
    let $res = natives.setPedAoBlobRendering(ped, toggle | 0);
};
mp.game2.ped.createSynchronizedScene = function (x, y, z, roll, pitch, yaw, p6) {
    let $res = natives.createSynchronizedScene(x, y, z, roll, pitch, yaw, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.createSynchronizedSceneAtMapObject = function (x, y, z, radius, object) {
    let $res = natives.createSynchronizedSceneAtMapObject(x, y, z, radius, object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.isSynchronizedSceneRunning = function (sceneId) {
    let $res = natives.isSynchronizedSceneRunning(sceneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setSynchronizedSceneOrigin = function (sceneID, x, y, z, roll, pitch, yaw, p7) {
    let $res = natives.setSynchronizedSceneOrigin(sceneID, x, y, z, roll, pitch, yaw, p7 | 0);
};
mp.game2.ped.setSynchronizedScenePhase = function (sceneID, phase) {
    let $res = natives.setSynchronizedScenePhase(sceneID, phase);
};
mp.game2.ped.getSynchronizedScenePhase = function (sceneID) {
    let $res = natives.getSynchronizedScenePhase(sceneID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setSynchronizedSceneRate = function (sceneID, rate) {
    let $res = natives.setSynchronizedSceneRate(sceneID, rate);
};
mp.game2.ped.getSynchronizedSceneRate = function (sceneID) {
    let $res = natives.getSynchronizedSceneRate(sceneID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.setSynchronizedSceneLoo = function (sceneID, toggle) {
    let $res = natives.setSynchronizedSceneLooped(sceneID, toggle | 0);
};
mp.game2.ped.setSynchronizedSceneLooped = function (sceneID, toggle) {
    let $res = natives.setSynchronizedSceneLooped(sceneID, toggle | 0);
};
mp.game2.ped.isSynchronizedSceneLoo = function (sceneID) {
    let $res = natives.isSynchronizedSceneLooped(sceneID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isSynchronizedSceneLooped = function (sceneID) {
    let $res = natives.isSynchronizedSceneLooped(sceneID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setSynchronizedSceneHoldLastFrame = function (sceneID, toggle) {
    let $res = natives.setSynchronizedSceneHoldLastFrame(sceneID, toggle | 0);
};
mp.game2.ped.isSynchronizedSceneHoldLastFrame = function (sceneID) {
    let $res = natives.isSynchronizedSceneHoldLastFrame(sceneID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.attachSynchronizedSceneToEntity = function (sceneID, entity, boneIndex) {
    let $res = natives.attachSynchronizedSceneToEntity(sceneID, entity, boneIndex);
};
mp.game2.ped.detachSynchronizedScene = function (sceneID) {
    let $res = natives.detachSynchronizedScene(sceneID);
};
mp.game2.ped.disposeSynchronizedScene = function (scene) {
    let $res = natives.takeOwnershipOfSynchronizedScene(scene);
};
mp.game2.ped.forceMotionState = function (ped, motionStateHash, p2, p3, p4) {
    let $res = natives.forcePedMotionState(ped, motionStateHash, p2 | 0, p3 | 0, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getCurrentMovementSpeed = function (ped) {
    let $res = natives.getPedCurrentMoveBlendRatio(ped, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.speedX = $res[1];
    $resObj.speedY = $res[2];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.ped.setMaxMoveBlendRatio = function (ped, value) {
    let $res = natives.setPedMaxMoveBlendRatio(ped, value);
};
mp.game2.ped.setMinMoveBlendRatio = function (ped, value) {
    let $res = natives.setPedMinMoveBlendRatio(ped, value);
};
mp.game2.ped.setMoveRateOverride = function (ped, value) {
    let $res = natives.setPedMoveRateOverride(ped, value);
};
mp.game2.ped.getNearbyVehicles = function (ped) {
    let $res = natives.getPedNearbyVehicles(ped, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.sizeAndVehs = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.ped.getNearbyPeds = function (ped, ignore) {
    let $res = natives.getPedNearbyPeds(ped, 0, ignore);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.sizeAndPeds = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.ped.haveAllStreamingRequestsCompleted = function (ped) {
    let $res = natives.haveAllStreamingRequestsCompleted(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isUsingActionMode = function (ped) {
    let $res = natives.isPedUsingActionMode(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setUsingActionMode = function (ped, p1, p2, action) {
    let $res = natives.setPedUsingActionMode(ped, p1 | 0, p2, action);
};
mp.game2.ped.setMovementModeOverride = function (ped, name) {
    let $res = natives.setMovementModeOverride(ped, name);
};
mp.game2.ped.setCapsule = function (ped, value) {
    let $res = natives.setPedCapsule(ped, value);
};
mp.game2.ped.registerHeadshot = function (ped) {
    let $res = natives.registerPedheadshot(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.registerHeadshot3 = function (ped) {
    let $res = natives.registerPedheadshotHires(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.registerHeadshotTransparent = function (ped) {
    let $res = natives.registerPedheadshotTransparent(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unregisterHeadshot = function (id) {
    let $res = natives.unregisterPedheadshot(id);
};
mp.game2.ped.isHeadshotValid = function (id) {
    let $res = natives.isPedheadshotValid(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isPedheadshotValid = function (id) {
    let $res = natives.isPedheadshotValid(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isHeadshotReady = function (id) {
    let $res = natives.isPedheadshotReady(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.isPedheadshotReady = function (id) {
    let $res = natives.isPedheadshotReady(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.getHeadshotTxdString = function (id) {
    let $res = natives.getPedheadshotTxdString(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.getPedheadshotTxdString = function (id) {
    let $res = natives.getPedheadshotTxdString(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.requestHeadshotImgUpload = function (id) {
    let $res = natives.requestPedheadshotImgUpload(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.releaseHeadshotImgUpload = function (id) {
    let $res = natives.releasePedheadshotImgUpload(id);
};
mp.game2.ped.isHeadshotImgUploadAvailable = function () {
    let $res = natives.isPedheadshotImgUploadAvailable();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.hasHeadshotImgUploadFailed = function () {
    let $res = natives.hasPedheadshotImgUploadFailed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.hasHeadshotImgUploadSucceeded = function () {
    let $res = natives.hasPedheadshotImgUploadSucceeded();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setHeatscaleOverride = function (ped, heatScale) {
    let $res = natives.setPedHeatscaleOverride(ped, heatScale);
};
mp.game2.ped.disableHeatscaleOverride = function (ped) {
    let $res = natives.disablePedHeatscaleOverride(ped);
};
mp.game2.ped.spawnpointsStartSearch = function (p0, p1, p2, p3, p4, interiorFlags, scale, duration) {
    let $res = natives.spawnpointsStartSearch(p0, p1, p2, p3, p4, interiorFlags, scale, duration);
};
mp.game2.ped.spawnpointsStartSearchInAngledArea = function (x, y, z, p3, p4, p5, p6, interiorFlags, scale, duration) {
    let $res = natives.spawnpointsStartSearchInAngledArea(x, y, z, p3, p4, p5, p6, interiorFlags, scale, duration);
};
mp.game2.ped.spawnpointsCancelSearch = function () {
    let $res = natives.spawnpointsCancelSearch();
};
mp.game2.ped.spawnpointsIsSearchActive = function () {
    let $res = natives.spawnpointsIsSearchActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.spawnpointsIsSearchComplete = function () {
    let $res = natives.spawnpointsIsSearchComplete();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.spawnpointsIsSearchFailed = function () {
    let $res = natives.spawnpointsIsSearchFailed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.spawnpointsGetNumSearchResults = function () {
    let $res = natives.spawnpointsGetNumSearchResults();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.spawnpointsGetSearchResult = function (randomInt) {
    let $res = natives.spawnpointsGetSearchResult(randomInt, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[3];
    return $resObj;
};
mp.game2.ped.spawnpointsGetSearchResultFlags = function (p0) {
    let $res = natives.spawnpointsGetSearchResultFlags(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    return $resObj.p1;
};
mp.game2.ped.setIkTarget = function (ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration) {
    let $res = natives.setIkTarget(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration);
};
mp.game2.ped.requestActionModeAsset = function (asset) {
    let $res = natives.requestActionModeAsset(asset);
};
mp.game2.ped.hasActionModeAssetLoaded = function (asset) {
    let $res = natives.hasActionModeAssetLoaded(asset);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.removeActionModeAsset = function (asset) {
    let $res = natives.removeActionModeAsset(asset);
};
mp.game2.ped.requestStealthModeAsset = function (asset) {
    let $res = natives.requestStealthModeAsset(asset);
};
mp.game2.ped.hasStealthModeAssetLoaded = function (asset) {
    let $res = natives.hasStealthModeAssetLoaded(asset);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.removeStealthModeAsset = function (asset) {
    let $res = natives.removeStealthModeAsset(asset);
};
mp.game2.ped.setLodMultiplier = function (ped, multiplier) {
    let $res = natives.setPedLodMultiplier(ped, multiplier);
};
mp.game2.ped.setCanLosePropsOnDamage = function (ped, toggle, p2) {
    let $res = natives.setPedCanLosePropsOnDamage(ped, toggle | 0, p2);
};
mp.game2.ped.setForceFootstepUpdate = function (ped, toggle) {
    let $res = natives.setForceFootstepUpdate(ped, toggle | 0);
};
mp.game2.ped.setForceStepType = function (ped, p1, type, p3) {
    let $res = natives.setForceStepType(ped, p1 | 0, type, p3);
};
mp.game2.ped.isAnyHostileNearPoint = function (ped, x, y, z, radius) {
    let $res = natives.isAnyHostilePedNearPoint(ped, x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setCanPlayInCarIdles = function (ped, toggle) {
    let $res = natives.setPedCanPlayInCarIdles(ped, toggle | 0);
};
mp.game2.ped.isTargetInPerceptionArea = function (ped, targetPed, p2, p3, p4, p5) {
    let $res = natives.isTargetPedInPerceptionArea(ped, targetPed, p2, p3, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setPopControlSphereThisFrame = function (x, y, z, min, max) {
    let $res = natives.setPopControlSphereThisFrame(x, y, z, min, max);
};
mp.game2.ped.setDisableFallDamage = function (ped, toggle) {
    let $res = natives.setDisableHighFallDeath(ped, toggle | 0);
};
mp.game2.ped.isSwappingWeapon = function (Ped) {
    let $res = natives.isPedSwitchingWeapon(Ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.setEnableScubaGearLight = function (ped, toggle) {
    let $res = natives.enableMpLight(ped, toggle | 0);
};
mp.game2.ped.isScubaGearLightEnabled = function (ped) {
    let $res = natives.getMpLightEnabled(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.clearFacialClipsetOverride = function (ped) {
    let $res = natives.clearCoverPointForPed(ped);
};
if (!mp.game2.ped) mp.game2.ped = {};
if (!mp.game2.ped.unk) mp.game2.ped.unk = {};
mp.game2.ped.unk._0x87DDEB611B329A9C = function (multiplier) {
    let $res = natives.setAmbientLawPedAccuracyModifier(multiplier);
};
mp.game2.ped.unk._0xF2BEBCDFAFDAA19E = function (toggle) {
    let $res = natives.setPedAllowHurtCombatForAllMissionPeds(toggle | 0);
};
mp.game2.ped.unk._0x5A7F62FDA59759BD = function () {
    let $res = natives.suppressAmbientPedAggressiveCleanupThisFrame();
};
mp.game2.ped.unk._0xFF4803BC019852D9 = function (p0, p1) {
    let $res = natives.setHealthSnacksCarriedByAllNewPeds(p0, p1);
};
mp.game2.ped.unk._0x9911F4A24485F653 = function (p0) {
    let $res = natives.setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame(p0 | 0);
};
mp.game2.ped.unk._0xAFC976FD0580C7B3 = function (ped, toggle) {
    let $res = natives.setPedUpperBodyDamageOnly(ped, toggle | 0);
};
mp.game2.ped.unk._0x2F3C3D9F50681DE4 = function (p0, p1) {
    let $res = natives.setTreatAsAmbientPedForDriverLockon(p0, p1 | 0);
};
mp.game2.ped.unk._0x061CB768363D6424 = function (ped, toggle) {
    let $res = natives.setAllowLockonToPedIfFriendly(ped, toggle | 0);
};
mp.game2.ped.unk._0xFD325494792302D7 = function (ped, toggle) {
    let $res = natives.setUseCameraHeadingForDesiredDirectionLockOnTest(ped, toggle | 0);
};
mp.game2.ped.unk._0x412F1364FA066CFB = function (p0) {
    let $res = natives.isPedLanding(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0x451D05012CCEC234 = function (p0) {
    let $res = natives.isPedDoingABeastJump(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0x2F074C904D85129E = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.setCopPerceptionOverrides(p0, p1, p2, p3, p4, p5, p6);
};
mp.game2.ped.unk._0xEC4B4B3B9908052A = function (ped, unk) {
    let $res = natives.setPedInjuredOnGroundBehaviour(ped, unk);
};
mp.game2.ped.unk._0x733C87D4CE22BEA2 = function (p0) {
    let $res = natives.disablePedInjuredOnGroundBehaviour(p0);
};
mp.game2.ped.unk._0x5407B7288D0478B7 = function (p0) {
    let $res = natives.countPedsInCombatWithTarget(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0x336B3D200AB007CB = function (p0, p1, p2, p3, p4) {
    let $res = natives.countPedsInCombatWithTargetWithinRadius(p0, p1, p2, p3, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0xAD27D957598E49E9 = function (ped, p1, p2, hash, p4, p5) {
    let $res = natives.tellGroupPedsInAreaToAttack(ped, p1, p2, hash, p4, p5);
};
mp.game2.ped.unk._0x2735233A786B1BEF = function (ped, p1) {
    let $res = natives.setCorpseRagdollFriction(ped, p1);
};
mp.game2.ped.unk._0xB282749D5E028163 = function (p0, p1) {
    let $res = natives.setPedCanBeKnockedOffBike(p0, p1);
};
mp.game2.ped.unk._0x49E50BDB8BA4DAB2 = function (ped, toggle) {
    let $res = natives.setPedAllowMinorReactionsAsMissionPed(ped, toggle | 0);
};
mp.game2.ped.unk._0x80054D7FCC70EEC6 = function (ped) {
    let $res = natives.clearPedFallUpperBodyClipsetOverride(ped);
};
mp.game2.ped.unk._0x9E30E91FB03A2CAF = function () {
    let $res = natives.getMpOutfitDataFromMetadata(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.ped.unk._0x1E77FA7A62EE6C4C = function (p0) {
    let $res = natives.getFmMaleShopPedApparelItemIndex(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0xF033419D1B81FAE8 = function (p0) {
    let $res = natives.getFmFemaleShopPedApparelItemIndex(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0xEA9960D07DADCF10 = function (p0) {
    let $res = natives.getDefaultSecondaryTintForCreator(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0xAAA6A3698A69E048 = function (p0) {
    let $res = natives.getDefaultSecondaryTintForBarber(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0xC56FBF2F228E1DAC = function (modelHash, p1, p2) {
    let $res = natives.getTintIndexForLastGenHairTexture(modelHash, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0xFEC9A3B1820F3331 = function (p0) {
    let $res = natives.isUsingPedScubaGearVariation(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.unk._0x03EA03AF85A85CB7 = function (ped, p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.getCanPedBeGrabbedByScript(ped, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0, p7 | 0, p8);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.unk._0xF9ACF4A08098EA25 = function (ped, p1) {
    let $res = natives.specialFunctionDoNotUse(ped, p1 | 0);
};
mp.game2.ped.unk._0x2B694AFCF64E6994 = function (ped, p1) {
    let $res = natives.markPedDecorationsAsClonedFromLocalPlayer(ped, p1 | 0);
};
mp.game2.ped.unk._0x9A77DFD295E29B09 = function (p0, p1) {
    let $res = natives.toggleScenarioPedCowerInPlace(p0, p1 | 0);
};
mp.game2.ped.unk._0x25361A96E0F7E419 = function (p0, p1, p2, p3) {
    let $res = natives.triggerPedScenarioPanicexittoflee(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0x425AECF167663F48 = function (ped, p1) {
    let $res = natives.setPedShouldIgnoreScenarioExitCollisionChecks(ped, p1 | 0);
};
mp.game2.ped.unk._0x5B6010B3CBC29095 = function (p0, p1) {
    let $res = natives.setPedShouldIgnoreScenarioNavChecks(p0, p1 | 0);
};
mp.game2.ped.unk._0xCEDA60A74219D064 = function (p0, p1) {
    let $res = natives.setPedShouldProbeForScenarioExitsInOneFrame(p0, p1 | 0);
};
mp.game2.ped.unk._0xC30BDAEE47256C13 = function (p0) {
    let $res = natives.isPedGesturing(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0xC2EE020F5FB4DB53 = function (ped) {
    let $res = natives.triggerIdleAnimationOnPed(ped);
};
mp.game2.ped.unk._0x6647C5F6F5792496 = function (ped, p1) {
    let $res = natives.setPedCanTorsoVehicleIk(ped, p1 | 0);
};
mp.game2.ped.unk._0xA660FAF550EB37E5 = function (p0, p1) {
    let $res = natives.setPedClothProne(p0, p1 | 0);
};
mp.game2.ped.unk._0x3E9679C1DFCF422C = function (p0, p1) {
    let $res = natives.setPedWillOnlyAttackWantedPlayer(p0, p1);
};
mp.game2.ped.unk._0xF2385935BFFD4D92 = function (p0) {
    let $res = natives.isCurrentHeadPropAHelmet(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.unk._0x1A330D297AAC6BC1 = function (ped, p1) {
    let $res = natives.setLadderClimbInputState(ped, p1);
};
mp.game2.ped.unk._0x2016C603D6B8987C = function (ped, toggle) {
    let $res = natives.setPedSteersAroundDeadBodies(ped, toggle | 0);
};
mp.game2.ped.unk._0xA9B61A329BFDCBEA = function (p0, p1) {
    let $res = natives.setPedIsAvoidedByOthers(p0, p1 | 0);
};
mp.game2.ped.unk._0xA52D5247A4227E14 = function (p0) {
    let $res = natives.setPedNoTimeDelayBeforeShot(p0);
};
mp.game2.ped.unk._0xCD018C591F94CB43 = function (ped, p1) {
    let $res = natives.requestPedRestrictedVehicleVisibilityTracking(ped, p1 | 0);
};
mp.game2.ped.unk._0x75BA1CB3B7D40CAF = function (ped, p1) {
    let $res = natives.requestPedUseSmallBboxVisibilityTracking(ped, p1 | 0);
};
mp.game2.ped.unk._0x511F1A683387C7E2 = function (ped) {
    let $res = natives.getTrackedPedPixelcount(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.ped.unk._0x9C6A6C19B6C0C496 = function (ped) {
    let $res = natives.canPedShuffleToOrFromTurretSeat(ped, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.ped.unk._0x2DFC81C9B9608549 = function (ped) {
    let $res = natives.canPedShuffleToOrFromExtraSeat(ped, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.ped.unk._0x110F526AB784111F = function (ped, p1) {
    let $res = natives.setPedEnveffCpvAdd(ped, p1);
};
mp.game2.ped.unk._0xE906EC930F5FE7C8 = function (p0, p1) {
    let $res = natives.setPedEnableCrewEmblem(p0, p1);
};
mp.game2.ped.unk._0x1216E0BFA72CC703 = function (p0, p1) {
    let $res = natives.requestRagdollBoundsUpdate(p0, p1);
};
mp.game2.ped.unk._0xB8B52E498014F5B0 = function (ped) {
    let $res = natives.isPedSheltered(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.unk._0x0B3E35AC043707D9 = function (p0, p1) {
    let $res = natives.setPedMoveRateInWaterOverride(p0, p1);
};
mp.game2.ped.unk._0x46B05BCAE43856B0 = function (ped, flag) {
    let $res = natives.pedHasSexinessFlagSet(ped, flag);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.ped.unk._0xED3C76ADFA6D07C4 = function (ped) {
    let $res = natives.forceInstantLegIkSetup(ped);
};
mp.game2.ped.unk._0xD33DAA36272177C4 = function (ped) {
    let $res = natives.forceZeroMassInCollisions(ped);
};
mp.game2.ped.unk._0x83A169EABCDB10A2 = function (p0, p1) {
    let $res = natives.setPedPhonePaletteIdx(p0, p1);
};
mp.game2.ped.unk._0x288DF530C92DAD6F = function (p0, p1) {
    let $res = natives.setPedSteerBias(p0, p1);
};
mp.game2.ped.unk._0x0F62619393661D6E = function (p0, p1, p2) {
    let $res = natives.setPedTreatedAsFriendly(p0, p1, p2);
};
mp.game2.ped.unk._0xDFE68C4B787E1BFB = function (ped) {
    let $res = natives.setDisablePedMapCollision(ped);
};
mp.game2.ped.unk._0xFAB944D4D481ACCB = function (ped, toggle) {
    let $res = natives.setAllowStuntJumpCamera(ped, toggle | 0);
};
mp.Player.prototype.setDamping = function (vertex, value) {
    let $res = natives.setDamping(this.handle, vertex, value);
};
mp.Ped.prototype.setDamping = function (vertex, value) {
    let $res = natives.setDamping(this.handle, vertex, value);
};
mp.Object.prototype.setDamping = function (vertex, value) {
    let $res = natives.setDamping(this.handle, vertex, value);
};
mp.Vehicle.prototype.setDamping = function (vertex, value) {
    let $res = natives.setDamping(this.handle, vertex, value);
};
mp.Player.prototype.activate = function () {
    let $res = natives.activatePhysics(this.handle);
};
mp.Ped.prototype.activate = function () {
    let $res = natives.activatePhysics(this.handle);
};
mp.Object.prototype.activate = function () {
    let $res = natives.activatePhysics(this.handle);
};
mp.Vehicle.prototype.activate = function () {
    let $res = natives.activatePhysics(this.handle);
};
mp.Player.prototype.setCgoffset = function (x, y, z) {
    let $res = natives.setCgoffset(this.handle, x, y, z);
};
mp.Ped.prototype.setCgoffset = function (x, y, z) {
    let $res = natives.setCgoffset(this.handle, x, y, z);
};
mp.Object.prototype.setCgoffset = function (x, y, z) {
    let $res = natives.setCgoffset(this.handle, x, y, z);
};
mp.Vehicle.prototype.setCgoffset = function (x, y, z) {
    let $res = natives.setCgoffset(this.handle, x, y, z);
};
mp.Player.prototype.getCgoffset = function () {
    let $res = natives.getCgoffset(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.getCgoffset = function () {
    let $res = natives.getCgoffset(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Object.prototype.getCgoffset = function () {
    let $res = natives.getCgoffset(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.getCgoffset = function () {
    let $res = natives.getCgoffset(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Player.prototype.setCgAtBoundcenter = function () {
    let $res = natives.setCgAtBoundcenter(this.handle);
};
mp.Ped.prototype.setCgAtBoundcenter = function () {
    let $res = natives.setCgAtBoundcenter(this.handle);
};
mp.Object.prototype.setCgAtBoundcenter = function () {
    let $res = natives.setCgAtBoundcenter(this.handle);
};
mp.Vehicle.prototype.setCgAtBoundcenter = function () {
    let $res = natives.setCgAtBoundcenter(this.handle);
};
mp.Player.prototype.breakEntityGlass = function (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.breakEntityGlass(this.handle, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 | 0);
};
mp.Ped.prototype.breakEntityGlass = function (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.breakEntityGlass(this.handle, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 | 0);
};
mp.Object.prototype.breakEntityGlass = function (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.breakEntityGlass(this.handle, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 | 0);
};
mp.Vehicle.prototype.breakEntityGlass = function (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.breakEntityGlass(this.handle, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 | 0);
};
mp.Object.prototype.getHasObjectFragInst = function () {
    let $res = natives.getIsEntityAFrag(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.setDisableBreaking = function (toggle) {
    let $res = natives.setDisableBreaking(this.handle, toggle | 0);
};
mp.Object.prototype.setDisableFragDamage = function (toggle) {
    let $res = natives.setDisableFragDamage(this.handle, toggle | 0);
};
if (!mp.game2.physics) mp.game2.physics = {};
mp.game2.physics.addRope = function (x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, windingSpeed, p11, p12, rigid, p14, breakWhenShot) {
    let $res = natives.addRope(x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, windingSpeed, p11 | 0, p12 | 0, rigid | 0, p14, breakWhenShot | 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.unkPtr = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.physics.deleteRope = function () {
    let $res = natives.deleteRope(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ropeId = $res[1];
    return $resObj.ropeId;
};
mp.game2.physics.deleteChildRope = function (ropeId) {
    let $res = natives.deleteChildRope(ropeId);
};
mp.game2.physics.doesRopeExist = function () {
    let $res = natives.doesRopeExist(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ropeId = $res[1];
    return $res[1] == 1 ? $resObj.ropeId : undefined;
};
mp.game2.physics.ropeDrawShadowEnabled = function (toggle) {
    let $res = natives.ropeDrawShadowEnabled(0, toggle | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ropeId = $res[1];
    return $resObj.ropeId;
};
mp.game2.physics.loadRopeData = function (ropeId, rope_preset) {
    let $res = natives.loadRopeData(ropeId, rope_preset);
};
mp.game2.physics.pinRopeVertex = function (ropeId, vertex, x, y, z) {
    let $res = natives.pinRopeVertex(ropeId, vertex, x, y, z);
};
mp.game2.physics.unpinRopeVertex = function (ropeId, vertex) {
    let $res = natives.unpinRopeVertex(ropeId, vertex);
};
mp.game2.physics.getRopeVertexCount = function (ropeId) {
    let $res = natives.getRopeVertexCount(ropeId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.physics.attachEntitiesToRope = function (ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11) {
    let $res = natives.attachEntitiesToRope(ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10 | 0, p11 | 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p12 = $res[0];
    $resObj.p13 = $res[0];
    return $resObj;
};
mp.game2.physics.attachRopeToEntity = function (ropeId, entity, x, y, z, p5) {
    let $res = natives.attachRopeToEntity(ropeId, entity, x, y, z, p5 | 0);
};
mp.game2.physics.detachRopeFromEntity = function (ropeId, entity) {
    let $res = natives.detachRopeFromEntity(ropeId, entity);
};
mp.game2.physics.ropeSetUpdatePinverts = function (ropeId) {
    let $res = natives.ropeSetUpdatePinverts(ropeId);
};
mp.game2.physics.ropeSetUpdateOrder = function (ropeId, p1) {
    let $res = natives.ropeSetUpdateOrder(ropeId, p1);
};
mp.game2.physics.getRopeLastVertexCoord = function (ropeId) {
    let $res = natives.getRopeLastVertexCoord(ropeId);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.physics.getRopeVertexCoord = function (ropeId, vertex) {
    let $res = natives.getRopeVertexCoord(ropeId, vertex);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.physics.startRopeWinding = function (ropeId) {
    let $res = natives.startRopeWinding(ropeId);
};
mp.game2.physics.stopRopeWinding = function (ropeId) {
    let $res = natives.stopRopeWinding(ropeId);
};
mp.game2.physics.startRopeUnwindingFront = function (ropeId) {
    let $res = natives.startRopeUnwindingFront(ropeId);
};
mp.game2.physics.stopRopeUnwindingFront = function (ropeId) {
    let $res = natives.stopRopeUnwindingFront(ropeId);
};
mp.game2.physics.ropeConvertToSimple = function (ropeId) {
    let $res = natives.ropeConvertToSimple(ropeId);
};
mp.game2.physics.ropeLoadTextures = function () {
    let $res = natives.ropeLoadTextures();
};
mp.game2.physics.ropeAreTexturesLoaded = function () {
    let $res = natives.ropeAreTexturesLoaded();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.physics.ropeUnloadTextures = function () {
    let $res = natives.ropeUnloadTextures();
};
mp.game2.physics.doesRopeBelongToThisScript = function (ropeId) {
    let $res = natives.doesScriptOwnRope(ropeId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.physics.ropeChangeScriptOwner = function (p0, p1, p2) {
    let $res = natives.ropeChangeScriptOwner(p0, p1 | 0, p2 | 0);
};
mp.game2.physics.ropeGetDistanceBetweenEnds = function (ropeId) {
    let $res = natives.ropeGetDistanceBetweenEnds(ropeId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.physics.getRopeLength = function (ropeId) {
    let $res = natives.ropeGetDistanceBetweenEnds(ropeId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.physics.ropeForceLength = function (ropeId, length) {
    let $res = natives.ropeForceLength(ropeId, length);
};
mp.game2.physics.ropeResetLength = function (ropeId, length) {
    let $res = natives.ropeResetLength(ropeId, length);
};
mp.game2.physics.applyImpulseToCloth = function (posX, posY, posZ, vecX, vecY, vecZ, impulse) {
    let $res = natives.applyImpulseToCloth(posX, posY, posZ, vecX, vecY, vecZ, impulse);
};
mp.game2.physics.setDamping = function (entity, vertex, value) {
    let $res = natives.setDamping(entity, vertex, value);
};
mp.game2.physics.activate = function (entity) {
    let $res = natives.activatePhysics(entity);
};
mp.game2.physics.setCgoffset = function (entity, x, y, z) {
    let $res = natives.setCgoffset(entity, x, y, z);
};
mp.game2.physics.getCgoffset = function (entity) {
    let $res = natives.getCgoffset(entity);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.physics.setCgAtBoundcenter = function (entity) {
    let $res = natives.setCgAtBoundcenter(entity);
};
mp.game2.physics.breakEntityGlass = function (entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.breakEntityGlass(entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 | 0);
};
mp.game2.physics.getHasObjectFragInst = function (object) {
    let $res = natives.getIsEntityAFrag(object);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.physics.setDisableBreaking = function (object, toggle) {
    let $res = natives.setDisableBreaking(object, toggle | 0);
};
mp.game2.physics.setDisableFragDamage = function (object, toggle) {
    let $res = natives.setDisableFragDamage(object, toggle | 0);
};
mp.game2.physics.setLaunchControlEnabled = function (toggle) {
    let $res = natives.setInArenaMode(toggle | 0);
};
if (!mp.game2.physics) mp.game2.physics = {};
if (!mp.game2.physics.unk) mp.game2.physics.unk = {};
mp.game2.physics.unk._0xA1AE736541B0FCA3 = function (p1) {
    let $res = natives.ropeDrawEnabled(0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ropeId = $res[1];
    return $resObj.ropeId;
};
mp.game2.physics.unk._0x36CCB9BE67B970FD = function (ropeId, p1) {
    let $res = natives.ropeSetSmoothReelin(ropeId, p1 | 0);
};
mp.game2.physics.unk._0x84DE3B5FB3E666F0 = function () {
    let $res = natives.isRopeAttachedAtBothEnds(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ropeId = $res[1];
    return $res[1] == 1 ? $resObj.ropeId : undefined;
};
mp.game2.physics.unk._0xBC0CE682D4D05650 = function (ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    let $res = natives.ropeAttachVirtualBoundGeom(ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
};
mp.game2.physics.unk._0xB743F735C03D7810 = function (ropeId, p1) {
    let $res = natives.ropeSetRefframevelocityColliderorder(ropeId, p1);
};
mp.game2.physics.unk._0xCC6E963682533882 = function (object) {
    let $res = natives.resetDisableBreaking(object);
};
mp.game2.physics.unk._0x15F944730C832252 = function (entity, toggle) {
    let $res = natives.setUseKinematicPhysics(entity, toggle | 0);
};
mp.game2.physics.unk._0x9EBD751E5787BAF2 = function (p0) {
    let $res = natives.setInStuntMode(p0 | 0);
};
if (!mp.game2.player) mp.game2.player = {};
mp.game2.player.getPed = function () {
    let $res = natives.getPlayerPed(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getPedScriptIndex = function () {
    let $res = natives.getPlayerPedScriptIndex(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.setModel = function (model) {
    let $res = natives.setPlayerModel(0, model);
};
mp.game2.player.changePed = function (ped, p2, resetDamage) {
    let $res = natives.changePlayerPed(0, ped, p2 | 0, resetDamage | 0);
};
mp.game2.player.getRgbColour = function () {
    let $res = natives.getPlayerRgbColour(0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.game2.player.getNumberOfS = function () {
    let $res = natives.getNumberOfPlayers();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getTeam = function () {
    let $res = natives.getPlayerTeam(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.setTeam = function (team) {
    let $res = natives.setPlayerTeam(0, team);
};
mp.game2.player.getNumberOfPlayersInTeam = function (team) {
    let $res = natives.getNumberOfPlayersInTeam(team);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getName = function () {
    let $res = natives.getPlayerName(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getWantedLevelRadius = function () {
    let $res = natives.getWantedLevelRadius(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getWantedCentrePosition = function () {
    let $res = natives.getPlayerWantedCentrePosition(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.player.setWantedCentrePosition = function (p2, p3) {
    let $res = natives.setPlayerWantedCentrePosition(0, undefined, p2 | 0, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.position = new mp.Vector3($res[1]);
    return $resObj.position;
};
mp.game2.player.getWantedLevelThreshold = function (wantedLevel) {
    let $res = natives.getWantedLevelThreshold(wantedLevel);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.setWantedLevel = function (wantedLevel, disableNoMission) {
    let $res = natives.setPlayerWantedLevel(0, wantedLevel, disableNoMission | 0);
};
mp.game2.player.setWantedLevelNoDrop = function (wantedLevel, p2) {
    let $res = natives.setPlayerWantedLevelNoDrop(0, wantedLevel, p2 | 0);
};
mp.game2.player.setWantedLevelNow = function (p1) {
    let $res = natives.setPlayerWantedLevelNow(0, p1 | 0);
};
mp.game2.player.areFlashingStarsAboutToDrop = function () {
    let $res = natives.arePlayerFlashingStarsAboutToDrop(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.areStarsGreyedOut = function () {
    let $res = natives.arePlayerStarsGreyedOut(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setDispatchCopsFor = function (toggle) {
    let $res = natives.setDispatchCopsForPlayer(0, toggle | 0);
};
mp.game2.player.isWantedLevelGreater = function (wantedLevel) {
    let $res = natives.isPlayerWantedLevelGreater(0, wantedLevel);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.clearWantedLevel = function () {
    let $res = natives.clearPlayerWantedLevel(0);
};
mp.game2.player.isDead = function () {
    let $res = natives.isPlayerDead(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isPressingHorn = function () {
    let $res = natives.isPlayerPressingHorn(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setControl = function (bHasControl, flags) {
    let $res = natives.setPlayerControl(0, bHasControl | 0, flags);
};
mp.game2.player.getWantedLevel = function () {
    let $res = natives.getPlayerWantedLevel(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.setMaxWantedLevel = function (maxWantedLevel) {
    let $res = natives.setMaxWantedLevel(maxWantedLevel);
};
mp.game2.player.setPoliceRadarBlips = function (toggle) {
    let $res = natives.setPoliceRadarBlips(toggle | 0);
};
mp.game2.player.setPoliceIgnore = function (toggle) {
    let $res = natives.setPoliceIgnorePlayer(0, toggle | 0);
};
mp.game2.player.isPlaying = function () {
    let $res = natives.isPlayerPlaying(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setEveryoneIgnore = function (toggle) {
    let $res = natives.setEveryoneIgnorePlayer(0, toggle | 0);
};
mp.game2.player.setAllRandomPedsFlee = function (toggle) {
    let $res = natives.setAllRandomPedsFlee(0, toggle | 0);
};
mp.game2.player.setAllRandomPedsFleeThisFrame = function () {
    let $res = natives.setAllRandomPedsFleeThisFrame(0);
};
mp.game2.player.setIgnoreLowPriorityShockingEvents = function (toggle) {
    let $res = natives.setIgnoreLowPriorityShockingEvents(0, toggle | 0);
};
mp.game2.player.setWantedLevelMultiplier = function (multiplier) {
    let $res = natives.setWantedLevelMultiplier(multiplier);
};
mp.game2.player.setWantedLevelDifficulty = function (difficulty) {
    let $res = natives.setWantedLevelDifficulty(0, difficulty);
};
mp.game2.player.resetWantedLevelDifficulty = function () {
    let $res = natives.resetWantedLevelDifficulty(0);
};
mp.game2.player.getWantedLevelParoleDuration = function () {
    let $res = natives.getWantedLevelTimeToEscape();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.setWantedLevelHiddenEvasionTime = function (wantedLevel, lossTime) {
    let $res = natives.setWantedLevelHiddenEscapeTime(0, wantedLevel, lossTime);
};
mp.game2.player.startFiringAmnesty = function (duration) {
    let $res = natives.startFiringAmnesty(duration);
};
mp.game2.player.reportCrime = function (crimeType, wantedLvlThresh) {
    let $res = natives.reportCrime(0, crimeType, wantedLvlThresh);
};
mp.game2.player.switchCrimeType = function (p1) {
    let $res = natives.suppressCrimeThisFrame(0, p1);
};
mp.game2.player.reserveEntityExplodesOnHighExplosionCombo = function (p1) {
    let $res = natives.suppressCrimeThisFrame(0, p1);
};
mp.game2.player.reportPoliceSpotted = function () {
    let $res = natives.reportPoliceSpottedPlayer(0);
};
mp.game2.player.canStartMission = function () {
    let $res = natives.canPlayerStartMission(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isReadyForCutscene = function () {
    let $res = natives.isPlayerReadyForCutscene(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isTargettingEntity = function (entity) {
    let $res = natives.isPlayerTargettingEntity(0, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.getTargetEntity = function () {
    let $res = natives.getPlayerTargetEntity(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.entity = $res[1];
    return $res[0] == 1 ? $resObj.entity : undefined;
};
mp.game2.player.isFreeAiming = function () {
    let $res = natives.isPlayerFreeAiming(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isFreeAimingAtEntity = function (entity) {
    let $res = natives.isPlayerFreeAimingAtEntity(0, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.getEntityIsFreeAimingAtRaw = function () {
    let $res = natives.getEntityPlayerIsFreeAimingAt(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.entity = $res[1];
    return $res[0] == 1 ? $resObj.entity : undefined;
};
mp.game2.player.setLockonRangeOverride = function (range) {
    let $res = natives.setPlayerLockonRangeOverride(0, range);
};
mp.game2.player.setCanDoDriveBy = function (toggle) {
    let $res = natives.setPlayerCanDoDriveBy(0, toggle | 0);
};
mp.game2.player.setCanBeHassledByGangs = function (toggle) {
    let $res = natives.setPlayerCanBeHassledByGangs(0, toggle | 0);
};
mp.game2.player.setCanUseCover = function (toggle) {
    let $res = natives.setPlayerCanUseCover(0, toggle | 0);
};
mp.game2.player.getMaxWantedLevel = function () {
    let $res = natives.getMaxWantedLevel();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.isTargettingAnything = function () {
    let $res = natives.isPlayerTargettingAnything(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setSprint = function (toggle) {
    let $res = natives.setPlayerSprint(0, toggle | 0);
};
mp.game2.player.resetStamina = function () {
    let $res = natives.resetPlayerStamina(0);
};
mp.game2.player.restoreStamina = function (p1) {
    let $res = natives.restorePlayerStamina(0, p1);
};
mp.game2.player.getSprintStaminaRemaining = function () {
    let $res = natives.getPlayerSprintStaminaRemaining(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getSprintTimeRemaining = function () {
    let $res = natives.getPlayerSprintTimeRemaining(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getUnderwaterTimeRemaining = function () {
    let $res = natives.getPlayerUnderwaterTimeRemaining(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.setUnderwaterTimeRemaining = function (time) {
    let $res = natives.setPlayerUnderwaterBreathPercentRemaining(0, time);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getGroup = function () {
    let $res = natives.getPlayerGroup(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getMaxArmour = function () {
    let $res = natives.getPlayerMaxArmour(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.isControlOn = function () {
    let $res = natives.isPlayerControlOn(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isCamControlDisabled = function () {
    let $res = natives.getAreCameraControlsDisabled();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isScriptControlOn = function () {
    let $res = natives.isPlayerScriptControlOn(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isClimbing = function () {
    let $res = natives.isPlayerClimbing(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isBeingArrested = function (atArresting) {
    let $res = natives.isPlayerBeingArrested(0, atArresting | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.resetArrestState = function () {
    let $res = natives.resetPlayerArrestState(0);
};
mp.game2.player.getPlayersLastVehicle = function () {
    let $res = natives.getPlayersLastVehicle();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getIndex = function () {
    let $res = natives.getPlayerIndex();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.intToIndex = function (value) {
    let $res = natives.intToPlayerindex(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.intToParticipantindex = function (value) {
    let $res = natives.intToParticipantindex(value);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getTimeSinceHitVehicle = function () {
    let $res = natives.getTimeSincePlayerHitVehicle(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getTimeSinceHitPed = function () {
    let $res = natives.getTimeSincePlayerHitPed(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getTimeSinceDroveOnPavement = function () {
    let $res = natives.getTimeSincePlayerDroveOnPavement(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getTimeSinceDroveAgainstTraffic = function () {
    let $res = natives.getTimeSincePlayerDroveAgainstTraffic(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.isFreeForAmbientTask = function () {
    let $res = natives.isPlayerFreeForAmbientTask(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.id = function () {
    let $res = natives.playerId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.pedId = function () {
    let $res = natives.playerPedId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.networkIdToInt = function () {
    let $res = natives.networkPlayerIdToInt();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.hasForceCleanupOccurred = function (cleanupFlags) {
    let $res = natives.hasForceCleanupOccurred(cleanupFlags);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.forceCleanup = function (cleanupFlags) {
    let $res = natives.forceCleanup(cleanupFlags);
};
mp.game2.player.forceCleanupForAllThreadsWithThisName = function (name, cleanupFlags) {
    let $res = natives.forceCleanupForAllThreadsWithThisName(name, cleanupFlags);
};
mp.game2.player.forceCleanupForThreadWithThisId = function (id, cleanupFlags) {
    let $res = natives.forceCleanupForThreadWithThisId(id, cleanupFlags);
};
mp.game2.player.getCauseOfMostRecentForceCleanup = function () {
    let $res = natives.getCauseOfMostRecentForceCleanup();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.setMayOnlyEnterThisVehicle = function (vehicle) {
    let $res = natives.setPlayerMayOnlyEnterThisVehicle(0, vehicle);
};
mp.game2.player.setMayNotEnterAnyVehicle = function () {
    let $res = natives.setPlayerMayNotEnterAnyVehicle(0);
};
mp.game2.player.giveAchievementTo = function (achievementId) {
    let $res = natives.giveAchievementToPlayer(achievementId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setAchievementProgress = function (achievementId, progress) {
    let $res = natives.setAchievementProgress(achievementId, progress);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.getAchievementProgress = function (achievementId) {
    let $res = natives.getAchievementProgress(achievementId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.hasAchievementBeenPassed = function (achievementId) {
    let $res = natives.hasAchievementBeenPassed(achievementId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isOnline = function () {
    let $res = natives.isPlayerOnline();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isLoggingInNp = function () {
    let $res = natives.isPlayerLoggingInNp();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.displaySystemSigninUi = function (unk) {
    let $res = natives.displaySystemSigninUi(unk | 0);
};
mp.game2.player.isSystemUiBeingDisplayed = function () {
    let $res = natives.isSystemUiBeingDisplayed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setInvincible = function (toggle) {
    let $res = natives.setPlayerInvincible(0, toggle | 0);
};
mp.game2.player.getInvincible = function () {
    let $res = natives.getPlayerInvincible(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setInvincibleKeepRagdollEnabled = function (toggle) {
    let $res = natives.setPlayerInvincibleButHasReactions(0, toggle | 0);
};
mp.game2.player.removeHelmet = function (p2) {
    let $res = natives.removePlayerHelmet(0, p2 | 0);
};
mp.game2.player.giveRagdollControl = function (toggle) {
    let $res = natives.givePlayerRagdollControl(0, toggle | 0);
};
mp.game2.player.setLockon = function (toggle) {
    let $res = natives.setPlayerLockon(0, toggle | 0);
};
mp.game2.player.setTargetingMode = function (targetMode) {
    let $res = natives.setPlayerTargetingMode(targetMode);
};
mp.game2.player.setTargetLevel = function (targetLevel) {
    let $res = natives.setPlayerTargetLevel(targetLevel);
};
mp.game2.player.clearHasDamagedAtLeastOnePed = function () {
    let $res = natives.clearPlayerHasDamagedAtLeastOnePed(0);
};
mp.game2.player.hasDamagedAtLeastOnePed = function () {
    let $res = natives.hasPlayerDamagedAtLeastOnePed(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.clearHasDamagedAtLeastOneNonAnimalPed = function () {
    let $res = natives.clearPlayerHasDamagedAtLeastOneNonAnimalPed(0);
};
mp.game2.player.hasDamagedAtLeastOneNonAnimalPed = function () {
    let $res = natives.hasPlayerDamagedAtLeastOneNonAnimalPed(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setAirDragMultiplierForPlayersVehicle = function (multiplier) {
    let $res = natives.setAirDragMultiplierForPlayersVehicle(0, multiplier);
};
mp.game2.player.setSwimMultiplierFor = function (multiplier) {
    let $res = natives.setSwimMultiplierForPlayer(0, multiplier);
};
mp.game2.player.setRunSprintMultiplierFor = function (multiplier) {
    let $res = natives.setRunSprintMultiplierForPlayer(0, multiplier);
};
mp.game2.player.getTimeSinceLastArrest = function () {
    let $res = natives.getTimeSinceLastArrest();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getTimeSinceLastDeath = function () {
    let $res = natives.getTimeSinceLastDeath();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.assistedMovementCloseRoute = function () {
    let $res = natives.assistedMovementCloseRoute();
};
mp.game2.player.assistedMovementFlushRoute = function () {
    let $res = natives.assistedMovementFlushRoute();
};
mp.game2.player.setForcedAim = function (toggle) {
    let $res = natives.setPlayerForcedAim(0, toggle | 0);
};
mp.game2.player.setForcedZoom = function (toggle) {
    let $res = natives.setPlayerForcedZoom(0, toggle | 0);
};
mp.game2.player.setForceSkipAimIntro = function (toggle) {
    let $res = natives.setPlayerForceSkipAimIntro(0, toggle | 0);
};
mp.game2.player.disableFiring = function (toggle) {
    let $res = natives.disablePlayerFiring(0, toggle | 0);
};
mp.game2.player.setDisableAmbientMeleeMove = function (toggle) {
    let $res = natives.setDisableAmbientMeleeMove(0, toggle | 0);
};
mp.game2.player.setMaxArmour = function (value) {
    let $res = natives.setPlayerMaxArmour(0, value);
};
mp.game2.player.specialAbilityActivate = function (p1) {
    let $res = natives.specialAbilityActivate(0, p1);
};
mp.game2.player.setSpecialAbility = function (p1, p2) {
    let $res = natives.setSpecialAbilityMp(0, p1, p2);
};
mp.game2.player.specialAbilityDeplete = function (p1) {
    let $res = natives.specialAbilityDeactivateMp(0, p1);
};
mp.game2.player.specialAbilityDeactivate = function (p1) {
    let $res = natives.specialAbilityDeactivate(0, p1 | 0);
};
mp.game2.player.specialAbilityDeactivateFast = function (p1) {
    let $res = natives.specialAbilityDeactivateFast(0, p1 | 0);
};
mp.game2.player.specialAbilityReset = function (p1) {
    let $res = natives.specialAbilityReset(0, p1 | 0);
};
mp.game2.player.specialAbilityChargeOnMissionFailed = function (p1) {
    let $res = natives.specialAbilityChargeOnMissionFailed(0, p1);
};
mp.game2.player.specialAbilityChargeSmall = function (p1, p2, p3) {
    let $res = natives.specialAbilityChargeSmall(0, p1 | 0, p2 | 0, p3 | 0);
};
mp.game2.player.specialAbilityChargeMedium = function (p1, p2, p3) {
    let $res = natives.specialAbilityChargeMedium(0, p1 | 0, p2 | 0, p3 | 0);
};
mp.game2.player.specialAbilityChargeLarge = function (p1, p2, p3) {
    let $res = natives.specialAbilityChargeLarge(0, p1 | 0, p2 | 0, p3 | 0);
};
mp.game2.player.specialAbilityChargeContinuous = function (p1, p2) {
    let $res = natives.specialAbilityChargeContinuous(0, p1 | 0, p2 | 0);
};
mp.game2.player.specialAbilityChargeAbsolute = function (p1, p2, p3) {
    let $res = natives.specialAbilityChargeAbsolute(0, p1, p2 | 0, p3 | 0);
};
mp.game2.player.specialAbilityChargeNormalized = function (normalizedValue, p2, p3) {
    let $res = natives.specialAbilityChargeNormalized(0, normalizedValue, p2 | 0, p3 | 0);
};
mp.game2.player.specialAbilityFillMeter = function (p1, p2) {
    let $res = natives.specialAbilityFillMeter(0, p1 | 0, p2 | 0);
};
mp.game2.player.specialAbilityDepleteMeter = function (p1, p2) {
    let $res = natives.specialAbilityDepleteMeter(0, p1 | 0, p2 | 0);
};
mp.game2.player.specialAbilityLock = function (playerModel, p1) {
    let $res = natives.specialAbilityLock(playerModel, p1 | 0);
};
mp.game2.player.specialAbilityUnlock = function (playerModel, p1) {
    let $res = natives.specialAbilityUnlock(playerModel, p1 | 0);
};
mp.game2.player.isSpecialAbilityUnlocked = function (playerModel) {
    let $res = natives.isSpecialAbilityUnlocked(playerModel);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isSpecialAbilityActive = function (p1) {
    let $res = natives.isSpecialAbilityActive(0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isSpecialAbilityMeterFull = function (p1) {
    let $res = natives.isSpecialAbilityMeterFull(0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.enableSpecialAbility = function (toggle, p2) {
    let $res = natives.enableSpecialAbility(0, toggle | 0, p2 | 0);
};
mp.game2.player.isSpecialAbilityEnabled = function (p1) {
    let $res = natives.isSpecialAbilityEnabled(0, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setSpecialAbilityMultiplier = function (multiplier) {
    let $res = natives.setSpecialAbilityMultiplier(multiplier);
};
mp.game2.player.startTeleport = function (x, y, z, heading, p5, findCollisionLand, p7) {
    let $res = natives.startPlayerTeleport(0, x, y, z, heading, p5 | 0, findCollisionLand | 0, p7 | 0);
};
mp.game2.player.updateTeleport = function () {
    let $res = natives.updatePlayerTeleport(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.stopTeleport = function () {
    let $res = natives.stopPlayerTeleport();
};
mp.game2.player.isTeleportActive = function () {
    let $res = natives.isPlayerTeleportActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.getCurrentStealthNoise = function () {
    let $res = natives.getPlayerCurrentStealthNoise(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.setHealthRechargeMultiplier = function (regenRate) {
    let $res = natives.setPlayerHealthRechargeMultiplier(0, regenRate);
};
mp.game2.player.getHealthRechargeLimit = function () {
    let $res = natives.getPlayerHealthRechargeMaxPercent(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.setHealthRechargeLimit = function (limit) {
    let $res = natives.setPlayerHealthRechargeMaxPercent(0, limit);
};
mp.game2.player.setFallDistance = function (p1) {
    let $res = natives.setPlayerFallDistanceToTriggerRagdollOverride(0, p1);
};
mp.game2.player.setWeaponDamageModifier = function (modifier) {
    let $res = natives.setPlayerWeaponDamageModifier(0, modifier);
};
mp.game2.player.setWeaponDefenseModifier = function (modifier) {
    let $res = natives.setPlayerWeaponDefenseModifier(0, modifier);
};
mp.game2.player.setWeaponDefenseModifier2 = function (modifier) {
    let $res = natives.setPlayerWeaponMinigunDefenseModifier(0, modifier);
};
mp.game2.player.setMeleeWeaponDamageModifier = function (modifier, p2) {
    let $res = natives.setPlayerMeleeWeaponDamageModifier(0, modifier, p2 | 0);
};
mp.game2.player.setMeleeWeaponDefenseModifier = function (modifier) {
    let $res = natives.setPlayerMeleeWeaponDefenseModifier(0, modifier);
};
mp.game2.player.setVehicleDamageModifier = function (modifier) {
    let $res = natives.setPlayerVehicleDamageModifier(0, modifier);
};
mp.game2.player.setVehicleDefenseModifier = function (modifier) {
    let $res = natives.setPlayerVehicleDefenseModifier(0, modifier);
};
mp.game2.player.setParachuteTintIndex = function (tintIndex) {
    let $res = natives.setPlayerParachuteTintIndex(0, tintIndex);
};
mp.game2.player.getParachuteTintIndex = function () {
    let $res = natives.getPlayerParachuteTintIndex(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.tintIndex = $res[1];
    return $resObj.tintIndex;
};
mp.game2.player.setReserveParachuteTintIndex = function (index) {
    let $res = natives.setPlayerReserveParachuteTintIndex(0, index);
};
mp.game2.player.getReserveParachuteTintIndex = function () {
    let $res = natives.getPlayerReserveParachuteTintIndex(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.index = $res[1];
    return $resObj.index;
};
mp.game2.player.setParachutePackTintIndex = function (tintIndex) {
    let $res = natives.setPlayerParachutePackTintIndex(0, tintIndex);
};
mp.game2.player.getParachutePackTintIndex = function () {
    let $res = natives.getPlayerParachutePackTintIndex(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.tintIndex = $res[1];
    return $resObj.tintIndex;
};
mp.game2.player.setHasReserveParachute = function () {
    let $res = natives.setPlayerHasReserveParachute(0);
};
mp.game2.player.getHasReserveParachute = function () {
    let $res = natives.getPlayerHasReserveParachute(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setCanLeaveParachuteSmokeTrail = function (enabled) {
    let $res = natives.setPlayerCanLeaveParachuteSmokeTrail(0, enabled | 0);
};
mp.game2.player.setParachuteSmokeTrailColor = function (r, g, b) {
    let $res = natives.setPlayerParachuteSmokeTrailColor(0, r, g, b);
};
mp.game2.player.getParachuteSmokeTrailColor = function () {
    let $res = natives.getPlayerParachuteSmokeTrailColor(0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.game2.player.setResetFlagPreferRearSeats = function (flags) {
    let $res = natives.setPlayerPhonePaletteIdx(0, flags);
};
mp.game2.player.setNoiseMultiplier = function (multiplier) {
    let $res = natives.setPlayerNoiseMultiplier(0, multiplier);
};
mp.game2.player.setSneakingNoiseMultiplier = function (multiplier) {
    let $res = natives.setPlayerSneakingNoiseMultiplier(0, multiplier);
};
mp.game2.player.canPedHear = function (ped) {
    let $res = natives.canPedHearPlayer(0, ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.simulateInputGait = function (amount, gaitType, speed, p4, p5) {
    let $res = natives.simulatePlayerInputGait(0, amount, gaitType, speed, p4 | 0, p5 | 0);
};
mp.game2.player.resetInputGait = function () {
    let $res = natives.resetPlayerInputGait(0);
};
mp.game2.player.setAutoGiveParachuteWhenEnterPlane = function (toggle) {
    let $res = natives.setAutoGiveParachuteWhenEnterPlane(0, toggle | 0);
};
mp.game2.player.setAutoGiveScubaGearWhenExitVehicle = function (toggle) {
    let $res = natives.setAutoGiveScubaGearWhenExitVehicle(0, toggle | 0);
};
mp.game2.player.setStealthPerceptionModifier = function (value) {
    let $res = natives.setPlayerStealthPerceptionModifier(0, value);
};
mp.game2.player.setSimulateAiming = function (toggle) {
    let $res = natives.setPlayerSimulateAiming(0, toggle | 0);
};
mp.game2.player.setClothPinFrames = function (p1) {
    let $res = natives.setPlayerClothPinFrames(0, p1 | 0);
};
mp.game2.player.setClothPackageIndex = function (index) {
    let $res = natives.setPlayerClothPackageIndex(index);
};
mp.game2.player.setClothLockCounter = function (value) {
    let $res = natives.setPlayerClothLockCounter(value);
};
mp.game2.player.attachVirtualBound = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.playerAttachVirtualBound(p0, p1, p2, p3, p4, p5, p6, p7);
};
mp.game2.player.playerAttachVirtualBound = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.playerAttachVirtualBound(p0, p1, p2, p3, p4, p5, p6, p7);
};
mp.game2.player.detachVirtualBound = function () {
    let $res = natives.playerDetachVirtualBound();
};
mp.game2.player.hasBeenSpottedInStolenVehicle = function () {
    let $res = natives.hasPlayerBeenSpottedInStolenVehicle(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.isBattleAware = function () {
    let $res = natives.isPlayerBattleAware(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.extendWorldBoundaryFor = function (x, y, z) {
    let $res = natives.extendWorldBoundaryForPlayer(x, y, z);
};
mp.game2.player.resetWorldBoundaryFor = function () {
    let $res = natives.resetWorldBoundaryForPlayer();
};
mp.game2.player.isRidingTrain = function () {
    let $res = natives.isPlayerRidingTrain(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.hasLeftTheWorld = function () {
    let $res = natives.hasPlayerLeftTheWorld(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.setLeavePedBehind = function (toggle) {
    let $res = natives.setPlayerLeavePedBehind(0, toggle | 0);
};
mp.game2.player.setParachuteVariationOverride = function (p1, p2, p3, p4) {
    let $res = natives.setPlayerParachuteVariationOverride(0, p1, p2, p3, p4 | 0);
};
mp.game2.player.clearParachuteVariationOverride = function () {
    let $res = natives.clearPlayerParachuteVariationOverride(0);
};
mp.game2.player.setParachuteModelOverride = function (model) {
    let $res = natives.setPlayerParachuteModelOverride(0, model);
};
mp.game2.player.setReserveParachuteModelOverride = function (model) {
    let $res = natives.setPlayerReserveParachuteModelOverride(0, model);
};
mp.game2.player.getParachuteModelOverride = function () {
    let $res = natives.getPlayerParachuteModelOverride(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.getReserveParachuteModelOverride = function () {
    let $res = natives.getPlayerReserveParachuteModelOverride(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.clearParachuteModelOverride = function () {
    let $res = natives.clearPlayerParachuteModelOverride(0);
};
mp.game2.player.clearReserveParachuteModelOverride = function () {
    let $res = natives.clearPlayerReserveParachuteModelOverride(0);
};
mp.game2.player.setParachutePackModelOverride = function (model) {
    let $res = natives.setPlayerParachutePackModelOverride(0, model);
};
mp.game2.player.clearParachutePackModelOverride = function () {
    let $res = natives.clearPlayerParachutePackModelOverride(0);
};
mp.game2.player.disableVehicleRewards = function () {
    let $res = natives.disablePlayerVehicleRewards(0);
};
mp.game2.player.setBluetoothState = function (state) {
    let $res = natives.setPlayerBluetoothState(0, state | 0);
};
mp.game2.player.isBluetoothEnable = function () {
    let $res = natives.isPlayerBluetoothEnable(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.getFakeWantedLevel = function () {
    let $res = natives.getPlayerFakeWantedLevel(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.setHomingRocketDisabled = function (p0, p1) {
    let $res = natives.setPlayerHomingDisabledForAllVehicleWeapons(p0, p1);
};
if (!mp.game2.player) mp.game2.player = {};
if (!mp.game2.player.unk) mp.game2.player.unk = {};
mp.game2.player.unk._0x7E07C78925D5FD96 = function (p0) {
    let $res = natives.isWantedAndHasBeenSeenByCops(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.unk._0xDE45D1A1EF45EE61 = function (toggle) {
    let $res = natives.setAllNeutralRandomPedsFlee(0, toggle | 0);
};
mp.game2.player.unk._0xC3376F42B1FACCC6 = function () {
    let $res = natives.setAllNeutralRandomPedsFleeThisFrame(0);
};
mp.game2.player.unk._0xFAC75988A7D078D3 = function () {
    let $res = natives.setLawPedsCanAttackNonWantedPlayerThisFrame(0);
};
mp.game2.player.unk._0x823EC8E82BA45986 = function (p0) {
    let $res = natives.resetWantedLevelHiddenEscapeTime(p0);
};
mp.game2.player.unk._0xBC9490CA15AEA8FB = function () {
    let $res = natives.updateWantedPositionThisFrame(0);
};
mp.game2.player.unk._0x4669B3ED80F24B4E = function () {
    let $res = natives.suppressLosingWantedLevelIfHiddenThisFrame(0);
};
mp.game2.player.unk._0x2F41A3BAE005E5FA = function (p0, p1) {
    let $res = natives.allowEvasionHudIfDisablingHiddenEvasionThisFrame(p0, p1);
};
mp.game2.player.unk._0xAD73CE5A09E42D12 = function () {
    let $res = natives.forceStartHiddenEvasion(0);
};
mp.game2.player.unk._0x36F1B38855F2A8DF = function () {
    let $res = natives.suppressWitnessesCallingPoliceThisFrame(0);
};
mp.game2.player.unk._0xB45EFF719D8427A6 = function (p0) {
    let $res = natives.setLawResponseDelayOverride(p0);
};
mp.game2.player.unk._0x0032A6DBA562C518 = function () {
    let $res = natives.resetLawResponseDelayOverride();
};
mp.game2.player.unk._0xDCC07526B8EC45AF = function () {
    let $res = natives.getPlayerDebugInvincible(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.unk._0xCAC57395B151135F = function (p1) {
    let $res = natives.setPlayerCanCollectDroppedMoney(0, p1 | 0);
};
mp.game2.player.unk._0xB9CF1F793A9F1BF1 = function () {
    let $res = natives.getIsUsingFpsThirdPersonCover();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.unk._0xCB645E85E97EA48B = function () {
    let $res = natives.getIsUsingHoodCamera();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.unk._0xB885852C39CC265D = function () {
    let $res = natives.disablePlayerThrowGrenadeWhileUsingGun();
};
mp.game2.player.unk._0xFFEE8FA29AB9A18E = function (p1) {
    let $res = natives.updateSpecialAbilityFromStat(0, p1);
};
mp.game2.player.unk._0x5FC472C501CCADB3 = function () {
    let $res = natives.getIsPlayerDrivingOnHighway(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.unk._0xF10B44FD479D69F3 = function (p1) {
    let $res = natives.getIsPlayerDrivingWreckless(0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.unk._0xDD2620B7B9D16FF1 = function (p1) {
    let $res = natives.getIsMoppingAreaFreeInFrontOfPlayer(0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.unk._0x8D768602ADEF2245 = function (p1) {
    let $res = natives.setPlayerMaxExplosiveDamage(0, p1);
};
mp.game2.player.unk._0xD821056B9ACF8052 = function (p1) {
    let $res = natives.setPlayerExplosiveDamageModifier(0, p1);
};
mp.game2.player.unk._0x31E90B8873A4CD3B = function (p1) {
    let $res = natives.setPlayerWeaponTakedownDefenseModifier(0, p1);
};
mp.game2.player.unk._0x690A61A6D13583F6 = function () {
    let $res = natives.isRemotePlayerInNonClonedVehicle(0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.unk._0x9EDD76E87D5D51BA = function () {
    let $res = natives.increasePlayerJumpSuppressionRange(0);
};
mp.game2.player.unk._0xBC0753C9CA14B506 = function (p1, p2) {
    let $res = natives.getPlayerReceivedBattleEventRecently(0, p1, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.player.unk._0x2F7CEB6520288061 = function (p0) {
    let $res = natives.setPlayerSpectatedVehicleRadioOverride(p0 | 0);
};
mp.game2.player.unk._0x5501B7A5CDB79D37 = function () {
    let $res = natives.disableCameraViewModeCycle(0);
};
mp.game2.player.unk._0x55FCC0C390620314 = function (p0, p1, p2) {
    let $res = natives.setPlayerCanDamagePlayer(p0, p1, p2);
};
mp.game2.player.unk._0x2382AB11450AE7BA = function (p0, p1) {
    let $res = natives.setApplyWaypointOfPlayer(p0, p1);
};
mp.game2.player.unk._0x6E4361FF3E8CD7CA = function (p0) {
    let $res = natives.isPlayerVehicleWeaponToggledToNonHoming(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.player.unk._0x237440E46D918649 = function (p0) {
    let $res = natives.setPlayerVehicleWeaponToNonHoming(p0);
};
mp.game2.player.unk._0x9097EB6D4BB9A12A = function (entity) {
    let $res = natives.addPlayerTargetableEntity(0, entity);
};
mp.game2.player.unk._0x9F260BFB59ADBCA3 = function (entity) {
    let $res = natives.removePlayerTargetableEntity(0, entity);
};
mp.game2.player.unk._0x7BAE68775557AE0B = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.setPlayerPreviousVariationData(p0, p1, p2, p3, p4, p5);
};
mp.game2.player.unk._0x7148E0F43D11F0D9 = function () {
    let $res = natives.removeScriptFirePosition();
};
mp.game2.player.unk._0x70A382ADEC069DD3 = function (coordX, coordY, coordZ) {
    let $res = natives.setScriptFirePosition(coordX, coordY, coordZ);
};
if (!mp.game2.recording) mp.game2.recording = {};
mp.game2.recording.stopThisFrame = function () {
    let $res = natives.replayPreventRecordingThisFrame();
};
mp.game2.recording.disableRockstarEditorCameraChanges = function () {
    let $res = natives.replayDisableCameraMovementThisFrame();
};
mp.game2.recording.start = function (mode) {
    let $res = natives.startReplayRecording(mode);
};
mp.game2.recording.stopAndSaveClip = function () {
    let $res = natives.stopReplayRecording();
};
mp.game2.recording.stopAndDiscardClip = function () {
    let $res = natives.cancelReplayRecording();
};
mp.game2.recording.saveClip = function () {
    let $res = natives.saveReplayRecording();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.recording.is = function () {
    let $res = natives.isReplayRecording();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.recording.isRecording = function () {
    let $res = natives.isReplayRecording();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.recording) mp.game2.recording = {};
if (!mp.game2.recording.unk) mp.game2.recording.unk = {};
mp.game2.recording.unk._0x48621C9FCA3EBD28 = function (p0) {
    let $res = natives.replayStartEvent(p0);
};
mp.game2.recording.unk._0x81CBAE94390F9F89 = function () {
    let $res = natives.replayStopEvent();
};
mp.game2.recording.unk._0x13B350B8AD0EEE10 = function () {
    let $res = natives.replayCancelEvent();
};
mp.game2.recording.unk._0x293220DA1B46CEBC = function (p0, p1, p2) {
    let $res = natives.replayRecordBackForTime(p0, p1, p2);
};
mp.game2.recording.unk._0x208784099002BC30 = function (missionNameLabel, p1) {
    let $res = natives.replayCheckForEventThisFrame(missionNameLabel, p1);
};
mp.game2.recording.unk._0xF854439EFBB3B583 = function () {
    let $res = natives.replayResetEventInfo();
};
mp.game2.recording.unk._0x66972397E0757E7A = function (p0, p1, p2) {
    let $res = natives.recordGreatestMoment(p0, p1, p2);
};
mp.game2.recording.unk._0xDF4B952F7D381B95 = function () {
    let $res = natives.isReplayInitialized();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.recording.unk._0x4282E08174868BE3 = function () {
    let $res = natives.isReplayAvailable();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.recording.unk._0x33D47E85B476ABCD = function (p0) {
    let $res = natives.isReplayRecordSpaceAvailable(p0 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.replay) mp.game2.replay = {};
mp.game2.replay.isInteriorRenderingDisabled = function () {
    let $res = natives.replaySystemHasRequestedAScriptCleanup();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.replay.resetEditorValues = function () {
    let $res = natives.replayControlShutdown();
};
mp.game2.replay.activateRockstarEditor = function (p0) {
    let $res = natives.activateRockstarEditor(p0);
};
if (!mp.game2.replay) mp.game2.replay = {};
if (!mp.game2.replay.unk) mp.game2.replay.unk = {};
mp.game2.replay.unk._0x7E2BD3EF6C205F09 = function (p0, p1) {
    let $res = natives.registerEffectForReplayEditor(p0, p1 | 0);
};
mp.game2.replay.unk._0x5AD3932DAEB1E5D3 = function () {
    let $res = natives.setScriptsHaveCleanedUpForReplaySystem();
};
mp.game2.replay.unk._0xE058175F8EAFE79A = function (p0) {
    let $res = natives.setReplaySystemPausedForSave(p0 | 0);
};
if (!mp.game2.savemigration) mp.game2.savemigration = {};
if (!mp.game2.savemigration.unk) mp.game2.savemigration.unk = {};
mp.game2.savemigration.unk._0x84B418E93894AC1C = function () {
    let $res = natives.savemigrationIsMpEnabled();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.savemigration.unk._0xE5E9746A66359F9D = function () {
    let $res = natives.savemigrationMpRequestStatus();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.savemigration.unk._0x690B76BD2763E068 = function () {
    let $res = natives.savemigrationMpGetStatus();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
if (!mp.game2.script) mp.game2.script = {};
mp.game2.script.request = function (scriptName) {
    let $res = natives.requestScript(scriptName);
};
mp.game2.script.requestScript = function (scriptName) {
    let $res = natives.requestScript(scriptName);
};
mp.game2.script.setAsNoLongerNeeded = function (scriptName) {
    let $res = natives.setScriptAsNoLongerNeeded(scriptName);
};
mp.game2.script.setScriptAsNoLongerNeeded = function (scriptName) {
    let $res = natives.setScriptAsNoLongerNeeded(scriptName);
};
mp.game2.script.hasLoaded = function (scriptName) {
    let $res = natives.hasScriptLoaded(scriptName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.hasScriptLoaded = function (scriptName) {
    let $res = natives.hasScriptLoaded(scriptName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.doesExist = function (scriptName) {
    let $res = natives.doesScriptExist(scriptName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.doesScriptExist = function (scriptName) {
    let $res = natives.doesScriptExist(scriptName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.requestWithNameHash = function (scriptHash) {
    let $res = natives.requestScriptWithNameHash(scriptHash);
};
mp.game2.script.requestStreamedScript = function (scriptHash) {
    let $res = natives.requestScriptWithNameHash(scriptHash);
};
mp.game2.script.setWithNameHashAsNoLongerNeeded = function (scriptHash) {
    let $res = natives.setScriptWithNameHashAsNoLongerNeeded(scriptHash);
};
mp.game2.script.setStreamedScriptAsNoLongerNeeded = function (scriptHash) {
    let $res = natives.setScriptWithNameHashAsNoLongerNeeded(scriptHash);
};
mp.game2.script.hasWithNameHashLoaded = function (scriptHash) {
    let $res = natives.hasScriptWithNameHashLoaded(scriptHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.hasStreamedScriptLoaded = function (scriptHash) {
    let $res = natives.hasScriptWithNameHashLoaded(scriptHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.doesWithNameHashExist = function (scriptHash) {
    let $res = natives.doesScriptWithNameHashExist(scriptHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.isStreamedScriptRunning = function (scriptHash) {
    let $res = natives.doesScriptWithNameHashExist(scriptHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.terminateThread = function (threadId) {
    let $res = natives.terminateThread(threadId);
};
mp.game2.script.isThreadActive = function (threadId) {
    let $res = natives.isThreadActive(threadId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.getNameOfThread = function (threadId) {
    let $res = natives.getNameOfScriptWithThisId(threadId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.getThreadName = function (threadId) {
    let $res = natives.getNameOfScriptWithThisId(threadId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.threadIteratorReset = function () {
    let $res = natives.scriptThreadIteratorReset();
};
mp.game2.script.threadIteratorGetNextThreadId = function () {
    let $res = natives.scriptThreadIteratorGetNextThreadId();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.getIdOfThisThread = function () {
    let $res = natives.getIdOfThisThread();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.terminateThisThread = function () {
    let $res = natives.terminateThisThread();
};
mp.game2.script.getNumberOfReferencesOfWithNameHash = function (scriptHash) {
    let $res = natives.getNumberOfThreadsRunningTheScriptWithThisHash(scriptHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.getNumberOfInstancesOfStreamedScript = function (scriptHash) {
    let $res = natives.getNumberOfThreadsRunningTheScriptWithThisHash(scriptHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.getThisName = function () {
    let $res = natives.getThisScriptName();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.getHashOfThisName = function () {
    let $res = natives.getHashOfThisScriptName();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.getNumberOfEvents = function (eventGroup) {
    let $res = natives.getNumberOfEvents(eventGroup);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.getEventExists = function (eventGroup, eventIndex) {
    let $res = natives.getEventExists(eventGroup, eventIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.getEventAtIndex = function (eventGroup, eventIndex) {
    let $res = natives.getEventAtIndex(eventGroup, eventIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.getEventData = function (eventGroup, eventIndex, eventDataSize) {
    let $res = natives.getEventData(eventGroup, eventIndex, 0, eventDataSize);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.eventData = $res[0];
    return $res[0] == 1 ? $resObj.eventData : undefined;
};
mp.game2.script.triggerEvent = function (eventGroup, eventDataSize, playerBits) {
    let $res = natives.triggerScriptEvent(eventGroup, 0, eventDataSize, playerBits);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.eventData = $res[0];
    return $resObj.eventData;
};
mp.game2.script.triggerScriptEvent = function (eventGroup, eventDataSize, playerBits) {
    let $res = natives.triggerScriptEvent(eventGroup, 0, eventDataSize, playerBits);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.eventData = $res[0];
    return $resObj.eventData;
};
mp.game2.script.shutdownLoadingScreen = function () {
    let $res = natives.shutdownLoadingScreen();
};
mp.game2.script.setNoLoadingScreen = function (toggle) {
    let $res = natives.setNoLoadingScreen(toggle | 0);
};
mp.game2.script.getNoLoadingScreen = function () {
    let $res = natives.getNoLoadingScreen();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.bgStartContextHash = function (contextHash) {
    let $res = natives.bgStartContextHash(contextHash);
};
mp.game2.script.bgEndContextHash = function (contextHash) {
    let $res = natives.bgEndContextHash(contextHash);
};
mp.game2.script.bgStartContext = function (contextName) {
    let $res = natives.bgStartContext(contextName);
};
mp.game2.script.bgEndContext = function (contextName) {
    let $res = natives.bgEndContext(contextName);
};
mp.game2.script.triggerEvent2 = function (eventGroup, eventDataSize, playerBits) {
    let $res = natives.sendTuScriptEvent(eventGroup, 0, eventDataSize, playerBits);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.eventData = $res[0];
    return $resObj.eventData;
};
if (!mp.game2.script) mp.game2.script = {};
if (!mp.game2.script.unk) mp.game2.script.unk = {};
mp.game2.script.unk._0xB1577667C3708F9B = function () {
    let $res = natives.commitToLoadingscreenSelction();
};
mp.game2.script.unk._0x836B62713E0534CA = function () {
    let $res = natives.bgIsExitflagSet();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.unk._0x760910B49D2B98EA = function () {
    let $res = natives.bgSetExitflagResponse();
};
mp.game2.script.unk._0x0F6F1EBBC4E1D5E6 = function (scriptIndex, p1) {
    let $res = natives.bgDoesLaunchParamExist(scriptIndex, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.script.unk._0x22E21FBCFC88C149 = function (scriptIndex, p1) {
    let $res = natives.bgGetLaunchParamValue(scriptIndex, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.script.unk._0x829CD22E043A2577 = function (p0) {
    let $res = natives.bgGetScriptIdFromNameHash(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.startShapeTestBoundingBox = function (flags1, flags2) {
    let $res = natives.startShapeTestBoundingBox(this.handle, flags1, flags2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.startShapeTestBoundingBox = function (flags1, flags2) {
    let $res = natives.startShapeTestBoundingBox(this.handle, flags1, flags2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.startShapeTestBoundingBox = function (flags1, flags2) {
    let $res = natives.startShapeTestBoundingBox(this.handle, flags1, flags2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.startShapeTestBoundingBox = function (flags1, flags2) {
    let $res = natives.startShapeTestBoundingBox(this.handle, flags1, flags2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.startShapeTestBound = function (flags1, flags2) {
    let $res = natives.startShapeTestBound(this.handle, flags1, flags2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.startShapeTestBound = function (flags1, flags2) {
    let $res = natives.startShapeTestBound(this.handle, flags1, flags2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.startShapeTestBound = function (flags1, flags2) {
    let $res = natives.startShapeTestBound(this.handle, flags1, flags2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.startShapeTestBound = function (flags1, flags2) {
    let $res = natives.startShapeTestBound(this.handle, flags1, flags2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.releaseScriptGuidFromEntity = function () {
    let $res = natives.releaseScriptGuidFromEntity(this.handle);
};
mp.Ped.prototype.releaseScriptGuidFromEntity = function () {
    let $res = natives.releaseScriptGuidFromEntity(this.handle);
};
mp.Object.prototype.releaseScriptGuidFromEntity = function () {
    let $res = natives.releaseScriptGuidFromEntity(this.handle);
};
mp.Vehicle.prototype.releaseScriptGuidFromEntity = function () {
    let $res = natives.releaseScriptGuidFromEntity(this.handle);
};
if (!mp.game2.shapetest) mp.game2.shapetest = {};
mp.game2.shapetest.startShapeTestLosProbe = function (x1, y1, z1, x2, y2, z2, flags, entity, p8) {
    let $res = natives.startShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, p8);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.shapetest.startExpensiveSynchronousShapeTestLosProbe = function (x1, y1, z1, x2, y2, z2, flags, entity, p8) {
    let $res = natives.startExpensiveSynchronousShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, p8);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.shapetest.startShapeTestBoundingBox = function (entity, flags1, flags2) {
    let $res = natives.startShapeTestBoundingBox(entity, flags1, flags2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.shapetest.startShapeTestBox = function (x, y, z, x1, y2, z2, rotX, rotY, rotZ, p9, flags, entity, p12) {
    let $res = natives.startShapeTestBox(x, y, z, x1, y2, z2, rotX, rotY, rotZ, p9, flags, entity, p12);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.shapetest.startShapeTestBound = function (entity, flags1, flags2) {
    let $res = natives.startShapeTestBound(entity, flags1, flags2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.shapetest.startShapeTestCapsule = function (x1, y1, z1, x2, y2, z2, radius, flags, entity, p9) {
    let $res = natives.startShapeTestCapsule(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.shapetest.startShapeTestSweptSphere = function (x1, y1, z1, x2, y2, z2, radius, flags, entity, p9) {
    let $res = natives.startShapeTestSweptSphere(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.shapetest.startShapeTestSurroundingCoords = function (flag, entity, flag2) {
    let $res = natives.startShapeTestMouseCursorLosProbe(undefined, undefined, flag, entity, flag2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.pVec1 = new mp.Vector3($res[1]);
    $resObj.pVec2 = new mp.Vector3($res[2]);
    $resObj.result = $res[1];
    return $resObj;
};
mp.game2.shapetest.getShapeTestResult = function (shapeTestHandle) {
    let $res = natives.getShapeTestResult(shapeTestHandle, false, undefined, undefined, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.hit = $res[1] == 1;
    $resObj.endCoords = new mp.Vector3($res[2]);
    $resObj.surfaceNormal = new mp.Vector3($res[3]);
    $resObj.entityHit = $res[4];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.shapetest.getShapeTestResultIncludingMaterial = function (shapeTestHandle) {
    let $res = natives.getShapeTestResultIncludingMaterial(shapeTestHandle, false, undefined, undefined, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.hit = $res[1] == 1;
    $resObj.endCoords = new mp.Vector3($res[2]);
    $resObj.surfaceNormal = new mp.Vector3($res[3]);
    $resObj.materialHash = $res[4];
    $resObj.entityHit = $res[5];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.shapetest.releaseScriptGuidFromEntity = function (entityHit) {
    let $res = natives.releaseScriptGuidFromEntity(entityHit);
};
if (!mp.game2.stats) mp.game2.stats = {};
mp.game2.stats.statClearSlotForReload = function (statSlot) {
    let $res = natives.statClearSlotForReload(statSlot);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statLoad = function (p0) {
    let $res = natives.statLoad(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSave = function (p0, p1, p2, p3) {
    let $res = natives.statSave(p0, p1 | 0, p2, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statLoadPending = function (p0) {
    let $res = natives.statLoadPending(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSavePending = function () {
    let $res = natives.statSavePending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSavePendingOrRequested = function () {
    let $res = natives.statSavePendingOrRequested();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statDeleteSlot = function (p0) {
    let $res = natives.statDeleteSlot(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statSlotIsLoaded = function (p0) {
    let $res = natives.statSlotIsLoaded(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSetBlockSaves = function (toggle) {
    let $res = natives.statSetBlockSaves(toggle | 0);
};
mp.game2.stats.statSetInt = function (statName, value, save) {
    let $res = natives.statSetInt(statName, value, save | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSetFloat = function (statName, value, save) {
    let $res = natives.statSetFloat(statName, value, save | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSetBool = function (statName, value, save) {
    let $res = natives.statSetBool(statName, value | 0, save | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSetGxtLabel = function (statName, value, save) {
    let $res = natives.statSetGxtLabel(statName, value, save | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSetDate = function (statName, numFields, save) {
    let $res = natives.statSetDate(statName, 0, numFields, save | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.value = $res[0];
    return $res[0] == 1 ? $resObj.value : undefined;
};
mp.game2.stats.statSetString = function (statName, value, save) {
    let $res = natives.statSetString(statName, value, save | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSetPos = function (statName, x, y, z, save) {
    let $res = natives.statSetPos(statName, x, y, z, save | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSetMaskedInt = function (statName, p1, p2, p3, save) {
    let $res = natives.statSetMaskedInt(statName, p1, p2, p3, save | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSetUserId = function (statName, value, save) {
    let $res = natives.statSetUserId(statName, value, save | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statSetCurrentPosixTime = function (statName, p1) {
    let $res = natives.statSetCurrentPosixTime(statName, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statGetInt = function (statHash, p2) {
    let $res = natives.statGetInt(statHash, 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outValue = $res[1];
    return $res[0] == 1 ? $resObj.outValue : undefined;
};
mp.game2.stats.statGetFloat = function (statHash, p2) {
    let $res = natives.statGetFloat(statHash, 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outValue = $res[1];
    return $res[0] == 1 ? $resObj.outValue : undefined;
};
mp.game2.stats.statGetBool = function (statHash, p2) {
    let $res = natives.statGetBool(statHash, false, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outValue = $res[1] == 1;
    return $res[0] == 1 ? $resObj.outValue : undefined;
};
mp.game2.stats.statGetDate = function (statHash, p2, p3) {
    let $res = natives.statGetDate(statHash, 0, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.stats.statGetString = function (statHash, p1) {
    let $res = natives.statGetString(statHash, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetPos = function (p0, p4) {
    let $res = natives.statGetPos(p0, 0, 0, 0, p4);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    $resObj.p2 = $res[2];
    $resObj.p3 = $res[3];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.stats.statGetMaskedInt = function (p0, p2, p3, p4) {
    let $res = natives.statGetMaskedInt(p0, 0, p2, p3, p4);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.stats.statGetUserId = function (p0) {
    let $res = natives.statGetUserId(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetLicensePlate = function (statName) {
    let $res = natives.statGetLicensePlate(statName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statSetLicensePlate = function (statName, str) {
    let $res = natives.statSetLicensePlate(statName, str);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statIncrement = function (statName, value) {
    let $res = natives.statIncrement(statName, value);
};
mp.game2.stats.statCommunityStartSynch = function () {
    let $res = natives.statCommunityStartSynch();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statCommunitySynchIsPending = function () {
    let $res = natives.statCommunitySynchIsPending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statCommunityGetHistory = function (statName, p1) {
    let $res = natives.statCommunityGetHistory(statName, p1, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outValue = $res[1];
    return $res[0] == 1 ? $resObj.outValue : undefined;
};
mp.game2.stats.statGetNumberOfDays = function (statName) {
    let $res = natives.statGetNumberOfDays(statName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetNumberOfHours = function (statName) {
    let $res = natives.statGetNumberOfHours(statName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetNumberOfMinutes = function (statName) {
    let $res = natives.statGetNumberOfMinutes(statName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetNumberOfSeconds = function (statName) {
    let $res = natives.statGetNumberOfSeconds(statName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statSetProfileSettingValue = function (profileSetting, value) {
    let $res = natives.statSetProfileSettingValue(profileSetting, value);
};
mp.game2.stats.statSetProfileSetting = function (profileSetting, value) {
    let $res = natives.statSetProfileSettingValue(profileSetting, value);
};
mp.game2.stats.statGetPackedIntMask = function (p0) {
    let $res = natives.packedStatGetIntStatIndex(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.getPackedIntStatKey = function (index, spStat, charStat, character) {
    let $res = natives.getPackedIntStatKey(index, spStat | 0, charStat | 0, character);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.getPackedTuIntStatKey = function (index, spStat, charStat, character) {
    let $res = natives.getPackedTuIntStatKey(index, spStat | 0, charStat | 0, character);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.getNgstatIntHash = function (index, spStat, charStat, character, section) {
    let $res = natives.getPackedNgIntStatKey(index, spStat | 0, charStat | 0, character, section);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.playBackgroundScriptAction = function (action, value) {
    let $res = natives.playstatsBackgroundScriptAction(action, value);
};
mp.game2.stats.playNpcInvite = function () {
    let $res = natives.playstatsNpcInvite(null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.stats.playstatsNpcInvite = function () {
    let $res = natives.playstatsNpcInvite(null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.stats.playAwardXp = function (amount, type, category) {
    let $res = natives.playstatsAwardXp(amount, type, category);
};
mp.game2.stats.playstatsAwardXp = function (amount, type, category) {
    let $res = natives.playstatsAwardXp(amount, type, category);
};
mp.game2.stats.playRankUp = function (rank) {
    let $res = natives.playstatsRankUp(rank);
};
mp.game2.stats.playstatsRankUp = function (rank) {
    let $res = natives.playstatsRankUp(rank);
};
mp.game2.stats.playStartOfflineMode = function () {
    let $res = natives.playstatsStartedSessionInOfflinemode();
};
mp.game2.stats.playActivityDone = function (p0, p1) {
    let $res = natives.playstatsActivityDone(p0, p1);
};
mp.game2.stats.playLeaveJobChain = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsLeaveJobChain(p0, p1, p2, p3, p4);
};
mp.game2.stats.playMissionStarted = function (p1, p2, p3) {
    let $res = natives.playstatsMissionStarted(null, p1, p2, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.stats.playstatsMissionStarted = function (p1, p2, p3) {
    let $res = natives.playstatsMissionStarted(null, p1, p2, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.stats.playMissionOver = function (p1, p2, p3, p4, p5) {
    let $res = natives.playstatsMissionOver(null, p1, p2, p3 | 0, p4 | 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.stats.playstatsMissionOver = function (p1, p2, p3, p4, p5) {
    let $res = natives.playstatsMissionOver(null, p1, p2, p3 | 0, p4 | 0, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.stats.playMissionCheckpoint = function (p1, p2, p3) {
    let $res = natives.playstatsMissionCheckpoint(null, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.stats.playstatsMissionCheckpoint = function (p1, p2, p3) {
    let $res = natives.playstatsMissionCheckpoint(null, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.stats.playRandomMissionDone = function (name, p1, p2, p3) {
    let $res = natives.playstatsRandomMissionDone(name, p1, p2, p3);
};
mp.game2.stats.playRosBet = function (amount, act, player, cm) {
    let $res = natives.playstatsRosBet(amount, act, player, cm);
};
mp.game2.stats.playRaceCheckpoint = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsRaceCheckpoint(p0, p1, p2, p3, p4);
};
mp.game2.stats.playstatsRaceCheckpoint = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsRaceCheckpoint(p0, p1, p2, p3, p4);
};
mp.game2.stats.playMatchStarted = function (p0, p1, p2) {
    let $res = natives.playstatsMatchStarted(p0, p1, p2);
};
mp.game2.stats.playstatsMatchStarted = function (p0, p1, p2) {
    let $res = natives.playstatsMatchStarted(p0, p1, p2);
};
mp.game2.stats.playShopItem = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsShopItem(p0, p1, p2, p3, p4);
};
mp.game2.stats.playstatsShopItem = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsShopItem(p0, p1, p2, p3, p4);
};
mp.game2.stats.playCrateDropMissionDone = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.playstatsCrateDropMissionDone(p0, p1, p2, p3, p4, p5, p6, p7);
};
mp.game2.stats.playCrateCreatedMissionDone = function (p0, p1, p2) {
    let $res = natives.playstatsCrateCreated(p0, p1, p2);
};
mp.game2.stats.playHoldUpMissionDone = function (p0, p1, p2, p3) {
    let $res = natives.playstatsHoldUpMissionDone(p0, p1, p2, p3);
};
mp.game2.stats.playImportExportMissionDone = function (p0, p1, p2, p3) {
    let $res = natives.playstatsImportExportMissionDone(p0, p1, p2, p3);
};
mp.game2.stats.playRaceToPointMissionDone = function (p0, p1, p2, p3) {
    let $res = natives.playstatsRaceToPointMissionDone(p0, p1, p2, p3);
};
mp.game2.stats.playAcquiredHiddenPackage = function (p0) {
    let $res = natives.playstatsAcquiredHiddenPackage(p0);
};
mp.game2.stats.playWebsiteVisited = function (scaleformHash, p1) {
    let $res = natives.playstatsWebsiteVisited(scaleformHash, p1);
};
mp.game2.stats.playstatsWebsiteVisited = function (scaleformHash, p1) {
    let $res = natives.playstatsWebsiteVisited(scaleformHash, p1);
};
mp.game2.stats.playFriendActivity = function (p0, p1) {
    let $res = natives.playstatsFriendActivity(p0, p1);
};
mp.game2.stats.playstatsFriendActivity = function (p0, p1) {
    let $res = natives.playstatsFriendActivity(p0, p1);
};
mp.game2.stats.playOddjobDone = function (p0, p1, p2) {
    let $res = natives.playstatsOddjobDone(p0, p1, p2);
};
mp.game2.stats.playstatsOddjobDone = function (p0, p1, p2) {
    let $res = natives.playstatsOddjobDone(p0, p1, p2);
};
mp.game2.stats.playPropChange = function (p0, p1, p2, p3) {
    let $res = natives.playstatsPropChange(p0, p1, p2, p3);
};
mp.game2.stats.playstatsPropChange = function (p0, p1, p2, p3) {
    let $res = natives.playstatsPropChange(p0, p1, p2, p3);
};
mp.game2.stats.playClothChange = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsClothChange(p0, p1, p2, p3, p4);
};
mp.game2.stats.playstatsClothChange = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsClothChange(p0, p1, p2, p3, p4);
};
mp.game2.stats.playWeaponModeChange = function (weaponHash, componentHashTo, componentHashFrom) {
    let $res = natives.playstatsWeaponModeChange(weaponHash, componentHashTo, componentHashFrom);
};
mp.game2.stats.playCheatApplied = function (cheat) {
    let $res = natives.playstatsCheatApplied(cheat);
};
mp.game2.stats.playstatsCheatApplied = function (cheat) {
    let $res = natives.playstatsCheatApplied(cheat);
};
mp.game2.stats.playQuickfixTool = function (element, item) {
    let $res = natives.playstatsQuickfixTool(element, item);
};
mp.game2.stats.playIdleKick = function (time) {
    let $res = natives.playstatsIdleKick(time);
};
mp.game2.stats.playHeistSaveCheat = function (hash, p1) {
    let $res = natives.playstatsHeistSaveCheat(hash, p1);
};
mp.game2.stats.playDirectorMode = function () {
    let $res = natives.playstatsAppendDirectorMetric(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $resObj.p0;
};
mp.game2.stats.playAwardBadsport = function (id) {
    let $res = natives.playstatsAwardBadSport(id);
};
mp.game2.stats.playPegasaircraft = function (modelHash) {
    let $res = natives.playstatsPegasusAsPersonalAircraft(modelHash);
};
mp.game2.stats.playFreemodeChallenges = function (p0) {
    let $res = natives.playstatsFmEventChallenges(p0);
};
mp.game2.stats.playFreemodeVehicleTarget = function (p0) {
    let $res = natives.playstatsFmEventVehicletarget(p0);
};
mp.game2.stats.playFreemodeUrbanWarfare = function (p0) {
    let $res = natives.playstatsFmEventUrbanwarfare(p0);
};
mp.game2.stats.playFreemodeCheckpointCollection = function (p0) {
    let $res = natives.playstatsFmEventCheckpointcollection(p0);
};
mp.game2.stats.playFreemodeAtob = function (p0) {
    let $res = natives.playstatsFmEventAtob(p0);
};
mp.game2.stats.playFreemodePennedIn = function (p0) {
    let $res = natives.playstatsFmEventPennedin(p0);
};
mp.game2.stats.playFreemodePassTheParcel = function (p0) {
    let $res = natives.playstatsFmEventPasstheparcel(p0);
};
mp.game2.stats.playFreemodeHotProperty = function (p0) {
    let $res = natives.playstatsFmEventHotproperty(p0);
};
mp.game2.stats.playFreemodeDeaddrop = function (p0) {
    let $res = natives.playstatsFmEventDeaddrop(p0);
};
mp.game2.stats.playFreemodeKingOfTheCastle = function (p0) {
    let $res = natives.playstatsFmEventKingofthecastle(p0);
};
mp.game2.stats.playFreemodeCriminalDamage = function (p0) {
    let $res = natives.playstatsFmEventCriminaldamage(p0);
};
mp.game2.stats.playFreemodeCompetitiveUrbanWarfare = function (p0) {
    let $res = natives.playstatsFmEventCompetitiveurbanwarfare(p0);
};
mp.game2.stats.playFreemodeHuntBeast = function (p0) {
    let $res = natives.playstatsFmEventHuntbeast(p0);
};
mp.game2.stats.playPiMenuHideSettings = function () {
    let $res = natives.playstatsPimenuHideOptions(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.leaderboardsGetNumberOfColumns = function (p0, p1) {
    let $res = natives.leaderboardsGetNumberOfColumns(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.leaderboardsGetColumnId = function (p0, p1, p2) {
    let $res = natives.leaderboardsGetColumnId(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.leaderboardsGetColumnType = function (p0, p1, p2) {
    let $res = natives.leaderboardsGetColumnType(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.leaderboardsReadClearAll = function () {
    let $res = natives.leaderboardsReadClearAll();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.leaderboardsReadClear = function (p0, p1, p2) {
    let $res = natives.leaderboardsReadClear(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.leaderboardsReadPending = function (p0, p1, p2) {
    let $res = natives.leaderboardsReadPending(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.leaderboardsReadAnyPending = function () {
    let $res = natives.leaderboardsReadAnyPending();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.leaderboardsReadSuccessful = function (p0, p1, p2) {
    let $res = natives.leaderboardsReadSuccessful(p0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.leaderboards2ReadFriendsByRow = function (p2, p3, p4, p5) {
    let $res = natives.leaderboards2ReadFriendsByRow(0, 0, p2, p3 | 0, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.stats.leaderboards2ReadByHandle = function () {
    let $res = natives.leaderboards2ReadByHandle(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.stats.leaderboards2ReadByRow = function (p2, p4, p6) {
    let $res = natives.leaderboards2ReadByRow(0, 0, p2, 0, p4, 0, p6);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.p3 = $res[0];
    $resObj.p5 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.stats.leaderboards2ReadByRank = function (p1, p2) {
    let $res = natives.leaderboards2ReadByRank(0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.stats.leaderboards2ReadByRadius = function (p1) {
    let $res = natives.leaderboards2ReadByRadius(0, p1, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.stats.leaderboards2ReadByScoreInt = function (p1, p2) {
    let $res = natives.leaderboards2ReadByScoreInt(0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.stats.leaderboards2ReadByScoreFloat = function (p1, p2) {
    let $res = natives.leaderboards2ReadByScoreFloat(0, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.stats.leaderboards2ReadRankPrediction = function () {
    let $res = natives.leaderboards2ReadRankPrediction(0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.stats.leaderboards2ReadByPlatform = function (gamerHandleCsv, platformName) {
    let $res = natives.leaderboards2ReadByPlaform(0, gamerHandleCsv, platformName);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.stats.leaderboards2WriteData = function () {
    let $res = natives.leaderboards2WriteData(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.stats.leaderboardsWriteAddColumn = function (p0, p1, p2) {
    let $res = natives.leaderboardsWriteAddColumn(p0, p1, p2);
};
mp.game2.stats.leaderboardsWriteAddColumnLong = function (p0, p1, p2) {
    let $res = natives.leaderboardsWriteAddColumnLong(p0, p1, p2);
};
mp.game2.stats.leaderboardsCacheDataRow = function () {
    let $res = natives.leaderboardsCacheDataRow(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.stats.leaderboardsClearCacheData = function () {
    let $res = natives.leaderboardsClearCacheData();
};
mp.game2.stats.leaderboardsGetCacheExists = function (p0) {
    let $res = natives.leaderboardsGetCacheExists(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.leaderboardsGetCacheTime = function (p0) {
    let $res = natives.leaderboardsGetCacheTime(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.leaderboardsGetCacheNumberOfRows = function (p0) {
    let $res = natives.leaderboardsGetCacheNumberOfRows(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.leaderboardsGetCacheDataRow = function (p0, p1) {
    let $res = natives.leaderboardsGetCacheDataRow(p0, p1, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p2 = $res[0];
    return $res[0] == 1 ? $resObj.p2 : undefined;
};
mp.game2.stats.updateStatInt = function (statHash, value, p2) {
    let $res = natives.presenceEventUpdatestatInt(statHash, value, p2);
};
mp.game2.stats.updateStatFloat = function (statHash, value, p2) {
    let $res = natives.presenceEventUpdatestatFloat(statHash, value, p2);
};
mp.game2.stats.setProfileSettingPrologueComplete = function () {
    let $res = natives.setProfileSettingPrologueComplete();
};
mp.game2.stats.statSetCheatIsActive = function () {
    let $res = natives.statSetCheatIsActive();
};
mp.game2.stats.leaderboards2WriteDataForEventType = function () {
    let $res = natives.leaderboards2WriteDataForEventType(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.stats.statMigrateSave = function (platformName) {
    let $res = natives.statMigrateSavegameStart(platformName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statGetSaveMigrationStatus = function () {
    let $res = natives.statGetSaveMigrationStatus(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.stats.statSaveMigrationCancel = function () {
    let $res = natives.statSaveMigrationCancelPendingOperation();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statGetCancelSaveMigrationStatus = function () {
    let $res = natives.statGetCancelSaveMigrationStatus();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statSaveMigrationConsumeContentUnlock = function (contentId, srcPlatform, srcGamerHandle) {
    let $res = natives.statSaveMigrationConsumeContent(contentId, srcPlatform, srcGamerHandle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statGetSaveMigrationConsumeContentUnlockStatus = function () {
    let $res = natives.statGetSaveMigrationConsumeContentStatus(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1];
    $resObj.result = $res[1];
    return $resObj;
};
mp.game2.stats.statManagerSetMutable = function () {
    let $res = natives.statEnableStatsTracking();
};
mp.game2.stats.statManagerSetImmutable = function () {
    let $res = natives.statDisableStatsTracking();
};
mp.game2.stats.statManagerIsMutable = function () {
    let $res = natives.statIsStatsTrackingEnabled();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statTrackingEnable = function (statType, valueType) {
    let $res = natives.statStartRecordStat(statType, valueType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statTrackingClearProgress = function () {
    let $res = natives.statStopRecordStat();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statGetProgressOfTrackedStat = function () {
    let $res = natives.statGetRecordedValue(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.value = $res[1];
    return $res[1] == 1 ? $resObj.value : undefined;
};
mp.game2.stats.statIsTrackingEnabled = function () {
    let $res = natives.statIsRecordingStat();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statGetChallengeNearMisses = function () {
    let $res = natives.statGetCurrentNearMissNocrashPrecise();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetChallengeLongestWheelie = function () {
    let $res = natives.statGetCurrentRearWheelDistance();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetChallengeLongestStoppie = function () {
    let $res = natives.statGetCurrentFrontWheelDistance();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetChallengeLongestJump = function () {
    let $res = natives.statGetCurrentJumpDistance();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetChallengeNoCrashes = function () {
    let $res = natives.statGetCurrentDriveNocrashDistance();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetChallengeHighestSpeed = function () {
    let $res = natives.statGetCurrentSpeed();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetChallengeReverseDriving = function () {
    let $res = natives.statGetCurrentDrivingReverseDistance();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetChallengeLongestFreefall = function () {
    let $res = natives.statGetCurrentSkydivingDistance();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetChallengeLowFlying = function () {
    let $res = natives.statGetChallengeFlyingDist();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.statGetHeightAboveGround = function () {
    let $res = natives.statGetFlyingAltitude(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[1];
    return $res[1] == 1 ? $resObj.p0 : undefined;
};
mp.game2.stats.statIsAboveDeepWater = function () {
    let $res = natives.statIsPlayerVehicleAboveOcean();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.statGetLongestBail = function () {
    let $res = natives.statGetVehicleBailDistance();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.setHasContentUnlocksFlags = function (value) {
    let $res = natives.setHasSpecialeditionContent(value);
};
mp.game2.stats.setSaveMigrationTransactionId = function (transactionId) {
    let $res = natives.setSaveMigrationTransactionIdWarning(transactionId);
};
mp.game2.stats.playBwBossOnBossDeathMatch = function (p0) {
    let $res = natives.playstatsBwBossonbossdeathmatch(p0);
};
mp.game2.stats.playBwYachtAttack = function (p0) {
    let $res = natives.playstatsBwYatchattack(p0);
};
mp.game2.stats.playBwHuntTheBoss = function (p0) {
    let $res = natives.playstatsBwHuntTheBoss(p0);
};
mp.game2.stats.playBwSightseer = function (p0) {
    let $res = natives.playstatsBwSightseer(p0);
};
mp.game2.stats.playBwAssault = function (p0) {
    let $res = natives.playstatsBwAssault(p0);
};
mp.game2.stats.playBwBellyOfTheBeast = function (p0) {
    let $res = natives.playstatsBwBellyOfTheBeast(p0);
};
mp.game2.stats.playBwHeadhunter = function (p0) {
    let $res = natives.playstatsBwHeadHunter(p0);
};
mp.game2.stats.playBwFragileGooods = function (p0) {
    let $res = natives.playstatsBwFragileGoods(p0);
};
mp.game2.stats.playBwAirFreight = function (p0) {
    let $res = natives.playstatsBwAirFreight(p0);
};
mp.game2.stats.playBcCarJacking = function (p0) {
    let $res = natives.playstatsBcCarJacking(p0);
};
mp.game2.stats.playBcSmashAndGrab = function (p0) {
    let $res = natives.playstatsBcSmashAndGrab(p0);
};
mp.game2.stats.playBcProtectionRacket = function (p0) {
    let $res = natives.playstatsBcProtectionRacket(p0);
};
mp.game2.stats.playBcMostWanted = function (p0) {
    let $res = natives.playstatsBcMostWanted(p0);
};
mp.game2.stats.playBcFindersKeepers = function (p0) {
    let $res = natives.playstatsBcFindersKeepers(p0);
};
mp.game2.stats.playBcPointToPoint = function (p0) {
    let $res = natives.playstatsBcPointToPoint(p0);
};
mp.game2.stats.playBcCashing = function (p0) {
    let $res = natives.playstatsBcCashing(p0);
};
mp.game2.stats.playBcSalvage = function (p0) {
    let $res = natives.playstatsBcSalvage(p0);
};
mp.game2.stats.playSpentPiCustomLoadout = function (amount) {
    let $res = natives.playstatsSpentPiCustomLoadout(amount);
};
mp.game2.stats.playBuyContraband = function () {
    let $res = natives.playstatsBuyContrabandMission(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playSellContraband = function () {
    let $res = natives.playstatsSellContrabandMission(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playDefendContraband = function () {
    let $res = natives.playstatsDefendContrabandMission(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playRecoverContraband = function () {
    let $res = natives.playstatsRecoverContrabandMission(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playHitContrabandDestroyLimit = function (p0) {
    let $res = natives.playstatsHitContrabandDestroyLimit(p0);
};
mp.game2.stats.playBecomeBoss = function (p0) {
    let $res = natives.startBeingBoss(p0);
};
mp.game2.stats.playBecomeGoon = function (p0, p1, p2) {
    let $res = natives.startBeingGoon(p0, p1, p2);
};
mp.game2.stats.playEndBeingBoss = function (p0, p1) {
    let $res = natives.endBeingBoss(p0, p1);
};
mp.game2.stats.playEndBeingGoon = function (p0, p1, p2, p3, p4) {
    let $res = natives.endBeingGoon(p0, p1, p2, p3, p4);
};
mp.game2.stats.hiredLimo = function (p0, p1) {
    let $res = natives.hiredLimo(p0, p1);
};
mp.game2.stats.orderedBossVehicle = function (p0, p1, vehicleHash) {
    let $res = natives.orderBossVehicle(p0, p1, vehicleHash);
};
mp.game2.stats.playChangeUniform = function (p0, p1, p2) {
    let $res = natives.changeUniform(p0, p1, p2);
};
mp.game2.stats.playChangeGoonLookingForWork = function (p0) {
    let $res = natives.changeGoonLookingForWork(p0);
};
mp.game2.stats.playGhostingToPlayer = function (p0) {
    let $res = natives.sendMetricGhostingToPlayer(p0);
};
mp.game2.stats.playVipPoach = function (p0, p1, p2) {
    let $res = natives.sendMetricVipPoach(p0, p1, p2);
};
mp.game2.stats.playPunishBodyguard = function (p0) {
    let $res = natives.sendMetricPunishBodyguard(p0);
};
mp.game2.stats.playStuntPerformedEventAllowTrigger = function () {
    let $res = natives.playstatsStartTrackingStunts();
};
mp.game2.stats.playStuntPerformedEventDisallowTrigger = function () {
    let $res = natives.playstatsStopTrackingStunts();
};
mp.game2.stats.playMissionEnded = function (p0) {
    let $res = natives.playstatsMissionEnded(p0);
};
mp.game2.stats.playImpexpMissionEnded = function (p0) {
    let $res = natives.playstatsImpexpMissionEnded(p0);
};
mp.game2.stats.playChangeMcRole = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.playstatsChangeMcRole(p0, p1, p2, p3, p4, p5, p6);
};
mp.game2.stats.playChangeMcOutfit = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsChangeMcOutfit(p0, p1, p2, p3, p4);
};
mp.game2.stats.playChangeMcEmblem = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsSwitchMcEmblem(p0, p1, p2, p3, p4);
};
mp.game2.stats.playMcRequestBike = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsMcRequestBike(p0, p1, p2, p3, p4);
};
mp.game2.stats.playKilledRivalMcMember = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsMcKilledRivalMcMember(p0, p1, p2, p3, p4);
};
mp.game2.stats.playAbandoningMc = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsAbandonedMc(p0, p1, p2, p3, p4);
};
mp.game2.stats.playEarnedMcPoints = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.playstatsEarnedMcPoints(p0, p1, p2, p3, p4, p5);
};
mp.game2.stats.playMcFormationEnds = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.playstatsMcFormationEnds(p0, p1, p2, p3, p4, p5, p6);
};
mp.game2.stats.playMcClubhouseActivity = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.playstatsMcClubhouseActivity(p0, p1, p2, p3, p4, p5, p6, 0);
};
mp.game2.stats.playRivalBehaviour = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.playstatsRivalBehavior(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};
mp.game2.stats.playCopyRankIntoNewSlot = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.playstatsCopyRankIntoNewSlot(p0, p1, p2, p3, p4, p5, p6);
};
mp.game2.stats.playDupeDetection = function () {
    let $res = natives.playstatsDupeDetected(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playBanAlert = function (p0) {
    let $res = natives.playstatsBanAlert(p0);
};
mp.game2.stats.playGunrunMissionEnded = function () {
    let $res = natives.playstatsGunrunningMissionEnded(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playGunrunRnd = function (p0) {
    let $res = natives.playstatsGunrunningRnd(p0);
};
mp.game2.stats.playBusinessBattleEnded = function (p0) {
    let $res = natives.playstatsBusinessBattleEnded(p0);
};
mp.game2.stats.playWarehouseMissionEnded = function (p0) {
    let $res = natives.playstatsWarehouseMissionEnded(p0);
};
mp.game2.stats.playNightclubMissionEnded = function (p0) {
    let $res = natives.playstatsNightclubMissionEnded(p0);
};
mp.game2.stats.playDjUsage = function (p0, p1) {
    let $res = natives.playstatsDjUsage(p0, p1);
};
mp.game2.stats.playMinigameUsage = function (p0, p1) {
    let $res = natives.playstatsMinigameUsage(p0, p1, 0);
};
mp.game2.stats.playStoneHatchetEnd = function () {
    let $res = natives.playstatsStoneHatchetEnded(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playSmugMissionEnded = function () {
    let $res = natives.playstatsSmugglerMissionEnded(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playH2FmprepEnd = function () {
    let $res = natives.playstatsFmHeistPrepEnded(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playH2InstanceEnd = function (p1, p2, p3) {
    let $res = natives.playstatsInstancedHeistEnded(0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playDarMissionEnd = function () {
    let $res = natives.playstatsDarCheckpoint(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playEnterSessionPack = function () {
    let $res = natives.playstatsEnterSessionPack(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playDroneUsage = function (p0, p1, p2) {
    let $res = natives.playstatsDroneUsage(p0, p1, p2);
};
mp.game2.stats.playSpectatorWheelSpin = function (p0, p1, p2, p3) {
    let $res = natives.playstatsSpinWheel(p0, p1, p2, p3);
};
mp.game2.stats.playArenaWarSpectator = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsArenaWarsSpectator(p0, p1, p2, p3, p4);
};
mp.game2.stats.playArenaWarsEnded = function () {
    let $res = natives.playstatsArenaWarsEnded(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playPassiveMode = function (p0, p1, p2, p3) {
    let $res = natives.playstatsSwitchPassiveMode(p0 | 0, p1, p2, p3);
};
mp.game2.stats.playCollectible = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.playstatsCollectiblePickedUp(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, 0);
};
mp.game2.stats.playCasinoStoryMissionEnded = function (p0, p1) {
    let $res = natives.playstatsCasinoStoryMissionEnded(p0, p1);
};
mp.game2.stats.playCasinoChip = function (p0) {
    let $res = natives.playstatsCasinoChip(p0);
};
mp.game2.stats.playCasinoRoulette = function (p0) {
    let $res = natives.playstatsCasinoRoulette(p0);
};
mp.game2.stats.playCasinoBlackjack = function (p0) {
    let $res = natives.playstatsCasinoBlackjack(p0);
};
mp.game2.stats.playCasinoThreecardpoker = function (p0) {
    let $res = natives.playstatsCasinoThreeCardPoker(p0);
};
mp.game2.stats.playCasinoSlotmachine = function (p0) {
    let $res = natives.playstatsCasinoSlotMachine(p0);
};
mp.game2.stats.playCasinoInsidetrack = function (p0) {
    let $res = natives.playstatsCasinoInsideTrack(p0);
};
mp.game2.stats.playCasinoLuckyseven = function (p0) {
    let $res = natives.playstatsCasinoLuckySeven(p0);
};
mp.game2.stats.playCasinoRouletteLight = function (p0) {
    let $res = natives.playstatsCasinoRouletteLight(p0);
};
mp.game2.stats.playCasinoBlackjackLight = function (p0) {
    let $res = natives.playstatsCasinoBlackjackLight(p0);
};
mp.game2.stats.playCasinoThreecardpokerLight = function (p0) {
    let $res = natives.playstatsCasinoThreeCardPokerLight(p0);
};
mp.game2.stats.playCasinoSlotmachineLight = function (p0) {
    let $res = natives.playstatsCasinoSlotMachineLight(p0);
};
mp.game2.stats.playCasinoInsidetrackLight = function (p0) {
    let $res = natives.playstatsCasinoInsideTrackLight(p0);
};
mp.game2.stats.playArcadegame = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.playstatsArcadeGame(p0, p1, p2, p3, p4, p5, 0);
};
mp.game2.stats.playArcadeLovematch = function (p0, p1) {
    let $res = natives.playstatsArcadeLoveMatch(p0, p1);
};
mp.game2.stats.playCasinoMissionEnded = function () {
    let $res = natives.playstatsFreemodeCasinoMissionEnded(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[0];
    return $resObj.data;
};
mp.game2.stats.playHeist3Drone = function (p0) {
    let $res = natives.playstatsHeist3Drone(p0);
};
mp.game2.stats.playHeist3Hack = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.playstatsHeist3Hack(p0, p1, p2, p3, p4, p5);
};
mp.game2.stats.playNpcPhone = function (p0, p1, p2, p3) {
    let $res = natives.playstatsNpcPhone(p0, p1, p2, p3, 0, 0, 0, 0, 0, 0, 0, 0, 0);
};
mp.game2.stats.playArcadeCabinet = function (p0) {
    let $res = natives.playstatsArcadeCabinet(p0);
};
mp.game2.stats.playHeist3Finale = function (p0) {
    let $res = natives.playstatsHeist3Finale(p0);
};
mp.game2.stats.playHeist3Prep = function (p0) {
    let $res = natives.playstatsHeist3Prep(p0);
};
mp.game2.stats.playMasterControl = function (p0, p1, p2, p3) {
    let $res = natives.playstatsMasterControl(p0, p1, p2, p3);
};
mp.game2.stats.playQuitMode = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsQuitMode(p0, p1, p2, p3, p4);
};
mp.game2.stats.playMissionVote = function (p0) {
    let $res = natives.playstatsMissionVote(p0);
};
mp.game2.stats.playNjvsVote = function (p0) {
    let $res = natives.playstatsNjvsVote(p0);
};
mp.game2.stats.playHeist4Prep = function (p0) {
    let $res = natives.playstatsHeist4Prep(p0);
};
mp.game2.stats.playHeist4Finale = function (p0) {
    let $res = natives.playstatsHeist4Finale(p0);
};
mp.game2.stats.playHeist4Hack = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsHeist4Hack(p0, p1, p2, p3, p4);
};
mp.game2.stats.playSubWeap = function (p0, p1, p2, p3) {
    let $res = natives.playstatsSubWeap(p0, p1, p2, p3);
};
mp.game2.stats.playFastTrvl = function (p0, p1, p2, p3, p4) {
    let $res = natives.playstatsFastTrvl(p0, p1, p2, p3, p4, 0, 0, 0, 0, 0, 0);
};
mp.game2.stats.playHubEntry = function (p0) {
    let $res = natives.playstatsHubEntry(p0);
};
mp.game2.stats.playDjMissionEnded = function (p0) {
    let $res = natives.playstatsDjMissionEnded(p0);
};
mp.game2.stats.playRobberyPrep = function (p0) {
    let $res = natives.playstatsRobberyPrep(p0);
};
mp.game2.stats.playRobberyFinale = function (p0) {
    let $res = natives.playstatsRobberyFinale(p0);
};
mp.game2.stats.playExtraEvent = function (p0) {
    let $res = natives.playstatsExtraEvent(p0);
};
mp.game2.stats.playCarclubPoints = function (p0) {
    let $res = natives.playstatsCarclubPoints(p0);
};
mp.game2.stats.playCarclubChallenge = function (p0, p1, p2, p3) {
    let $res = natives.playstatsCarclubChallenge(p0, p1, p2, p3);
};
mp.game2.stats.playCarclubPrize = function (p0, p1) {
    let $res = natives.playstatsCarclubPrize(p0, p1);
};
if (!mp.game2.stats) mp.game2.stats = {};
if (!mp.game2.stats.unk) mp.game2.stats.unk = {};
mp.game2.stats.unk._0x5688585E6D563CD8 = function (p0) {
    let $res = natives.statSetOpenSavetypeInJob(p0);
};
mp.game2.stats.unk._0x7F2C4CDF2E82DF4C = function (p0) {
    let $res = natives.statCloudSlotLoadFailed(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.unk._0xE496A53BA5F50A56 = function (p0) {
    let $res = natives.statCloudSlotLoadFailedCode(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.unk._0x6A7F19756F1A9016 = function () {
    let $res = natives.statGetBlockSaves();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.unk._0x7E6946F68A38B74F = function (p0) {
    let $res = natives.statCloudSlotSaveFailed(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.unk._0xA8733668D1047B51 = function (p0) {
    let $res = natives.statClearPendingSaves(p0);
};
mp.game2.stats.unk._0xECB41AC6AB754401 = function () {
    let $res = natives.statLoadDirtyReadDetected();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.unk._0x9B4BD21D69B1E609 = function () {
    let $res = natives.statClearDirtyReadDetected();
};
mp.game2.stats.unk._0xC0E0D686DDFC6EAE = function () {
    let $res = natives.statGetLoadSafeToProgressToMpFromSp();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.unk._0x26D7399B9587FE89 = function (p0) {
    let $res = natives.statResetAllOnlineCharacterStats(p0);
};
mp.game2.stats.unk._0xA78B8FA58200DA56 = function (p0) {
    let $res = natives.statLocalResetAllOnlineCharacterStats(p0);
};
mp.game2.stats.unk._0xC01D2470F22CDE5A = function () {
    let $res = natives.statsCompletedCharacterCreation(0);
};
mp.game2.stats.unk._0x6DEE77AFF8C21BD1 = function () {
    let $res = natives.playstatsCreateMatchHistoryId2(0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.playerAccountId = $res[1];
    $resObj.posixTime = $res[2];
    $resObj.result = $res[1] == 1;
    return $resObj;
};
mp.game2.stats.unk._0xF8C54A461C3E11DC = function () {
    let $res = natives.playstatsJobActivityEnd(0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    return $resObj;
};
mp.game2.stats.unk._0xF5BB8DAC426A52C0 = function () {
    let $res = natives.playstatsJobBend(0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    return $resObj;
};
mp.game2.stats.unk._0xA736CF7FB7C5BFF4 = function () {
    let $res = natives.playstatsJobLtsEnd(0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    return $resObj;
};
mp.game2.stats.unk._0x14E0B2D1AD1044E0 = function () {
    let $res = natives.playstatsJobLtsRoundEnd(0, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    return $resObj;
};
mp.game2.stats.unk._0xD1032E482629049E = function (p0) {
    let $res = natives.playstatsSetJoinType(p0);
};
mp.game2.stats.unk._0xA0F93D5465B3094D = function () {
    let $res = natives.leaderboards2ReadGetRowDataStart(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p0 = $res[0];
    return $res[0] == 1 ? $resObj.p0 : undefined;
};
mp.game2.stats.unk._0x71B008056E5692D6 = function () {
    let $res = natives.leaderboards2ReadGetRowDataEnd();
};
mp.game2.stats.unk._0x34770B9CE0E03B91 = function (p0) {
    let $res = natives.leaderboards2ReadGetRowDataInfo(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    return $res[0] == 1 ? $resObj.p1 : undefined;
};
mp.game2.stats.unk._0x88578F6EC36B4A3A = function (p0, p1) {
    let $res = natives.leaderboards2ReadGetRowDataInt(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.unk._0x38491439B6BA7F7D = function (p0, p1) {
    let $res = natives.leaderboards2ReadGetRowDataFloat(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.unk._0x8EC74CEB042E7CFF = function (p0) {
    let $res = natives.leaderboardsClearCacheDataId(p0);
};
mp.game2.stats.unk._0x6483C25849031C4F = function (p0, p1, p2) {
    let $res = natives.presenceEventUpdatestatIntWithString(p0, p1, p2, null);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p3 = $res[0];
    return $resObj.p3;
};
mp.game2.stats.unk._0x5EAD2BF6484852E4 = function () {
    let $res = natives.getPlayerHasDrivenAllVehicles();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.unk._0xC141B8917E0017EC = function () {
    let $res = natives.setHasPostedAllVehiclesDriven();
};
mp.game2.stats.unk._0xC67E2DA1CBE759E2 = function () {
    let $res = natives.setProfileSettingSpChopMissionComplete();
};
mp.game2.stats.unk._0xF1A1803D3476F215 = function (value) {
    let $res = natives.setProfileSettingCreatorRacesDone(value);
};
mp.game2.stats.unk._0x38BAAA5DD4C9D19F = function (value) {
    let $res = natives.setProfileSettingCreatorDmDone(value);
};
mp.game2.stats.unk._0x55384438FC55AD8E = function (value) {
    let $res = natives.setProfileSettingCreatorCtfDone(value);
};
mp.game2.stats.unk._0x723C1CE13FBFDB67 = function (p0, p1) {
    let $res = natives.setJobActivityIdStarted(p0, p1);
};
mp.game2.stats.unk._0x0D01D20616FC73FB = function (p0, p1) {
    let $res = natives.setFreemodePrologueDone(p0, p1);
};
mp.game2.stats.unk._0x428EAF89E24F6C36 = function (p0, p1) {
    let $res = natives.statNetworkIncrementOnSuicide(p0, p1);
};
mp.game2.stats.unk._0x6F361B8889A792A3 = function () {
    let $res = natives.forceCloudMpStatsDownloadAndOverwriteLocalSave();
};
mp.game2.stats.unk._0xC847B43F369AC0B5 = function () {
    let $res = natives.statMigrateClearForRestart();
};
mp.game2.stats.unk._0x9A62EC95AE10E011 = function () {
    let $res = natives.statMigrateSavegameGetStatus();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.unk._0x4C89FE2BDEB3F169 = function () {
    let $res = natives.statMigrateCheckAlreadyDone();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.unk._0xC6E0E2616A7576BB = function () {
    let $res = natives.statMigrateCheckStart();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.unk._0x5BD5F255321C4AAF = function (p0) {
    let $res = natives.statMigrateCheckGetIsPlatformAvailable(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.stats.unk._0xDEAAF77EB3687E97 = function (p0) {
    let $res = natives.statMigrateCheckGetPlatformStatus(p0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.stats.unk._0xB3DA2606774A8E2D = function () {
    let $res = natives.statRollbackSaveMigration();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.stats.unk._0x6BC0ACD0673ACEBE = function (p0, p1, p2) {
    let $res = natives.getBossGoonUuid(p0, p1, p2);
};
mp.game2.stats.unk._0x4AFF7E02E485E92B = function () {
    let $res = natives.playstatsKillYourself();
};
mp.Vehicle.prototype.setVehiclePopulationBudget = function () {
    let $res = natives.setVehiclePopulationBudget(this.handle);
};
mp.Player.prototype.setPedPopulationBudget = function () {
    let $res = natives.setPedPopulationBudget(this.handle);
};
mp.Ped.prototype.setPedPopulationBudget = function () {
    let $res = natives.setPedPopulationBudget(this.handle);
};
mp.Player.prototype.setFocusEntity = function () {
    let $res = natives.setFocusEntity(this.handle);
};
mp.Ped.prototype.setFocusEntity = function () {
    let $res = natives.setFocusEntity(this.handle);
};
mp.Object.prototype.setFocusEntity = function () {
    let $res = natives.setFocusEntity(this.handle);
};
mp.Vehicle.prototype.setFocusEntity = function () {
    let $res = natives.setFocusEntity(this.handle);
};
mp.Player.prototype.isEntityFocus = function () {
    let $res = natives.isEntityFocus(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isEntityFocus = function () {
    let $res = natives.isEntityFocus(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isEntityFocus = function () {
    let $res = natives.isEntityFocus(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isEntityFocus = function () {
    let $res = natives.isEntityFocus(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.startPlayerSwitch = function (to, flags, switchType) {
    let $res = natives.startPlayerSwitch(this.handle, to, flags, switchType);
};
mp.Ped.prototype.startPlayerSwitch = function (to, flags, switchType) {
    let $res = natives.startPlayerSwitch(this.handle, to, flags, switchType);
};
mp.Player.prototype.switchOutPlayer = function (flags, switchType) {
    let $res = natives.switchToMultiFirstpart(this.handle, flags, switchType);
};
mp.Ped.prototype.switchOutPlayer = function (flags, switchType) {
    let $res = natives.switchToMultiFirstpart(this.handle, flags, switchType);
};
mp.Player.prototype.switchInPlayer = function () {
    let $res = natives.switchToMultiSecondpart(this.handle);
};
mp.Ped.prototype.switchInPlayer = function () {
    let $res = natives.switchToMultiSecondpart(this.handle);
};
if (!mp.game2.streaming) mp.game2.streaming = {};
mp.game2.streaming.loadAllObjectsNow = function () {
    let $res = natives.loadAllObjectsNow();
};
mp.game2.streaming.loadScene = function (x, y, z) {
    let $res = natives.loadScene(x, y, z);
};
mp.game2.streaming.networkUpdateLoadScene = function () {
    let $res = natives.networkUpdateLoadScene();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.isNetworkLoadingScene = function () {
    let $res = natives.isNetworkLoadingScene();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.setInteriorActive = function (interiorID, toggle) {
    let $res = natives.setInteriorActive(interiorID, toggle | 0);
};
mp.game2.streaming.requestModel = function (model) {
    let $res = natives.requestModel(model);
};
mp.game2.streaming.requestMenuPedModel = function (model) {
    let $res = natives.requestMenuPedModel(model);
};
mp.game2.streaming.requestModel2 = function (model) {
    let $res = natives.requestMenuPedModel(model);
};
mp.game2.streaming.hasModelLoaded = function (model) {
    let $res = natives.hasModelLoaded(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.requestModelsInRoom = function (interior, roomName) {
    let $res = natives.requestModelsInRoom(interior, roomName);
};
mp.game2.streaming.setModelAsNoLongerNeeded = function (model) {
    let $res = natives.setModelAsNoLongerNeeded(model);
};
mp.game2.streaming.isModelInCdimage = function (model) {
    let $res = natives.isModelInCdimage(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.isModelValid = function (model) {
    let $res = natives.isModelValid(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.isModelAPed = function (model) {
    let $res = natives.isModelAPed(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.isModelAVehicle = function (model) {
    let $res = natives.isModelAVehicle(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.requestCollisionAtCoord = function (x, y, z) {
    let $res = natives.requestCollisionAtCoord(x, y, z);
};
mp.game2.streaming.requestCollisionForModel = function (model) {
    let $res = natives.requestCollisionForModel(model);
};
mp.game2.streaming.hasCollisionForModelLoaded = function (model) {
    let $res = natives.hasCollisionForModelLoaded(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.requestAdditionalCollisionAtCoord = function (x, y, z) {
    let $res = natives.requestAdditionalCollisionAtCoord(x, y, z);
};
mp.game2.streaming.doesAnimDictExist = function (animDict) {
    let $res = natives.doesAnimDictExist(animDict);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.requestAnimDict = function (animDict) {
    let $res = natives.requestAnimDict(animDict);
};
mp.game2.streaming.hasAnimDictLoaded = function (animDict) {
    let $res = natives.hasAnimDictLoaded(animDict);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.removeAnimDict = function (animDict) {
    let $res = natives.removeAnimDict(animDict);
};
mp.game2.streaming.requestAnimSet = function (animSet) {
    let $res = natives.requestAnimSet(animSet);
};
mp.game2.streaming.hasAnimSetLoaded = function (animSet) {
    let $res = natives.hasAnimSetLoaded(animSet);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.removeAnimSet = function (animSet) {
    let $res = natives.removeAnimSet(animSet);
};
mp.game2.streaming.requestClipSet = function (clipSet) {
    let $res = natives.requestClipSet(clipSet);
};
mp.game2.streaming.hasClipSetLoaded = function (clipSet) {
    let $res = natives.hasClipSetLoaded(clipSet);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.removeClipSet = function (clipSet) {
    let $res = natives.removeClipSet(clipSet);
};
mp.game2.streaming.requestIpl = function (iplName) {
    let $res = natives.requestIpl(iplName);
};
mp.game2.streaming.removeIpl = function (iplName) {
    let $res = natives.removeIpl(iplName);
};
mp.game2.streaming.isIplActive = function (iplName) {
    let $res = natives.isIplActive(iplName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.set = function (toggle) {
    let $res = natives.setStreaming(toggle | 0);
};
mp.game2.streaming.setStreaming = function (toggle) {
    let $res = natives.setStreaming(toggle | 0);
};
mp.game2.streaming.loadGlobalWaterType = function (waterType) {
    let $res = natives.loadGlobalWaterFile(waterType);
};
mp.game2.streaming.getGlobalWaterType = function () {
    let $res = natives.getGlobalWaterFile();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.setGamePausesFor = function (toggle) {
    let $res = natives.setGamePausesForStreaming(toggle | 0);
};
mp.game2.streaming.setGamePausesForStreaming = function (toggle) {
    let $res = natives.setGamePausesForStreaming(toggle | 0);
};
mp.game2.streaming.setReducePedModelBudget = function (toggle) {
    let $res = natives.setReducePedModelBudget(toggle | 0);
};
mp.game2.streaming.setReduceVehicleModelBudget = function (toggle) {
    let $res = natives.setReduceVehicleModelBudget(toggle | 0);
};
mp.game2.streaming.setDitchPoliceModels = function (toggle) {
    let $res = natives.setDitchPoliceModels(toggle | 0);
};
mp.game2.streaming.getNumberOfRequests = function () {
    let $res = natives.getNumberOfStreamingRequests();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.requestPtfxAsset = function () {
    let $res = natives.requestPtfxAsset();
};
mp.game2.streaming.hasPtfxAssetLoaded = function () {
    let $res = natives.hasPtfxAssetLoaded();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.removePtfxAsset = function () {
    let $res = natives.removePtfxAsset();
};
mp.game2.streaming.requestNamedPtfxAsset = function (fxName) {
    let $res = natives.requestNamedPtfxAsset(fxName);
};
mp.game2.streaming.hasNamedPtfxAssetLoaded = function (fxName) {
    let $res = natives.hasNamedPtfxAssetLoaded(fxName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.removeNamedPtfxAsset = function (fxName) {
    let $res = natives.removeNamedPtfxAsset(fxName);
};
mp.game2.streaming.setVehiclePopulationBudget = function (p0) {
    let $res = natives.setVehiclePopulationBudget(p0);
};
mp.game2.streaming.setPedPopulationBudget = function (p0) {
    let $res = natives.setPedPopulationBudget(p0);
};
mp.game2.streaming.clearFocus = function () {
    let $res = natives.clearFocus();
};
mp.game2.streaming.setFocusPosAndVel = function (x, y, z, offsetX, offsetY, offsetZ) {
    let $res = natives.setFocusPosAndVel(x, y, z, offsetX, offsetY, offsetZ);
};
mp.game2.streaming.setFocusArea = function (x, y, z, offsetX, offsetY, offsetZ) {
    let $res = natives.setFocusPosAndVel(x, y, z, offsetX, offsetY, offsetZ);
};
mp.game2.streaming.setFocusEntity = function (entity) {
    let $res = natives.setFocusEntity(entity);
};
mp.game2.streaming.isEntityFocus = function (entity) {
    let $res = natives.isEntityFocus(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.setMapdatacullboxEnabled = function (name, toggle) {
    let $res = natives.setMapdatacullboxEnabled(name, toggle | 0);
};
mp.game2.streaming.streamvolCreateSphere = function (x, y, z, rad, p4, p5) {
    let $res = natives.streamvolCreateSphere(x, y, z, rad, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.setUnkCameraSettings = function (x, y, z, rad, p4, p5) {
    let $res = natives.streamvolCreateSphere(x, y, z, rad, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.streamvolCreateFrustum = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    let $res = natives.streamvolCreateFrustum(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.streamvolCreateLine = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.streamvolCreateLine(p0, p1, p2, p3, p4, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.streamvolDelete = function (unused) {
    let $res = natives.streamvolDelete(unused);
};
mp.game2.streaming.streamvolHasLoaded = function (unused) {
    let $res = natives.streamvolHasLoaded(unused);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.streamvolIsValid = function (unused) {
    let $res = natives.streamvolIsValid(unused);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.isStreamvolActive = function () {
    let $res = natives.isStreamvolActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.newLoadSceneStart = function (posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7) {
    let $res = natives.newLoadSceneStart(posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.newLoadSceneStartSphere = function (x, y, z, radius, p4) {
    let $res = natives.newLoadSceneStartSphere(x, y, z, radius, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.newLoadSceneStartSafe = function (x, y, z, radius, p4) {
    let $res = natives.newLoadSceneStartSphere(x, y, z, radius, p4);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.newLoadSceneStop = function () {
    let $res = natives.newLoadSceneStop();
};
mp.game2.streaming.isNewLoadSceneActive = function () {
    let $res = natives.isNewLoadSceneActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.isNewLoadSceneLoaded = function () {
    let $res = natives.isNewLoadSceneLoaded();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.startPlayerSwitch = function (from, to, flags, switchType) {
    let $res = natives.startPlayerSwitch(from, to, flags, switchType);
};
mp.game2.streaming.stopPlayerSwitch = function () {
    let $res = natives.stopPlayerSwitch();
};
mp.game2.streaming.isPlayerSwitchInProgress = function () {
    let $res = natives.isPlayerSwitchInProgress();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.getPlayerSwitchType = function () {
    let $res = natives.getPlayerSwitchType();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.getIdealPlayerSwitchType = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.getIdealPlayerSwitchType(x1, y1, z1, x2, y2, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.getPlayerSwitchState = function () {
    let $res = natives.getPlayerSwitchState();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.getPlayerShortSwitchState = function () {
    let $res = natives.getPlayerShortSwitchState();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.getPlayerSwitchJumpCutIndex = function () {
    let $res = natives.getPlayerSwitchJumpCutIndex();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.setPlayerSwitchOutro = function (cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder) {
    let $res = natives.setPlayerSwitchOutro(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder);
};
mp.game2.streaming.setPlayerSwitchLocation = function (cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder) {
    let $res = natives.setPlayerSwitchOutro(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder);
};
mp.game2.streaming.setPlayerSwitchEstablishingShot = function (name) {
    let $res = natives.setPlayerSwitchEstablishingShot(name);
};
mp.game2.streaming.allowPlayerSwitchPan = function () {
    let $res = natives.allowPlayerSwitchPan();
};
mp.game2.streaming.allowPlayerSwitchOutro = function () {
    let $res = natives.allowPlayerSwitchOutro();
};
mp.game2.streaming.allowPlayerSwitchAscent = function () {
    let $res = natives.allowPlayerSwitchAscent();
};
mp.game2.streaming.allowPlayerSwitchDescent = function () {
    let $res = natives.allowPlayerSwitchDescent();
};
mp.game2.streaming.isSwitchReadyForDescent = function () {
    let $res = natives.isSwitchReadyForDescent();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.enableSwitchPauseBeforeDescent = function () {
    let $res = natives.enableSwitchPauseBeforeDescent();
};
mp.game2.streaming.disableSwitchOutroFx = function () {
    let $res = natives.disableSwitchOutroFx();
};
mp.game2.streaming.switchOutPlayer = function (ped, flags, switchType) {
    let $res = natives.switchToMultiFirstpart(ped, flags, switchType);
};
mp.game2.streaming.switchInPlayer = function (ped) {
    let $res = natives.switchToMultiSecondpart(ped);
};
mp.game2.streaming.getPlayerSwitchInterpOutDuration = function () {
    let $res = natives.getPlayerSwitchInterpOutDuration();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.getPlayerSwitchInterpOutCurrentTime = function () {
    let $res = natives.getPlayerSwitchInterpOutCurrentTime();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.isSwitchSkippingDescent = function () {
    let $res = natives.isSwitchSkippingDescent();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.getLodscale = function () {
    let $res = natives.getLodscale();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.overrideLodscaleThisFrame = function (scaling) {
    let $res = natives.overrideLodscaleThisFrame(scaling);
};
mp.game2.streaming.setRenderHdOnly = function (toggle) {
    let $res = natives.setRenderHdOnly(toggle | 0);
};
mp.game2.streaming.prefetchSrl = function (srl) {
    let $res = natives.prefetchSrl(srl);
};
mp.game2.streaming.isSrlLoaded = function () {
    let $res = natives.isSrlLoaded();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.beginSrl = function () {
    let $res = natives.beginSrl();
};
mp.game2.streaming.endSrl = function () {
    let $res = natives.endSrl();
};
mp.game2.streaming.setSrlTime = function (p0) {
    let $res = natives.setSrlTime(p0);
};
mp.game2.streaming.setHdArea = function (x, y, z, radius) {
    let $res = natives.setHdArea(x, y, z, radius);
};
mp.game2.streaming.clearHdArea = function () {
    let $res = natives.clearHdArea();
};
mp.game2.streaming.initCreatorBudget = function () {
    let $res = natives.initCreatorBudget();
};
mp.game2.streaming.shutdownCreatorBudget = function () {
    let $res = natives.shutdownCreatorBudget();
};
mp.game2.streaming.addModelToCreatorBudget = function (modelHash) {
    let $res = natives.addModelToCreatorBudget(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.removeModelFromCreatorBudget = function (modelHash) {
    let $res = natives.removeModelFromCreatorBudget(modelHash);
};
mp.game2.streaming.getUsedCreatorModelMemoryPercentage = function () {
    let $res = natives.getUsedCreatorBudget();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.setIslandHopperEnabled = function (name, toggle) {
    let $res = natives.setIslandEnabled(name, toggle | 0);
};
if (!mp.game2.streaming) mp.game2.streaming = {};
if (!mp.game2.streaming.unk) mp.game2.streaming.unk = {};
mp.game2.streaming.unk._0x0811381EF5062FEC = function (p0) {
    let $res = natives.setRestoreFocusEntity(p0);
};
mp.game2.streaming.unk._0x4E52E752C76E7E7A = function (p0) {
    let $res = natives.setAllMapdataCulled(p0);
};
mp.game2.streaming.unk._0x71E7B2E657449AAD = function () {
    let $res = natives.isSafeToStartPlayerSwitch();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.unk._0x5F2013F8BC24EE69 = function (p0) {
    let $res = natives.setPlayerShortSwitchStyle(p0);
};
mp.game2.streaming.unk._0x933BBEEB8C61B5F4 = function () {
    let $res = natives.isSwitchToMultiFirstpartFinished();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.unk._0x1E9057A74FD73E23 = function () {
    let $res = natives.setSceneStreamingTracksCamPosThisFrame();
};
mp.game2.streaming.unk._0xBED8CA5FF5E04113 = function (p0, p1, p2, p3) {
    let $res = natives.remapLodscaleRangeThisFrame(p0, p1, p2, p3);
};
mp.game2.streaming.unk._0x472397322E92A856 = function () {
    let $res = natives.suppressHdMapStreamingThisFrame();
};
mp.game2.streaming.unk._0x03F1A106BDA7DD3E = function () {
    let $res = natives.forceAllowTimeBasedFadingThisFrame();
};
mp.game2.streaming.unk._0x95A7DABDDBB78AE7 = function (iplName1, iplName2) {
    let $res = natives.iplGroupSwapStart(iplName1, iplName2);
};
mp.game2.streaming.unk._0x63EB2B972A218CAC = function () {
    let $res = natives.iplGroupSwapCancel();
};
mp.game2.streaming.unk._0xFB199266061F820A = function () {
    let $res = natives.iplGroupSwapIsReady();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.streaming.unk._0xF4A0DADB70F57FA6 = function () {
    let $res = natives.iplGroupSwapFinish();
};
mp.game2.streaming.unk._0x5068F488DDB54DD8 = function () {
    let $res = natives.iplGroupSwapIsActive();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.streaming.unk._0xEF39EE20C537E98C = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.setSrlPostCutsceneCamera(p0, p1, p2, p3, p4, p5);
};
mp.game2.streaming.unk._0xBEB2D9A1D9A8F55A = function (p0, p1, p2, p3) {
    let $res = natives.setSrlReadaheadTimes(p0, p1, p2, p3);
};
mp.game2.streaming.unk._0x20C6C7E4EB082A7F = function (p0) {
    let $res = natives.setSrlLongJumpMode(p0 | 0);
};
mp.game2.streaming.unk._0xF8155A7F03DDFC8E = function (p0) {
    let $res = natives.setSrlForcePrestream(p0);
};
mp.Player.prototype.pause = function (ms) {
    let $res = natives.taskPause(this.handle, ms);
};
mp.Ped.prototype.pause = function (ms) {
    let $res = natives.taskPause(this.handle, ms);
};
mp.Player.prototype.standStill = function (time) {
    let $res = natives.taskStandStill(this.handle, time);
};
mp.Ped.prototype.standStill = function (time) {
    let $res = natives.taskStandStill(this.handle, time);
};
mp.Player.prototype.jump = function (unused, p2, p3) {
    let $res = natives.taskJump(this.handle, unused | 0, p2 | 0, p3 | 0);
};
mp.Ped.prototype.jump = function (unused, p2, p3) {
    let $res = natives.taskJump(this.handle, unused | 0, p2 | 0, p3 | 0);
};
mp.Player.prototype.cower = function (duration) {
    let $res = natives.taskCower(this.handle, duration);
};
mp.Ped.prototype.cower = function (duration) {
    let $res = natives.taskCower(this.handle, duration);
};
mp.Player.prototype.handsUp = function (duration, facingPed, p3, p4) {
    let $res = natives.taskHandsUp(this.handle, duration, facingPed, p3, p4 | 0);
};
mp.Ped.prototype.handsUp = function (duration, facingPed, p3, p4) {
    let $res = natives.taskHandsUp(this.handle, duration, facingPed, p3, p4 | 0);
};
mp.Player.prototype.updateHandsUpDuration = function (duration) {
    let $res = natives.updateTaskHandsUpDuration(this.handle, duration);
};
mp.Ped.prototype.updateHandsUpDuration = function (duration) {
    let $res = natives.updateTaskHandsUpDuration(this.handle, duration);
};
mp.Player.prototype.openVehicleDoor = function (vehicle, timeOut, seat, speed) {
    let $res = natives.taskOpenVehicleDoor(this.handle, vehicle, timeOut, seat, speed);
};
mp.Ped.prototype.openVehicleDoor = function (vehicle, timeOut, seat, speed) {
    let $res = natives.taskOpenVehicleDoor(this.handle, vehicle, timeOut, seat, speed);
};
mp.Player.prototype.enterVehicle = function (vehicle, timeout, seat, speed, flag, p6) {
    let $res = natives.taskEnterVehicle(this.handle, vehicle, timeout, seat, speed, flag, p6);
};
mp.Ped.prototype.enterVehicle = function (vehicle, timeout, seat, speed, flag, p6) {
    let $res = natives.taskEnterVehicle(this.handle, vehicle, timeout, seat, speed, flag, p6);
};
mp.Player.prototype.leaveVehicle = function (vehicle, flags) {
    let $res = natives.taskLeaveVehicle(this.handle, vehicle, flags);
};
mp.Ped.prototype.leaveVehicle = function (vehicle, flags) {
    let $res = natives.taskLeaveVehicle(this.handle, vehicle, flags);
};
mp.Player.prototype.getOffBoat = function (boat) {
    let $res = natives.taskGetOffBoat(this.handle, boat);
};
mp.Ped.prototype.getOffBoat = function (boat) {
    let $res = natives.taskGetOffBoat(this.handle, boat);
};
mp.Player.prototype.skyDive = function (p1) {
    let $res = natives.taskSkyDive(this.handle, p1 | 0);
};
mp.Ped.prototype.skyDive = function (p1) {
    let $res = natives.taskSkyDive(this.handle, p1 | 0);
};
mp.Player.prototype.parachute = function (p1, p2) {
    let $res = natives.taskParachute(this.handle, p1 | 0, p2 | 0);
};
mp.Ped.prototype.parachute = function (p1, p2) {
    let $res = natives.taskParachute(this.handle, p1 | 0, p2 | 0);
};
mp.Player.prototype.parachuteToTarget = function (x, y, z) {
    let $res = natives.taskParachuteToTarget(this.handle, x, y, z);
};
mp.Ped.prototype.parachuteToTarget = function (x, y, z) {
    let $res = natives.taskParachuteToTarget(this.handle, x, y, z);
};
mp.Player.prototype.setParachuteTarget = function (x, y, z) {
    let $res = natives.setParachuteTaskTarget(this.handle, x, y, z);
};
mp.Ped.prototype.setParachuteTarget = function (x, y, z) {
    let $res = natives.setParachuteTaskTarget(this.handle, x, y, z);
};
mp.Player.prototype.setParachuteThrust = function (thrust) {
    let $res = natives.setParachuteTaskThrust(this.handle, thrust);
};
mp.Ped.prototype.setParachuteThrust = function (thrust) {
    let $res = natives.setParachuteTaskThrust(this.handle, thrust);
};
mp.Player.prototype.rappelFromHeli = function (p1) {
    let $res = natives.taskRappelFromHeli(this.handle, p1);
};
mp.Ped.prototype.rappelFromHeli = function (p1) {
    let $res = natives.taskRappelFromHeli(this.handle, p1);
};
mp.Player.prototype.vehicleDriveToCoord = function (vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10) {
    let $res = natives.taskVehicleDriveToCoord(this.handle, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10);
};
mp.Ped.prototype.vehicleDriveToCoord = function (vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10) {
    let $res = natives.taskVehicleDriveToCoord(this.handle, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10);
};
mp.Player.prototype.vehicleDriveToCoordLongrange = function (vehicle, x, y, z, speed, driveMode, stopRange) {
    let $res = natives.taskVehicleDriveToCoordLongrange(this.handle, vehicle, x, y, z, speed, driveMode, stopRange);
};
mp.Ped.prototype.vehicleDriveToCoordLongrange = function (vehicle, x, y, z, speed, driveMode, stopRange) {
    let $res = natives.taskVehicleDriveToCoordLongrange(this.handle, vehicle, x, y, z, speed, driveMode, stopRange);
};
mp.Player.prototype.vehicleDriveWander = function (vehicle, speed, drivingStyle) {
    let $res = natives.taskVehicleDriveWander(this.handle, vehicle, speed, drivingStyle);
};
mp.Ped.prototype.vehicleDriveWander = function (vehicle, speed, drivingStyle) {
    let $res = natives.taskVehicleDriveWander(this.handle, vehicle, speed, drivingStyle);
};
mp.Player.prototype.followToOffsetOfEntity = function (entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing) {
    let $res = natives.taskFollowToOffsetOfEntity(this.handle, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing | 0);
};
mp.Ped.prototype.followToOffsetOfEntity = function (entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing) {
    let $res = natives.taskFollowToOffsetOfEntity(this.handle, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing | 0);
};
mp.Player.prototype.goStraightToCoord = function (x, y, z, speed, timeout, targetHeading, distanceToSlide) {
    let $res = natives.taskGoStraightToCoord(this.handle, x, y, z, speed, timeout, targetHeading, distanceToSlide);
};
mp.Ped.prototype.goStraightToCoord = function (x, y, z, speed, timeout, targetHeading, distanceToSlide) {
    let $res = natives.taskGoStraightToCoord(this.handle, x, y, z, speed, timeout, targetHeading, distanceToSlide);
};
mp.Player.prototype.goStraightToCoordRelativeToEntity = function (entity2, p2, p3, p4, p5, p6) {
    let $res = natives.taskGoStraightToCoordRelativeToEntity(this.handle, entity2, p2, p3, p4, p5, p6);
};
mp.Ped.prototype.goStraightToCoordRelativeToEntity = function (entity2, p2, p3, p4, p5, p6) {
    let $res = natives.taskGoStraightToCoordRelativeToEntity(this.handle, entity2, p2, p3, p4, p5, p6);
};
mp.Object.prototype.goStraightToCoordRelativeToEntity = function (entity2, p2, p3, p4, p5, p6) {
    let $res = natives.taskGoStraightToCoordRelativeToEntity(this.handle, entity2, p2, p3, p4, p5, p6);
};
mp.Vehicle.prototype.goStraightToCoordRelativeToEntity = function (entity2, p2, p3, p4, p5, p6) {
    let $res = natives.taskGoStraightToCoordRelativeToEntity(this.handle, entity2, p2, p3, p4, p5, p6);
};
mp.Player.prototype.achieveHeading = function (heading, timeout) {
    let $res = natives.taskAchieveHeading(this.handle, heading, timeout);
};
mp.Ped.prototype.achieveHeading = function (heading, timeout) {
    let $res = natives.taskAchieveHeading(this.handle, heading, timeout);
};
mp.Player.prototype.followPointRoute = function (speed, unknown) {
    let $res = natives.taskFollowPointRoute(this.handle, speed, unknown);
};
mp.Ped.prototype.followPointRoute = function (speed, unknown) {
    let $res = natives.taskFollowPointRoute(this.handle, speed, unknown);
};
mp.Player.prototype.goToEntity = function (target, duration, distance, speed, p5, p6) {
    let $res = natives.taskGoToEntity(this.handle, target, duration, distance, speed, p5, p6);
};
mp.Ped.prototype.goToEntity = function (target, duration, distance, speed, p5, p6) {
    let $res = natives.taskGoToEntity(this.handle, target, duration, distance, speed, p5, p6);
};
mp.Object.prototype.goToEntity = function (target, duration, distance, speed, p5, p6) {
    let $res = natives.taskGoToEntity(this.handle, target, duration, distance, speed, p5, p6);
};
mp.Vehicle.prototype.goToEntity = function (target, duration, distance, speed, p5, p6) {
    let $res = natives.taskGoToEntity(this.handle, target, duration, distance, speed, p5, p6);
};
mp.Player.prototype.smartFleeCoord = function (x, y, z, distance, time, p6, p7) {
    let $res = natives.taskSmartFleeCoord(this.handle, x, y, z, distance, time, p6 | 0, p7 | 0);
};
mp.Ped.prototype.smartFleeCoord = function (x, y, z, distance, time, p6, p7) {
    let $res = natives.taskSmartFleeCoord(this.handle, x, y, z, distance, time, p6 | 0, p7 | 0);
};
mp.Player.prototype.smartFleePed = function (fleeTarget, distance, fleeTime, p4, p5) {
    let $res = natives.taskSmartFleePed(this.handle, fleeTarget, distance, fleeTime, p4 | 0, p5 | 0);
};
mp.Ped.prototype.smartFleePed = function (fleeTarget, distance, fleeTime, p4, p5) {
    let $res = natives.taskSmartFleePed(this.handle, fleeTarget, distance, fleeTime, p4 | 0, p5 | 0);
};
mp.Player.prototype.reactAndFleePed = function (fleeTarget) {
    let $res = natives.taskReactAndFleePed(this.handle, fleeTarget);
};
mp.Ped.prototype.reactAndFleePed = function (fleeTarget) {
    let $res = natives.taskReactAndFleePed(this.handle, fleeTarget);
};
mp.Player.prototype.shockingEventReact = function (eventHandle) {
    let $res = natives.taskShockingEventReact(this.handle, eventHandle);
};
mp.Ped.prototype.shockingEventReact = function (eventHandle) {
    let $res = natives.taskShockingEventReact(this.handle, eventHandle);
};
mp.Player.prototype.wanderInArea = function (x, y, z, radius, minimalLength, timeBetweenWalks) {
    let $res = natives.taskWanderInArea(this.handle, x, y, z, radius, minimalLength, timeBetweenWalks);
};
mp.Ped.prototype.wanderInArea = function (x, y, z, radius, minimalLength, timeBetweenWalks) {
    let $res = natives.taskWanderInArea(this.handle, x, y, z, radius, minimalLength, timeBetweenWalks);
};
mp.Player.prototype.wanderStandard = function (p1, p2) {
    let $res = natives.taskWanderStandard(this.handle, p1, p2);
};
mp.Ped.prototype.wanderStandard = function (p1, p2) {
    let $res = natives.taskWanderStandard(this.handle, p1, p2);
};
mp.Player.prototype.vehiclePark = function (vehicle, x, y, z, heading, mode, radius, keepEngineOn) {
    let $res = natives.taskVehiclePark(this.handle, vehicle, x, y, z, heading, mode, radius, keepEngineOn | 0);
};
mp.Ped.prototype.vehiclePark = function (vehicle, x, y, z, heading, mode, radius, keepEngineOn) {
    let $res = natives.taskVehiclePark(this.handle, vehicle, x, y, z, heading, mode, radius, keepEngineOn | 0);
};
mp.Player.prototype.stealthKill = function (target, actionType, p3, p4) {
    let $res = natives.taskStealthKill(this.handle, target, actionType, p3, p4 | 0);
};
mp.Ped.prototype.stealthKill = function (target, actionType, p3, p4) {
    let $res = natives.taskStealthKill(this.handle, target, actionType, p3, p4 | 0);
};
mp.Player.prototype.plantBomb = function (x, y, z, heading) {
    let $res = natives.taskPlantBomb(this.handle, x, y, z, heading);
};
mp.Ped.prototype.plantBomb = function (x, y, z, heading) {
    let $res = natives.taskPlantBomb(this.handle, x, y, z, heading);
};
mp.Player.prototype.followNavMeshToCoord = function (x, y, z, speed, timeout, stoppingRange, persistFollowing, unk) {
    let $res = natives.taskFollowNavMeshToCoord(this.handle, x, y, z, speed, timeout, stoppingRange, persistFollowing | 0, unk);
};
mp.Ped.prototype.followNavMeshToCoord = function (x, y, z, speed, timeout, stoppingRange, persistFollowing, unk) {
    let $res = natives.taskFollowNavMeshToCoord(this.handle, x, y, z, speed, timeout, stoppingRange, persistFollowing | 0, unk);
};
mp.Player.prototype.followNavMeshToCoordAdvanced = function (x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f) {
    let $res = natives.taskFollowNavMeshToCoordAdvanced(this.handle, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f);
};
mp.Ped.prototype.followNavMeshToCoordAdvanced = function (x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f) {
    let $res = natives.taskFollowNavMeshToCoordAdvanced(this.handle, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f);
};
mp.Player.prototype.setPedPathCanUseClimbovers = function (Toggle) {
    let $res = natives.setPedPathCanUseClimbovers(this.handle, Toggle | 0);
};
mp.Ped.prototype.setPedPathCanUseClimbovers = function (Toggle) {
    let $res = natives.setPedPathCanUseClimbovers(this.handle, Toggle | 0);
};
mp.Player.prototype.setPedPathCanUseLadders = function (Toggle) {
    let $res = natives.setPedPathCanUseLadders(this.handle, Toggle | 0);
};
mp.Ped.prototype.setPedPathCanUseLadders = function (Toggle) {
    let $res = natives.setPedPathCanUseLadders(this.handle, Toggle | 0);
};
mp.Player.prototype.setPedPathCanDropFromHeight = function (Toggle) {
    let $res = natives.setPedPathCanDropFromHeight(this.handle, Toggle | 0);
};
mp.Ped.prototype.setPedPathCanDropFromHeight = function (Toggle) {
    let $res = natives.setPedPathCanDropFromHeight(this.handle, Toggle | 0);
};
mp.Player.prototype.setPedPathClimbCostModifier = function (modifier) {
    let $res = natives.setPedPathClimbCostModifier(this.handle, modifier);
};
mp.Ped.prototype.setPedPathClimbCostModifier = function (modifier) {
    let $res = natives.setPedPathClimbCostModifier(this.handle, modifier);
};
mp.Player.prototype.setPedPathMayEnterWater = function (mayEnterWater) {
    let $res = natives.setPedPathMayEnterWater(this.handle, mayEnterWater | 0);
};
mp.Ped.prototype.setPedPathMayEnterWater = function (mayEnterWater) {
    let $res = natives.setPedPathMayEnterWater(this.handle, mayEnterWater | 0);
};
mp.Player.prototype.setPedPathPreferToAvoidWater = function (avoidWater) {
    let $res = natives.setPedPathPreferToAvoidWater(this.handle, avoidWater | 0);
};
mp.Ped.prototype.setPedPathPreferToAvoidWater = function (avoidWater) {
    let $res = natives.setPedPathPreferToAvoidWater(this.handle, avoidWater | 0);
};
mp.Player.prototype.setPedPathAvoidFire = function (avoidFire) {
    let $res = natives.setPedPathAvoidFire(this.handle, avoidFire | 0);
};
mp.Ped.prototype.setPedPathAvoidFire = function (avoidFire) {
    let $res = natives.setPedPathAvoidFire(this.handle, avoidFire | 0);
};
mp.Player.prototype.getNavmeshRouteDistanceRemaining = function () {
    let $res = natives.getNavmeshRouteDistanceRemaining(this.handle, 0, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.distanceRemaining = $res[1];
    $resObj.isPathReady = $res[2] == 1;
    $resObj.result = $res[0];
    return $resObj;
};
mp.Ped.prototype.getNavmeshRouteDistanceRemaining = function () {
    let $res = natives.getNavmeshRouteDistanceRemaining(this.handle, 0, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.distanceRemaining = $res[1];
    $resObj.isPathReady = $res[2] == 1;
    $resObj.result = $res[0];
    return $resObj;
};
mp.Player.prototype.getNavmeshRouteResult = function () {
    let $res = natives.getNavmeshRouteResult(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getNavmeshRouteResult = function () {
    let $res = natives.getNavmeshRouteResult(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.goToCoordAnyMeans = function (x, y, z, speed, p5, p6, walkingStyle, p8) {
    let $res = natives.taskGoToCoordAnyMeans(this.handle, x, y, z, speed, p5, p6 | 0, walkingStyle, p8);
};
mp.Ped.prototype.goToCoordAnyMeans = function (x, y, z, speed, p5, p6, walkingStyle, p8) {
    let $res = natives.taskGoToCoordAnyMeans(this.handle, x, y, z, speed, p5, p6 | 0, walkingStyle, p8);
};
mp.Player.prototype.goToCoordAnyMeansExtraParams = function (x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12) {
    let $res = natives.taskGoToCoordAnyMeansExtraParams(this.handle, x, y, z, speed, p5, p6 | 0, walkingStyle, p8, p9, p10, p11, p12 | 0);
};
mp.Ped.prototype.goToCoordAnyMeansExtraParams = function (x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12) {
    let $res = natives.taskGoToCoordAnyMeansExtraParams(this.handle, x, y, z, speed, p5, p6 | 0, walkingStyle, p8, p9, p10, p11, p12 | 0);
};
mp.Player.prototype.goToCoordAnyMeansExtraParamsWithCruiseSpeed = function (x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12, p13) {
    let $res = natives.taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(this.handle, x, y, z, speed, p5, p6 | 0, walkingStyle, p8, p9, p10, p11, p12, p13 | 0);
};
mp.Ped.prototype.goToCoordAnyMeansExtraParamsWithCruiseSpeed = function (x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12, p13) {
    let $res = natives.taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(this.handle, x, y, z, speed, p5, p6 | 0, walkingStyle, p8, p9, p10, p11, p12, p13 | 0);
};
mp.Player.prototype.playAnim = function (animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ) {
    let $res = natives.taskPlayAnim(this.handle, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX | 0, lockY | 0, lockZ | 0);
};
mp.Ped.prototype.playAnim = function (animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ) {
    let $res = natives.taskPlayAnim(this.handle, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX | 0, lockY | 0, lockZ | 0);
};
mp.Player.prototype.playAnimAdvanced = function (animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, p14, p15) {
    let $res = natives.taskPlayAnimAdvanced(this.handle, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, p14, p15);
};
mp.Ped.prototype.playAnimAdvanced = function (animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, p14, p15) {
    let $res = natives.taskPlayAnimAdvanced(this.handle, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, p14, p15);
};
mp.Player.prototype.stopAnim = function (animDictionary, animationName, p3) {
    let $res = natives.stopAnimTask(this.handle, animDictionary, animationName, p3);
};
mp.Ped.prototype.stopAnim = function (animDictionary, animationName, p3) {
    let $res = natives.stopAnimTask(this.handle, animDictionary, animationName, p3);
};
mp.Player.prototype.scriptedAnimation = function (p4, p5) {
    let $res = natives.taskScriptedAnimation(this.handle, 0, 0, 0, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    $resObj.p2 = $res[2];
    $resObj.p3 = $res[3];
    return $resObj;
};
mp.Ped.prototype.scriptedAnimation = function (p4, p5) {
    let $res = natives.taskScriptedAnimation(this.handle, 0, 0, 0, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    $resObj.p2 = $res[2];
    $resObj.p3 = $res[3];
    return $resObj;
};
mp.Player.prototype.stopAnimPlayback = function (p1, p2) {
    let $res = natives.stopAnimPlayback(this.handle, p1, p2 | 0);
};
mp.Ped.prototype.stopAnimPlayback = function (p1, p2) {
    let $res = natives.stopAnimPlayback(this.handle, p1, p2 | 0);
};
mp.Player.prototype.setAnimPlaybackTime = function (p1, p2, p3) {
    let $res = natives.setAnimPhase(this.handle, p1, p2, p3 | 0);
};
mp.Ped.prototype.setAnimPlaybackTime = function (p1, p2, p3) {
    let $res = natives.setAnimPhase(this.handle, p1, p2, p3 | 0);
};
mp.Object.prototype.setAnimPlaybackTime = function (p1, p2, p3) {
    let $res = natives.setAnimPhase(this.handle, p1, p2, p3 | 0);
};
mp.Vehicle.prototype.setAnimPlaybackTime = function (p1, p2, p3) {
    let $res = natives.setAnimPhase(this.handle, p1, p2, p3 | 0);
};
mp.Player.prototype.playPhoneGestureAnimation = function (animDict, animation, boneMaskType, p4, p5, p6, p7) {
    let $res = natives.taskPlayPhoneGestureAnimation(this.handle, animDict, animation, boneMaskType, p4, p5, p6 | 0, p7 | 0);
};
mp.Ped.prototype.playPhoneGestureAnimation = function (animDict, animation, boneMaskType, p4, p5, p6, p7) {
    let $res = natives.taskPlayPhoneGestureAnimation(this.handle, animDict, animation, boneMaskType, p4, p5, p6 | 0, p7 | 0);
};
mp.Player.prototype.stopPhoneGestureAnimation = function (p1) {
    let $res = natives.taskStopPhoneGestureAnimation(this.handle, p1 | 0);
};
mp.Ped.prototype.stopPhoneGestureAnimation = function (p1) {
    let $res = natives.taskStopPhoneGestureAnimation(this.handle, p1 | 0);
};
mp.Player.prototype.isPlayingPhoneGestureAnim = function () {
    let $res = natives.isPlayingPhoneGestureAnim(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPlayingPhoneGestureAnim = function () {
    let $res = natives.isPlayingPhoneGestureAnim(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getPhoneGestureAnimCurrentTime = function () {
    let $res = natives.getPhoneGestureAnimCurrentTime(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPhoneGestureAnimCurrentTime = function () {
    let $res = natives.getPhoneGestureAnimCurrentTime(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getPhoneGestureAnimTotalTime = function () {
    let $res = natives.getPhoneGestureAnimTotalTime(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPhoneGestureAnimTotalTime = function () {
    let $res = natives.getPhoneGestureAnimTotalTime(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.vehiclePlayAnim = function (animationSet, animationName) {
    let $res = natives.taskVehiclePlayAnim(this.handle, animationSet, animationName);
};
mp.Player.prototype.lookAtCoord = function (x, y, z, duration, p5, p6) {
    let $res = natives.taskLookAtCoord(this.handle, x, y, z, duration, p5, p6);
};
mp.Ped.prototype.lookAtCoord = function (x, y, z, duration, p5, p6) {
    let $res = natives.taskLookAtCoord(this.handle, x, y, z, duration, p5, p6);
};
mp.Object.prototype.lookAtCoord = function (x, y, z, duration, p5, p6) {
    let $res = natives.taskLookAtCoord(this.handle, x, y, z, duration, p5, p6);
};
mp.Vehicle.prototype.lookAtCoord = function (x, y, z, duration, p5, p6) {
    let $res = natives.taskLookAtCoord(this.handle, x, y, z, duration, p5, p6);
};
mp.Player.prototype.lookAtEntity = function (lookAt, duration, unknown1, unknown2) {
    let $res = natives.taskLookAtEntity(this.handle, lookAt, duration, unknown1, unknown2);
};
mp.Ped.prototype.lookAtEntity = function (lookAt, duration, unknown1, unknown2) {
    let $res = natives.taskLookAtEntity(this.handle, lookAt, duration, unknown1, unknown2);
};
mp.Player.prototype.clearLookAt = function () {
    let $res = natives.taskClearLookAt(this.handle);
};
mp.Ped.prototype.clearLookAt = function () {
    let $res = natives.taskClearLookAt(this.handle);
};
mp.Player.prototype.performSequence = function (taskSequenceId) {
    let $res = natives.taskPerformSequence(this.handle, taskSequenceId);
};
mp.Ped.prototype.performSequence = function (taskSequenceId) {
    let $res = natives.taskPerformSequence(this.handle, taskSequenceId);
};
mp.Player.prototype.performSequenceLocally = function (taskSequenceId) {
    let $res = natives.taskPerformSequenceLocally(this.handle, taskSequenceId);
};
mp.Ped.prototype.performSequenceLocally = function (taskSequenceId) {
    let $res = natives.taskPerformSequenceLocally(this.handle, taskSequenceId);
};
mp.Player.prototype.getSequenceProgress = function () {
    let $res = natives.getSequenceProgress(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getSequenceProgress = function () {
    let $res = natives.getSequenceProgress(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getIsActive = function (taskIndex) {
    let $res = natives.getIsTaskActive(this.handle, taskIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getIsActive = function (taskIndex) {
    let $res = natives.getIsTaskActive(this.handle, taskIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getScriptStatus = function (taskHash) {
    let $res = natives.getScriptTaskStatus(this.handle, taskHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getScriptStatus = function (taskHash) {
    let $res = natives.getScriptTaskStatus(this.handle, taskHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getActiveVehicleMissionType = function () {
    let $res = natives.getActiveVehicleMissionType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.leaveAnyVehicle = function (p1, flags) {
    let $res = natives.taskLeaveAnyVehicle(this.handle, p1, flags);
};
mp.Ped.prototype.leaveAnyVehicle = function (p1, flags) {
    let $res = natives.taskLeaveAnyVehicle(this.handle, p1, flags);
};
mp.Player.prototype.aimGunScripted = function (scriptTask, p2, p3) {
    let $res = natives.taskAimGunScripted(this.handle, scriptTask, p2 | 0, p3 | 0);
};
mp.Ped.prototype.aimGunScripted = function (scriptTask, p2, p3) {
    let $res = natives.taskAimGunScripted(this.handle, scriptTask, p2 | 0, p3 | 0);
};
mp.Player.prototype.updateAimGunScriptedTarget = function (p1, p2, p3, p4, p5) {
    let $res = natives.updateTaskAimGunScriptedTarget(this.handle, p1, p2, p3, p4, p5 | 0);
};
mp.Ped.prototype.updateAimGunScriptedTarget = function (p1, p2, p3, p4, p5) {
    let $res = natives.updateTaskAimGunScriptedTarget(this.handle, p1, p2, p3, p4, p5 | 0);
};
mp.Player.prototype.aimGunAtEntity = function (entity, duration, p3) {
    let $res = natives.taskAimGunAtEntity(this.handle, entity, duration, p3 | 0);
};
mp.Ped.prototype.aimGunAtEntity = function (entity, duration, p3) {
    let $res = natives.taskAimGunAtEntity(this.handle, entity, duration, p3 | 0);
};
mp.Player.prototype.turnPedToFaceEntity = function (entity, duration) {
    let $res = natives.taskTurnPedToFaceEntity(this.handle, entity, duration);
};
mp.Ped.prototype.turnPedToFaceEntity = function (entity, duration) {
    let $res = natives.taskTurnPedToFaceEntity(this.handle, entity, duration);
};
mp.Player.prototype.aimGunAtCoord = function (x, y, z, time, p5, p6) {
    let $res = natives.taskAimGunAtCoord(this.handle, x, y, z, time, p5 | 0, p6 | 0);
};
mp.Ped.prototype.aimGunAtCoord = function (x, y, z, time, p5, p6) {
    let $res = natives.taskAimGunAtCoord(this.handle, x, y, z, time, p5 | 0, p6 | 0);
};
mp.Player.prototype.shootAtCoord = function (x, y, z, duration, firingPattern) {
    let $res = natives.taskShootAtCoord(this.handle, x, y, z, duration, firingPattern);
};
mp.Ped.prototype.shootAtCoord = function (x, y, z, duration, firingPattern) {
    let $res = natives.taskShootAtCoord(this.handle, x, y, z, duration, firingPattern);
};
mp.Player.prototype.shuffleToNextVehicleSeat = function (vehicle, p2) {
    let $res = natives.taskShuffleToNextVehicleSeat(this.handle, vehicle, p2 | 0);
};
mp.Ped.prototype.shuffleToNextVehicleSeat = function (vehicle, p2) {
    let $res = natives.taskShuffleToNextVehicleSeat(this.handle, vehicle, p2 | 0);
};
mp.Player.prototype.clearPedS = function () {
    let $res = natives.clearPedTasks(this.handle);
};
mp.Ped.prototype.clearPedS = function () {
    let $res = natives.clearPedTasks(this.handle);
};
mp.Player.prototype.clearPedSecondary = function () {
    let $res = natives.clearPedSecondaryTask(this.handle);
};
mp.Ped.prototype.clearPedSecondary = function () {
    let $res = natives.clearPedSecondaryTask(this.handle);
};
mp.Vehicle.prototype.everyoneLeaveVehicle = function () {
    let $res = natives.taskEveryoneLeaveVehicle(this.handle);
};
mp.Player.prototype.gotoEntityOffset = function (p1, p2, x, y, z, duration) {
    let $res = natives.taskGotoEntityOffset(this.handle, p1, p2, x, y, z, duration);
};
mp.Ped.prototype.gotoEntityOffset = function (p1, p2, x, y, z, duration) {
    let $res = natives.taskGotoEntityOffset(this.handle, p1, p2, x, y, z, duration);
};
mp.Player.prototype.turnPedToFaceCoord = function (x, y, z, duration) {
    let $res = natives.taskTurnPedToFaceCoord(this.handle, x, y, z, duration);
};
mp.Ped.prototype.turnPedToFaceCoord = function (x, y, z, duration) {
    let $res = natives.taskTurnPedToFaceCoord(this.handle, x, y, z, duration);
};
mp.Player.prototype.vehicleTempAction = function (vehicle, action, time) {
    let $res = natives.taskVehicleTempAction(this.handle, vehicle, action, time);
};
mp.Ped.prototype.vehicleTempAction = function (vehicle, action, time) {
    let $res = natives.taskVehicleTempAction(this.handle, vehicle, action, time);
};
mp.Player.prototype.vehicleMission = function (vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMission(this.handle, vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic | 0);
};
mp.Ped.prototype.vehicleMission = function (vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMission(this.handle, vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic | 0);
};
mp.Player.prototype.vehicleMissionPedTarget = function (vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, p7, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMissionPedTarget(this.handle, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, p7, DriveAgainstTraffic | 0);
};
mp.Ped.prototype.vehicleMissionPedTarget = function (vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, p7, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMissionPedTarget(this.handle, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, p7, DriveAgainstTraffic | 0);
};
mp.Player.prototype.vehicleMissionCoorsTarget = function (vehicle, x, y, z, p5, p6, p7, p8, p9, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMissionCoorsTarget(this.handle, vehicle, x, y, z, p5, p6, p7, p8, p9, DriveAgainstTraffic | 0);
};
mp.Ped.prototype.vehicleMissionCoorsTarget = function (vehicle, x, y, z, p5, p6, p7, p8, p9, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMissionCoorsTarget(this.handle, vehicle, x, y, z, p5, p6, p7, p8, p9, DriveAgainstTraffic | 0);
};
mp.Player.prototype.vehicleEscort = function (vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance) {
    let $res = natives.taskVehicleEscort(this.handle, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance);
};
mp.Ped.prototype.vehicleEscort = function (vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance) {
    let $res = natives.taskVehicleEscort(this.handle, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance);
};
mp.Player.prototype.vehicleFollow = function (vehicle, targetEntity, speed, drivingStyle, minDistance) {
    let $res = natives.taskVehicleFollow(this.handle, vehicle, targetEntity, speed, drivingStyle, minDistance);
};
mp.Ped.prototype.vehicleFollow = function (vehicle, targetEntity, speed, drivingStyle, minDistance) {
    let $res = natives.taskVehicleFollow(this.handle, vehicle, targetEntity, speed, drivingStyle, minDistance);
};
mp.Player.prototype.vehicleChase = function (targetEnt) {
    let $res = natives.taskVehicleChase(this.handle, targetEnt);
};
mp.Ped.prototype.vehicleChase = function (targetEnt) {
    let $res = natives.taskVehicleChase(this.handle, targetEnt);
};
mp.Player.prototype.vehicleHeliProtect = function (vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7) {
    let $res = natives.taskVehicleHeliProtect(this.handle, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7);
};
mp.Ped.prototype.vehicleHeliProtect = function (vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7) {
    let $res = natives.taskVehicleHeliProtect(this.handle, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7);
};
mp.Player.prototype.setVehicleChaseBehaviorFlag = function (flag, set) {
    let $res = natives.setTaskVehicleChaseBehaviorFlag(this.handle, flag, set | 0);
};
mp.Ped.prototype.setVehicleChaseBehaviorFlag = function (flag, set) {
    let $res = natives.setTaskVehicleChaseBehaviorFlag(this.handle, flag, set | 0);
};
mp.Player.prototype.setVehicleChaseIdealPursuitDistance = function (distance) {
    let $res = natives.setTaskVehicleChaseIdealPursuitDistance(this.handle, distance);
};
mp.Ped.prototype.setVehicleChaseIdealPursuitDistance = function (distance) {
    let $res = natives.setTaskVehicleChaseIdealPursuitDistance(this.handle, distance);
};
mp.Player.prototype.heliChase = function (entityToFollow, x, y, z) {
    let $res = natives.taskHeliChase(this.handle, entityToFollow, x, y, z);
};
mp.Ped.prototype.heliChase = function (entityToFollow, x, y, z) {
    let $res = natives.taskHeliChase(this.handle, entityToFollow, x, y, z);
};
mp.Player.prototype.planeChase = function (entityToFollow, x, y, z) {
    let $res = natives.taskPlaneChase(this.handle, entityToFollow, x, y, z);
};
mp.Ped.prototype.planeChase = function (entityToFollow, x, y, z) {
    let $res = natives.taskPlaneChase(this.handle, entityToFollow, x, y, z);
};
mp.Player.prototype.planeLand = function (plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ) {
    let $res = natives.taskPlaneLand(this.handle, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
};
mp.Ped.prototype.planeLand = function (plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ) {
    let $res = natives.taskPlaneLand(this.handle, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
};
mp.Vehicle.prototype.clearVehicleS = function () {
    let $res = natives.clearPrimaryVehicleTask(this.handle);
};
mp.Player.prototype.planeGotoPreciseVtol = function (vehicle, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.taskPlaneGotoPreciseVtol(this.handle, vehicle, p2, p3, p4, p5, p6, p7, p8, p9);
};
mp.Ped.prototype.planeGotoPreciseVtol = function (vehicle, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.taskPlaneGotoPreciseVtol(this.handle, vehicle, p2, p3, p4, p5, p6, p7, p8, p9);
};
mp.Player.prototype.heliMission = function (aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, unk3, behaviorFlags) {
    let $res = natives.taskHeliMission(this.handle, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, unk3, behaviorFlags);
};
mp.Ped.prototype.heliMission = function (aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, unk3, behaviorFlags) {
    let $res = natives.taskHeliMission(this.handle, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, unk3, behaviorFlags);
};
mp.Player.prototype.heliEscortHeli = function (heli1, heli2, p3, p4, p5) {
    let $res = natives.taskHeliEscortHeli(this.handle, heli1, heli2, p3, p4, p5);
};
mp.Ped.prototype.heliEscortHeli = function (heli1, heli2, p3, p4, p5) {
    let $res = natives.taskHeliEscortHeli(this.handle, heli1, heli2, p3, p4, p5);
};
mp.Player.prototype.planeMission = function (aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ, p13) {
    let $res = natives.taskPlaneMission(this.handle, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ, p13 | 0);
};
mp.Ped.prototype.planeMission = function (aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ, p13) {
    let $res = natives.taskPlaneMission(this.handle, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ, p13 | 0);
};
mp.Player.prototype.planeTaxi = function (aircraft, p2, p3, p4, p5, p6) {
    let $res = natives.taskPlaneTaxi(this.handle, aircraft, p2, p3, p4, p5, p6);
};
mp.Ped.prototype.planeTaxi = function (aircraft, p2, p3, p4, p5, p6) {
    let $res = natives.taskPlaneTaxi(this.handle, aircraft, p2, p3, p4, p5, p6);
};
mp.Player.prototype.boatMission = function (boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11) {
    let $res = natives.taskBoatMission(this.handle, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11);
};
mp.Ped.prototype.boatMission = function (boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11) {
    let $res = natives.taskBoatMission(this.handle, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11);
};
mp.Player.prototype.driveBy = function (targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern) {
    let $res = natives.taskDriveBy(this.handle, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8 | 0, firingPattern);
};
mp.Ped.prototype.driveBy = function (targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern) {
    let $res = natives.taskDriveBy(this.handle, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8 | 0, firingPattern);
};
mp.Player.prototype.setDrivebyTarget = function (targetPed, targetVehicle, x, y, z) {
    let $res = natives.setDrivebyTaskTarget(this.handle, targetPed, targetVehicle, x, y, z);
};
mp.Ped.prototype.setDrivebyTarget = function (targetPed, targetVehicle, x, y, z) {
    let $res = natives.setDrivebyTaskTarget(this.handle, targetPed, targetVehicle, x, y, z);
};
mp.Player.prototype.clearDrivebyUnderneathDrivingTask = function () {
    let $res = natives.clearDrivebyTaskUnderneathDrivingTask(this.handle);
};
mp.Ped.prototype.clearDrivebyUnderneathDrivingTask = function () {
    let $res = natives.clearDrivebyTaskUnderneathDrivingTask(this.handle);
};
mp.Player.prototype.isDrivebyUnderneathDrivingTask = function () {
    let $res = natives.isDrivebyTaskUnderneathDrivingTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isDrivebyUnderneathDrivingTask = function () {
    let $res = natives.isDrivebyTaskUnderneathDrivingTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.controlMountedWeapon = function () {
    let $res = natives.controlMountedWeapon(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.controlMountedWeapon = function () {
    let $res = natives.controlMountedWeapon(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setMountedWeaponTarget = function (targetPed, targetVehicle, x, y, z, p6, p7) {
    let $res = natives.setMountedWeaponTarget(this.handle, targetPed, targetVehicle, x, y, z, p6 | 0, p7 | 0);
};
mp.Ped.prototype.setMountedWeaponTarget = function (targetPed, targetVehicle, x, y, z, p6, p7) {
    let $res = natives.setMountedWeaponTarget(this.handle, targetPed, targetVehicle, x, y, z, p6 | 0, p7 | 0);
};
mp.Player.prototype.isMountedWeaponUnderneathDrivingTask = function () {
    let $res = natives.isMountedWeaponTaskUnderneathDrivingTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isMountedWeaponUnderneathDrivingTask = function () {
    let $res = natives.isMountedWeaponTaskUnderneathDrivingTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.useMobilePhone = function (p1, p2) {
    let $res = natives.taskUseMobilePhone(this.handle, p1, p2 | 0);
};
mp.Ped.prototype.useMobilePhone = function (p1, p2) {
    let $res = natives.taskUseMobilePhone(this.handle, p1, p2 | 0);
};
mp.Player.prototype.useMobilePhoneTimed = function (duration) {
    let $res = natives.taskUseMobilePhoneTimed(this.handle, duration);
};
mp.Ped.prototype.useMobilePhoneTimed = function (duration) {
    let $res = natives.taskUseMobilePhoneTimed(this.handle, duration);
};
mp.Player.prototype.chatToPed = function (target, p2, p3, p4, p5, p6, p7) {
    let $res = natives.taskChatToPed(this.handle, target, p2, p3, p4, p5, p6, p7);
};
mp.Ped.prototype.chatToPed = function (target, p2, p3, p4, p5, p6, p7) {
    let $res = natives.taskChatToPed(this.handle, target, p2, p3, p4, p5, p6, p7);
};
mp.Player.prototype.warpPedIntoVehicle = function (vehicle, seat) {
    let $res = natives.taskWarpPedIntoVehicle(this.handle, vehicle, seat);
};
mp.Ped.prototype.warpPedIntoVehicle = function (vehicle, seat) {
    let $res = natives.taskWarpPedIntoVehicle(this.handle, vehicle, seat);
};
mp.Player.prototype.shootAtEntity = function (target, duration, firingPattern) {
    let $res = natives.taskShootAtEntity(this.handle, target, duration, firingPattern);
};
mp.Ped.prototype.shootAtEntity = function (target, duration, firingPattern) {
    let $res = natives.taskShootAtEntity(this.handle, target, duration, firingPattern);
};
mp.Object.prototype.shootAtEntity = function (target, duration, firingPattern) {
    let $res = natives.taskShootAtEntity(this.handle, target, duration, firingPattern);
};
mp.Vehicle.prototype.shootAtEntity = function (target, duration, firingPattern) {
    let $res = natives.taskShootAtEntity(this.handle, target, duration, firingPattern);
};
mp.Player.prototype.climb = function (unused) {
    let $res = natives.taskClimb(this.handle, unused | 0);
};
mp.Ped.prototype.climb = function (unused) {
    let $res = natives.taskClimb(this.handle, unused | 0);
};
mp.Player.prototype.climbLadder = function (p1) {
    let $res = natives.taskClimbLadder(this.handle, p1);
};
mp.Ped.prototype.climbLadder = function (p1) {
    let $res = natives.taskClimbLadder(this.handle, p1);
};
mp.Player.prototype.clearPedTasksImmediately = function () {
    let $res = natives.clearPedTasksImmediately(this.handle);
};
mp.Ped.prototype.clearPedTasksImmediately = function () {
    let $res = natives.clearPedTasksImmediately(this.handle);
};
mp.Player.prototype.setPedDesiredMoveBlendRatio = function (p1) {
    let $res = natives.setPedDesiredMoveBlendRatio(this.handle, p1);
};
mp.Ped.prototype.setPedDesiredMoveBlendRatio = function (p1) {
    let $res = natives.setPedDesiredMoveBlendRatio(this.handle, p1);
};
mp.Player.prototype.getPedDesiredMoveBlendRatio = function () {
    let $res = natives.getPedDesiredMoveBlendRatio(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedDesiredMoveBlendRatio = function () {
    let $res = natives.getPedDesiredMoveBlendRatio(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.gotoEntityAiming = function (target, distanceToStopAt, StartAimingDist) {
    let $res = natives.taskGotoEntityAiming(this.handle, target, distanceToStopAt, StartAimingDist);
};
mp.Ped.prototype.gotoEntityAiming = function (target, distanceToStopAt, StartAimingDist) {
    let $res = natives.taskGotoEntityAiming(this.handle, target, distanceToStopAt, StartAimingDist);
};
mp.Player.prototype.setDecisionMaker = function (p1) {
    let $res = natives.taskSetDecisionMaker(this.handle, p1);
};
mp.Ped.prototype.setDecisionMaker = function (p1) {
    let $res = natives.taskSetDecisionMaker(this.handle, p1);
};
mp.Player.prototype.pedSlideToCoord = function (x, y, z, heading, p5) {
    let $res = natives.taskPedSlideToCoord(this.handle, x, y, z, heading, p5);
};
mp.Ped.prototype.pedSlideToCoord = function (x, y, z, heading, p5) {
    let $res = natives.taskPedSlideToCoord(this.handle, x, y, z, heading, p5);
};
mp.Player.prototype.pedSlideToCoordHdgRate = function (x, y, z, heading, p5, p6) {
    let $res = natives.taskPedSlideToCoordHdgRate(this.handle, x, y, z, heading, p5, p6);
};
mp.Ped.prototype.pedSlideToCoordHdgRate = function (x, y, z, heading, p5, p6) {
    let $res = natives.taskPedSlideToCoordHdgRate(this.handle, x, y, z, heading, p5, p6);
};
mp.Player.prototype.combatPed = function (targetPed, p2, p3) {
    let $res = natives.taskCombatPed(this.handle, targetPed, p2, p3);
};
mp.Ped.prototype.combatPed = function (targetPed, p2, p3) {
    let $res = natives.taskCombatPed(this.handle, targetPed, p2, p3);
};
mp.Player.prototype.seekCoverFromPos = function (x, y, z, duration, p5) {
    let $res = natives.taskSeekCoverFromPos(this.handle, x, y, z, duration, p5 | 0);
};
mp.Ped.prototype.seekCoverFromPos = function (x, y, z, duration, p5) {
    let $res = natives.taskSeekCoverFromPos(this.handle, x, y, z, duration, p5 | 0);
};
mp.Player.prototype.seekCoverFromPed = function (target, duration, p3) {
    let $res = natives.taskSeekCoverFromPed(this.handle, target, duration, p3 | 0);
};
mp.Ped.prototype.seekCoverFromPed = function (target, duration, p3) {
    let $res = natives.taskSeekCoverFromPed(this.handle, target, duration, p3 | 0);
};
mp.Player.prototype.seekCoverToCoords = function (x1, y1, z1, x2, y2, z2, p7, p8) {
    let $res = natives.taskSeekCoverToCoords(this.handle, x1, y1, z1, x2, y2, z2, p7, p8 | 0);
};
mp.Ped.prototype.seekCoverToCoords = function (x1, y1, z1, x2, y2, z2, p7, p8) {
    let $res = natives.taskSeekCoverToCoords(this.handle, x1, y1, z1, x2, y2, z2, p7, p8 | 0);
};
mp.Player.prototype.putPedDirectlyIntoCover = function (x, y, z, timeout, p5, p6, p7, p8, p9, p10) {
    let $res = natives.taskPutPedDirectlyIntoCover(this.handle, x, y, z, timeout, p5 | 0, p6, p7 | 0, p8 | 0, p9, p10 | 0);
};
mp.Ped.prototype.putPedDirectlyIntoCover = function (x, y, z, timeout, p5, p6, p7, p8, p9, p10) {
    let $res = natives.taskPutPedDirectlyIntoCover(this.handle, x, y, z, timeout, p5 | 0, p6, p7 | 0, p8 | 0, p9, p10 | 0);
};
mp.Player.prototype.putPedDirectlyIntoMelee = function (meleeTarget, p2, p3, p4, p5) {
    let $res = natives.taskPutPedDirectlyIntoMelee(this.handle, meleeTarget, p2, p3, p4, p5 | 0);
};
mp.Ped.prototype.putPedDirectlyIntoMelee = function (meleeTarget, p2, p3, p4, p5) {
    let $res = natives.taskPutPedDirectlyIntoMelee(this.handle, meleeTarget, p2, p3, p4, p5 | 0);
};
mp.Player.prototype.guardCurrentPosition = function (p1, p2, p3) {
    let $res = natives.taskGuardCurrentPosition(this.handle, p1, p2, p3 | 0);
};
mp.Ped.prototype.guardCurrentPosition = function (p1, p2, p3) {
    let $res = natives.taskGuardCurrentPosition(this.handle, p1, p2, p3 | 0);
};
mp.Player.prototype.guardSphereDefensiveArea = function (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.taskGuardSphereDefensiveArea(this.handle, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};
mp.Ped.prototype.guardSphereDefensiveArea = function (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.taskGuardSphereDefensiveArea(this.handle, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};
mp.Player.prototype.standGuard = function (x, y, z, heading, scenarioName) {
    let $res = natives.taskStandGuard(this.handle, x, y, z, heading, scenarioName);
};
mp.Ped.prototype.standGuard = function (x, y, z, heading, scenarioName) {
    let $res = natives.taskStandGuard(this.handle, x, y, z, heading, scenarioName);
};
mp.Player.prototype.setDriveCruiseSpeed = function (cruiseSpeed) {
    let $res = natives.setDriveTaskCruiseSpeed(this.handle, cruiseSpeed);
};
mp.Ped.prototype.setDriveCruiseSpeed = function (cruiseSpeed) {
    let $res = natives.setDriveTaskCruiseSpeed(this.handle, cruiseSpeed);
};
mp.Player.prototype.setDriveDrivingStyle = function (drivingStyle) {
    let $res = natives.setDriveTaskDrivingStyle(this.handle, drivingStyle);
};
mp.Ped.prototype.setDriveDrivingStyle = function (drivingStyle) {
    let $res = natives.setDriveTaskDrivingStyle(this.handle, drivingStyle);
};
mp.Player.prototype.startScenarioInPlace = function (scenarioName, unkDelay, playEnterAnim) {
    let $res = natives.taskStartScenarioInPlace(this.handle, scenarioName, unkDelay, playEnterAnim | 0);
};
mp.Ped.prototype.startScenarioInPlace = function (scenarioName, unkDelay, playEnterAnim) {
    let $res = natives.taskStartScenarioInPlace(this.handle, scenarioName, unkDelay, playEnterAnim | 0);
};
mp.Player.prototype.startScenarioAtPosition = function (scenarioName, x, y, z, heading, duration, sittingScenario, teleport) {
    let $res = natives.taskStartScenarioAtPosition(this.handle, scenarioName, x, y, z, heading, duration, sittingScenario | 0, teleport | 0);
};
mp.Ped.prototype.startScenarioAtPosition = function (scenarioName, x, y, z, heading, duration, sittingScenario, teleport) {
    let $res = natives.taskStartScenarioAtPosition(this.handle, scenarioName, x, y, z, heading, duration, sittingScenario | 0, teleport | 0);
};
mp.Player.prototype.useNearestScenarioToCoord = function (x, y, z, distance, duration) {
    let $res = natives.taskUseNearestScenarioToCoord(this.handle, x, y, z, distance, duration);
};
mp.Ped.prototype.useNearestScenarioToCoord = function (x, y, z, distance, duration) {
    let $res = natives.taskUseNearestScenarioToCoord(this.handle, x, y, z, distance, duration);
};
mp.Player.prototype.useNearestScenarioToCoordWarp = function (x, y, z, radius, p5) {
    let $res = natives.taskUseNearestScenarioToCoordWarp(this.handle, x, y, z, radius, p5);
};
mp.Ped.prototype.useNearestScenarioToCoordWarp = function (x, y, z, radius, p5) {
    let $res = natives.taskUseNearestScenarioToCoordWarp(this.handle, x, y, z, radius, p5);
};
mp.Player.prototype.pedHasUseScenario = function () {
    let $res = natives.pedHasUseScenarioTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.pedHasUseScenario = function () {
    let $res = natives.pedHasUseScenarioTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.playAnimOnRunningScenario = function (animDict, animName) {
    let $res = natives.playAnimOnRunningScenario(this.handle, animDict, animName);
};
mp.Ped.prototype.playAnimOnRunningScenario = function (animDict, animName) {
    let $res = natives.playAnimOnRunningScenario(this.handle, animDict, animName);
};
mp.Player.prototype.isPedActiveInScenario = function () {
    let $res = natives.isPedActiveInScenario(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedActiveInScenario = function () {
    let $res = natives.isPedActiveInScenario(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedPlayingBaseClipInScenario = function () {
    let $res = natives.isPedPlayingBaseClipInScenario(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedPlayingBaseClipInScenario = function () {
    let $res = natives.isPedPlayingBaseClipInScenario(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setPedCanPlayAmbientIdles = function (p1, p2) {
    let $res = natives.setPedCanPlayAmbientIdles(this.handle, p1 | 0, p2 | 0);
};
mp.Ped.prototype.setPedCanPlayAmbientIdles = function (p1, p2) {
    let $res = natives.setPedCanPlayAmbientIdles(this.handle, p1 | 0, p2 | 0);
};
mp.Player.prototype.combatHatedTargetsInArea = function (x, y, z, radius, p5) {
    let $res = natives.taskCombatHatedTargetsInArea(this.handle, x, y, z, radius, p5);
};
mp.Ped.prototype.combatHatedTargetsInArea = function (x, y, z, radius, p5) {
    let $res = natives.taskCombatHatedTargetsInArea(this.handle, x, y, z, radius, p5);
};
mp.Player.prototype.combatHatedTargetsAroundPed = function (radius, p2) {
    let $res = natives.taskCombatHatedTargetsAroundPed(this.handle, radius, p2);
};
mp.Ped.prototype.combatHatedTargetsAroundPed = function (radius, p2) {
    let $res = natives.taskCombatHatedTargetsAroundPed(this.handle, radius, p2);
};
mp.Player.prototype.throwProjectile = function (x, y, z, p4, p5) {
    let $res = natives.taskThrowProjectile(this.handle, x, y, z, p4 | 0, p5 | 0);
};
mp.Ped.prototype.throwProjectile = function (x, y, z, p4, p5) {
    let $res = natives.taskThrowProjectile(this.handle, x, y, z, p4 | 0, p5 | 0);
};
mp.Player.prototype.swapWeapon = function (p1) {
    let $res = natives.taskSwapWeapon(this.handle, p1 | 0);
};
mp.Ped.prototype.swapWeapon = function (p1) {
    let $res = natives.taskSwapWeapon(this.handle, p1 | 0);
};
mp.Player.prototype.reloadWeapon = function (unused) {
    let $res = natives.taskReloadWeapon(this.handle, unused | 0);
};
mp.Ped.prototype.reloadWeapon = function (unused) {
    let $res = natives.taskReloadWeapon(this.handle, unused | 0);
};
mp.Player.prototype.isPedGettingUp = function () {
    let $res = natives.isPedGettingUp(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedGettingUp = function () {
    let $res = natives.isPedGettingUp(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.writhe = function (target, time, p3, p4, p5) {
    let $res = natives.taskWrithe(this.handle, target, time, p3, p4 | 0, p5 | 0);
};
mp.Ped.prototype.writhe = function (target, time, p3, p4, p5) {
    let $res = natives.taskWrithe(this.handle, target, time, p3, p4 | 0, p5 | 0);
};
mp.Player.prototype.isPedInWrithe = function () {
    let $res = natives.isPedInWrithe(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedInWrithe = function () {
    let $res = natives.isPedInWrithe(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.patrol = function (p1, p2, p3, p4) {
    let $res = natives.taskPatrol(this.handle, p1, p2, p3 | 0, p4 | 0);
};
mp.Ped.prototype.patrol = function (p1, p2, p3, p4) {
    let $res = natives.taskPatrol(this.handle, p1, p2, p3 | 0, p4 | 0);
};
mp.Player.prototype.stayInCover = function () {
    let $res = natives.taskStayInCover(this.handle);
};
mp.Ped.prototype.stayInCover = function () {
    let $res = natives.taskStayInCover(this.handle);
};
mp.Player.prototype.addVehicleSubAttackCoord = function (x, y, z) {
    let $res = natives.addVehicleSubtaskAttackCoord(this.handle, x, y, z);
};
mp.Ped.prototype.addVehicleSubAttackCoord = function (x, y, z) {
    let $res = natives.addVehicleSubtaskAttackCoord(this.handle, x, y, z);
};
mp.Player.prototype.addVehicleSubAttackPed = function (ped2) {
    let $res = natives.addVehicleSubtaskAttackPed(this.handle, ped2);
};
mp.Ped.prototype.addVehicleSubAttackPed = function (ped2) {
    let $res = natives.addVehicleSubtaskAttackPed(this.handle, ped2);
};
mp.Player.prototype.vehicleShootAtPed = function (target, p2) {
    let $res = natives.taskVehicleShootAtPed(this.handle, target, p2);
};
mp.Ped.prototype.vehicleShootAtPed = function (target, p2) {
    let $res = natives.taskVehicleShootAtPed(this.handle, target, p2);
};
mp.Player.prototype.vehicleAimAtPed = function (target) {
    let $res = natives.taskVehicleAimAtPed(this.handle, target);
};
mp.Ped.prototype.vehicleAimAtPed = function (target) {
    let $res = natives.taskVehicleAimAtPed(this.handle, target);
};
mp.Player.prototype.vehicleShootAtCoord = function (x, y, z, p4) {
    let $res = natives.taskVehicleShootAtCoord(this.handle, x, y, z, p4);
};
mp.Ped.prototype.vehicleShootAtCoord = function (x, y, z, p4) {
    let $res = natives.taskVehicleShootAtCoord(this.handle, x, y, z, p4);
};
mp.Player.prototype.vehicleAimAtCoord = function (x, y, z) {
    let $res = natives.taskVehicleAimAtCoord(this.handle, x, y, z);
};
mp.Ped.prototype.vehicleAimAtCoord = function (x, y, z) {
    let $res = natives.taskVehicleAimAtCoord(this.handle, x, y, z);
};
mp.Player.prototype.vehicleGotoNavmesh = function (vehicle, x, y, z, speed, behaviorFlag, stoppingRange) {
    let $res = natives.taskVehicleGotoNavmesh(this.handle, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
};
mp.Ped.prototype.vehicleGotoNavmesh = function (vehicle, x, y, z, speed, behaviorFlag, stoppingRange) {
    let $res = natives.taskVehicleGotoNavmesh(this.handle, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
};
mp.Player.prototype.goToCoordWhileAimingAtCoord = function (x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8, p9, p10, p11, flags, p13, firingPattern) {
    let $res = natives.taskGoToCoordWhileAimingAtCoord(this.handle, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8 | 0, p9, p10, p11 | 0, flags, p13 | 0, firingPattern);
};
mp.Ped.prototype.goToCoordWhileAimingAtCoord = function (x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8, p9, p10, p11, flags, p13, firingPattern) {
    let $res = natives.taskGoToCoordWhileAimingAtCoord(this.handle, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8 | 0, p9, p10, p11 | 0, flags, p13 | 0, firingPattern);
};
mp.Player.prototype.goToCoordAndAimAtHatedEntitiesNearCoord = function (goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern) {
    let $res = natives.taskGoToCoordAndAimAtHatedEntitiesNearCoord(this.handle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies | 0, distanceToStopAt, noRoadsDistance, unkTrue | 0, unkFlag, aimingFlag | 0, firingPattern);
};
mp.Ped.prototype.goToCoordAndAimAtHatedEntitiesNearCoord = function (goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern) {
    let $res = natives.taskGoToCoordAndAimAtHatedEntitiesNearCoord(this.handle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies | 0, distanceToStopAt, noRoadsDistance, unkTrue | 0, unkFlag, aimingFlag | 0, firingPattern);
};
mp.Player.prototype.goToEntityWhileAimingAtEntity = function (entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern) {
    let $res = natives.taskGoToEntityWhileAimingAtEntity(this.handle, entityToWalkTo, entityToAimAt, speed, shootatEntity | 0, p5, p6, p7 | 0, p8 | 0, firingPattern);
};
mp.Ped.prototype.goToEntityWhileAimingAtEntity = function (entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern) {
    let $res = natives.taskGoToEntityWhileAimingAtEntity(this.handle, entityToWalkTo, entityToAimAt, speed, shootatEntity | 0, p5, p6, p7 | 0, p8 | 0, firingPattern);
};
mp.Player.prototype.setHighFall = function (p1, p2, p3) {
    let $res = natives.setHighFallTask(this.handle, p1, p2, p3);
};
mp.Ped.prototype.setHighFall = function (p1, p2, p3) {
    let $res = natives.setHighFallTask(this.handle, p1, p2, p3);
};
mp.Player.prototype.getPedWaypointProgress = function () {
    let $res = natives.getPedWaypointProgress(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedWaypointProgress = function () {
    let $res = natives.getPedWaypointProgress(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getPedWaypointDistance = function () {
    let $res = natives.getPedWaypointDistance(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedWaypointDistance = function () {
    let $res = natives.getPedWaypointDistance(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setPedWaypointRouteOffset = function (p1, p2, p3) {
    let $res = natives.setPedWaypointRouteOffset(this.handle, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.setPedWaypointRouteOffset = function (p1, p2, p3) {
    let $res = natives.setPedWaypointRouteOffset(this.handle, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.vehicleFollowWaypointRecording = function (vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.taskVehicleFollowWaypointRecording(this.handle, vehicle, WPRecording, p3, p4, p5, p6, p7, p8 | 0, p9);
};
mp.Ped.prototype.vehicleFollowWaypointRecording = function (vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.taskVehicleFollowWaypointRecording(this.handle, vehicle, WPRecording, p3, p4, p5, p6, p7, p8 | 0, p9);
};
mp.Vehicle.prototype.isWaypointPlaybackGoingOnForVehicle = function () {
    let $res = natives.isWaypointPlaybackGoingOnForVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getVehicleWaypointProgress = function () {
    let $res = natives.getVehicleWaypointProgress(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getVehicleWaypointTargetPoint = function () {
    let $res = natives.getVehicleWaypointTargetPoint(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.vehicleWaypointPlaybackPause = function () {
    let $res = natives.vehicleWaypointPlaybackPause(this.handle);
};
mp.Vehicle.prototype.vehicleWaypointPlaybackResume = function () {
    let $res = natives.vehicleWaypointPlaybackResume(this.handle);
};
mp.Vehicle.prototype.vehicleWaypointPlaybackUseDefaultSpeed = function () {
    let $res = natives.vehicleWaypointPlaybackUseDefaultSpeed(this.handle);
};
mp.Vehicle.prototype.vehicleWaypointPlaybackOverrideSpeed = function (speed) {
    let $res = natives.vehicleWaypointPlaybackOverrideSpeed(this.handle, speed);
};
mp.Player.prototype.setBlockingOfNonTemporaryEvents = function (toggle) {
    let $res = natives.taskSetBlockingOfNonTemporaryEvents(this.handle, toggle | 0);
};
mp.Ped.prototype.setBlockingOfNonTemporaryEvents = function (toggle) {
    let $res = natives.taskSetBlockingOfNonTemporaryEvents(this.handle, toggle | 0);
};
mp.Player.prototype.forceMotionState = function (state, p2) {
    let $res = natives.taskForceMotionState(this.handle, state, p2 | 0);
};
mp.Ped.prototype.forceMotionState = function (state, p2) {
    let $res = natives.taskForceMotionState(this.handle, state, p2 | 0);
};
mp.Player.prototype.moveNetworkByName = function (task, multiplier, p3, animDict, flags) {
    let $res = natives.taskMoveNetworkByName(this.handle, task, multiplier, p3 | 0, animDict, flags);
};
mp.Ped.prototype.moveNetworkByName = function (task, multiplier, p3, animDict, flags) {
    let $res = natives.taskMoveNetworkByName(this.handle, task, multiplier, p3 | 0, animDict, flags);
};
mp.Player.prototype.moveNetworkAdvancedByName = function (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags) {
    let $res = natives.taskMoveNetworkAdvancedByName(this.handle, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 | 0, animDict, flags);
};
mp.Ped.prototype.moveNetworkAdvancedByName = function (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags) {
    let $res = natives.taskMoveNetworkAdvancedByName(this.handle, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 | 0, animDict, flags);
};
mp.Player.prototype.moveNetworkByNameWithInitParams = function (p1, p3, p4, animDict, flags) {
    let $res = natives.taskMoveNetworkByNameWithInitParams(this.handle, p1, 0, p3, p4 | 0, animDict, flags);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[1];
    return $resObj.data;
};
mp.Ped.prototype.moveNetworkByNameWithInitParams = function (p1, p3, p4, animDict, flags) {
    let $res = natives.taskMoveNetworkByNameWithInitParams(this.handle, p1, 0, p3, p4 | 0, animDict, flags);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[1];
    return $resObj.data;
};
mp.Player.prototype.isMoveNetworkActive = function () {
    let $res = natives.isTaskMoveNetworkActive(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isMoveNetworkActive = function () {
    let $res = natives.isTaskMoveNetworkActive(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isMoveNetworkReadyForTransition = function () {
    let $res = natives.isTaskMoveNetworkReadyForTransition(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isMoveNetworkReadyForTransition = function () {
    let $res = natives.isTaskMoveNetworkReadyForTransition(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.requestMoveNetworkStateTransition = function (name) {
    let $res = natives.requestTaskMoveNetworkStateTransition(this.handle, name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.requestMoveNetworkStateTransition = function (name) {
    let $res = natives.requestTaskMoveNetworkStateTransition(this.handle, name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getMoveNetworkState = function () {
    let $res = natives.getTaskMoveNetworkState(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getMoveNetworkState = function () {
    let $res = natives.getTaskMoveNetworkState(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setMoveNetworkSignalFloat = function (signalName, value) {
    let $res = natives.setTaskMoveNetworkSignalFloat(this.handle, signalName, value);
};
mp.Ped.prototype.setMoveNetworkSignalFloat = function (signalName, value) {
    let $res = natives.setTaskMoveNetworkSignalFloat(this.handle, signalName, value);
};
mp.Player.prototype.setMoveNetworkSignalFloat2 = function (signalName, value) {
    let $res = natives.setTaskMoveNetworkSignalLocalFloat(this.handle, signalName, value);
};
mp.Ped.prototype.setMoveNetworkSignalFloat2 = function (signalName, value) {
    let $res = natives.setTaskMoveNetworkSignalLocalFloat(this.handle, signalName, value);
};
mp.Player.prototype.setMoveNetworkSignalBool = function (signalName, value) {
    let $res = natives.setTaskMoveNetworkSignalBool(this.handle, signalName, value | 0);
};
mp.Ped.prototype.setMoveNetworkSignalBool = function (signalName, value) {
    let $res = natives.setTaskMoveNetworkSignalBool(this.handle, signalName, value | 0);
};
mp.Player.prototype.getMoveNetworkSignalFloat = function (signalName) {
    let $res = natives.getTaskMoveNetworkSignalFloat(this.handle, signalName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getMoveNetworkSignalFloat = function (signalName) {
    let $res = natives.getTaskMoveNetworkSignalFloat(this.handle, signalName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getMoveNetworkSignalBool = function (signalName) {
    let $res = natives.getTaskMoveNetworkSignalBool(this.handle, signalName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getMoveNetworkSignalBool = function (signalName) {
    let $res = natives.getTaskMoveNetworkSignalBool(this.handle, signalName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getMoveNetworkEvent = function (eventName) {
    let $res = natives.getTaskMoveNetworkEvent(this.handle, eventName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getMoveNetworkEvent = function (eventName) {
    let $res = natives.getTaskMoveNetworkEvent(this.handle, eventName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isMoveBlendRatioStill = function () {
    let $res = natives.isMoveBlendRatioStill(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isMoveBlendRatioStill = function () {
    let $res = natives.isMoveBlendRatioStill(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isMoveBlendRatioWalking = function () {
    let $res = natives.isMoveBlendRatioWalking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isMoveBlendRatioWalking = function () {
    let $res = natives.isMoveBlendRatioWalking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isMoveBlendRatioRunning = function () {
    let $res = natives.isMoveBlendRatioRunning(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isMoveBlendRatioRunning = function () {
    let $res = natives.isMoveBlendRatioRunning(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isMoveBlendRatioSprinting = function () {
    let $res = natives.isMoveBlendRatioSprinting(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isMoveBlendRatioSprinting = function () {
    let $res = natives.isMoveBlendRatioSprinting(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedStill = function () {
    let $res = natives.isPedStill(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedStill = function () {
    let $res = natives.isPedStill(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedWalking = function () {
    let $res = natives.isPedWalking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedWalking = function () {
    let $res = natives.isPedWalking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedRunning = function () {
    let $res = natives.isPedRunning(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedRunning = function () {
    let $res = natives.isPedRunning(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedSprinting = function () {
    let $res = natives.isPedSprinting(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedSprinting = function () {
    let $res = natives.isPedSprinting(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedStrafing = function () {
    let $res = natives.isPedStrafing(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedStrafing = function () {
    let $res = natives.isPedStrafing(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.synchronizedScene = function (scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9) {
    let $res = natives.taskSynchronizedScene(this.handle, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9);
};
mp.Ped.prototype.synchronizedScene = function (scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9) {
    let $res = natives.taskSynchronizedScene(this.handle, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9);
};
mp.Player.prototype.agitatedAction = function (ped2) {
    let $res = natives.taskAgitatedActionConfrontResponse(this.handle, ped2);
};
mp.Ped.prototype.agitatedAction = function (ped2) {
    let $res = natives.taskAgitatedActionConfrontResponse(this.handle, ped2);
};
mp.Player.prototype.sweepAimEntity = function (anim, p2, p3, p4, p5, vehicle, p7, p8) {
    let $res = natives.taskSweepAimEntity(this.handle, anim, p2, p3, p4, p5, vehicle, p7, p8);
};
mp.Ped.prototype.sweepAimEntity = function (anim, p2, p3, p4, p5, vehicle, p7, p8) {
    let $res = natives.taskSweepAimEntity(this.handle, anim, p2, p3, p4, p5, vehicle, p7, p8);
};
mp.Player.prototype.updateSweepAimEntity = function (entity) {
    let $res = natives.updateTaskSweepAimEntity(this.handle, entity);
};
mp.Ped.prototype.updateSweepAimEntity = function (entity) {
    let $res = natives.updateTaskSweepAimEntity(this.handle, entity);
};
mp.Player.prototype.arrestPed = function (target) {
    let $res = natives.taskArrestPed(this.handle, target);
};
mp.Ped.prototype.arrestPed = function (target) {
    let $res = natives.taskArrestPed(this.handle, target);
};
mp.Player.prototype.isPedRunningArrest = function () {
    let $res = natives.isPedRunningArrestTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedRunningArrest = function () {
    let $res = natives.isPedRunningArrestTask(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedBeingArrested = function () {
    let $res = natives.isPedBeingArrested(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedBeingArrested = function () {
    let $res = natives.isPedBeingArrested(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.uncuffPed = function () {
    let $res = natives.uncuffPed(this.handle);
};
mp.Ped.prototype.uncuffPed = function () {
    let $res = natives.uncuffPed(this.handle);
};
mp.Player.prototype.isPedCuffed = function () {
    let $res = natives.isPedCuffed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedCuffed = function () {
    let $res = natives.isPedCuffed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.task) mp.game2.task = {};
mp.game2.task.pause = function (ped, ms) {
    let $res = natives.taskPause(ped, ms);
};
mp.game2.task.taskPause = function (ped, ms) {
    let $res = natives.taskPause(ped, ms);
};
mp.game2.task.standStill = function (ped, time) {
    let $res = natives.taskStandStill(ped, time);
};
mp.game2.task.taskStandStill = function (ped, time) {
    let $res = natives.taskStandStill(ped, time);
};
mp.game2.task.jump = function (ped, unused, p2, p3) {
    let $res = natives.taskJump(ped, unused | 0, p2 | 0, p3 | 0);
};
mp.game2.task.taskJump = function (ped, unused, p2, p3) {
    let $res = natives.taskJump(ped, unused | 0, p2 | 0, p3 | 0);
};
mp.game2.task.cower = function (ped, duration) {
    let $res = natives.taskCower(ped, duration);
};
mp.game2.task.taskCower = function (ped, duration) {
    let $res = natives.taskCower(ped, duration);
};
mp.game2.task.handsUp = function (ped, duration, facingPed, p3, p4) {
    let $res = natives.taskHandsUp(ped, duration, facingPed, p3, p4 | 0);
};
mp.game2.task.taskHandsUp = function (ped, duration, facingPed, p3, p4) {
    let $res = natives.taskHandsUp(ped, duration, facingPed, p3, p4 | 0);
};
mp.game2.task.updateHandsUpDuration = function (ped, duration) {
    let $res = natives.updateTaskHandsUpDuration(ped, duration);
};
mp.game2.task.updateTaskHandsUpDuration = function (ped, duration) {
    let $res = natives.updateTaskHandsUpDuration(ped, duration);
};
mp.game2.task.openVehicleDoor = function (ped, vehicle, timeOut, seat, speed) {
    let $res = natives.taskOpenVehicleDoor(ped, vehicle, timeOut, seat, speed);
};
mp.game2.task.taskOpenVehicleDoor = function (ped, vehicle, timeOut, seat, speed) {
    let $res = natives.taskOpenVehicleDoor(ped, vehicle, timeOut, seat, speed);
};
mp.game2.task.enterVehicle = function (ped, vehicle, timeout, seat, speed, flag, p6) {
    let $res = natives.taskEnterVehicle(ped, vehicle, timeout, seat, speed, flag, p6);
};
mp.game2.task.taskEnterVehicle = function (ped, vehicle, timeout, seat, speed, flag, p6) {
    let $res = natives.taskEnterVehicle(ped, vehicle, timeout, seat, speed, flag, p6);
};
mp.game2.task.leaveVehicle = function (ped, vehicle, flags) {
    let $res = natives.taskLeaveVehicle(ped, vehicle, flags);
};
mp.game2.task.taskLeaveVehicle = function (ped, vehicle, flags) {
    let $res = natives.taskLeaveVehicle(ped, vehicle, flags);
};
mp.game2.task.getOffBoat = function (ped, boat) {
    let $res = natives.taskGetOffBoat(ped, boat);
};
mp.game2.task.taskGetOffBoat = function (ped, boat) {
    let $res = natives.taskGetOffBoat(ped, boat);
};
mp.game2.task.skyDive = function (ped, p1) {
    let $res = natives.taskSkyDive(ped, p1 | 0);
};
mp.game2.task.taskSkyDive = function (ped, p1) {
    let $res = natives.taskSkyDive(ped, p1 | 0);
};
mp.game2.task.parachute = function (ped, p1, p2) {
    let $res = natives.taskParachute(ped, p1 | 0, p2 | 0);
};
mp.game2.task.taskParachute = function (ped, p1, p2) {
    let $res = natives.taskParachute(ped, p1 | 0, p2 | 0);
};
mp.game2.task.parachuteToTarget = function (ped, x, y, z) {
    let $res = natives.taskParachuteToTarget(ped, x, y, z);
};
mp.game2.task.taskParachuteToTarget = function (ped, x, y, z) {
    let $res = natives.taskParachuteToTarget(ped, x, y, z);
};
mp.game2.task.setParachuteTarget = function (ped, x, y, z) {
    let $res = natives.setParachuteTaskTarget(ped, x, y, z);
};
mp.game2.task.setParachuteTaskTarget = function (ped, x, y, z) {
    let $res = natives.setParachuteTaskTarget(ped, x, y, z);
};
mp.game2.task.setParachuteThrust = function (ped, thrust) {
    let $res = natives.setParachuteTaskThrust(ped, thrust);
};
mp.game2.task.setParachuteTaskThrust = function (ped, thrust) {
    let $res = natives.setParachuteTaskThrust(ped, thrust);
};
mp.game2.task.rappelFromHeli = function (ped, p1) {
    let $res = natives.taskRappelFromHeli(ped, p1);
};
mp.game2.task.taskRappelFromHeli = function (ped, p1) {
    let $res = natives.taskRappelFromHeli(ped, p1);
};
mp.game2.task.vehicleDriveToCoord = function (ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10) {
    let $res = natives.taskVehicleDriveToCoord(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10);
};
mp.game2.task.taskVehicleDriveToCoord = function (ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10) {
    let $res = natives.taskVehicleDriveToCoord(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10);
};
mp.game2.task.vehicleDriveToCoordLongrange = function (ped, vehicle, x, y, z, speed, driveMode, stopRange) {
    let $res = natives.taskVehicleDriveToCoordLongrange(ped, vehicle, x, y, z, speed, driveMode, stopRange);
};
mp.game2.task.taskVehicleDriveToCoordLongrange = function (ped, vehicle, x, y, z, speed, driveMode, stopRange) {
    let $res = natives.taskVehicleDriveToCoordLongrange(ped, vehicle, x, y, z, speed, driveMode, stopRange);
};
mp.game2.task.vehicleDriveWander = function (ped, vehicle, speed, drivingStyle) {
    let $res = natives.taskVehicleDriveWander(ped, vehicle, speed, drivingStyle);
};
mp.game2.task.taskVehicleDriveWander = function (ped, vehicle, speed, drivingStyle) {
    let $res = natives.taskVehicleDriveWander(ped, vehicle, speed, drivingStyle);
};
mp.game2.task.followToOffsetOfEntity = function (ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing) {
    let $res = natives.taskFollowToOffsetOfEntity(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing | 0);
};
mp.game2.task.goStraightToCoord = function (ped, x, y, z, speed, timeout, targetHeading, distanceToSlide) {
    let $res = natives.taskGoStraightToCoord(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide);
};
mp.game2.task.taskGoStraightToCoord = function (ped, x, y, z, speed, timeout, targetHeading, distanceToSlide) {
    let $res = natives.taskGoStraightToCoord(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide);
};
mp.game2.task.goStraightToCoordRelativeToEntity = function (entity1, entity2, p2, p3, p4, p5, p6) {
    let $res = natives.taskGoStraightToCoordRelativeToEntity(entity1, entity2, p2, p3, p4, p5, p6);
};
mp.game2.task.achieveHeading = function (ped, heading, timeout) {
    let $res = natives.taskAchieveHeading(ped, heading, timeout);
};
mp.game2.task.taskAchieveHeading = function (ped, heading, timeout) {
    let $res = natives.taskAchieveHeading(ped, heading, timeout);
};
mp.game2.task.flushRoute = function () {
    let $res = natives.taskFlushRoute();
};
mp.game2.task.extendRoute = function (x, y, z) {
    let $res = natives.taskExtendRoute(x, y, z);
};
mp.game2.task.followPointRoute = function (ped, speed, unknown) {
    let $res = natives.taskFollowPointRoute(ped, speed, unknown);
};
mp.game2.task.taskFollowPointRoute = function (ped, speed, unknown) {
    let $res = natives.taskFollowPointRoute(ped, speed, unknown);
};
mp.game2.task.goToEntity = function (entity, target, duration, distance, speed, p5, p6) {
    let $res = natives.taskGoToEntity(entity, target, duration, distance, speed, p5, p6);
};
mp.game2.task.smartFleeCoord = function (ped, x, y, z, distance, time, p6, p7) {
    let $res = natives.taskSmartFleeCoord(ped, x, y, z, distance, time, p6 | 0, p7 | 0);
};
mp.game2.task.taskSmartFleeCoord = function (ped, x, y, z, distance, time, p6, p7) {
    let $res = natives.taskSmartFleeCoord(ped, x, y, z, distance, time, p6 | 0, p7 | 0);
};
mp.game2.task.smartFleePed = function (ped, fleeTarget, distance, fleeTime, p4, p5) {
    let $res = natives.taskSmartFleePed(ped, fleeTarget, distance, fleeTime, p4 | 0, p5 | 0);
};
mp.game2.task.reactAndFleePed = function (ped, fleeTarget) {
    let $res = natives.taskReactAndFleePed(ped, fleeTarget);
};
mp.game2.task.shockingEventReact = function (ped, eventHandle) {
    let $res = natives.taskShockingEventReact(ped, eventHandle);
};
mp.game2.task.taskShockingEventReact = function (ped, eventHandle) {
    let $res = natives.taskShockingEventReact(ped, eventHandle);
};
mp.game2.task.wanderInArea = function (ped, x, y, z, radius, minimalLength, timeBetweenWalks) {
    let $res = natives.taskWanderInArea(ped, x, y, z, radius, minimalLength, timeBetweenWalks);
};
mp.game2.task.taskWanderInArea = function (ped, x, y, z, radius, minimalLength, timeBetweenWalks) {
    let $res = natives.taskWanderInArea(ped, x, y, z, radius, minimalLength, timeBetweenWalks);
};
mp.game2.task.wanderStandard = function (ped, p1, p2) {
    let $res = natives.taskWanderStandard(ped, p1, p2);
};
mp.game2.task.taskWanderStandard = function (ped, p1, p2) {
    let $res = natives.taskWanderStandard(ped, p1, p2);
};
mp.game2.task.wanderSpecific = function (p0, p1, p2, p3) {
    let $res = natives.taskWanderSpecific(p0, p1, p2, p3);
};
mp.game2.task.vehiclePark = function (ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn) {
    let $res = natives.taskVehiclePark(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn | 0);
};
mp.game2.task.taskVehiclePark = function (ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn) {
    let $res = natives.taskVehiclePark(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn | 0);
};
mp.game2.task.stealthKill = function (killer, target, actionType, p3, p4) {
    let $res = natives.taskStealthKill(killer, target, actionType, p3, p4 | 0);
};
mp.game2.task.taskStealthKill = function (killer, target, actionType, p3, p4) {
    let $res = natives.taskStealthKill(killer, target, actionType, p3, p4 | 0);
};
mp.game2.task.plantBomb = function (ped, x, y, z, heading) {
    let $res = natives.taskPlantBomb(ped, x, y, z, heading);
};
mp.game2.task.taskPlantBomb = function (ped, x, y, z, heading) {
    let $res = natives.taskPlantBomb(ped, x, y, z, heading);
};
mp.game2.task.followNavMeshToCoord = function (ped, x, y, z, speed, timeout, stoppingRange, persistFollowing, unk) {
    let $res = natives.taskFollowNavMeshToCoord(ped, x, y, z, speed, timeout, stoppingRange, persistFollowing | 0, unk);
};
mp.game2.task.taskFollowNavMeshToCoord = function (ped, x, y, z, speed, timeout, stoppingRange, persistFollowing, unk) {
    let $res = natives.taskFollowNavMeshToCoord(ped, x, y, z, speed, timeout, stoppingRange, persistFollowing | 0, unk);
};
mp.game2.task.followNavMeshToCoordAdvanced = function (ped, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f) {
    let $res = natives.taskFollowNavMeshToCoordAdvanced(ped, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f);
};
mp.game2.task.taskFollowNavMeshToCoordAdvanced = function (ped, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f) {
    let $res = natives.taskFollowNavMeshToCoordAdvanced(ped, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f);
};
mp.game2.task.setPedPathCanUseClimbovers = function (ped, Toggle) {
    let $res = natives.setPedPathCanUseClimbovers(ped, Toggle | 0);
};
mp.game2.task.setPedPathCanUseLadders = function (ped, Toggle) {
    let $res = natives.setPedPathCanUseLadders(ped, Toggle | 0);
};
mp.game2.task.setPedPathCanDropFromHeight = function (ped, Toggle) {
    let $res = natives.setPedPathCanDropFromHeight(ped, Toggle | 0);
};
mp.game2.task.setPedPathClimbCostModifier = function (ped, modifier) {
    let $res = natives.setPedPathClimbCostModifier(ped, modifier);
};
mp.game2.task.setPedPathMayEnterWater = function (ped, mayEnterWater) {
    let $res = natives.setPedPathMayEnterWater(ped, mayEnterWater | 0);
};
mp.game2.task.setPedPathPreferToAvoidWater = function (ped, avoidWater) {
    let $res = natives.setPedPathPreferToAvoidWater(ped, avoidWater | 0);
};
mp.game2.task.setPedPathAvoidFire = function (ped, avoidFire) {
    let $res = natives.setPedPathAvoidFire(ped, avoidFire | 0);
};
mp.game2.task.setGlobalMinBirdFlightHeight = function (height) {
    let $res = natives.setGlobalMinBirdFlightHeight(height);
};
mp.game2.task.getNavmeshRouteDistanceRemaining = function (ped) {
    let $res = natives.getNavmeshRouteDistanceRemaining(ped, 0, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.distanceRemaining = $res[1];
    $resObj.isPathReady = $res[2] == 1;
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.task.getNavmeshRouteResult = function (ped) {
    let $res = natives.getNavmeshRouteResult(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.goToCoordAnyMeans = function (ped, x, y, z, speed, p5, p6, walkingStyle, p8) {
    let $res = natives.taskGoToCoordAnyMeans(ped, x, y, z, speed, p5, p6 | 0, walkingStyle, p8);
};
mp.game2.task.taskGoToCoordAnyMeans = function (ped, x, y, z, speed, p5, p6, walkingStyle, p8) {
    let $res = natives.taskGoToCoordAnyMeans(ped, x, y, z, speed, p5, p6 | 0, walkingStyle, p8);
};
mp.game2.task.goToCoordAnyMeansExtraParams = function (ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12) {
    let $res = natives.taskGoToCoordAnyMeansExtraParams(ped, x, y, z, speed, p5, p6 | 0, walkingStyle, p8, p9, p10, p11, p12 | 0);
};
mp.game2.task.taskGoToCoordAnyMeansExtraParams = function (ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12) {
    let $res = natives.taskGoToCoordAnyMeansExtraParams(ped, x, y, z, speed, p5, p6 | 0, walkingStyle, p8, p9, p10, p11, p12 | 0);
};
mp.game2.task.goToCoordAnyMeansExtraParamsWithCruiseSpeed = function (ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12, p13) {
    let $res = natives.taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, x, y, z, speed, p5, p6 | 0, walkingStyle, p8, p9, p10, p11, p12, p13 | 0);
};
mp.game2.task.taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed = function (ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12, p13) {
    let $res = natives.taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, x, y, z, speed, p5, p6 | 0, walkingStyle, p8, p9, p10, p11, p12, p13 | 0);
};
mp.game2.task.playAnim = function (ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ) {
    let $res = natives.taskPlayAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX | 0, lockY | 0, lockZ | 0);
};
mp.game2.task.taskPlayAnim = function (ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ) {
    let $res = natives.taskPlayAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX | 0, lockY | 0, lockZ | 0);
};
mp.game2.task.playAnimAdvanced = function (ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, p14, p15) {
    let $res = natives.taskPlayAnimAdvanced(ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, p14, p15);
};
mp.game2.task.taskPlayAnimAdvanced = function (ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, p14, p15) {
    let $res = natives.taskPlayAnimAdvanced(ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, p14, p15);
};
mp.game2.task.stopAnim = function (ped, animDictionary, animationName, p3) {
    let $res = natives.stopAnimTask(ped, animDictionary, animationName, p3);
};
mp.game2.task.stopAnimTask = function (ped, animDictionary, animationName, p3) {
    let $res = natives.stopAnimTask(ped, animDictionary, animationName, p3);
};
mp.game2.task.scriptedAnimation = function (ped, p4, p5) {
    let $res = natives.taskScriptedAnimation(ped, 0, 0, 0, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    $resObj.p2 = $res[2];
    $resObj.p3 = $res[3];
    return $resObj;
};
mp.game2.task.taskScriptedAnimation = function (ped, p4, p5) {
    let $res = natives.taskScriptedAnimation(ped, 0, 0, 0, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    $resObj.p2 = $res[2];
    $resObj.p3 = $res[3];
    return $resObj;
};
mp.game2.task.playEntityScriptedAnim = function (p0, p4, p5) {
    let $res = natives.playEntityScriptedAnim(p0, 0, 0, 0, p4, p5);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[1];
    $resObj.p2 = $res[2];
    $resObj.p3 = $res[3];
    return $resObj;
};
mp.game2.task.stopAnimPlayback = function (ped, p1, p2) {
    let $res = natives.stopAnimPlayback(ped, p1, p2 | 0);
};
mp.game2.task.setAnimWeight = function (p0, p1, p2, p3, p4) {
    let $res = natives.setAnimWeight(p0, p1, p2, p3, p4 | 0);
};
mp.game2.task.setAnimPlaybackTime = function (entity, p1, p2, p3) {
    let $res = natives.setAnimPhase(entity, p1, p2, p3 | 0);
};
mp.game2.task.setAnimRate = function (p0, p1, p2, p3) {
    let $res = natives.setAnimRate(p0, p1, p2, p3 | 0);
};
mp.game2.task.setAnimLooped = function (p0, p1, p2, p3) {
    let $res = natives.setAnimLooped(p0, p1 | 0, p2, p3 | 0);
};
mp.game2.task.playPhoneGestureAnimation = function (ped, animDict, animation, boneMaskType, p4, p5, p6, p7) {
    let $res = natives.taskPlayPhoneGestureAnimation(ped, animDict, animation, boneMaskType, p4, p5, p6 | 0, p7 | 0);
};
mp.game2.task.taskPlayPhoneGestureAnimation = function (ped, animDict, animation, boneMaskType, p4, p5, p6, p7) {
    let $res = natives.taskPlayPhoneGestureAnimation(ped, animDict, animation, boneMaskType, p4, p5, p6 | 0, p7 | 0);
};
mp.game2.task.stopPhoneGestureAnimation = function (ped, p1) {
    let $res = natives.taskStopPhoneGestureAnimation(ped, p1 | 0);
};
mp.game2.task.taskStopPhoneGestureAnimation = function (ped, p1) {
    let $res = natives.taskStopPhoneGestureAnimation(ped, p1 | 0);
};
mp.game2.task.isPlayingPhoneGestureAnim = function (ped) {
    let $res = natives.isPlayingPhoneGestureAnim(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.getPhoneGestureAnimCurrentTime = function (ped) {
    let $res = natives.getPhoneGestureAnimCurrentTime(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.getPhoneGestureAnimTotalTime = function (ped) {
    let $res = natives.getPhoneGestureAnimTotalTime(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.vehiclePlayAnim = function (vehicle, animationSet, animationName) {
    let $res = natives.taskVehiclePlayAnim(vehicle, animationSet, animationName);
};
mp.game2.task.lookAtCoord = function (entity, x, y, z, duration, p5, p6) {
    let $res = natives.taskLookAtCoord(entity, x, y, z, duration, p5, p6);
};
mp.game2.task.lookAtEntity = function (ped, lookAt, duration, unknown1, unknown2) {
    let $res = natives.taskLookAtEntity(ped, lookAt, duration, unknown1, unknown2);
};
mp.game2.task.clearLookAt = function (ped) {
    let $res = natives.taskClearLookAt(ped);
};
mp.game2.task.taskClearLookAt = function (ped) {
    let $res = natives.taskClearLookAt(ped);
};
mp.game2.task.openSequence = function () {
    let $res = natives.openSequenceTask(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.taskSequenceId = $res[1];
    return $resObj.taskSequenceId;
};
mp.game2.task.closeSequence = function (taskSequenceId) {
    let $res = natives.closeSequenceTask(taskSequenceId);
};
mp.game2.task.performSequence = function (ped, taskSequenceId) {
    let $res = natives.taskPerformSequence(ped, taskSequenceId);
};
mp.game2.task.taskPerformSequence = function (ped, taskSequenceId) {
    let $res = natives.taskPerformSequence(ped, taskSequenceId);
};
mp.game2.task.performSequenceLocally = function (ped, taskSequenceId) {
    let $res = natives.taskPerformSequenceLocally(ped, taskSequenceId);
};
mp.game2.task.clearSequence = function () {
    let $res = natives.clearSequenceTask(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.taskSequenceId = $res[1];
    return $resObj.taskSequenceId;
};
mp.game2.task.setSequenceToRepeat = function (taskSequenceId, repeat) {
    let $res = natives.setSequenceToRepeat(taskSequenceId, repeat | 0);
};
mp.game2.task.getSequenceProgress = function (ped) {
    let $res = natives.getSequenceProgress(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.getIsActive = function (ped, taskIndex) {
    let $res = natives.getIsTaskActive(ped, taskIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.getIsTaskActive = function (ped, taskIndex) {
    let $res = natives.getIsTaskActive(ped, taskIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.getScriptStatus = function (ped, taskHash) {
    let $res = natives.getScriptTaskStatus(ped, taskHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.getScriptTaskStatus = function (ped, taskHash) {
    let $res = natives.getScriptTaskStatus(ped, taskHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.getActiveVehicleMissionType = function (vehicle) {
    let $res = natives.getActiveVehicleMissionType(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.leaveAnyVehicle = function (ped, p1, flags) {
    let $res = natives.taskLeaveAnyVehicle(ped, p1, flags);
};
mp.game2.task.taskLeaveAnyVehicle = function (ped, p1, flags) {
    let $res = natives.taskLeaveAnyVehicle(ped, p1, flags);
};
mp.game2.task.aimGunScripted = function (ped, scriptTask, p2, p3) {
    let $res = natives.taskAimGunScripted(ped, scriptTask, p2 | 0, p3 | 0);
};
mp.game2.task.taskAimGunScripted = function (ped, scriptTask, p2, p3) {
    let $res = natives.taskAimGunScripted(ped, scriptTask, p2 | 0, p3 | 0);
};
mp.game2.task.aimGunScriptedWithTarget = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.taskAimGunScriptedWithTarget(p0, p1, p2, p3, p4, p5, p6 | 0, p7 | 0);
};
mp.game2.task.updateAimGunScriptedTarget = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.updateTaskAimGunScriptedTarget(p0, p1, p2, p3, p4, p5 | 0);
};
mp.game2.task.updateTaskAimGunScriptedTarget = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.updateTaskAimGunScriptedTarget(p0, p1, p2, p3, p4, p5 | 0);
};
mp.game2.task.getClipSetForScriptedGun = function (p0) {
    let $res = natives.getClipSetForScriptedGunTask(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.aimGunAtEntity = function (ped, entity, duration, p3) {
    let $res = natives.taskAimGunAtEntity(ped, entity, duration, p3 | 0);
};
mp.game2.task.turnPedToFaceEntity = function (ped, entity, duration) {
    let $res = natives.taskTurnPedToFaceEntity(ped, entity, duration);
};
mp.game2.task.aimGunAtCoord = function (ped, x, y, z, time, p5, p6) {
    let $res = natives.taskAimGunAtCoord(ped, x, y, z, time, p5 | 0, p6 | 0);
};
mp.game2.task.taskAimGunAtCoord = function (ped, x, y, z, time, p5, p6) {
    let $res = natives.taskAimGunAtCoord(ped, x, y, z, time, p5 | 0, p6 | 0);
};
mp.game2.task.shootAtCoord = function (ped, x, y, z, duration, firingPattern) {
    let $res = natives.taskShootAtCoord(ped, x, y, z, duration, firingPattern);
};
mp.game2.task.taskShootAtCoord = function (ped, x, y, z, duration, firingPattern) {
    let $res = natives.taskShootAtCoord(ped, x, y, z, duration, firingPattern);
};
mp.game2.task.shuffleToNextVehicleSeat = function (ped, vehicle, p2) {
    let $res = natives.taskShuffleToNextVehicleSeat(ped, vehicle, p2 | 0);
};
mp.game2.task.taskShuffleToNextVehicleSeat = function (ped, vehicle, p2) {
    let $res = natives.taskShuffleToNextVehicleSeat(ped, vehicle, p2 | 0);
};
mp.game2.task.clearPedS = function (ped) {
    let $res = natives.clearPedTasks(ped);
};
mp.game2.task.clearPedSecondary = function (ped) {
    let $res = natives.clearPedSecondaryTask(ped);
};
mp.game2.task.clearPedSecondaryTask = function (ped) {
    let $res = natives.clearPedSecondaryTask(ped);
};
mp.game2.task.everyoneLeaveVehicle = function (vehicle) {
    let $res = natives.taskEveryoneLeaveVehicle(vehicle);
};
mp.game2.task.gotoEntityOffset = function (ped, p1, p2, x, y, z, duration) {
    let $res = natives.taskGotoEntityOffset(ped, p1, p2, x, y, z, duration);
};
mp.game2.task.taskGotoEntityOffset = function (ped, p1, p2, x, y, z, duration) {
    let $res = natives.taskGotoEntityOffset(ped, p1, p2, x, y, z, duration);
};
mp.game2.task.gotoEntityOffsetXy = function (p0, oed, duration, p3, p4, p5, p6, p7) {
    let $res = natives.taskGotoEntityOffsetXy(p0, oed, duration, p3, p4, p5, p6, p7 | 0);
};
mp.game2.task.turnPedToFaceCoord = function (ped, x, y, z, duration) {
    let $res = natives.taskTurnPedToFaceCoord(ped, x, y, z, duration);
};
mp.game2.task.vehicleTempAction = function (driver, vehicle, action, time) {
    let $res = natives.taskVehicleTempAction(driver, vehicle, action, time);
};
mp.game2.task.taskVehicleTempAction = function (driver, vehicle, action, time) {
    let $res = natives.taskVehicleTempAction(driver, vehicle, action, time);
};
mp.game2.task.vehicleMission = function (driver, vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMission(driver, vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic | 0);
};
mp.game2.task.taskVehicleMission = function (driver, vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMission(driver, vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic | 0);
};
mp.game2.task.vehicleMissionPedTarget = function (ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, p7, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMissionPedTarget(ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, p7, DriveAgainstTraffic | 0);
};
mp.game2.task.vehicleMissionCoorsTarget = function (ped, vehicle, x, y, z, p5, p6, p7, p8, p9, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMissionCoorsTarget(ped, vehicle, x, y, z, p5, p6, p7, p8, p9, DriveAgainstTraffic | 0);
};
mp.game2.task.taskVehicleMissionCoorsTarget = function (ped, vehicle, x, y, z, p5, p6, p7, p8, p9, DriveAgainstTraffic) {
    let $res = natives.taskVehicleMissionCoorsTarget(ped, vehicle, x, y, z, p5, p6, p7, p8, p9, DriveAgainstTraffic | 0);
};
mp.game2.task.vehicleEscort = function (ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance) {
    let $res = natives.taskVehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance);
};
mp.game2.task.taskVehicleEscort = function (ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance) {
    let $res = natives.taskVehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance);
};
mp.game2.task.vehicleFollow = function (driver, vehicle, targetEntity, speed, drivingStyle, minDistance) {
    let $res = natives.taskVehicleFollow(driver, vehicle, targetEntity, speed, drivingStyle, minDistance);
};
mp.game2.task.taskVehicleFollow = function (driver, vehicle, targetEntity, speed, drivingStyle, minDistance) {
    let $res = natives.taskVehicleFollow(driver, vehicle, targetEntity, speed, drivingStyle, minDistance);
};
mp.game2.task.vehicleChase = function (driver, targetEnt) {
    let $res = natives.taskVehicleChase(driver, targetEnt);
};
mp.game2.task.taskVehicleChase = function (driver, targetEnt) {
    let $res = natives.taskVehicleChase(driver, targetEnt);
};
mp.game2.task.vehicleHeliProtect = function (pilot, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7) {
    let $res = natives.taskVehicleHeliProtect(pilot, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7);
};
mp.game2.task.taskVehicleHeliProtect = function (pilot, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7) {
    let $res = natives.taskVehicleHeliProtect(pilot, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7);
};
mp.game2.task.setVehicleChaseBehaviorFlag = function (ped, flag, set) {
    let $res = natives.setTaskVehicleChaseBehaviorFlag(ped, flag, set | 0);
};
mp.game2.task.setTaskVehicleChaseBehaviorFlag = function (ped, flag, set) {
    let $res = natives.setTaskVehicleChaseBehaviorFlag(ped, flag, set | 0);
};
mp.game2.task.setVehicleChaseIdealPursuitDistance = function (ped, distance) {
    let $res = natives.setTaskVehicleChaseIdealPursuitDistance(ped, distance);
};
mp.game2.task.setTaskVehicleChaseIdealPursuitDistance = function (ped, distance) {
    let $res = natives.setTaskVehicleChaseIdealPursuitDistance(ped, distance);
};
mp.game2.task.heliChase = function (pilot, entityToFollow, x, y, z) {
    let $res = natives.taskHeliChase(pilot, entityToFollow, x, y, z);
};
mp.game2.task.taskHeliChase = function (pilot, entityToFollow, x, y, z) {
    let $res = natives.taskHeliChase(pilot, entityToFollow, x, y, z);
};
mp.game2.task.planeChase = function (pilot, entityToFollow, x, y, z) {
    let $res = natives.taskPlaneChase(pilot, entityToFollow, x, y, z);
};
mp.game2.task.taskPlaneChase = function (pilot, entityToFollow, x, y, z) {
    let $res = natives.taskPlaneChase(pilot, entityToFollow, x, y, z);
};
mp.game2.task.planeLand = function (pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ) {
    let $res = natives.taskPlaneLand(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
};
mp.game2.task.taskPlaneLand = function (pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ) {
    let $res = natives.taskPlaneLand(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
};
mp.game2.task.clearVehicleS = function (vehicle) {
    let $res = natives.clearPrimaryVehicleTask(vehicle);
};
mp.game2.task.planeGotoPreciseVtol = function (ped, vehicle, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.taskPlaneGotoPreciseVtol(ped, vehicle, p2, p3, p4, p5, p6, p7, p8, p9);
};
mp.game2.task.submarineGotoAndStop = function (p0, submarine, x, y, z, p5) {
    let $res = natives.taskSubmarineGotoAndStop(p0, submarine, x, y, z, p5);
};
mp.game2.task.heliMission = function (pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, unk3, behaviorFlags) {
    let $res = natives.taskHeliMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, unk3, behaviorFlags);
};
mp.game2.task.taskHeliMission = function (pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, unk3, behaviorFlags) {
    let $res = natives.taskHeliMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, unk3, behaviorFlags);
};
mp.game2.task.heliEscortHeli = function (pilot, heli1, heli2, p3, p4, p5) {
    let $res = natives.taskHeliEscortHeli(pilot, heli1, heli2, p3, p4, p5);
};
mp.game2.task.planeMission = function (pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ, p13) {
    let $res = natives.taskPlaneMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ, p13 | 0);
};
mp.game2.task.taskPlaneMission = function (pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ, p13) {
    let $res = natives.taskPlaneMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ, p13 | 0);
};
mp.game2.task.planeTaxi = function (pilot, aircraft, p2, p3, p4, p5, p6) {
    let $res = natives.taskPlaneTaxi(pilot, aircraft, p2, p3, p4, p5, p6);
};
mp.game2.task.boatMission = function (pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11) {
    let $res = natives.taskBoatMission(pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11);
};
mp.game2.task.taskBoatMission = function (pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11) {
    let $res = natives.taskBoatMission(pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11);
};
mp.game2.task.driveBy = function (driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern) {
    let $res = natives.taskDriveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8 | 0, firingPattern);
};
mp.game2.task.taskDriveBy = function (driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern) {
    let $res = natives.taskDriveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8 | 0, firingPattern);
};
mp.game2.task.setDrivebyTarget = function (shootingPed, targetPed, targetVehicle, x, y, z) {
    let $res = natives.setDrivebyTaskTarget(shootingPed, targetPed, targetVehicle, x, y, z);
};
mp.game2.task.clearDrivebyUnderneathDrivingTask = function (ped) {
    let $res = natives.clearDrivebyTaskUnderneathDrivingTask(ped);
};
mp.game2.task.clearDrivebyTaskUnderneathDrivingTask = function (ped) {
    let $res = natives.clearDrivebyTaskUnderneathDrivingTask(ped);
};
mp.game2.task.isDrivebyUnderneathDrivingTask = function (ped) {
    let $res = natives.isDrivebyTaskUnderneathDrivingTask(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isDrivebyTaskUnderneathDrivingTask = function (ped) {
    let $res = natives.isDrivebyTaskUnderneathDrivingTask(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.controlMountedWeapon = function (ped) {
    let $res = natives.controlMountedWeapon(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.setMountedWeaponTarget = function (shootingPed, targetPed, targetVehicle, x, y, z, p6, p7) {
    let $res = natives.setMountedWeaponTarget(shootingPed, targetPed, targetVehicle, x, y, z, p6 | 0, p7 | 0);
};
mp.game2.task.isMountedWeaponUnderneathDrivingTask = function (ped) {
    let $res = natives.isMountedWeaponTaskUnderneathDrivingTask(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isMountedWeaponTaskUnderneathDrivingTask = function (ped) {
    let $res = natives.isMountedWeaponTaskUnderneathDrivingTask(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.useMobilePhone = function (ped, p1, p2) {
    let $res = natives.taskUseMobilePhone(ped, p1, p2 | 0);
};
mp.game2.task.taskUseMobilePhone = function (ped, p1, p2) {
    let $res = natives.taskUseMobilePhone(ped, p1, p2 | 0);
};
mp.game2.task.useMobilePhoneTimed = function (ped, duration) {
    let $res = natives.taskUseMobilePhoneTimed(ped, duration);
};
mp.game2.task.taskUseMobilePhoneTimed = function (ped, duration) {
    let $res = natives.taskUseMobilePhoneTimed(ped, duration);
};
mp.game2.task.chatToPed = function (ped, target, p2, p3, p4, p5, p6, p7) {
    let $res = natives.taskChatToPed(ped, target, p2, p3, p4, p5, p6, p7);
};
mp.game2.task.warpPedIntoVehicle = function (ped, vehicle, seat) {
    let $res = natives.taskWarpPedIntoVehicle(ped, vehicle, seat);
};
mp.game2.task.shootAtEntity = function (entity, target, duration, firingPattern) {
    let $res = natives.taskShootAtEntity(entity, target, duration, firingPattern);
};
mp.game2.task.climb = function (ped, unused) {
    let $res = natives.taskClimb(ped, unused | 0);
};
mp.game2.task.taskClimb = function (ped, unused) {
    let $res = natives.taskClimb(ped, unused | 0);
};
mp.game2.task.climbLadder = function (ped, p1) {
    let $res = natives.taskClimbLadder(ped, p1);
};
mp.game2.task.taskClimbLadder = function (ped, p1) {
    let $res = natives.taskClimbLadder(ped, p1);
};
mp.game2.task.rappelDownWall = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.taskRappelDownWallUsingClipsetOverride(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};
mp.game2.task.clearPedTasksImmediately = function (ped) {
    let $res = natives.clearPedTasksImmediately(ped);
};
mp.game2.task.performSequenceFromProgress = function (p0, p1, p2, p3) {
    let $res = natives.taskPerformSequenceFromProgress(p0, p1, p2, p3);
};
mp.game2.task.setNextDesiredMoveState = function (p0) {
    let $res = natives.setNextDesiredMoveState(p0);
};
mp.game2.task.setPedDesiredMoveBlendRatio = function (ped, p1) {
    let $res = natives.setPedDesiredMoveBlendRatio(ped, p1);
};
mp.game2.task.getPedDesiredMoveBlendRatio = function (ped) {
    let $res = natives.getPedDesiredMoveBlendRatio(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.gotoEntityAiming = function (ped, target, distanceToStopAt, StartAimingDist) {
    let $res = natives.taskGotoEntityAiming(ped, target, distanceToStopAt, StartAimingDist);
};
mp.game2.task.setDecisionMaker = function (ped, p1) {
    let $res = natives.taskSetDecisionMaker(ped, p1);
};
mp.game2.task.taskSetDecisionMaker = function (ped, p1) {
    let $res = natives.taskSetDecisionMaker(ped, p1);
};
mp.game2.task.setSphereDefensiveArea = function (p0, p1, p2, p3, p4) {
    let $res = natives.taskSetSphereDefensiveArea(p0, p1, p2, p3, p4);
};
mp.game2.task.clearDefensiveArea = function (p0) {
    let $res = natives.taskClearDefensiveArea(p0);
};
mp.game2.task.pedSlideToCoord = function (ped, x, y, z, heading, p5) {
    let $res = natives.taskPedSlideToCoord(ped, x, y, z, heading, p5);
};
mp.game2.task.pedSlideToCoordHdgRate = function (ped, x, y, z, heading, p5, p6) {
    let $res = natives.taskPedSlideToCoordHdgRate(ped, x, y, z, heading, p5, p6);
};
mp.game2.task.addCoverPoint = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.addCoverPoint(p0, p1, p2, p3, p4, p5, p6, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.removeCoverPoint = function (coverpoint) {
    let $res = natives.removeCoverPoint(coverpoint);
};
mp.game2.task.doesScriptedCoverPointExistAtCoords = function (x, y, z) {
    let $res = natives.doesScriptedCoverPointExistAtCoords(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.getScriptedCoverPointCoords = function (coverpoint) {
    let $res = natives.getScriptedCoverPointCoords(coverpoint);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.task.combatPed = function (ped, targetPed, p2, p3) {
    let $res = natives.taskCombatPed(ped, targetPed, p2, p3);
};
mp.game2.task.combatPedTimed = function (p0, ped, p2, p3) {
    let $res = natives.taskCombatPedTimed(p0, ped, p2, p3);
};
mp.game2.task.seekCoverFromPos = function (ped, x, y, z, duration, p5) {
    let $res = natives.taskSeekCoverFromPos(ped, x, y, z, duration, p5 | 0);
};
mp.game2.task.seekCoverFromPed = function (ped, target, duration, p3) {
    let $res = natives.taskSeekCoverFromPed(ped, target, duration, p3 | 0);
};
mp.game2.task.seekCoverToCoverPoint = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.taskSeekCoverToCoverPoint(p0, p1, p2, p3, p4, p5, p6 | 0);
};
mp.game2.task.seekCoverToCoords = function (ped, x1, y1, z1, x2, y2, z2, p7, p8) {
    let $res = natives.taskSeekCoverToCoords(ped, x1, y1, z1, x2, y2, z2, p7, p8 | 0);
};
mp.game2.task.taskSeekCoverToCoords = function (ped, x1, y1, z1, x2, y2, z2, p7, p8) {
    let $res = natives.taskSeekCoverToCoords(ped, x1, y1, z1, x2, y2, z2, p7, p8 | 0);
};
mp.game2.task.putPedDirectlyIntoCover = function (ped, x, y, z, timeout, p5, p6, p7, p8, p9, p10) {
    let $res = natives.taskPutPedDirectlyIntoCover(ped, x, y, z, timeout, p5 | 0, p6, p7 | 0, p8 | 0, p9, p10 | 0);
};
mp.game2.task.exitCover = function (p0, p1, p2, p3, p4) {
    let $res = natives.taskExitCover(p0, p1, p2, p3, p4);
};
mp.game2.task.putPedDirectlyIntoMelee = function (ped, meleeTarget, p2, p3, p4, p5) {
    let $res = natives.taskPutPedDirectlyIntoMelee(ped, meleeTarget, p2, p3, p4, p5 | 0);
};
mp.game2.task.toggleDuck = function (p0, p1) {
    let $res = natives.taskToggleDuck(p0 | 0, p1 | 0);
};
mp.game2.task.guardCurrentPosition = function (p0, p1, p2, p3) {
    let $res = natives.taskGuardCurrentPosition(p0, p1, p2, p3 | 0);
};
mp.game2.task.taskGuardCurrentPosition = function (p0, p1, p2, p3) {
    let $res = natives.taskGuardCurrentPosition(p0, p1, p2, p3 | 0);
};
mp.game2.task.guardAssignedDefensiveArea = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.taskGuardAssignedDefensiveArea(p0, p1, p2, p3, p4, p5, p6);
};
mp.game2.task.guardSphereDefensiveArea = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.taskGuardSphereDefensiveArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};
mp.game2.task.taskGuardSphereDefensiveArea = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    let $res = natives.taskGuardSphereDefensiveArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};
mp.game2.task.standGuard = function (ped, x, y, z, heading, scenarioName) {
    let $res = natives.taskStandGuard(ped, x, y, z, heading, scenarioName);
};
mp.game2.task.taskStandGuard = function (ped, x, y, z, heading, scenarioName) {
    let $res = natives.taskStandGuard(ped, x, y, z, heading, scenarioName);
};
mp.game2.task.setDriveCruiseSpeed = function (driver, cruiseSpeed) {
    let $res = natives.setDriveTaskCruiseSpeed(driver, cruiseSpeed);
};
mp.game2.task.setDriveTaskCruiseSpeed = function (driver, cruiseSpeed) {
    let $res = natives.setDriveTaskCruiseSpeed(driver, cruiseSpeed);
};
mp.game2.task.setDriveMaxCruiseSpeed = function (p0, p1) {
    let $res = natives.setDriveTaskMaxCruiseSpeed(p0, p1);
};
mp.game2.task.setDriveDrivingStyle = function (ped, drivingStyle) {
    let $res = natives.setDriveTaskDrivingStyle(ped, drivingStyle);
};
mp.game2.task.setDriveTaskDrivingStyle = function (ped, drivingStyle) {
    let $res = natives.setDriveTaskDrivingStyle(ped, drivingStyle);
};
mp.game2.task.addCoverBlockingArea = function (playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9) {
    let $res = natives.addCoverBlockingArea(playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6 | 0, p7 | 0, p8 | 0, p9 | 0);
};
mp.game2.task.removeAllCoverBlockingAreas = function () {
    let $res = natives.removeAllCoverBlockingAreas();
};
mp.game2.task.startScenarioInPlace = function (ped, scenarioName, unkDelay, playEnterAnim) {
    let $res = natives.taskStartScenarioInPlace(ped, scenarioName, unkDelay, playEnterAnim | 0);
};
mp.game2.task.taskStartScenarioInPlace = function (ped, scenarioName, unkDelay, playEnterAnim) {
    let $res = natives.taskStartScenarioInPlace(ped, scenarioName, unkDelay, playEnterAnim | 0);
};
mp.game2.task.startScenarioAtPosition = function (ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport) {
    let $res = natives.taskStartScenarioAtPosition(ped, scenarioName, x, y, z, heading, duration, sittingScenario | 0, teleport | 0);
};
mp.game2.task.taskStartScenarioAtPosition = function (ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport) {
    let $res = natives.taskStartScenarioAtPosition(ped, scenarioName, x, y, z, heading, duration, sittingScenario | 0, teleport | 0);
};
mp.game2.task.useNearestScenarioToCoord = function (ped, x, y, z, distance, duration) {
    let $res = natives.taskUseNearestScenarioToCoord(ped, x, y, z, distance, duration);
};
mp.game2.task.taskUseNearestScenarioToCoord = function (ped, x, y, z, distance, duration) {
    let $res = natives.taskUseNearestScenarioToCoord(ped, x, y, z, distance, duration);
};
mp.game2.task.useNearestScenarioToCoordWarp = function (ped, x, y, z, radius, p5) {
    let $res = natives.taskUseNearestScenarioToCoordWarp(ped, x, y, z, radius, p5);
};
mp.game2.task.taskUseNearestScenarioToCoordWarp = function (ped, x, y, z, radius, p5) {
    let $res = natives.taskUseNearestScenarioToCoordWarp(ped, x, y, z, radius, p5);
};
mp.game2.task.useNearestScenarioChainToCoord = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.taskUseNearestScenarioChainToCoord(p0, p1, p2, p3, p4, p5);
};
mp.game2.task.useNearestScenarioChainToCoordWarp = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.taskUseNearestScenarioChainToCoordWarp(p0, p1, p2, p3, p4, p5);
};
mp.game2.task.doesScenarioExistInArea = function (x, y, z, radius, b) {
    let $res = natives.doesScenarioExistInArea(x, y, z, radius, b | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.doesScenarioOfTypeExistInArea = function (p0, p1, p2, p4, p5) {
    let $res = natives.doesScenarioOfTypeExistInArea(p0, p1, p2, null, p4, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p3 = $res[0];
    return $res[0] == 1 ? $resObj.p3 : undefined;
};
mp.game2.task.isScenarioOccupied = function (p0, p1, p2, p3, p4) {
    let $res = natives.isScenarioOccupied(p0, p1, p2, p3, p4 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.pedHasUseScenario = function (ped) {
    let $res = natives.pedHasUseScenarioTask(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.pedHasUseScenarioTask = function (ped) {
    let $res = natives.pedHasUseScenarioTask(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.playAnimOnRunningScenario = function (ped, animDict, animName) {
    let $res = natives.playAnimOnRunningScenario(ped, animDict, animName);
};
mp.game2.task.doesScenarioGroupExist = function (scenarioGroup) {
    let $res = natives.doesScenarioGroupExist(scenarioGroup);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isScenarioGroupEnabled = function (scenarioGroup) {
    let $res = natives.isScenarioGroupEnabled(scenarioGroup);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.setScenarioGroupEnabled = function (scenarioGroup, p1) {
    let $res = natives.setScenarioGroupEnabled(scenarioGroup, p1 | 0);
};
mp.game2.task.resetScenarioGroupsEnabled = function () {
    let $res = natives.resetScenarioGroupsEnabled();
};
mp.game2.task.setExclusiveScenarioGroup = function (scenarioGroup) {
    let $res = natives.setExclusiveScenarioGroup(scenarioGroup);
};
mp.game2.task.resetExclusiveScenarioGroup = function () {
    let $res = natives.resetExclusiveScenarioGroup();
};
mp.game2.task.isScenarioTypeEnabled = function (scenarioType) {
    let $res = natives.isScenarioTypeEnabled(scenarioType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.setScenarioTypeEnabled = function (scenarioType, toggle) {
    let $res = natives.setScenarioTypeEnabled(scenarioType, toggle | 0);
};
mp.game2.task.resetScenarioTypesEnabled = function () {
    let $res = natives.resetScenarioTypesEnabled();
};
mp.game2.task.isPedActiveInScenario = function (ped) {
    let $res = natives.isPedActiveInScenario(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isPedPlayingBaseClipInScenario = function (ped) {
    let $res = natives.isPedPlayingBaseClipInScenario(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.setPedCanPlayAmbientIdles = function (ped, p1, p2) {
    let $res = natives.setPedCanPlayAmbientIdles(ped, p1 | 0, p2 | 0);
};
mp.game2.task.combatHatedTargetsInArea = function (ped, x, y, z, radius, p5) {
    let $res = natives.taskCombatHatedTargetsInArea(ped, x, y, z, radius, p5);
};
mp.game2.task.taskCombatHatedTargetsInArea = function (ped, x, y, z, radius, p5) {
    let $res = natives.taskCombatHatedTargetsInArea(ped, x, y, z, radius, p5);
};
mp.game2.task.combatHatedTargetsAroundPed = function (ped, radius, p2) {
    let $res = natives.taskCombatHatedTargetsAroundPed(ped, radius, p2);
};
mp.game2.task.combatHatedTargetsAroundPedTimed = function (p0, p1, p2, p3) {
    let $res = natives.taskCombatHatedTargetsAroundPedTimed(p0, p1, p2, p3);
};
mp.game2.task.throwProjectile = function (ped, x, y, z, p4, p5) {
    let $res = natives.taskThrowProjectile(ped, x, y, z, p4 | 0, p5 | 0);
};
mp.game2.task.swapWeapon = function (ped, p1) {
    let $res = natives.taskSwapWeapon(ped, p1 | 0);
};
mp.game2.task.taskSwapWeapon = function (ped, p1) {
    let $res = natives.taskSwapWeapon(ped, p1 | 0);
};
mp.game2.task.reloadWeapon = function (ped, unused) {
    let $res = natives.taskReloadWeapon(ped, unused | 0);
};
mp.game2.task.taskReloadWeapon = function (ped, unused) {
    let $res = natives.taskReloadWeapon(ped, unused | 0);
};
mp.game2.task.isPedGettingUp = function (ped) {
    let $res = natives.isPedGettingUp(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.writhe = function (ped, target, time, p3, p4, p5) {
    let $res = natives.taskWrithe(ped, target, time, p3, p4 | 0, p5 | 0);
};
mp.game2.task.taskWrithe = function (ped, target, time, p3, p4, p5) {
    let $res = natives.taskWrithe(ped, target, time, p3, p4 | 0, p5 | 0);
};
mp.game2.task.isPedInWrithe = function (ped) {
    let $res = natives.isPedInWrithe(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.openPatrolRoute = function (patrolRoute) {
    let $res = natives.openPatrolRoute(patrolRoute);
};
mp.game2.task.closePatrolRoute = function () {
    let $res = natives.closePatrolRoute();
};
mp.game2.task.addPatrolRouteNode = function (p0, p1, x1, y1, z1, x2, y2, z2, p8) {
    let $res = natives.addPatrolRouteNode(p0, p1, x1, y1, z1, x2, y2, z2, p8);
};
mp.game2.task.addPatrolRouteLink = function (p0, p1) {
    let $res = natives.addPatrolRouteLink(p0, p1);
};
mp.game2.task.createPatrolRoute = function () {
    let $res = natives.createPatrolRoute();
};
mp.game2.task.deletePatrolRoute = function (patrolRoute) {
    let $res = natives.deletePatrolRoute(patrolRoute);
};
mp.game2.task.patrol = function (ped, p1, p2, p3, p4) {
    let $res = natives.taskPatrol(ped, p1, p2, p3 | 0, p4 | 0);
};
mp.game2.task.taskPatrol = function (ped, p1, p2, p3, p4) {
    let $res = natives.taskPatrol(ped, p1, p2, p3 | 0, p4 | 0);
};
mp.game2.task.stayInCover = function (ped) {
    let $res = natives.taskStayInCover(ped);
};
mp.game2.task.taskStayInCover = function (ped) {
    let $res = natives.taskStayInCover(ped);
};
mp.game2.task.addVehicleSubAttackCoord = function (ped, x, y, z) {
    let $res = natives.addVehicleSubtaskAttackCoord(ped, x, y, z);
};
mp.game2.task.addVehicleSubAttackPed = function (ped, ped2) {
    let $res = natives.addVehicleSubtaskAttackPed(ped, ped2);
};
mp.game2.task.vehicleShootAtPed = function (ped, target, p2) {
    let $res = natives.taskVehicleShootAtPed(ped, target, p2);
};
mp.game2.task.taskVehicleShootAtPed = function (ped, target, p2) {
    let $res = natives.taskVehicleShootAtPed(ped, target, p2);
};
mp.game2.task.vehicleAimAtPed = function (ped, target) {
    let $res = natives.taskVehicleAimAtPed(ped, target);
};
mp.game2.task.vehicleShootAtCoord = function (ped, x, y, z, p4) {
    let $res = natives.taskVehicleShootAtCoord(ped, x, y, z, p4);
};
mp.game2.task.vehicleAimAtCoord = function (ped, x, y, z) {
    let $res = natives.taskVehicleAimAtCoord(ped, x, y, z);
};
mp.game2.task.vehicleGotoNavmesh = function (ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange) {
    let $res = natives.taskVehicleGotoNavmesh(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
};
mp.game2.task.taskVehicleGotoNavmesh = function (ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange) {
    let $res = natives.taskVehicleGotoNavmesh(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
};
mp.game2.task.goToCoordWhileAimingAtCoord = function (ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8, p9, p10, p11, flags, p13, firingPattern) {
    let $res = natives.taskGoToCoordWhileAimingAtCoord(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8 | 0, p9, p10, p11 | 0, flags, p13 | 0, firingPattern);
};
mp.game2.task.taskGoToCoordWhileAimingAtCoord = function (ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8, p9, p10, p11, flags, p13, firingPattern) {
    let $res = natives.taskGoToCoordWhileAimingAtCoord(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8 | 0, p9, p10, p11 | 0, flags, p13 | 0, firingPattern);
};
mp.game2.task.goToCoordWhileAimingAtEntity = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    let $res = natives.taskGoToCoordWhileAimingAtEntity(p0, p1, p2, p3, p4, p5, p6 | 0, p7, p8, p9 | 0, p10, p11 | 0, p12, p13);
};
mp.game2.task.goToCoordAndAimAtHatedEntitiesNearCoord = function (pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern) {
    let $res = natives.taskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies | 0, distanceToStopAt, noRoadsDistance, unkTrue | 0, unkFlag, aimingFlag | 0, firingPattern);
};
mp.game2.task.taskGoToCoordAndAimAtHatedEntitiesNearCoord = function (pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern) {
    let $res = natives.taskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies | 0, distanceToStopAt, noRoadsDistance, unkTrue | 0, unkFlag, aimingFlag | 0, firingPattern);
};
mp.game2.task.goToEntityWhileAimingAtCoord = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    let $res = natives.taskGoToEntityWhileAimingAtCoord(p0, p1, p2, p3, p4, p5, p6 | 0, p7, p8, p9 | 0, p10 | 0, p11);
};
mp.game2.task.goToEntityWhileAimingAtEntity = function (ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern) {
    let $res = natives.taskGoToEntityWhileAimingAtEntity(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity | 0, p5, p6, p7 | 0, p8 | 0, firingPattern);
};
mp.game2.task.setHighFall = function (ped, p1, p2, p3) {
    let $res = natives.setHighFallTask(ped, p1, p2, p3);
};
mp.game2.task.setHighFallTask = function (ped, p1, p2, p3) {
    let $res = natives.setHighFallTask(ped, p1, p2, p3);
};
mp.game2.task.requestWaypointRecording = function (name) {
    let $res = natives.requestWaypointRecording(name);
};
mp.game2.task.getIsWaypointRecordingLoaded = function (name) {
    let $res = natives.getIsWaypointRecordingLoaded(name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.removeWaypointRecording = function (name) {
    let $res = natives.removeWaypointRecording(name);
};
mp.game2.task.waypointRecordingGetNumPoints = function (name) {
    let $res = natives.waypointRecordingGetNumPoints(name, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.points = $res[1];
    return $res[0] == 1 ? $resObj.points : undefined;
};
mp.game2.task.waypointRecordingGetCoord = function (name, point) {
    let $res = natives.waypointRecordingGetCoord(name, 0, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.coord = new mp.Vector3($res[undefined]);
    return $res[0] == 1 ? $resObj.coord : undefined;
};
mp.game2.task.waypointRecordingGetSpeedAtPoint = function (name, point) {
    let $res = natives.waypointRecordingGetSpeedAtPoint(name, point);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.waypointRecordingGetClosestWaypoint = function (name, x, y, z) {
    let $res = natives.waypointRecordingGetClosestWaypoint(name, x, y, z, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.point = $res[1];
    return $res[0] == 1 ? $resObj.point : undefined;
};
mp.game2.task.followWaypointRecording = function (p0, p1, p2, p3, p4) {
    let $res = natives.taskFollowWaypointRecording(p0, p1, p2, p3, p4);
};
mp.game2.task.isWaypointPlaybackGoingOnForPed = function (p0) {
    let $res = natives.isWaypointPlaybackGoingOnForPed(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.getPedWaypointProgress = function (ped) {
    let $res = natives.getPedWaypointProgress(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.getPedWaypointDistance = function (p0) {
    let $res = natives.getPedWaypointDistance(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.setPedWaypointRouteOffset = function (p0, p1, p2, p3) {
    let $res = natives.setPedWaypointRouteOffset(p0, p1, p2, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.getWaypointDistanceAlongRoute = function (p0, p1) {
    let $res = natives.getWaypointDistanceAlongRoute(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.waypointPlaybackGetIsPaused = function (p0) {
    let $res = natives.waypointPlaybackGetIsPaused(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.waypointPlaybackPause = function (p0, p1, p2) {
    let $res = natives.waypointPlaybackPause(p0, p1 | 0, p2 | 0);
};
mp.game2.task.waypointPlaybackResume = function (p0, p1, p2, p3) {
    let $res = natives.waypointPlaybackResume(p0, p1 | 0, p2, p3);
};
mp.game2.task.waypointPlaybackOverrideSpeed = function (p0, p1, p2) {
    let $res = natives.waypointPlaybackOverrideSpeed(p0, p1, p2 | 0);
};
mp.game2.task.waypointPlaybackUseDefaultSpeed = function (p0) {
    let $res = natives.waypointPlaybackUseDefaultSpeed(p0);
};
mp.game2.task.useWaypointRecordingAsAssistedMovementRoute = function (name, p1, p2, p3) {
    let $res = natives.useWaypointRecordingAsAssistedMovementRoute(name, p1 | 0, p2, p3);
};
mp.game2.task.waypointPlaybackStartAimingAtPed = function (p0, p1, p2) {
    let $res = natives.waypointPlaybackStartAimingAtPed(p0, p1, p2 | 0);
};
mp.game2.task.waypointPlaybackStartAimingAtCoord = function (p0, p1, p2, p3, p4) {
    let $res = natives.waypointPlaybackStartAimingAtCoord(p0, p1, p2, p3, p4 | 0);
};
mp.game2.task.waypointPlaybackStartShootingAtPed = function (p0, p1, p2, p3) {
    let $res = natives.waypointPlaybackStartShootingAtPed(p0, p1, p2 | 0, p3);
};
mp.game2.task.waypointPlaybackStartShootingAtCoord = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.waypointPlaybackStartShootingAtCoord(p0, p1, p2, p3, p4 | 0, p5);
};
mp.game2.task.waypointPlaybackStopAimingOrShooting = function (p0) {
    let $res = natives.waypointPlaybackStopAimingOrShooting(p0);
};
mp.game2.task.assistedMovementRequestRoute = function (route) {
    let $res = natives.assistedMovementRequestRoute(route);
};
mp.game2.task.assistedMovementRemoveRoute = function (route) {
    let $res = natives.assistedMovementRemoveRoute(route);
};
mp.game2.task.assistedMovementIsRouteLoaded = function (route) {
    let $res = natives.assistedMovementIsRouteLoaded(route);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.assistedMovementSetRouteProperties = function (route, props) {
    let $res = natives.assistedMovementSetRouteProperties(route, props);
};
mp.game2.task.assistedMovementOverrideLoadDistanceThisFrame = function (dist) {
    let $res = natives.assistedMovementOverrideLoadDistanceThisFrame(dist);
};
mp.game2.task.vehicleFollowWaypointRecording = function (ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.taskVehicleFollowWaypointRecording(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8 | 0, p9);
};
mp.game2.task.taskVehicleFollowWaypointRecording = function (ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.taskVehicleFollowWaypointRecording(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8 | 0, p9);
};
mp.game2.task.isWaypointPlaybackGoingOnForVehicle = function (vehicle) {
    let $res = natives.isWaypointPlaybackGoingOnForVehicle(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.getVehicleWaypointProgress = function (vehicle) {
    let $res = natives.getVehicleWaypointProgress(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.getVehicleWaypointTargetPoint = function (vehicle) {
    let $res = natives.getVehicleWaypointTargetPoint(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.vehicleWaypointPlaybackPause = function (vehicle) {
    let $res = natives.vehicleWaypointPlaybackPause(vehicle);
};
mp.game2.task.vehicleWaypointPlaybackResume = function (vehicle) {
    let $res = natives.vehicleWaypointPlaybackResume(vehicle);
};
mp.game2.task.vehicleWaypointPlaybackUseDefaultSpeed = function (vehicle) {
    let $res = natives.vehicleWaypointPlaybackUseDefaultSpeed(vehicle);
};
mp.game2.task.vehicleWaypointPlaybackOverrideSpeed = function (vehicle, speed) {
    let $res = natives.vehicleWaypointPlaybackOverrideSpeed(vehicle, speed);
};
mp.game2.task.setBlockingOfNonTemporaryEvents = function (ped, toggle) {
    let $res = natives.taskSetBlockingOfNonTemporaryEvents(ped, toggle | 0);
};
mp.game2.task.taskSetBlockingOfNonTemporaryEvents = function (ped, toggle) {
    let $res = natives.taskSetBlockingOfNonTemporaryEvents(ped, toggle | 0);
};
mp.game2.task.forceMotionState = function (ped, state, p2) {
    let $res = natives.taskForceMotionState(ped, state, p2 | 0);
};
mp.game2.task.taskForceMotionState = function (ped, state, p2) {
    let $res = natives.taskForceMotionState(ped, state, p2 | 0);
};
mp.game2.task.moveNetworkByName = function (ped, task, multiplier, p3, animDict, flags) {
    let $res = natives.taskMoveNetworkByName(ped, task, multiplier, p3 | 0, animDict, flags);
};
mp.game2.task.taskMoveNetwork = function (ped, task, multiplier, p3, animDict, flags) {
    let $res = natives.taskMoveNetworkByName(ped, task, multiplier, p3 | 0, animDict, flags);
};
mp.game2.task.moveNetworkAdvancedByName = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags) {
    let $res = natives.taskMoveNetworkAdvancedByName(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 | 0, animDict, flags);
};
mp.game2.task.taskMoveNetworkAdvanced = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags) {
    let $res = natives.taskMoveNetworkAdvancedByName(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 | 0, animDict, flags);
};
mp.game2.task.moveNetworkByNameWithInitParams = function (ped, p1, p3, p4, animDict, flags) {
    let $res = natives.taskMoveNetworkByNameWithInitParams(ped, p1, 0, p3, p4 | 0, animDict, flags);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.data = $res[1];
    return $resObj.data;
};
mp.game2.task.isMoveNetworkActive = function (ped) {
    let $res = natives.isTaskMoveNetworkActive(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isMoveNetworkReadyForTransition = function (ped) {
    let $res = natives.isTaskMoveNetworkReadyForTransition(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.requestMoveNetworkStateTransition = function (ped, name) {
    let $res = natives.requestTaskMoveNetworkStateTransition(ped, name);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.getMoveNetworkState = function (ped) {
    let $res = natives.getTaskMoveNetworkState(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.setMoveNetworkSignalFloat = function (ped, signalName, value) {
    let $res = natives.setTaskMoveNetworkSignalFloat(ped, signalName, value);
};
mp.game2.task.setMoveNetworkSignalFloat2 = function (ped, signalName, value) {
    let $res = natives.setTaskMoveNetworkSignalLocalFloat(ped, signalName, value);
};
mp.game2.task.setMoveNetworkSignalBool = function (ped, signalName, value) {
    let $res = natives.setTaskMoveNetworkSignalBool(ped, signalName, value | 0);
};
mp.game2.task.getMoveNetworkSignalFloat = function (ped, signalName) {
    let $res = natives.getTaskMoveNetworkSignalFloat(ped, signalName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.getMoveNetworkSignalBool = function (ped, signalName) {
    let $res = natives.getTaskMoveNetworkSignalBool(ped, signalName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.getMoveNetworkEvent = function (ped, eventName) {
    let $res = natives.getTaskMoveNetworkEvent(ped, eventName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isMoveBlendRatioStill = function (ped) {
    let $res = natives.isMoveBlendRatioStill(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isMoveBlendRatioWalking = function (ped) {
    let $res = natives.isMoveBlendRatioWalking(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isMoveBlendRatioRunning = function (ped) {
    let $res = natives.isMoveBlendRatioRunning(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isMoveBlendRatioSprinting = function (ped) {
    let $res = natives.isMoveBlendRatioSprinting(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isPedStill = function (ped) {
    let $res = natives.isPedStill(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isPedWalking = function (ped) {
    let $res = natives.isPedWalking(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isPedRunning = function (ped) {
    let $res = natives.isPedRunning(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isPedSprinting = function (ped) {
    let $res = natives.isPedSprinting(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isPedStrafing = function (ped) {
    let $res = natives.isPedStrafing(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.synchronizedScene = function (ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9) {
    let $res = natives.taskSynchronizedScene(ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9);
};
mp.game2.task.taskSynchronizedScene = function (ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9) {
    let $res = natives.taskSynchronizedScene(ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9);
};
mp.game2.task.agitatedAction = function (ped, ped2) {
    let $res = natives.taskAgitatedActionConfrontResponse(ped, ped2);
};
mp.game2.task.sweepAimEntity = function (ped, anim, p2, p3, p4, p5, vehicle, p7, p8) {
    let $res = natives.taskSweepAimEntity(ped, anim, p2, p3, p4, p5, vehicle, p7, p8);
};
mp.game2.task.updateSweepAimEntity = function (ped, entity) {
    let $res = natives.updateTaskSweepAimEntity(ped, entity);
};
mp.game2.task.updateTaskSweepAimEntity = function (ped, entity) {
    let $res = natives.updateTaskSweepAimEntity(ped, entity);
};
mp.game2.task.sweepAimPosition = function (p0, p5, p6, p7, p8, p9, p10) {
    let $res = natives.taskSweepAimPosition(p0, null, null, null, null, p5, p6, p7, p8, p9, p10);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.p1 = $res[0];
    $resObj.p2 = $res[0];
    $resObj.p3 = $res[0];
    $resObj.p4 = $res[0];
    return $resObj;
};
mp.game2.task.updateSweepAimPosition = function (p0, p1, p2, p3) {
    let $res = natives.updateTaskSweepAimPosition(p0, p1, p2, p3);
};
mp.game2.task.arrestPed = function (ped, target) {
    let $res = natives.taskArrestPed(ped, target);
};
mp.game2.task.isPedRunningArrest = function (ped) {
    let $res = natives.isPedRunningArrestTask(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.isPedBeingArrested = function (ped) {
    let $res = natives.isPedBeingArrested(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.uncuffPed = function (ped) {
    let $res = natives.uncuffPed(ped);
};
mp.game2.task.isPedCuffed = function (ped) {
    let $res = natives.isPedCuffed(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
if (!mp.game2.task) mp.game2.task = {};
if (!mp.game2.task.unk) mp.game2.task.unk = {};
mp.game2.task.unk._0x3E38E28A1D80DDF6 = function (ped) {
    let $res = natives.isControlledVehicleUnableToGetToRoad(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.task.unk._0x6100B3CEFD43452E = function (p0) {
    let $res = natives.clearDefaultPrimaryTask(p0);
};
mp.game2.task.unk._0x53DDC75BC3AC0A90 = function (vehicle) {
    let $res = natives.clearVehicleCrashTask(vehicle);
};
mp.game2.task.unk._0x9D252648778160DF = function (p0) {
    let $res = natives.getTaskRappelDownWallState(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.unk._0xFA83CA6776038F64 = function (x, y, z) {
    let $res = natives.removeCoverBlockingAreasAtPosition(x, y, z);
};
mp.game2.task.unk._0x1F351CF1C6475734 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    let $res = natives.removeSpecificCoverBlockingAreas(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};
mp.game2.task.unk._0x29682E2CCF21E9B5 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    let $res = natives.taskMoveNetworkAdvancedByNameWithInitParams(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
};
mp.game2.task.unk._0xAB13A5565480B6D9 = function (ped, p1) {
    let $res = natives.setExpectedCloneNextTaskMoveNetworkState(ped, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.task.unk._0x8423541E8B3A1589 = function (p0, p1, p2) {
    let $res = natives.setTaskMoveNetworkAnimSet(p0, p1, p2);
};
mp.game2.task.unk._0x8634CEF2522D987B = function (ped, p1, value) {
    let $res = natives.setTaskMoveNetworkSignalFloatLerpRate(ped, p1, value);
};
mp.game2.task.unk._0x0FFB3C758E8C07B9 = function (ped, p1) {
    let $res = natives.setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed(ped, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setCanBeLockedOn = function (canBeLockedOn, unk) {
    let $res = natives.setVehicleAllowHomingMissleLockonSynced(this.handle, canBeLockedOn | 0, unk | 0);
};
mp.Vehicle.prototype.setAllowNoPassengersLockon = function (toggle) {
    let $res = natives.setVehicleAllowNoPassengersLockon(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getHomingLockonState = function () {
    let $res = natives.getVehicleHomingLockonState(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.isModel = function (model) {
    let $res = natives.isVehicleModel(this.handle, model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setOnGroundProperly = function (p1) {
    let $res = natives.setVehicleOnGroundProperly(this.handle, p1 || 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setUseCutsceneWheelCompression = function (p1, p2, p3) {
    let $res = natives.setVehicleUseCutsceneWheelCompression(this.handle, p1 | 0, p2 | 0, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.isStuckOnRoof = function () {
    let $res = natives.isVehicleStuckOnRoof(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.addUpsidedownCheck = function () {
    let $res = natives.addVehicleUpsidedownCheck(this.handle);
};
mp.Vehicle.prototype.removeUpsidedownCheck = function () {
    let $res = natives.removeVehicleUpsidedownCheck(this.handle);
};
mp.Vehicle.prototype.isStopped = function () {
    let $res = natives.isVehicleStopped(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getNumberOfPassengers = function () {
    let $res = natives.getVehicleNumberOfPassengers(this.handle, false, false);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getMaxNumberOfPassengers = function () {
    let $res = natives.getVehicleMaxNumberOfPassengers(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModelNumberOfSeats = function () {
    let $res = natives.getVehicleModelNumberOfSeats(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.isSeatWarpOnly = function (seatIndex) {
    let $res = natives.isSeatWarpOnly(this.handle, seatIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isTurretSeat = function (seatIndex) {
    let $res = natives.isTurretSeat(this.handle, seatIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.doesAllowRappel = function () {
    let $res = natives.doesVehicleAllowRappel(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setDensityMultiplierThisFrame = function () {
    let $res = natives.setVehicleDensityMultiplierThisFrame(this.handle);
};
mp.Vehicle.prototype.setDoorsLocked = function (doorLockStatus) {
    let $res = natives.setVehicleDoorsLocked(this.handle, doorLockStatus);
};
mp.Vehicle.prototype.setIndividualDoorsLocked = function (doorId, doorLockStatus) {
    let $res = natives.setVehicleIndividualDoorsLocked(this.handle, doorId, doorLockStatus);
};
mp.Vehicle.prototype.setHasMutedSirens = function (toggle) {
    let $res = natives.setVehicleHasMutedSirens(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDoorsLockedForPlayer = function (player, toggle) {
    let $res = natives.setVehicleDoorsLockedForPlayer(this.handle, player, toggle | 0);
};
mp.Vehicle.prototype.getDoorsLockedForPlayer = function (player) {
    let $res = natives.getVehicleDoorsLockedForPlayer(this.handle, player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setDoorsLockedForAllPlayers = function (toggle) {
    let $res = natives.setVehicleDoorsLockedForAllPlayers(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDoorsLockedForNonScriptPlayers = function (toggle) {
    let $res = natives.setVehicleDoorsLockedForNonScriptPlayers(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDoorsLockedForTeam = function (team, toggle) {
    let $res = natives.setVehicleDoorsLockedForTeam(this.handle, team, toggle | 0);
};
mp.Vehicle.prototype.setDoorsLockedForUnk = function (toggle) {
    let $res = natives.setVehicleDoorsLockedForAllTeams(this.handle, toggle | 0);
};
mp.Vehicle.prototype.explode = function (isAudible, isInvisible) {
    let $res = natives.explodeVehicle(this.handle, isAudible | 0, isInvisible | 0);
};
mp.Vehicle.prototype.setOutOfControl = function (killDriver, explodeOnImpact) {
    let $res = natives.setVehicleOutOfControl(this.handle, killDriver | 0, explodeOnImpact | 0);
};
mp.Vehicle.prototype.setTimedExplosion = function (ped, toggle) {
    let $res = natives.setVehicleTimedExplosion(this.handle, ped, toggle | 0);
};
mp.Vehicle.prototype.addPhoneExplosiveDevice = function () {
    let $res = natives.addVehiclePhoneExplosiveDevice(this.handle);
};
mp.Vehicle.prototype.setTaxiLights = function (state) {
    let $res = natives.setTaxiLights(this.handle, state | 0);
};
mp.Vehicle.prototype.isTaxiLightOn = function () {
    let $res = natives.isTaxiLightOn(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setColours = function (colorPrimary, colorSecondary) {
    let $res = natives.setVehicleColours(this.handle, colorPrimary, colorSecondary);
};
mp.Vehicle.prototype.setFullbeam = function (toggle) {
    let $res = natives.setVehicleFullbeam(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setIsRacing = function (toggle) {
    let $res = natives.setVehicleIsRacing(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setCustomPrimaryColour = function (r, g, b) {
    let $res = natives.setVehicleCustomPrimaryColour(this.handle, r, g, b);
};
mp.Vehicle.prototype.getCustomPrimaryColour = function () {
    let $res = natives.getVehicleCustomPrimaryColour(this.handle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.Vehicle.prototype.clearCustomPrimaryColour = function () {
    let $res = natives.clearVehicleCustomPrimaryColour(this.handle);
};
mp.Vehicle.prototype.getIsPrimaryColourCustom = function () {
    let $res = natives.getIsVehiclePrimaryColourCustom(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setCustomSecondaryColour = function (r, g, b) {
    let $res = natives.setVehicleCustomSecondaryColour(this.handle, r, g, b);
};
mp.Vehicle.prototype.getCustomSecondaryColour = function () {
    let $res = natives.getVehicleCustomSecondaryColour(this.handle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.Vehicle.prototype.clearCustomSecondaryColour = function () {
    let $res = natives.clearVehicleCustomSecondaryColour(this.handle);
};
mp.Vehicle.prototype.getIsSecondaryColourCustom = function () {
    let $res = natives.getIsVehicleSecondaryColourCustom(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setEnveffScale = function (fade) {
    let $res = natives.setVehicleEnveffScale(this.handle, fade);
};
mp.Vehicle.prototype.getEnveffScale = function () {
    let $res = natives.getVehicleEnveffScale(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setCanRespray = function (state) {
    let $res = natives.setCanResprayVehicle(this.handle, state | 0);
};
mp.Vehicle.prototype.forceSubmarineSurfaceMode = function (toggle) {
    let $res = natives.forceSubmarineSurfaceMode(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setSubmarineCrushDepths = function (p1, depth1, depth2, depth3) {
    let $res = natives.setSubmarineCrushDepths(this.handle, p1 | 0, depth1, depth2, depth3);
};
mp.Vehicle.prototype.getSubmarineIsBelowFirstCrushDepth = function () {
    let $res = natives.getSubmarineIsUnderDesignDepth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getSubmarineCrushDepthWarningState = function () {
    let $res = natives.getSubmarineNumberOfAirLeaks(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.setBoatAnchor = function (toggle) {
    let $res = natives.setBoatAnchor(this.handle, toggle | 0);
};
mp.Vehicle.prototype.canAnchorBoatHere = function () {
    let $res = natives.canAnchorBoatHere(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.canAnchorBoatHere2 = function () {
    let $res = natives.canAnchorBoatHereIgnorePlayers(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.setBoatFrozenWhenAnchored = function (toggle) {
    let $res = natives.setBoatRemainsAnchoredWhilePlayerIsDriver(this.handle, toggle | 0);
};
mp.Blip.prototype.setBoatMovementResistance = function (value) {
    let $res = natives.setBoatLowLodAnchorDistance(this.handle, value);
};
mp.Blip.prototype.isBoatAnchoredAndFrozen = function () {
    let $res = natives.isBoatAnchored(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.setBoatSinksWhenWrecked = function (toggle) {
    let $res = natives.setBoatSinksWhenWrecked(this.handle, toggle | 0);
};
mp.Blip.prototype.setBoatIsSinking = function () {
    let $res = natives.setBoatWrecked(this.handle);
};
mp.Vehicle.prototype.setSiren = function (toggle) {
    let $res = natives.setVehicleSiren(this.handle, toggle | 0);
};
mp.Vehicle.prototype.isSirenOn = function () {
    let $res = natives.isVehicleSirenOn(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isSirenAudioOn = function () {
    let $res = natives.isVehicleSirenAudioOn(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setStrong = function (toggle) {
    let $res = natives.setVehicleStrong(this.handle, toggle | 0);
};
mp.Vehicle.prototype.removeStuckCheck = function () {
    let $res = natives.removeVehicleStuckCheck(this.handle);
};
mp.Vehicle.prototype.getColours = function () {
    let $res = natives.getVehicleColours(this.handle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.colorPrimary = $res[1];
    $resObj.colorSecondary = $res[2];
    return $resObj;
};
mp.Vehicle.prototype.isSeatFree = function (seatIndex, isTaskRunning) {
    let $res = natives.isVehicleSeatFree(this.handle, seatIndex, isTaskRunning | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getPedInSeat = function (seatIndex, p2) {
    let $res = natives.getPedInVehicleSeat(this.handle, seatIndex, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedInSeat = function (seatIndex, p2) {
    let $res = natives.getPedInVehicleSeat(this.handle, seatIndex, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getLastPedInSeat = function (seatIndex) {
    let $res = natives.getLastPedInVehicleSeat(this.handle, seatIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getLightsState = function () {
    let $res = natives.getVehicleLightsState(this.handle, false, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.lightsOn = $res[1] == 1;
    $resObj.highbeamsOn = $res[2] == 1;
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.Vehicle.prototype.isTyreBurst = function (wheelID, completely) {
    let $res = natives.isVehicleTyreBurst(this.handle, wheelID, completely | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setForwardSpeed = function (speed) {
    let $res = natives.setVehicleForwardSpeed(this.handle, speed);
};
mp.Vehicle.prototype.bringToHalt = function (distance, duration, unknown) {
    let $res = natives.bringVehicleToHalt(this.handle, distance, duration, unknown | 0);
};
mp.Vehicle.prototype.stopBringToHalt = function () {
    let $res = natives.stopBringingVehicleToHalt(this.handle);
};
mp.Vehicle.prototype.isBeingHalted = function () {
    let $res = natives.isVehicleBeingBroughtToHalt(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setForkliftForkHeight = function (height) {
    let $res = natives.setForkliftForkHeight(this.handle, height);
};
mp.Player.prototype.isEntityAttachedToHandlerFrame = function (entity) {
    let $res = natives.isEntityAttachedToHandlerFrame(this.handle, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isEntityAttachedToHandlerFrame = function (entity) {
    let $res = natives.isEntityAttachedToHandlerFrame(this.handle, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.isEntityAttachedToHandlerFrame = function (entity) {
    let $res = natives.isEntityAttachedToHandlerFrame(this.handle, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isEntityAttachedToHandlerFrame = function (entity) {
    let $res = natives.isEntityAttachedToHandlerFrame(this.handle, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAnyEntityAttachedToHandlerFrame = function () {
    let $res = natives.isAnyEntityAttachedToHandlerFrame(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.findCarryingThisEntity = function () {
    let $res = natives.findHandlerVehicleContainerIsAttachedTo(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.findCarryingThisEntity = function () {
    let $res = natives.findHandlerVehicleContainerIsAttachedTo(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.findCarryingThisEntity = function () {
    let $res = natives.findHandlerVehicleContainerIsAttachedTo(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.findCarryingThisEntity = function () {
    let $res = natives.findHandlerVehicleContainerIsAttachedTo(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.isHandlerFrameAboveContainer = function (entity) {
    let $res = natives.isHandlerFrameLinedUpWithContainer(this.handle, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.detachContainerFromHandlerFrame = function () {
    let $res = natives.detachContainerFromHandlerFrame(this.handle);
};
mp.Blip.prototype.setBoatDisableAvoidance = function (p1) {
    let $res = natives.setBoatDisableAvoidance(this.handle, p1 | 0);
};
mp.Vehicle.prototype.isHeliLandingAreaBlocked = function () {
    let $res = natives.isHeliLandingAreaBlocked(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setHeliTurbulenceScalar = function (p1) {
    let $res = natives.setHeliTurbulenceScalar(this.handle, p1);
};
mp.Vehicle.prototype.setCarBootOpen = function () {
    let $res = natives.setCarBootOpen(this.handle);
};
mp.Vehicle.prototype.setTyreBurst = function (index, onRim, p3) {
    let $res = natives.setVehicleTyreBurst(this.handle, index, onRim | 0, p3);
};
mp.Vehicle.prototype.setDoorsShut = function (closeInstantly) {
    let $res = natives.setVehicleDoorsShut(this.handle, closeInstantly | 0);
};
mp.Vehicle.prototype.setTyresCanBurst = function (toggle) {
    let $res = natives.setVehicleTyresCanBurst(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getTyresCanBurst = function () {
    let $res = natives.getVehicleTyresCanBurst(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setWheelsCanBreak = function (enabled) {
    let $res = natives.setVehicleWheelsCanBreak(this.handle, enabled | 0);
};
mp.Vehicle.prototype.setDoorOpen = function (doorId, loose, openInstantly) {
    let $res = natives.setVehicleDoorOpen(this.handle, doorId, loose | 0, openInstantly | 0);
};
mp.Vehicle.prototype.removeWindow = function (windowIndex) {
    let $res = natives.removeVehicleWindow(this.handle, windowIndex);
};
mp.Vehicle.prototype.rollDownWindows = function () {
    let $res = natives.rollDownWindows(this.handle);
};
mp.Vehicle.prototype.rollDownWindow = function (windowIndex) {
    let $res = natives.rollDownWindow(this.handle, windowIndex);
};
mp.Vehicle.prototype.rollUpWindow = function (windowIndex) {
    let $res = natives.rollUpWindow(this.handle, windowIndex);
};
mp.Vehicle.prototype.smashWindow = function (index) {
    let $res = natives.smashVehicleWindow(this.handle, index);
};
mp.Vehicle.prototype.fixWindow = function (index) {
    let $res = natives.fixVehicleWindow(this.handle, index);
};
mp.Vehicle.prototype.popOutWindscreen = function () {
    let $res = natives.popOutVehicleWindscreen(this.handle);
};
mp.Vehicle.prototype.ejectJb700Roof = function (x, y, z) {
    let $res = natives.popOffVehicleRoofWithImpulse(this.handle, x, y, z);
};
mp.Vehicle.prototype.setLights = function (state) {
    let $res = natives.setVehicleLights(this.handle, state);
};
mp.Vehicle.prototype.setUsePlayerLightSettings = function (toggle) {
    let $res = natives.setVehicleUsePlayerLightSettings(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setLightsMode = function (p1) {
    let $res = natives.setVehicleHeadlightShadows(this.handle, p1);
};
mp.Vehicle.prototype.setAlarm = function (state) {
    let $res = natives.setVehicleAlarm(this.handle, state | 0);
};
mp.Vehicle.prototype.startAlarm = function () {
    let $res = natives.startVehicleAlarm(this.handle);
};
mp.Vehicle.prototype.isAlarmActivated = function () {
    let $res = natives.isVehicleAlarmActivated(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setInteriorlight = function (toggle) {
    let $res = natives.setVehicleInteriorlight(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setLightMultiplier = function (multiplier) {
    let $res = natives.setVehicleLightMultiplier(this.handle, multiplier);
};
mp.Vehicle.prototype.attachToTrailer = function (trailer, radius) {
    let $res = natives.attachVehicleToTrailer(this.handle, trailer, radius);
};
mp.Vehicle.prototype.attachOnToTrailer = function (trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions) {
    let $res = natives.attachVehicleOnToTrailer(this.handle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions);
};
mp.Vehicle.prototype.stabiliseEntityAttachedToHeli = function (entity, p2) {
    let $res = natives.stabiliseEntityAttachedToHeli(this.handle, entity, p2);
};
mp.Vehicle.prototype.detachFromTrailer = function () {
    let $res = natives.detachVehicleFromTrailer(this.handle);
};
mp.Vehicle.prototype.isAttachedToTrailer = function () {
    let $res = natives.isVehicleAttachedToTrailer(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setTrailerInverseMassScale = function (p1) {
    let $res = natives.setTrailerInverseMassScale(this.handle, p1);
};
mp.Vehicle.prototype.setTrailerLegsRaised = function () {
    let $res = natives.setTrailerLegsRaised(this.handle);
};
mp.Vehicle.prototype.setTyreFixed = function (tyreIndex) {
    let $res = natives.setVehicleTyreFixed(this.handle, tyreIndex);
};
mp.Vehicle.prototype.setNumberPlateText = function (plateText) {
    let $res = natives.setVehicleNumberPlateText(this.handle, plateText);
};
mp.Vehicle.prototype.getNumberPlateText = function () {
    let $res = natives.getVehicleNumberPlateText(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setNumberPlateTextIndex = function (plateIndex) {
    let $res = natives.setVehicleNumberPlateTextIndex(this.handle, plateIndex);
};
mp.Vehicle.prototype.getNumberPlateTextIndex = function () {
    let $res = natives.getVehicleNumberPlateTextIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setTrainSpeed = function (speed) {
    let $res = natives.setTrainSpeed(this.handle, speed);
};
mp.Vehicle.prototype.setTrainCruiseSpeed = function (speed) {
    let $res = natives.setTrainCruiseSpeed(this.handle, speed);
};
mp.Vehicle.prototype.doesHaveStuckVehicleCheck = function () {
    let $res = natives.doesVehicleHaveStuckVehicleCheck(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getRecordingId = function (script) {
    let $res = natives.getVehicleRecordingId(this.handle, script);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.hasRecordingBeenLoaded = function (script) {
    let $res = natives.hasVehicleRecordingBeenLoaded(this.handle, script);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getPositionInRecording = function () {
    let $res = natives.getPositionInRecording(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getTimePositionInRecording = function () {
    let $res = natives.getTimePositionInRecording(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.startPlaybackRecorded = function (recording, script, p3) {
    let $res = natives.startPlaybackRecordedVehicle(this.handle, recording, script, p3 | 0);
};
mp.Vehicle.prototype.startPlaybackRecordedWithFlags = function (recording, script, flags, time, drivingStyle) {
    let $res = natives.startPlaybackRecordedVehicleWithFlags(this.handle, recording, script, flags, time, drivingStyle);
};
mp.Vehicle.prototype.forcePlaybackRecordedUpdate = function (p1) {
    let $res = natives.forcePlaybackRecordedVehicleUpdate(this.handle, p1 | 0);
};
mp.Vehicle.prototype.stopPlaybackRecorded = function () {
    let $res = natives.stopPlaybackRecordedVehicle(this.handle);
};
mp.Vehicle.prototype.pausePlaybackRecorded = function () {
    let $res = natives.pausePlaybackRecordedVehicle(this.handle);
};
mp.Vehicle.prototype.unpausePlaybackRecorded = function () {
    let $res = natives.unpausePlaybackRecordedVehicle(this.handle);
};
mp.Vehicle.prototype.isPlaybackGoingOnFor = function () {
    let $res = natives.isPlaybackGoingOnForVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isPlaybackUsingAiGoingOnFor = function () {
    let $res = natives.isPlaybackUsingAiGoingOnForVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getCurrentPlaybackFor = function () {
    let $res = natives.getCurrentPlaybackForVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.skipToEndAndStopPlaybackRecorded = function () {
    let $res = natives.skipToEndAndStopPlaybackRecordedVehicle(this.handle);
};
mp.Vehicle.prototype.setPlaybackSpeed = function (speed) {
    let $res = natives.setPlaybackSpeed(this.handle, speed);
};
mp.Vehicle.prototype.startPlaybackRecordedUsingAi = function (recording, script, speed, drivingStyle) {
    let $res = natives.startPlaybackRecordedVehicleUsingAi(this.handle, recording, script, speed, drivingStyle);
};
mp.Vehicle.prototype.skipTimeInPlaybackRecorded = function (time) {
    let $res = natives.skipTimeInPlaybackRecordedVehicle(this.handle, time);
};
mp.Vehicle.prototype.setPlaybackToUseAi = function (drivingStyle) {
    let $res = natives.setPlaybackToUseAi(this.handle, drivingStyle);
};
mp.Vehicle.prototype.setPlaybackToUseAiTryToRevertBackLater = function (time, drivingStyle, p3) {
    let $res = natives.setPlaybackToUseAiTryToRevertBackLater(this.handle, time, drivingStyle, p3 | 0);
};
mp.Vehicle.prototype.explodeInCutscene = function (p1) {
    let $res = natives.explodeVehicleInCutscene(this.handle, p1 | 0);
};
mp.Vehicle.prototype.setModelIsSuppressed = function (suppressed) {
    let $res = natives.setVehicleModelIsSuppressed(this.handle, suppressed | 0);
};
mp.Vehicle.prototype.getTrainCarriage = function (trailerNumber) {
    let $res = natives.getTrainCarriage(this.handle, trailerNumber);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.isMissionTrain = function () {
    let $res = natives.isMissionTrain(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setMissionTrainCoords = function (x, y, z) {
    let $res = natives.setMissionTrainCoords(this.handle, x, y, z);
};
mp.Vehicle.prototype.setHeliBladesFullSpeed = function () {
    let $res = natives.setHeliBladesFullSpeed(this.handle);
};
mp.Vehicle.prototype.setHeliBladesSpeed = function (speed) {
    let $res = natives.setHeliBladesSpeed(this.handle, speed);
};
mp.Vehicle.prototype.setCanBeTargetted = function (state) {
    let $res = natives.setVehicleCanBeTargetted(this.handle, state | 0);
};
mp.Vehicle.prototype.setCanBeVisiblyDamaged = function (state) {
    let $res = natives.setVehicleCanBeVisiblyDamaged(this.handle, state | 0);
};
mp.Vehicle.prototype.setHasUnbreakableLights = function (p1) {
    let $res = natives.setVehicleHasUnbreakableLights(this.handle, p1 | 0);
};
mp.Vehicle.prototype.getDirtLevel = function () {
    let $res = natives.getVehicleDirtLevel(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setDirtLevel = function (dirtLevel) {
    let $res = natives.setVehicleDirtLevel(this.handle, dirtLevel);
};
mp.Vehicle.prototype.isDamaged = function () {
    let $res = natives.getDoesVehicleHaveDamageDecals(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isDoorFullyOpen = function (doorId) {
    let $res = natives.isVehicleDoorFullyOpen(this.handle, doorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setEngineOn = function (value, instantly, disableAutoStart) {
    let $res = natives.setVehicleEngineOn(this.handle, value | 0, instantly | 0, disableAutoStart | 0);
};
mp.Vehicle.prototype.setUndriveable = function (toggle) {
    let $res = natives.setVehicleUndriveable(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setProvidesCover = function (toggle) {
    let $res = natives.setVehicleProvidesCover(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDoorControl = function (doorId, speed, angle) {
    let $res = natives.setVehicleDoorControl(this.handle, doorId, speed, angle);
};
mp.Vehicle.prototype.setDoorLatched = function (doorId, p2, p3, p4) {
    let $res = natives.setVehicleDoorLatched(this.handle, doorId, p2 | 0, p3 | 0, p4 | 0);
};
mp.Vehicle.prototype.getDoorAngleRatio = function (doorId) {
    let $res = natives.getVehicleDoorAngleRatio(this.handle, doorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getPedUsingDoor = function (doord) {
    let $res = natives.getPedUsingVehicleDoor(this.handle, doord);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedUsingDoor = function (doord) {
    let $res = natives.getPedUsingVehicleDoor(this.handle, doord);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setDoorShut = function (doorId, closeInstantly) {
    let $res = natives.setVehicleDoorShut(this.handle, doorId, closeInstantly | 0);
};
mp.Vehicle.prototype.setDoorBroken = function (doorId, deleteDoor) {
    let $res = natives.setVehicleDoorBroken(this.handle, doorId, deleteDoor | 0);
};
mp.Vehicle.prototype.setCanBreak = function (toggle) {
    let $res = natives.setVehicleCanBreak(this.handle, toggle | 0);
};
mp.Vehicle.prototype.doesHaveRoof = function () {
    let $res = natives.doesVehicleHaveRoof(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Blip.prototype.isBig = function () {
    let $res = natives.isBigVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getNumberOfColours = function () {
    let $res = natives.getNumberOfVehicleColours(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setColourCombination = function (colorCombination) {
    let $res = natives.setVehicleColourCombination(this.handle, colorCombination);
};
mp.Vehicle.prototype.getColourCombination = function () {
    let $res = natives.getVehicleColourCombination(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setXenonLightsColor = function (colorIndex) {
    let $res = natives.setVehicleXenonLightColorIndex(this.handle, colorIndex);
};
mp.Vehicle.prototype.getXenonLightsColor = function () {
    let $res = natives.getVehicleXenonLightColorIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setIsConsideredByPlayer = function (toggle) {
    let $res = natives.setVehicleIsConsideredByPlayer(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getDoorLockStatus = function () {
    let $res = natives.getVehicleDoorLockStatus(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getDoorDestroyType = function (doorId) {
    let $res = natives.getVehicleIndividualDoorLockStatus(this.handle, doorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.isDoorDamaged = function (doorID) {
    let $res = natives.isVehicleDoorDamaged(this.handle, doorID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setDoorCanBreak = function (doorId, isBreakable) {
    let $res = natives.setDoorAllowedToBeBrokenOff(this.handle, doorId, isBreakable | 0);
};
mp.Vehicle.prototype.isBumperBouncing = function (frontBumper) {
    let $res = natives.isVehicleBumperBouncing(this.handle, frontBumper | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isBumperBrokenOff = function (front) {
    let $res = natives.isVehicleBumperBrokenOff(this.handle, front | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isOnAllWheels = function () {
    let $res = natives.isVehicleOnAllWheels(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getModelMonetaryValue = function () {
    let $res = natives.getVehicleModelValue(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getLayoutHash = function () {
    let $res = natives.getVehicleLayoutHash(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setRenderTrainAsDerailed = function (toggle) {
    let $res = natives.setRenderTrainAsDerailed(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setExtraColours = function (pearlescentColor, wheelColor) {
    let $res = natives.setVehicleExtraColours(this.handle, pearlescentColor, wheelColor);
};
mp.Vehicle.prototype.getExtraColours = function () {
    let $res = natives.getVehicleExtraColours(this.handle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.pearlescentColor = $res[1];
    $resObj.wheelColor = $res[2];
    return $resObj;
};
mp.Vehicle.prototype.setInteriorColor = function (color) {
    let $res = natives.setVehicleExtraColour5(this.handle, color);
};
mp.Vehicle.prototype.getInteriorColor = function () {
    let $res = natives.getVehicleExtraColour5(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.color = $res[1];
    return $resObj.color;
};
mp.Vehicle.prototype.setDashboardColor = function (color) {
    let $res = natives.setVehicleExtraColour6(this.handle, color);
};
mp.Vehicle.prototype.getDashboardColor = function () {
    let $res = natives.getVehicleExtraColour6(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.color = $res[1];
    return $resObj.color;
};
mp.Vehicle.prototype.setFixed = function () {
    let $res = natives.setVehicleFixed(this.handle);
};
mp.Vehicle.prototype.setDeformationFixed = function () {
    let $res = natives.setVehicleDeformationFixed(this.handle);
};
mp.Vehicle.prototype.setCanEngineOperateOnFire = function (toggle) {
    let $res = natives.setVehicleCanEngineMissfire(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setCanLeakOil = function (toggle) {
    let $res = natives.setVehicleCanLeakOil(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setCanLeakPetrol = function (toggle) {
    let $res = natives.setVehicleCanLeakPetrol(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDisablePetrolTankFires = function (toggle) {
    let $res = natives.setDisableVehiclePetrolTankFires(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDisablePetrolTankDamage = function (toggle) {
    let $res = natives.setDisableVehiclePetrolTankDamage(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDisableEngineFires = function (toggle) {
    let $res = natives.setDisableVehicleEngineFires(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDisablePretendOccupants = function (toggle) {
    let $res = natives.setDisablePretendOccupants(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setSteerBias = function (value) {
    let $res = natives.setVehicleSteerBias(this.handle, value);
};
mp.Vehicle.prototype.isExtraTurnedOn = function (extraId) {
    let $res = natives.isVehicleExtraTurnedOn(this.handle, extraId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setExtra = function (extraId, disable) {
    let $res = natives.setVehicleExtra(this.handle, extraId, disable | 0);
};
mp.Vehicle.prototype.doesExtraExist = function (extraId) {
    let $res = natives.doesExtraExist(this.handle, extraId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.doesTyreExist = function (tyreIndex) {
    let $res = natives.isExtraBrokenOff(this.handle, tyreIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setConvertibleRoof = function (p1) {
    let $res = natives.setConvertibleRoof(this.handle, p1 | 0);
};
mp.Vehicle.prototype.lowerConvertibleRoof = function (instantlyLower) {
    let $res = natives.lowerConvertibleRoof(this.handle, instantlyLower | 0);
};
mp.Vehicle.prototype.raiseConvertibleRoof = function (instantlyRaise) {
    let $res = natives.raiseConvertibleRoof(this.handle, instantlyRaise | 0);
};
mp.Vehicle.prototype.getConvertibleRoofState = function () {
    let $res = natives.getConvertibleRoofState(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.isAConvertible = function (p1) {
    let $res = natives.isVehicleAConvertible(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.transformToSubmarine = function (noAnimation) {
    let $res = natives.transformToSubmarine(this.handle, noAnimation | 0);
};
mp.Vehicle.prototype.transformSubmarineTo = function (noAnimation) {
    let $res = natives.transformToCar(this.handle, noAnimation | 0);
};
mp.Vehicle.prototype.getIsSubmarineTransformed = function () {
    let $res = natives.isVehicleInSubmarineMode(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isStoppedAtTrafficLights = function () {
    let $res = natives.isVehicleStoppedAtTrafficLights(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setDamage = function (xOffset, yOffset, zOffset, damage, radius, focusOnModel) {
    let $res = natives.setVehicleDamage(this.handle, xOffset, yOffset, zOffset, damage, radius, focusOnModel | 0);
};
mp.Vehicle.prototype.getEngineHealth = function () {
    let $res = natives.getVehicleEngineHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setEngineHealth = function (health) {
    let $res = natives.setVehicleEngineHealth(this.handle, health);
};
mp.Vehicle.prototype.setPlaneEngineHealth = function (health) {
    let $res = natives.setPlaneEngineHealth(this.handle, health);
};
mp.Vehicle.prototype.getPetrolTankHealth = function () {
    let $res = natives.getVehiclePetrolTankHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setPetrolTankHealth = function (health) {
    let $res = natives.setVehiclePetrolTankHealth(this.handle, health);
};
mp.Vehicle.prototype.isStuckTimerUp = function (p1, p2) {
    let $res = natives.isVehicleStuckTimerUp(this.handle, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.resetStuckTimer = function (nullAttributes) {
    let $res = natives.resetVehicleStuckTimer(this.handle, nullAttributes | 0);
};
mp.Vehicle.prototype.isDriveable = function (isOnFireCheck) {
    let $res = natives.isVehicleDriveable(this.handle, isOnFireCheck | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setHasBeenOwnedByPlayer = function (owned) {
    let $res = natives.setVehicleHasBeenOwnedByPlayer(this.handle, owned | 0);
};
mp.Vehicle.prototype.setNeedsToBeHotwired = function (toggle) {
    let $res = natives.setVehicleNeedsToBeHotwired(this.handle, toggle | 0);
};
mp.Vehicle.prototype.startHorn = function (duration, mode, forever) {
    let $res = natives.startVehicleHorn(this.handle, duration, mode, forever | 0);
};
mp.Vehicle.prototype.setSilent = function (toggle) {
    let $res = natives.setVehicleInCarModShop(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setHasStrongAxles = function (toggle) {
    let $res = natives.setVehicleHasStrongAxles(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getDeformationAtPos = function (offsetX, offsetY, offsetZ) {
    let $res = natives.getVehicleDeformationAtPos(this.handle, offsetX, offsetY, offsetZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.setLivery = function (livery) {
    let $res = natives.setVehicleLivery(this.handle, livery);
};
mp.Vehicle.prototype.getLivery = function () {
    let $res = natives.getVehicleLivery(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getLiveryCount = function () {
    let $res = natives.getVehicleLiveryCount(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setRoofLivery = function (livery) {
    let $res = natives.setVehicleLivery2(this.handle, livery);
};
mp.Vehicle.prototype.getRoofLivery = function () {
    let $res = natives.getVehicleLivery2(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getRoofLiveryCount = function () {
    let $res = natives.getVehicleLivery2Count(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.isWindowIntact = function (windowIndex) {
    let $res = natives.isVehicleWindowIntact(this.handle, windowIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.areAllWindowsIntact = function () {
    let $res = natives.areAllVehicleWindowsIntact(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.areAnySeatsFree = function () {
    let $res = natives.areAnyVehicleSeatsFree(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.resetWheels = function (toggle) {
    let $res = natives.resetVehicleWheels(this.handle, toggle | 0);
};
mp.Vehicle.prototype.isHeliPartBroken = function (p1, p2, p3) {
    let $res = natives.isHeliPartBroken(this.handle, p1 | 0, p2 | 0, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getHeliMainRotorHealth = function () {
    let $res = natives.getHeliMainRotorHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getHeliTailRotorHealth = function () {
    let $res = natives.getHeliTailRotorHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getHeliTailBoomHealth = function () {
    let $res = natives.getHeliTailBoomHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setHeliMainRotorHealth = function (health) {
    let $res = natives.setHeliMainRotorHealth(this.handle, health);
};
mp.Vehicle.prototype.setHeliTailRotorHealth = function (health) {
    let $res = natives.setHeliTailRotorHealth(this.handle, health);
};
mp.Vehicle.prototype.setHeliTailExplodeThrowDashboard = function (p1) {
    let $res = natives.setHeliTailBoomCanBreakOff(this.handle, p1 | 0);
};
mp.Vehicle.prototype.setNameDebug = function (name) {
    let $res = natives.setVehicleNameDebug(this.handle, name);
};
mp.Vehicle.prototype.setExplodesOnHighExplosionDamage = function (toggle) {
    let $res = natives.setVehicleExplodesOnHighExplosionDamage(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDisableTowing = function (toggle) {
    let $res = natives.setVehicleDisableTowing(this.handle, toggle | 0);
};
mp.Vehicle.prototype.doesHaveLandingGear = function () {
    let $res = natives.getVehicleHasLandingGear(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.controlLandingGear = function (state) {
    let $res = natives.controlLandingGear(this.handle, state);
};
mp.Vehicle.prototype.getLandingGearState = function () {
    let $res = natives.getLandingGearState(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.requestHighDetailModel = function () {
    let $res = natives.requestVehicleHighDetailModel(this.handle);
};
mp.Vehicle.prototype.removeHighDetailModel = function () {
    let $res = natives.removeVehicleHighDetailModel(this.handle);
};
mp.Vehicle.prototype.isHighDetail = function () {
    let $res = natives.isVehicleHighDetail(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasAssetLoaded = function () {
    let $res = natives.hasVehicleAssetLoaded(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setTowTruckArmPosition = function (position) {
    let $res = natives.setVehicleTowTruckArmPosition(this.handle, position);
};
mp.Vehicle.prototype.attachToTowTruck = function (vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ) {
    let $res = natives.attachVehicleToTowTruck(this.handle, vehicle, rear | 0, hookOffsetX, hookOffsetY, hookOffsetZ);
};
mp.Vehicle.prototype.detachFromTowTruck = function (vehicle) {
    let $res = natives.detachVehicleFromTowTruck(this.handle, vehicle);
};
mp.Vehicle.prototype.detachFromAnyTowTruck = function () {
    let $res = natives.detachVehicleFromAnyTowTruck(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isAttachedToTowTruck = function (vehicle) {
    let $res = natives.isVehicleAttachedToTowTruck(this.handle, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getEntityAttachedToTowTruck = function () {
    let $res = natives.getEntityAttachedToTowTruck(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getEntityAttachedToTowTruck = function () {
    let $res = natives.getEntityAttachedToTowTruck(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getEntityAttachedToTowTruck = function () {
    let $res = natives.getEntityAttachedToTowTruck(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getEntityAttachedToTowTruck = function () {
    let $res = natives.getEntityAttachedToTowTruck(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setAutomaticallyAttaches = function (p1, p2) {
    let $res = natives.setVehicleAutomaticallyAttaches(this.handle, p1 | 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setBulldozerArmPosition = function (position, p2) {
    let $res = natives.setVehicleBulldozerArmPosition(this.handle, position, p2 | 0);
};
mp.Vehicle.prototype.setTankTurretPosition = function (position, p2) {
    let $res = natives.setVehicleTankTurretPosition(this.handle, position, p2 | 0);
};
mp.Vehicle.prototype.setTurretSpeedThisFrame = function (speed) {
    let $res = natives.setVehicleTurretSpeedThisFrame(this.handle, speed);
};
mp.Vehicle.prototype.disableTurretMovementThisFrame = function () {
    let $res = natives.disableVehicleTurretMovementThisFrame(this.handle);
};
mp.Vehicle.prototype.setFlightNozzlePosition = function (angleRatio) {
    let $res = natives.setVehicleFlightNozzlePosition(this.handle, angleRatio);
};
mp.Vehicle.prototype.setFlightNozzlePositionImmediate = function (angle) {
    let $res = natives.setVehicleFlightNozzlePositionImmediate(this.handle, angle);
};
mp.Vehicle.prototype.getFlightNozzlePosition = function () {
    let $res = natives.getVehicleFlightNozzlePosition(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setDisableFlightNozzlePosition = function (toggle) {
    let $res = natives.setDisableVerticalFlightModeTransition(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setBurnout = function (toggle) {
    let $res = natives.setVehicleBurnout(this.handle, toggle | 0);
};
mp.Vehicle.prototype.isInBurnout = function () {
    let $res = natives.isVehicleInBurnout(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setReduceGrip = function (toggle) {
    let $res = natives.setVehicleReduceGrip(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setReduceTraction = function (val) {
    let $res = natives.setVehicleReduceGripLevel(this.handle, val);
};
mp.Vehicle.prototype.setIndicatorLights = function (turnSignal, toggle) {
    let $res = natives.setVehicleIndicatorLights(this.handle, turnSignal, toggle | 0);
};
mp.Vehicle.prototype.setBrakeLights = function (toggle) {
    let $res = natives.setVehicleBrakeLights(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setHandbrake = function (toggle) {
    let $res = natives.setVehicleHandbrake(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setBrake = function (toggle) {
    let $res = natives.setVehicleBrake(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getTrailerVehicle = function () {
    let $res = natives.getVehicleTrailerVehicle(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.trailer = $res[1];
    return $res[0] == 1 ? $resObj.trailer : undefined;
};
mp.Vehicle.prototype.setUsesLargeRearRamp = function (toggle) {
    let $res = natives.setVehicleUsesLargeRearRamp(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setRudderBroken = function (toggle) {
    let $res = natives.setVehicleRudderBroken(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setConvertibleRoofLatchState = function (state) {
    let $res = natives.setConvertibleRoofLatchState(this.handle, state | 0);
};
mp.Vehicle.prototype.getEstimatedMaxSpeed = function () {
    let $res = natives.getVehicleEstimatedMaxSpeed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getMaxBraking = function () {
    let $res = natives.getVehicleMaxBraking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getMaxTraction = function () {
    let $res = natives.getVehicleMaxTraction(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getAcceleration = function () {
    let $res = natives.getVehicleAcceleration(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModelEstimatedMaxSpeed = function () {
    let $res = natives.getVehicleModelEstimatedMaxSpeed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModelMaxBraking = function () {
    let $res = natives.getVehicleModelMaxBraking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModelMaxBrakingMaxMods = function () {
    let $res = natives.getVehicleModelMaxBrakingMaxMods(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModelMaxTraction = function () {
    let $res = natives.getVehicleModelMaxTraction(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModelAcceleration = function () {
    let $res = natives.getVehicleModelAcceleration(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModelEstimatedAgility = function () {
    let $res = natives.getVehicleModelAccelerationMaxMods(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModelMaxKnots = function () {
    let $res = natives.getFlyingVehicleModelAgility(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModelMoveResistance = function () {
    let $res = natives.getBoatVehicleModelAgility(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getClassEstimatedMaxSpeed = function () {
    let $res = natives.getVehicleClassEstimatedMaxSpeed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getClassMaxTraction = function () {
    let $res = natives.getVehicleClassMaxTraction(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getClassMaxAgility = function () {
    let $res = natives.getVehicleClassMaxAgility(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getClassMaxAcceleration = function () {
    let $res = natives.getVehicleClassMaxAcceleration(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getClassMaxBraking = function () {
    let $res = natives.getVehicleClassMaxBraking(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.openBombBayDoors = function () {
    let $res = natives.openBombBayDoors(this.handle);
};
mp.Vehicle.prototype.closeBombBayDoors = function () {
    let $res = natives.closeBombBayDoors(this.handle);
};
mp.Vehicle.prototype.areBombBayDoorsOpen = function () {
    let $res = natives.getAreBombBayDoorsOpen(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isSearchlightOn = function () {
    let $res = natives.isVehicleSearchlightOn(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setSearchlight = function (toggle, canBeUsedByAI) {
    let $res = natives.setVehicleSearchlight(this.handle, toggle | 0, canBeUsedByAI | 0);
};
mp.Vehicle.prototype.doesHaveSearchlight = function () {
    let $res = natives.doesVehicleHaveSearchlight(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isSeatAccessible = function (vehicle, seatIndex, side, onEnter) {
    let $res = natives.isEntryPointForSeatClear(this.handle, vehicle, seatIndex, side | 0, onEnter | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getEntryPositionOfDoor = function (doorId) {
    let $res = natives.getEntryPointPosition(this.handle, doorId);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.canShuffleSeat = function (seatIndex) {
    let $res = natives.canShuffleSeat(this.handle, seatIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getNumModKits = function () {
    let $res = natives.getNumModKits(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setModKit = function (modKit) {
    let $res = natives.setVehicleModKit(this.handle, modKit);
};
mp.Vehicle.prototype.getModKit = function () {
    let $res = natives.getVehicleModKit(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModKitType = function () {
    let $res = natives.getVehicleModKitType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setModColor1 = function (paintType, color, pearlescentColor) {
    let $res = natives.setVehicleModColor1(this.handle, paintType, color, pearlescentColor);
};
mp.Vehicle.prototype.setModColor2 = function (paintType, color) {
    let $res = natives.setVehicleModColor2(this.handle, paintType, color);
};
mp.Vehicle.prototype.getModColor1 = function () {
    let $res = natives.getVehicleModColor1(this.handle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.paintType = $res[1];
    $resObj.color = $res[2];
    $resObj.pearlescentColor = $res[3];
    return $resObj;
};
mp.Vehicle.prototype.getModColor2 = function () {
    let $res = natives.getVehicleModColor2(this.handle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.paintType = $res[1];
    $resObj.color = $res[2];
    return $resObj;
};
mp.Vehicle.prototype.getModColor1Name = function (p1) {
    let $res = natives.getVehicleModColor1Name(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModColor2Name = function () {
    let $res = natives.getVehicleModColor2Name(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.haveModsStreamedIn = function () {
    let $res = natives.haveVehicleModsStreamedIn(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getModVariation = function (modType) {
    let $res = natives.getVehicleModVariation(this.handle, modType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getNumMods = function (modType) {
    let $res = natives.getNumVehicleMods(this.handle, modType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.removeMod = function (modType) {
    let $res = natives.removeVehicleMod(this.handle, modType);
};
mp.Vehicle.prototype.toggleMod = function (modType, toggle) {
    let $res = natives.toggleVehicleMod(this.handle, modType, toggle | 0);
};
mp.Vehicle.prototype.isToggleModOn = function (modType) {
    let $res = natives.isToggleModOn(this.handle, modType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getModTextLabel = function (modType, modValue) {
    let $res = natives.getModTextLabel(this.handle, modType, modValue);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModSlotName = function (modType) {
    let $res = natives.getModSlotName(this.handle, modType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getLiveryName = function (liveryIndex) {
    let $res = natives.getLiveryName(this.handle, liveryIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModModifierValue = function (modType, modIndex) {
    let $res = natives.getVehicleModModifierValue(this.handle, modType, modIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getModIdentifierHash = function (modType, modIndex) {
    let $res = natives.getVehicleModIdentifierHash(this.handle, modType, modIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.releasePreloadMods = function () {
    let $res = natives.releasePreloadMods(this.handle);
};
mp.Vehicle.prototype.setTyreSmokeColor = function (r, g, b) {
    let $res = natives.setVehicleTyreSmokeColor(this.handle, r, g, b);
};
mp.Vehicle.prototype.getTyreSmokeColor = function () {
    let $res = natives.getVehicleTyreSmokeColor(this.handle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.Vehicle.prototype.getColor = function () {
    let $res = natives.getVehicleColor(this.handle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.Vehicle.prototype.getCauseOfDestruction = function () {
    let $res = natives.getVehicleCauseOfDestruction(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.overrideOverheatHealth = function (health) {
    let $res = natives.overridePlaneDamageThrehsold(this.handle, health);
};
mp.Vehicle.prototype.getIsLeftHeadlightDamaged = function () {
    let $res = natives.getIsLeftVehicleHeadlightDamaged(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getIsRightHeadlightDamaged = function () {
    let $res = natives.getIsRightVehicleHeadlightDamaged(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isEngineOnFire = function () {
    let $res = natives.getBothVehicleHeadlightsDamaged(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.modifyTopSpeed = function (value) {
    let $res = natives.modifyVehicleTopSpeed(this.handle, value);
};
mp.Vehicle.prototype.setMaxSpeed = function (speed) {
    let $res = natives.setVehicleMaxSpeed(this.handle, speed);
};
mp.Vehicle.prototype.isAnyPedRappellingFromHeli = function () {
    let $res = natives.isAnyPedRappellingFromHeli(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setCheatPowerIncrease = function (value) {
    let $res = natives.setVehicleCheatPowerIncrease(this.handle, value);
};
mp.Vehicle.prototype.setIsWanted = function (state) {
    let $res = natives.setVehicleIsWanted(this.handle, state | 0);
};
mp.Blip.prototype.setBoatBoomPositionRatio = function (ratio) {
    let $res = natives.swingBoatBoomToRatio(this.handle, ratio);
};
mp.Blip.prototype.getBoatBoomPositionRatio2 = function (p1) {
    let $res = natives.swingBoatBoomFreely(this.handle, p1 | 0);
};
mp.Blip.prototype.getBoatBoomPositionRatio3 = function (p1) {
    let $res = natives.allowBoatBoomToAnimate(this.handle, p1 | 0);
};
mp.Blip.prototype.getBoatBoomPositionRatio = function () {
    let $res = natives.getBoatBoomPositionRatio(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.disablePlaneAileron = function (p1, p2) {
    let $res = natives.disablePlaneAileron(this.handle, p1 | 0, p2 | 0);
};
mp.Vehicle.prototype.getIsEngineRunning = function () {
    let $res = natives.getIsVehicleEngineRunning(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setUseAlternateHandling = function (toggle) {
    let $res = natives.setVehicleUseAlternateHandling(this.handle, toggle | 0);
};
mp.Blip.prototype.setBikeOnStand = function (x, y) {
    let $res = natives.setBikeOnStand(this.handle, x, y);
};
mp.Vehicle.prototype.setLastDriven = function () {
    let $res = natives.setLastDrivenVehicle(this.handle);
};
mp.Vehicle.prototype.setHasBeenDrivenFlag = function (toggle) {
    let $res = natives.setVehicleHasBeenDrivenFlag(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setTaskGotoPlaneMinHeightAboveTerrain = function (height) {
    let $res = natives.setTaskVehicleGotoPlaneMinHeightAboveTerrain(this.handle, height);
};
mp.Vehicle.prototype.setLodMultiplier = function (multiplier) {
    let $res = natives.setVehicleLodMultiplier(this.handle, multiplier);
};
mp.Vehicle.prototype.setCanSaveInGarage = function (toggle) {
    let $res = natives.setVehicleCanSaveInGarage(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getNumberOfBrokenOffBones = function () {
    let $res = natives.getVehicleNumOfBrokenOffParts(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getNumberOfBrokenBones = function () {
    let $res = natives.getVehicleNumOfBrokenLoosenParts(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setGeneratesEngineShockingEvents = function (toggle) {
    let $res = natives.setVehicleGeneratesEngineShockingEvents(this.handle, toggle | 0);
};
mp.Vehicle.prototype.copyDamages = function (targetVehicle) {
    let $res = natives.copyVehicleDamages(this.handle, targetVehicle);
};
mp.Vehicle.prototype.setShootAtTarget = function (entity, xTarget, yTarget, zTarget) {
    let $res = natives.setVehicleShootAtTarget(this.handle, entity, xTarget, yTarget, zTarget);
};
mp.Vehicle.prototype.getLockOnTarget = function () {
    let $res = natives.getVehicleLockOnTarget(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.entity = $res[1];
    return $res[0] == 1 ? $resObj.entity : undefined;
};
mp.Vehicle.prototype.setForceHd = function (toggle) {
    let $res = natives.setForceHdVehicle(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getPlateType = function () {
    let $res = natives.getVehiclePlateType(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.trackVisibility = function () {
    let $res = natives.trackVehicleVisibility(this.handle);
};
mp.Vehicle.prototype.isVisible = function () {
    let $res = natives.isVehicleVisible(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setGravity = function (toggle) {
    let $res = natives.setVehicleGravity(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getCurrentSlipstreamDraft = function () {
    let $res = natives.getVehicleCurrentTimeInSlipStream(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.isSlipstreamLeader = function () {
    let $res = natives.isVehicleProducingSlipStream(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setInactiveDuringPlayback = function (toggle) {
    let $res = natives.setVehicleInactiveDuringPlayback(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setActiveDuringPlayback = function (p1) {
    let $res = natives.setVehicleActiveDuringPlayback(this.handle, p1 | 0);
};
mp.Vehicle.prototype.isSprayable = function () {
    let $res = natives.isVehicleSprayable(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setEngineCanDegrade = function (toggle) {
    let $res = natives.setVehicleEngineCanDegrade(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setShadowEffect = function (p1, p2) {
    let $res = natives.disableVehcileDynamicAmbientScales(this.handle, p1, p2);
};
mp.Vehicle.prototype.removeShadowEffect = function () {
    let $res = natives.enableVehicleDynamicAmbientScales(this.handle);
};
mp.Vehicle.prototype.isPlaneLandingGearIntact = function () {
    let $res = natives.isPlaneLandingGearIntact(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.arePlanePropellersIntact = function () {
    let $res = natives.arePlanePropellersIntact(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setPlanePropellersHealth = function (health) {
    let $res = natives.setPlanePropellerHealth(this.handle, health);
};
mp.Vehicle.prototype.setCanDeformWheels = function (toggle) {
    let $res = natives.setVehicleCanDeformWheels(this.handle, toggle | 0);
};
mp.Vehicle.prototype.isStolen = function () {
    let $res = natives.isVehicleStolen(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setIsStolen = function (isStolen) {
    let $res = natives.setVehicleIsStolen(this.handle, isStolen | 0);
};
mp.Vehicle.prototype.setPlaneTurbulenceMultiplier = function (multiplier) {
    let $res = natives.setPlaneTurbulenceMultiplier(this.handle, multiplier);
};
mp.Vehicle.prototype.arePlaneWingsIntact = function () {
    let $res = natives.areWingsOfPlaneIntact(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.detachFromCargobob = function (cargobob) {
    let $res = natives.detachVehicleFromCargobob(this.handle, cargobob);
};
mp.Vehicle.prototype.detachFromAnyCargobob = function () {
    let $res = natives.detachVehicleFromAnyCargobob(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.detachEntityFromCargobob = function (entity) {
    let $res = natives.detachEntityFromCargobob(this.handle, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.isAttachedToCargobob = function (vehicleAttached) {
    let $res = natives.isVehicleAttachedToCargobob(this.handle, vehicleAttached);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getAttachedToCargobob = function () {
    let $res = natives.getVehicleAttachedToCargobob(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getEntityAttachedToCargobob = function () {
    let $res = natives.getEntityAttachedToCargobob(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getEntityAttachedToCargobob = function () {
    let $res = natives.getEntityAttachedToCargobob(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.getEntityAttachedToCargobob = function () {
    let $res = natives.getEntityAttachedToCargobob(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getEntityAttachedToCargobob = function () {
    let $res = natives.getEntityAttachedToCargobob(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.attachToCargobob = function (cargobob, p2, x, y, z) {
    let $res = natives.attachVehicleToCargobob(this.handle, cargobob, p2, x, y, z);
};
mp.Vehicle.prototype.setCargobobHookCanDetach = function (toggle) {
    let $res = natives.setCargobobForceDontDetachVehicle(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getCargobobHookPosition = function () {
    let $res = natives.getAttachedPickUpHookPosition(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.doesCargobobHavePickUpRope = function () {
    let $res = natives.doesCargobobHavePickUpRope(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.createPickUpRopeForCargobob = function (state) {
    let $res = natives.createPickUpRopeForCargobob(this.handle, state);
};
mp.Vehicle.prototype.removePickUpRopeForCargobob = function () {
    let $res = natives.removePickUpRopeForCargobob(this.handle);
};
mp.Vehicle.prototype.setPickupRopeLengthForCargobob = function (length1, length2, p3) {
    let $res = natives.setPickupRopeLengthForCargobob(this.handle, length1, length2, p3 | 0);
};
mp.Vehicle.prototype.doesCargobobHavePickupMagnet = function () {
    let $res = natives.doesCargobobHavePickupMagnet(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setCargobobPickupMagnetActive = function (isActive) {
    let $res = natives.setCargobobPickupMagnetActive(this.handle, isActive | 0);
};
mp.Vehicle.prototype.setCargobobPickupMagnetStrength = function (strength) {
    let $res = natives.setCargobobPickupMagnetStrength(this.handle, strength);
};
mp.Vehicle.prototype.setCargobobPickupMagnetEffectRadius = function (p1) {
    let $res = natives.setCargobobPickupMagnetFalloff(this.handle, p1);
};
mp.Vehicle.prototype.setCargobobPickupMagnetReducedFalloff = function (p1) {
    let $res = natives.setCargobobPickupMagnetReducedStrength(this.handle, p1);
};
mp.Vehicle.prototype.setCargobobPickupMagnetPullRopeLength = function (p1) {
    let $res = natives.setCargobobPickupMagnetReducedFalloff(this.handle, p1);
};
mp.Vehicle.prototype.setCargobobPickupMagnetPullStrength = function (p1) {
    let $res = natives.setCargobobPickupMagnetPullStrength(this.handle, p1);
};
mp.Vehicle.prototype.setCargobobPickupMagnetFalloff = function (p1) {
    let $res = natives.setCargobobPickupMagnetPullRopeLength(this.handle, p1);
};
mp.Vehicle.prototype.setCargobobPickupMagnetReducedStrength = function (cargobob) {
    let $res = natives.setCargobobPickupMagnetSetTargetedMode(this.handle, cargobob);
};
mp.Vehicle.prototype.doesHaveWeapons = function () {
    let $res = natives.doesVehicleHaveWeapons(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isWeaponDisabled = function (vehicle, owner) {
    let $res = natives.isVehicleWeaponDisabled(this.handle, vehicle, owner);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setActiveForPedNavigation = function (toggle) {
    let $res = natives.setVehicleActiveForPedNavigation(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getClass = function () {
    let $res = natives.getVehicleClass(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getClassFromName = function () {
    let $res = natives.getVehicleClassFromName(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setPlayersLast = function () {
    let $res = natives.setPlayersLastVehicle(this.handle);
};
mp.Vehicle.prototype.setCanBeUsedByFleeingPeds = function (toggle) {
    let $res = natives.setVehicleCanBeUsedByFleeingPeds(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDropsMoneyWhenBlownUp = function (toggle) {
    let $res = natives.setVehicleDropsMoneyWhenBlownUp(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setJetEngineOn = function (toggle) {
    let $res = natives.setVehicleKeepEngineOnWhenAbandoned(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setHandlingHashForAi = function (hash) {
    let $res = natives.setVehicleHandlingOverride(this.handle, hash);
};
mp.Vehicle.prototype.setExtendedRemovalRange = function (range) {
    let $res = natives.setVehicleExtendedRemovalRange(this.handle, range);
};
mp.Vehicle.prototype.setSteeringBiasScalar = function (p1) {
    let $res = natives.setVehicleSteeringBiasScalar(this.handle, p1);
};
mp.Vehicle.prototype.setHelicopterRollPitchYawMult = function (multiplier) {
    let $res = natives.setHeliControlLaggingRateScalar(this.handle, multiplier);
};
mp.Vehicle.prototype.setFrictionOverride = function (friction) {
    let $res = natives.setVehicleFrictionOverride(this.handle, friction);
};
mp.Vehicle.prototype.setWheelsCanBreakOffWhenBlowUp = function (toggle) {
    let $res = natives.setVehicleWheelsCanBreakOffWhenBlowUp(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setCeilingHeight = function (height) {
    let $res = natives.setVehicleCeilingHeight(this.handle, height);
};
mp.Vehicle.prototype.clearRouteHistory = function () {
    let $res = natives.clearVehicleRouteHistory(this.handle);
};
mp.Vehicle.prototype.setExclusiveDriver = function (ped, index) {
    let $res = natives.setVehicleAiCanUseExclusiveSeats(this.handle, ped, index);
};
mp.Player.prototype.isPedExclusiveDriverOf = function (vehicle) {
    let $res = natives.isPedExclusiveDriverOfVehicle(this.handle, vehicle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outIndex = $res[1];
    return $res[0] == 1 ? $resObj.outIndex : undefined;
};
mp.Ped.prototype.isPedExclusiveDriverOf = function (vehicle) {
    let $res = natives.isPedExclusiveDriverOfVehicle(this.handle, vehicle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outIndex = $res[1];
    return $res[0] == 1 ? $resObj.outIndex : undefined;
};
mp.Vehicle.prototype.disableIndividualPlanePropeller = function (propeller) {
    let $res = natives.disableIndividualPlanePropeller(this.handle, propeller);
};
mp.Vehicle.prototype.setForceAfterburner = function (toggle) {
    let $res = natives.setVehicleForceAfterburner(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDisableWindowCollisions = function (toggle) {
    let $res = natives.setDontProcessVehicleGlass(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setNeonLightsColour = function (r, g, b) {
    let $res = natives.setVehicleNeonColour(this.handle, r, g, b);
};
mp.Vehicle.prototype.getNeonLightsColour = function () {
    let $res = natives.getVehicleNeonColour(this.handle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.Vehicle.prototype.setNeonLightEnabled = function (index, toggle) {
    let $res = natives.setVehicleNeonEnabled(this.handle, index, toggle | 0);
};
mp.Vehicle.prototype.isNeonLightEnabled = function (index) {
    let $res = natives.getVehicleNeonEnabled(this.handle, index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.disableNeonLights = function (toggle) {
    let $res = natives.suppressNeonsOnVehicle(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setDisableSuperdummyMode = function (p1) {
    let $res = natives.setDisableSuperdummy(this.handle, p1 | 0);
};
mp.Vehicle.prototype.requestDashboardScaleformMovie = function () {
    let $res = natives.requestVehicleDial(this.handle);
};
mp.Vehicle.prototype.getBodyHealth = function () {
    let $res = natives.getVehicleBodyHealth(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setBodyHealth = function (value) {
    let $res = natives.setVehicleBodyHealth(this.handle, value);
};
mp.Vehicle.prototype.getSuspensionBounds = function () {
    let $res = natives.getVehicleSize(this.handle, undefined, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.out1 = new mp.Vector3($res[1]);
    $resObj.out2 = new mp.Vector3($res[2]);
    return $resObj;
};
mp.Vehicle.prototype.getSuspensionHeight = function () {
    let $res = natives.getFakeSuspensionLoweringAmount(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getNumberOfDoors = function () {
    let $res = natives.getNumberOfVehicleDoors(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getBodyHealth2 = function (maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth) {
    let $res = natives.getVehicleHealthPercentage(this.handle, maxEngineHealth || 0, maxPetrolTankHealth || 0, maxBodyHealth || 0, maxMainRotorHealth || 0, maxTailRotorHealth || 0, maxUnkHealth || 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setKersAllowed = function (toggle) {
    let $res = natives.setVehicleKersAllowed(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getHasKers = function () {
    let $res = natives.getVehicleHasKers(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setHydraulicWheelValue = function (wheelId, value) {
    let $res = natives.setHydraulicSuspensionRaiseFactor(this.handle, wheelId, value);
};
mp.Vehicle.prototype.getHydraulicWheelValue = function (wheelId) {
    let $res = natives.getHydraulicSuspensionRaiseFactor(this.handle, wheelId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Camera.prototype.setCamberedWheelsDisabled = function (p1) {
    let $res = natives.setCanUseHydraulics(this.handle, p1);
};
mp.Vehicle.prototype.setHydraulicWheelStateTransition = function (wheelId, state, value, p4) {
    let $res = natives.setHydraulicWheelState(this.handle, wheelId, state, value, p4);
};
mp.Vehicle.prototype.setDamageModifier = function (p1) {
    let $res = natives.setVehicleDamageScale(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setUnkDamageMultiplier = function (multiplier) {
    let $res = natives.setVehicleWeaponDamageScale(this.handle, multiplier);
};
mp.Vehicle.prototype.setControlsInverted = function (state) {
    let $res = natives.setInvertVehicleControls(this.handle, state | 0);
};
mp.Vehicle.prototype.setRampLaunchModifier = function (p1) {
    let $res = natives.setScriptRampImpulseScale(this.handle, p1);
};
mp.Vehicle.prototype.getIsDoorValid = function (doorId) {
    let $res = natives.getIsDoorValid(this.handle, doorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setRocketBoostRefillTime = function (seconds) {
    let $res = natives.setScriptRocketBoostRechargeTime(this.handle, seconds);
};
mp.Vehicle.prototype.getHasRocketBoost = function () {
    let $res = natives.getHasRocketBoost(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.isRocketBoostActive = function () {
    let $res = natives.isRocketBoostActive(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setRocketBoostActive = function (active) {
    let $res = natives.setRocketBoostActive(this.handle, active | 0);
};
mp.Vehicle.prototype.getHasRetractableWheels = function () {
    let $res = natives.getHasRetractableWheels(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getIsWheelsLoweredStateActive = function () {
    let $res = natives.getIsWheelsRetracted(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.raiseRetractableWheels = function () {
    let $res = natives.setWheelsExtendedInstantly(this.handle);
};
mp.Vehicle.prototype.lowerRetractableWheels = function () {
    let $res = natives.setWheelsRetractedInstantly(this.handle);
};
mp.Vehicle.prototype.getCanJump = function () {
    let $res = natives.getCarHasJump(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setUseHigherJumpForce = function (toggle) {
    let $res = natives.setUseHigherCarJump(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setWeaponCapacity = function (weaponIndex, capacity) {
    let $res = natives.setVehicleWeaponRestrictedAmmo(this.handle, weaponIndex, capacity);
};
mp.Vehicle.prototype.getWeaponCapacity = function (weaponIndex) {
    let $res = natives.getVehicleWeaponRestrictedAmmo(this.handle, weaponIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.getHasParachute = function () {
    let $res = natives.getVehicleHasParachute(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getCanActivateParachute = function () {
    let $res = natives.getVehicleCanDeployParachute(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setParachuteActive = function (active) {
    let $res = natives.vehicleStartParachuting(this.handle, active | 0);
};
mp.Vehicle.prototype.setReceivesRampDamage = function (toggle) {
    let $res = natives.vehicleSetRampAndRammingCarsTakeDamage(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setRampSidewaysLaunchMotion = function (p1) {
    let $res = natives.vehicleSetEnableRampCarSideImpulse(this.handle, p1);
};
mp.Vehicle.prototype.setRampUpwardsLaunchMotion = function (p1) {
    let $res = natives.vehicleSetEnableNormaliseRampCarVerticalVeloctiy(this.handle, p1);
};
mp.Vehicle.prototype.setWeaponsDisabled = function (p1) {
    let $res = natives.setVehicleWeaponCanTargetObjects(this.handle, p1);
};
mp.Vehicle.prototype.setParachuteModel = function (modelHash) {
    let $res = natives.vehicleSetParachuteModelOverride(this.handle, modelHash);
};
mp.Vehicle.prototype.setParachuteTextureVariation = function (textureVariation) {
    let $res = natives.vehicleSetParachuteModelTintIndex(this.handle, textureVariation);
};
mp.Vehicle.prototype.setRocketBoostPercentage = function (percentage) {
    let $res = natives.setRocketBoostFill(this.handle, percentage);
};
mp.Vehicle.prototype.setOppressorTransformState = function (state) {
    let $res = natives.setGliderActive(this.handle, state | 0);
};
mp.Vehicle.prototype.disableWorldCollision = function () {
    let $res = natives.setDisableMapCollision(this.handle);
};
mp.Vehicle.prototype.setCargobobHookCanAttach = function (toggle) {
    let $res = natives.setHeliCanPickupEntityThatHasPickUpDisabled(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setBombCount = function (bombCount) {
    let $res = natives.setVehicleBombAmmo(this.handle, bombCount);
};
mp.Vehicle.prototype.getBombCount = function () {
    let $res = natives.getVehicleBombAmmo(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setCountermeasureCount = function (counterMeasureCount) {
    let $res = natives.setVehicleCountermeasureAmmo(this.handle, counterMeasureCount);
};
mp.Vehicle.prototype.getCountermeasureCount = function () {
    let $res = natives.getVehicleCountermeasureAmmo(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setHoverTransformRatio = function (ratio) {
    let $res = natives.setSpecialFlightModeRatio(this.handle, ratio);
};
mp.Vehicle.prototype.setHoverTransformPercentage = function (percentage) {
    let $res = natives.setSpecialFlightModeTargetRatio(this.handle, percentage);
};
mp.Vehicle.prototype.setHoverTransformEnabled = function (toggle) {
    let $res = natives.setSpecialFlightModeAllowed(this.handle, toggle | 0);
};
mp.Vehicle.prototype.setHoverTransformActive = function (toggle) {
    let $res = natives.setDisableHoverModeFlight(this.handle, toggle | 0);
};
mp.Player.prototype.findRandomPointInSpace = function () {
    let $res = natives.findSpawnCoordinatesForHeli(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Ped.prototype.findRandomPointInSpace = function () {
    let $res = natives.findSpawnCoordinatesForHeli(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.Vehicle.prototype.setDeployHeliStubWings = function (deploy, p2) {
    let $res = natives.setDeployFoldingWings(this.handle, deploy | 0, p2 | 0);
};
mp.Vehicle.prototype.areHeliStubWingsDeployed = function () {
    let $res = natives.areFoldingWingsDeployed(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.setTurretUnk = function (index, toggle) {
    let $res = natives.setTurretHidden(this.handle, index, toggle | 0);
};
mp.Vehicle.prototype.setSpecialflightWingRatio = function (ratio) {
    let $res = natives.setHoverModeWingRatio(this.handle, ratio);
};
mp.Vehicle.prototype.setDisableTurretMovementThisFrame = function (turretId) {
    let $res = natives.setDisableTurretMovement(this.handle, turretId);
};
mp.Vehicle.prototype.setUnkFloat0X104ForSubmarineTask = function (value) {
    let $res = natives.setTransformRateForAnimation(this.handle, value);
};
mp.Vehicle.prototype.setUnkBool0X102ForSubmarineTask = function (value) {
    let $res = natives.setTransformToSubmarineUsesAlternateInput(this.handle, value | 0);
};
mp.Vehicle.prototype.getIsShuntBoostActive = function () {
    let $res = natives.getIsVehicleShunting(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getLastRammed = function () {
    let $res = natives.getLastShuntVehicle(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setNitroEnabled = function (toggle, level, power, rechargeTime, disableSound) {
    let $res = natives.setOverrideNitrousLevel(this.handle, toggle | 0, level, power, rechargeTime, disableSound | 0);
};
mp.Vehicle.prototype.setWheelsDealDamage = function (toggle) {
    let $res = natives.setIncreaseWheelCrushDamage(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getDoesHaveTombstone = function () {
    let $res = natives.getDoesVehicleHaveTombstone(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hideTombstone = function (toggle) {
    let $res = natives.hideTombstone(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getIsEmpDisabled = function () {
    let $res = natives.getIsVehicleDisabledByEmp(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.getTyreHealth = function (wheelIndex) {
    let $res = natives.getTyreHealth(this.handle, wheelIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setTyreHealth = function (wheelIndex, health) {
    let $res = natives.setTyreHealth(this.handle, wheelIndex, health);
};
mp.Vehicle.prototype.getTyreWearMultiplier = function (wheelIndex) {
    let $res = natives.getTyreWearRate(this.handle, wheelIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.setTyreWearMultiplier = function (wheelIndex, multiplier) {
    let $res = natives.setTyreWearRate(this.handle, wheelIndex, multiplier);
};
mp.Vehicle.prototype.setTyreSoftnessMultiplier = function (wheelIndex, multiplier) {
    let $res = natives.setTyreWearRateScale(this.handle, wheelIndex, multiplier);
};
mp.Vehicle.prototype.setTyreTractionLossMultiplier = function (wheelIndex, multiplier) {
    let $res = natives.setTyreMaximumGripDifferenceDueToWearRate(this.handle, wheelIndex, multiplier);
};
mp.Vehicle.prototype.setReduceDriftSuspension = function (enable) {
    let $res = natives.setReducedSuspensionForce(this.handle, enable | 0);
};
mp.Vehicle.prototype.setDriftTyresEnabled = function (toggle) {
    let $res = natives.setDriftTyres(this.handle, toggle | 0);
};
mp.Vehicle.prototype.getDriftTyresEnabled = function () {
    let $res = natives.getDriftTyresSet(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.networkUseHighPrecisionBlending = function (toggle) {
    let $res = natives.networkUseHighPrecisionTrainBlending(this.handle, toggle | 0);
};
if (!mp.game2.vehicle) mp.game2.vehicle = {};
mp.game2.vehicle.create = function (modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, p7) {
    let $res = natives.createVehicle(modelHash, x, y, z, heading, isNetwork | 0, bScriptHostVeh | 0, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.createVehicle = function (modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, p7) {
    let $res = natives.createVehicle(modelHash, x, y, z, heading, isNetwork | 0, bScriptHostVeh | 0, p7 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.delete = function (vehicle) {
    let $res = natives.deleteVehicle(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.vehicle = $res[1];
    return $resObj.vehicle;
};
mp.game2.vehicle.setCanBeLockedOn = function (vehicle, canBeLockedOn, unk) {
    let $res = natives.setVehicleAllowHomingMissleLockonSynced(vehicle, canBeLockedOn | 0, unk | 0);
};
mp.game2.vehicle.setAllowNoPassengersLockon = function (veh, toggle) {
    let $res = natives.setVehicleAllowNoPassengersLockon(veh, toggle | 0);
};
mp.game2.vehicle.getHomingLockonState = function (vehicle) {
    let $res = natives.getVehicleHomingLockonState(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isModel = function (vehicle, model) {
    let $res = natives.isVehicleModel(vehicle, model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.doesScriptGeneratorExist = function (vehicleGenerator) {
    let $res = natives.doesScriptVehicleGeneratorExist(vehicleGenerator);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.doesScriptVehicleGeneratorExist = function (vehicleGenerator) {
    let $res = natives.doesScriptVehicleGeneratorExist(vehicleGenerator);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.createScriptGenerator = function (x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16) {
    let $res = natives.createScriptVehicleGenerator(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11 | 0, p12 | 0, p13 | 0, p14 | 0, p15 | 0, p16);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.createScriptVehicleGenerator = function (x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16) {
    let $res = natives.createScriptVehicleGenerator(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11 | 0, p12 | 0, p13 | 0, p14 | 0, p15 | 0, p16);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.deleteScriptGenerator = function (vehicleGenerator) {
    let $res = natives.deleteScriptVehicleGenerator(vehicleGenerator);
};
mp.game2.vehicle.deleteScriptVehicleGenerator = function (vehicleGenerator) {
    let $res = natives.deleteScriptVehicleGenerator(vehicleGenerator);
};
mp.game2.vehicle.setScriptGenerator = function (vehicleGenerator, enabled) {
    let $res = natives.setScriptVehicleGenerator(vehicleGenerator, enabled | 0);
};
mp.game2.vehicle.setScriptVehicleGenerator = function (vehicleGenerator, enabled) {
    let $res = natives.setScriptVehicleGenerator(vehicleGenerator, enabled | 0);
};
mp.game2.vehicle.setAllGeneratorsActiveInArea = function (x1, y1, z1, x2, y2, z2, p6, p7) {
    let $res = natives.setAllVehicleGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, p6 | 0, p7 | 0);
};
mp.game2.vehicle.setAllVehicleGeneratorsActiveInArea = function (x1, y1, z1, x2, y2, z2, p6, p7) {
    let $res = natives.setAllVehicleGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, p6 | 0, p7 | 0);
};
mp.game2.vehicle.setAllGeneratorsActive = function () {
    let $res = natives.setAllVehicleGeneratorsActive();
};
mp.game2.vehicle.setAllVehicleGeneratorsActive = function () {
    let $res = natives.setAllVehicleGeneratorsActive();
};
mp.game2.vehicle.setAllLowPriorityGeneratorsActive = function (active) {
    let $res = natives.setAllLowPriorityVehicleGeneratorsActive(active | 0);
};
mp.game2.vehicle.setAllLowPriorityVehicleGeneratorsActive = function (active) {
    let $res = natives.setAllLowPriorityVehicleGeneratorsActive(active | 0);
};
mp.game2.vehicle.setOnGroundProperly = function (vehicle, p1) {
    let $res = natives.setVehicleOnGroundProperly(vehicle, p1 || 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setUseCutsceneWheelCompression = function (p0, p1, p2, p3) {
    let $res = natives.setVehicleUseCutsceneWheelCompression(p0, p1 | 0, p2 | 0, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isStuckOnRoof = function (vehicle) {
    let $res = natives.isVehicleStuckOnRoof(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isStopped = function (vehicle) {
    let $res = natives.isVehicleStopped(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getNumberOfPassengers = function (vehicle) {
    let $res = natives.getVehicleNumberOfPassengers(vehicle, false, false);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getMaxNumberOfPassengers = function (vehicle) {
    let $res = natives.getVehicleMaxNumberOfPassengers(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModelNumberOfSeats = function (modelHash) {
    let $res = natives.getVehicleModelNumberOfSeats(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleModelMaxNumberOfPassengers = function (modelHash) {
    let $res = natives.getVehicleModelNumberOfSeats(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isSeatWarpOnly = function (vehicle, seatIndex) {
    let $res = natives.isSeatWarpOnly(vehicle, seatIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isTurretSeat = function (vehicle, seatIndex) {
    let $res = natives.isTurretSeat(vehicle, seatIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.doesAllowRappel = function (vehicle) {
    let $res = natives.doesVehicleAllowRappel(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setDensityMultiplierThisFrame = function (multiplier) {
    let $res = natives.setVehicleDensityMultiplierThisFrame(multiplier);
};
mp.game2.vehicle.setVehicleDensityMultiplierThisFrame = function (multiplier) {
    let $res = natives.setVehicleDensityMultiplierThisFrame(multiplier);
};
mp.game2.vehicle.setRandomDensityMultiplierThisFrame = function (multiplier) {
    let $res = natives.setRandomVehicleDensityMultiplierThisFrame(multiplier);
};
mp.game2.vehicle.setRandomVehicleDensityMultiplierThisFrame = function (multiplier) {
    let $res = natives.setRandomVehicleDensityMultiplierThisFrame(multiplier);
};
mp.game2.vehicle.setParkedDensityMultiplierThisFrame = function (multiplier) {
    let $res = natives.setParkedVehicleDensityMultiplierThisFrame(multiplier);
};
mp.game2.vehicle.setParkedVehicleDensityMultiplierThisFrame = function (multiplier) {
    let $res = natives.setParkedVehicleDensityMultiplierThisFrame(multiplier);
};
mp.game2.vehicle.setDisableRandomTrainsThisFrame = function (toggle) {
    let $res = natives.setDisableRandomTrainsThisFrame(toggle | 0);
};
mp.game2.vehicle.setAmbientRangeMultiplierThisFrame = function (value) {
    let $res = natives.setAmbientVehicleRangeMultiplierThisFrame(value);
};
mp.game2.vehicle.setFarDrawS = function (toggle) {
    let $res = natives.setFarDrawVehicles(toggle | 0);
};
mp.game2.vehicle.setFarDrawVehicles = function (toggle) {
    let $res = natives.setFarDrawVehicles(toggle | 0);
};
mp.game2.vehicle.setNumberOfParkedS = function (value) {
    let $res = natives.setNumberOfParkedVehicles(value);
};
mp.game2.vehicle.setNumberOfParkedVehicles = function (value) {
    let $res = natives.setNumberOfParkedVehicles(value);
};
mp.game2.vehicle.setDoorsLocked = function (vehicle, doorLockStatus) {
    let $res = natives.setVehicleDoorsLocked(vehicle, doorLockStatus);
};
mp.game2.vehicle.setIndividualDoorsLocked = function (vehicle, doorId, doorLockStatus) {
    let $res = natives.setVehicleIndividualDoorsLocked(vehicle, doorId, doorLockStatus);
};
mp.game2.vehicle.setHasMutedSirens = function (vehicle, toggle) {
    let $res = natives.setVehicleHasMutedSirens(vehicle, toggle | 0);
};
mp.game2.vehicle.setDoorsLockedForPlayer = function (vehicle, player, toggle) {
    let $res = natives.setVehicleDoorsLockedForPlayer(vehicle, player, toggle | 0);
};
mp.game2.vehicle.getDoorsLockedForPlayer = function (vehicle, player) {
    let $res = natives.getVehicleDoorsLockedForPlayer(vehicle, player);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setDoorsLockedForAllPlayers = function (vehicle, toggle) {
    let $res = natives.setVehicleDoorsLockedForAllPlayers(vehicle, toggle | 0);
};
mp.game2.vehicle.setDoorsLockedForNonScriptPlayers = function (vehicle, toggle) {
    let $res = natives.setVehicleDoorsLockedForNonScriptPlayers(vehicle, toggle | 0);
};
mp.game2.vehicle.setDoorsLockedForTeam = function (vehicle, team, toggle) {
    let $res = natives.setVehicleDoorsLockedForTeam(vehicle, team, toggle | 0);
};
mp.game2.vehicle.setDoorsLockedForUnk = function (vehicle, toggle) {
    let $res = natives.setVehicleDoorsLockedForAllTeams(vehicle, toggle | 0);
};
mp.game2.vehicle.explode = function (vehicle, isAudible, isInvisible) {
    let $res = natives.explodeVehicle(vehicle, isAudible | 0, isInvisible | 0);
};
mp.game2.vehicle.setOutOfControl = function (vehicle, killDriver, explodeOnImpact) {
    let $res = natives.setVehicleOutOfControl(vehicle, killDriver | 0, explodeOnImpact | 0);
};
mp.game2.vehicle.setTimedExplosion = function (vehicle, ped, toggle) {
    let $res = natives.setVehicleTimedExplosion(vehicle, ped, toggle | 0);
};
mp.game2.vehicle.addPhoneExplosiveDevice = function (vehicle) {
    let $res = natives.addVehiclePhoneExplosiveDevice(vehicle);
};
mp.game2.vehicle.clearPhoneExplosiveDevice = function () {
    let $res = natives.clearVehiclePhoneExplosiveDevice();
};
mp.game2.vehicle.hasPhoneExplosiveDevice = function () {
    let $res = natives.hasVehiclePhoneExplosiveDevice();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.detonatePhoneExplosiveDevice = function () {
    let $res = natives.detonateVehiclePhoneExplosiveDevice();
};
mp.game2.vehicle.setTaxiLights = function (vehicle, state) {
    let $res = natives.setTaxiLights(vehicle, state | 0);
};
mp.game2.vehicle.isTaxiLightOn = function (vehicle) {
    let $res = natives.isTaxiLightOn(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isInGarageArea = function (garageName, vehicle) {
    let $res = natives.isVehicleInGarageArea(garageName, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isVehicleInGarageArea = function (garageName, vehicle) {
    let $res = natives.isVehicleInGarageArea(garageName, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setColours = function (vehicle, colorPrimary, colorSecondary) {
    let $res = natives.setVehicleColours(vehicle, colorPrimary, colorSecondary);
};
mp.game2.vehicle.setFullbeam = function (vehicle, toggle) {
    let $res = natives.setVehicleFullbeam(vehicle, toggle | 0);
};
mp.game2.vehicle.setIsRacing = function (vehicle, toggle) {
    let $res = natives.setVehicleIsRacing(vehicle, toggle | 0);
};
mp.game2.vehicle.setCustomPrimaryColour = function (vehicle, r, g, b) {
    let $res = natives.setVehicleCustomPrimaryColour(vehicle, r, g, b);
};
mp.game2.vehicle.getCustomPrimaryColour = function (vehicle) {
    let $res = natives.getVehicleCustomPrimaryColour(vehicle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.game2.vehicle.clearCustomPrimaryColour = function (vehicle) {
    let $res = natives.clearVehicleCustomPrimaryColour(vehicle);
};
mp.game2.vehicle.getIsPrimaryColourCustom = function (vehicle) {
    let $res = natives.getIsVehiclePrimaryColourCustom(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setCustomSecondaryColour = function (vehicle, r, g, b) {
    let $res = natives.setVehicleCustomSecondaryColour(vehicle, r, g, b);
};
mp.game2.vehicle.getCustomSecondaryColour = function (vehicle) {
    let $res = natives.getVehicleCustomSecondaryColour(vehicle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.game2.vehicle.clearCustomSecondaryColour = function (vehicle) {
    let $res = natives.clearVehicleCustomSecondaryColour(vehicle);
};
mp.game2.vehicle.getIsSecondaryColourCustom = function (vehicle) {
    let $res = natives.getIsVehicleSecondaryColourCustom(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setEnveffScale = function (vehicle, fade) {
    let $res = natives.setVehicleEnveffScale(vehicle, fade);
};
mp.game2.vehicle.getEnveffScale = function (vehicle) {
    let $res = natives.getVehicleEnveffScale(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setCanRespray = function (vehicle, state) {
    let $res = natives.setCanResprayVehicle(vehicle, state | 0);
};
mp.game2.vehicle.forceSubmarineSurfaceMode = function (vehicle, toggle) {
    let $res = natives.forceSubmarineSurfaceMode(vehicle, toggle | 0);
};
mp.game2.vehicle.setSubmarineCrushDepths = function (vehicle, p1, depth1, depth2, depth3) {
    let $res = natives.setSubmarineCrushDepths(vehicle, p1 | 0, depth1, depth2, depth3);
};
mp.game2.vehicle.getSubmarineIsBelowFirstCrushDepth = function (submarine) {
    let $res = natives.getSubmarineIsUnderDesignDepth(submarine);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getSubmarineCrushDepthWarningState = function (submarine) {
    let $res = natives.getSubmarineNumberOfAirLeaks(submarine);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setBoatAnchor = function (vehicle, toggle) {
    let $res = natives.setBoatAnchor(vehicle, toggle | 0);
};
mp.game2.vehicle.canAnchorBoatHere = function (vehicle) {
    let $res = natives.canAnchorBoatHere(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.canAnchorBoatHere2 = function (vehicle) {
    let $res = natives.canAnchorBoatHereIgnorePlayers(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setBoatFrozenWhenAnchored = function (vehicle, toggle) {
    let $res = natives.setBoatRemainsAnchoredWhilePlayerIsDriver(vehicle, toggle | 0);
};
mp.game2.vehicle.setBoatMovementResistance = function (vehicle, value) {
    let $res = natives.setBoatLowLodAnchorDistance(vehicle, value);
};
mp.game2.vehicle.isBoatAnchoredAndFrozen = function (vehicle) {
    let $res = natives.isBoatAnchored(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setBoatSinksWhenWrecked = function (vehicle, toggle) {
    let $res = natives.setBoatSinksWhenWrecked(vehicle, toggle | 0);
};
mp.game2.vehicle.setBoatIsSinking = function (p0) {
    let $res = natives.setBoatWrecked(p0);
};
mp.game2.vehicle.setSiren = function (vehicle, toggle) {
    let $res = natives.setVehicleSiren(vehicle, toggle | 0);
};
mp.game2.vehicle.isSirenOn = function (vehicle) {
    let $res = natives.isVehicleSirenOn(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isSirenAudioOn = function (vehicle) {
    let $res = natives.isVehicleSirenAudioOn(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setStrong = function (vehicle, toggle) {
    let $res = natives.setVehicleStrong(vehicle, toggle | 0);
};
mp.game2.vehicle.getColours = function (vehicle) {
    let $res = natives.getVehicleColours(vehicle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.colorPrimary = $res[1];
    $resObj.colorSecondary = $res[2];
    return $resObj;
};
mp.game2.vehicle.isSeatFree = function (vehicle, seatIndex, isTaskRunning) {
    let $res = natives.isVehicleSeatFree(vehicle, seatIndex, isTaskRunning | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getPedInSeat = function (vehicle, seatIndex, p2) {
    let $res = natives.getPedInVehicleSeat(vehicle, seatIndex, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getLastPedInSeat = function (vehicle, seatIndex) {
    let $res = natives.getLastPedInVehicleSeat(vehicle, seatIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getLightsState = function (vehicle) {
    let $res = natives.getVehicleLightsState(vehicle, false, false);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.lightsOn = $res[1] == 1;
    $resObj.highbeamsOn = $res[2] == 1;
    $resObj.result = $res[0] == 1;
    return $resObj;
};
mp.game2.vehicle.isTyreBurst = function (vehicle, wheelID, completely) {
    let $res = natives.isVehicleTyreBurst(vehicle, wheelID, completely | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setForwardSpeed = function (vehicle, speed) {
    let $res = natives.setVehicleForwardSpeed(vehicle, speed);
};
mp.game2.vehicle.bringToHalt = function (vehicle, distance, duration, unknown) {
    let $res = natives.bringVehicleToHalt(vehicle, distance, duration, unknown | 0);
};
mp.game2.vehicle.stopBringToHalt = function (vehicle) {
    let $res = natives.stopBringingVehicleToHalt(vehicle);
};
mp.game2.vehicle.isBeingHalted = function (vehicle) {
    let $res = natives.isVehicleBeingBroughtToHalt(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setForkliftForkHeight = function (vehicle, height) {
    let $res = natives.setForkliftForkHeight(vehicle, height);
};
mp.game2.vehicle.isEntityAttachedToHandlerFrame = function (vehicle, entity) {
    let $res = natives.isEntityAttachedToHandlerFrame(vehicle, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isAnyEntityAttachedToHandlerFrame = function (vehicle) {
    let $res = natives.isAnyEntityAttachedToHandlerFrame(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.findCarryingThisEntity = function (entity) {
    let $res = natives.findHandlerVehicleContainerIsAttachedTo(entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isHandlerFrameAboveContainer = function (vehicle, entity) {
    let $res = natives.isHandlerFrameLinedUpWithContainer(vehicle, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.detachContainerFromHandlerFrame = function (vehicle) {
    let $res = natives.detachContainerFromHandlerFrame(vehicle);
};
mp.game2.vehicle.setBoatDisableAvoidance = function (vehicle, p1) {
    let $res = natives.setBoatDisableAvoidance(vehicle, p1 | 0);
};
mp.game2.vehicle.isHeliLandingAreaBlocked = function (vehicle) {
    let $res = natives.isHeliLandingAreaBlocked(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setHeliTurbulenceScalar = function (vehicle, p1) {
    let $res = natives.setHeliTurbulenceScalar(vehicle, p1);
};
mp.game2.vehicle.setCarBootOpen = function (vehicle) {
    let $res = natives.setCarBootOpen(vehicle);
};
mp.game2.vehicle.setTyreBurst = function (vehicle, index, onRim, p3) {
    let $res = natives.setVehicleTyreBurst(vehicle, index, onRim | 0, p3);
};
mp.game2.vehicle.setDoorsShut = function (vehicle, closeInstantly) {
    let $res = natives.setVehicleDoorsShut(vehicle, closeInstantly | 0);
};
mp.game2.vehicle.setTyresCanBurst = function (vehicle, toggle) {
    let $res = natives.setVehicleTyresCanBurst(vehicle, toggle | 0);
};
mp.game2.vehicle.getTyresCanBurst = function (vehicle) {
    let $res = natives.getVehicleTyresCanBurst(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setWheelsCanBreak = function (vehicle, enabled) {
    let $res = natives.setVehicleWheelsCanBreak(vehicle, enabled | 0);
};
mp.game2.vehicle.setDoorOpen = function (vehicle, doorId, loose, openInstantly) {
    let $res = natives.setVehicleDoorOpen(vehicle, doorId, loose | 0, openInstantly | 0);
};
mp.game2.vehicle.removeWindow = function (vehicle, windowIndex) {
    let $res = natives.removeVehicleWindow(vehicle, windowIndex);
};
mp.game2.vehicle.rollDownWindows = function (vehicle) {
    let $res = natives.rollDownWindows(vehicle);
};
mp.game2.vehicle.rollDownWindow = function (vehicle, windowIndex) {
    let $res = natives.rollDownWindow(vehicle, windowIndex);
};
mp.game2.vehicle.rollUpWindow = function (vehicle, windowIndex) {
    let $res = natives.rollUpWindow(vehicle, windowIndex);
};
mp.game2.vehicle.smashWindow = function (vehicle, index) {
    let $res = natives.smashVehicleWindow(vehicle, index);
};
mp.game2.vehicle.fixWindow = function (vehicle, index) {
    let $res = natives.fixVehicleWindow(vehicle, index);
};
mp.game2.vehicle.popOutWindscreen = function (vehicle) {
    let $res = natives.popOutVehicleWindscreen(vehicle);
};
mp.game2.vehicle.ejectJb700Roof = function (vehicle, x, y, z) {
    let $res = natives.popOffVehicleRoofWithImpulse(vehicle, x, y, z);
};
mp.game2.vehicle.setLights = function (vehicle, state) {
    let $res = natives.setVehicleLights(vehicle, state);
};
mp.game2.vehicle.setUsePlayerLightSettings = function (vehicle, toggle) {
    let $res = natives.setVehicleUsePlayerLightSettings(vehicle, toggle | 0);
};
mp.game2.vehicle.setLightsMode = function (vehicle, p1) {
    let $res = natives.setVehicleHeadlightShadows(vehicle, p1);
};
mp.game2.vehicle.setAlarm = function (vehicle, state) {
    let $res = natives.setVehicleAlarm(vehicle, state | 0);
};
mp.game2.vehicle.startAlarm = function (vehicle) {
    let $res = natives.startVehicleAlarm(vehicle);
};
mp.game2.vehicle.isAlarmActivated = function (vehicle) {
    let $res = natives.isVehicleAlarmActivated(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setInteriorlight = function (vehicle, toggle) {
    let $res = natives.setVehicleInteriorlight(vehicle, toggle | 0);
};
mp.game2.vehicle.setLightMultiplier = function (vehicle, multiplier) {
    let $res = natives.setVehicleLightMultiplier(vehicle, multiplier);
};
mp.game2.vehicle.attachToTrailer = function (vehicle, trailer, radius) {
    let $res = natives.attachVehicleToTrailer(vehicle, trailer, radius);
};
mp.game2.vehicle.attachOnToTrailer = function (vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions) {
    let $res = natives.attachVehicleOnToTrailer(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions);
};
mp.game2.vehicle.stabiliseEntityAttachedToHeli = function (vehicle, entity, p2) {
    let $res = natives.stabiliseEntityAttachedToHeli(vehicle, entity, p2);
};
mp.game2.vehicle.detachFromTrailer = function (vehicle) {
    let $res = natives.detachVehicleFromTrailer(vehicle);
};
mp.game2.vehicle.isAttachedToTrailer = function (vehicle) {
    let $res = natives.isVehicleAttachedToTrailer(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setTrailerInverseMassScale = function (vehicle, p1) {
    let $res = natives.setTrailerInverseMassScale(vehicle, p1);
};
mp.game2.vehicle.setTrailerLegsRaised = function (vehicle) {
    let $res = natives.setTrailerLegsRaised(vehicle);
};
mp.game2.vehicle.setTrailerLegsLowered = function (p0) {
    let $res = natives.setTrailerLegsLowered(p0);
};
mp.game2.vehicle.setTyreFixed = function (vehicle, tyreIndex) {
    let $res = natives.setVehicleTyreFixed(vehicle, tyreIndex);
};
mp.game2.vehicle.setNumberPlateText = function (vehicle, plateText) {
    let $res = natives.setVehicleNumberPlateText(vehicle, plateText);
};
mp.game2.vehicle.getNumberPlateText = function (vehicle) {
    let $res = natives.getVehicleNumberPlateText(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getNumberOfNumberPlates = function () {
    let $res = natives.getNumberOfVehicleNumberPlates();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setNumberPlateTextIndex = function (vehicle, plateIndex) {
    let $res = natives.setVehicleNumberPlateTextIndex(vehicle, plateIndex);
};
mp.game2.vehicle.getNumberPlateTextIndex = function (vehicle) {
    let $res = natives.getVehicleNumberPlateTextIndex(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setRandomTrains = function (toggle) {
    let $res = natives.setRandomTrains(toggle | 0);
};
mp.game2.vehicle.createMissionTrain = function (variation, x, y, z, direction, p5, p6) {
    let $res = natives.createMissionTrain(variation, x, y, z, direction | 0, p5 | 0, p6 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.switchTrainTrack = function (trackId, state) {
    let $res = natives.switchTrainTrack(trackId, state | 0);
};
mp.game2.vehicle.setTrainTrackSpawnFrequency = function (trackIndex, frequency) {
    let $res = natives.setTrainTrackSpawnFrequency(trackIndex, frequency);
};
mp.game2.vehicle.deleteAllTrains = function () {
    let $res = natives.deleteAllTrains();
};
mp.game2.vehicle.setTrainSpeed = function (train, speed) {
    let $res = natives.setTrainSpeed(train, speed);
};
mp.game2.vehicle.setTrainCruiseSpeed = function (train, speed) {
    let $res = natives.setTrainCruiseSpeed(train, speed);
};
mp.game2.vehicle.setRandomBoats = function (toggle) {
    let $res = natives.setRandomBoats(toggle | 0);
};
mp.game2.vehicle.setRandomBoatsInMp = function (toggle) {
    let $res = natives.setRandomBoatsMp(toggle | 0);
};
mp.game2.vehicle.setGarbageTrucks = function (toggle) {
    let $res = natives.setGarbageTrucks(toggle | 0);
};
mp.game2.vehicle.getRecordingId = function (recording, script) {
    let $res = natives.getVehicleRecordingId(recording, script);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleRecordingId = function (recording, script) {
    let $res = natives.getVehicleRecordingId(recording, script);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.requestRecording = function (recording, script) {
    let $res = natives.requestVehicleRecording(recording, script);
};
mp.game2.vehicle.requestVehicleRecording = function (recording, script) {
    let $res = natives.requestVehicleRecording(recording, script);
};
mp.game2.vehicle.hasRecordingBeenLoaded = function (recording, script) {
    let $res = natives.hasVehicleRecordingBeenLoaded(recording, script);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.hasVehicleRecordingBeenLoaded = function (recording, script) {
    let $res = natives.hasVehicleRecordingBeenLoaded(recording, script);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.removeRecording = function (recording, script) {
    let $res = natives.removeVehicleRecording(recording, script);
};
mp.game2.vehicle.removeVehicleRecording = function (recording, script) {
    let $res = natives.removeVehicleRecording(recording, script);
};
mp.game2.vehicle.getPositionOfRecordingIdAtTime = function (id, time) {
    let $res = natives.getPositionOfVehicleRecordingIdAtTime(id, time);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.vehicle.getPositionOfRecordingAtTime = function (recording, time, script) {
    let $res = natives.getPositionOfVehicleRecordingAtTime(recording, time, script);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.vehicle.getPositionOfVehicleRecordingAtTime = function (recording, time, script) {
    let $res = natives.getPositionOfVehicleRecordingAtTime(recording, time, script);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.vehicle.getRotationOfRecordingIdAtTime = function (id, time) {
    let $res = natives.getRotationOfVehicleRecordingIdAtTime(id, time);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.vehicle.getRotationOfRecordingAtTime = function (recording, time, script) {
    let $res = natives.getRotationOfVehicleRecordingAtTime(recording, time, script);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.vehicle.getRotationOfVehicleRecordingAtTime = function (recording, time, script) {
    let $res = natives.getRotationOfVehicleRecordingAtTime(recording, time, script);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.vehicle.getTotalDurationOfRecordingId = function (id) {
    let $res = natives.getTotalDurationOfVehicleRecordingId(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getTotalDurationOfVehicleRecordingId = function (id) {
    let $res = natives.getTotalDurationOfVehicleRecordingId(id);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getTotalDurationOfRecording = function (recording, script) {
    let $res = natives.getTotalDurationOfVehicleRecording(recording, script);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getTotalDurationOfVehicleRecording = function (recording, script) {
    let $res = natives.getTotalDurationOfVehicleRecording(recording, script);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getPositionInRecording = function (vehicle) {
    let $res = natives.getPositionInRecording(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getTimePositionInRecording = function (vehicle) {
    let $res = natives.getTimePositionInRecording(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.startPlaybackRecorded = function (vehicle, recording, script, p3) {
    let $res = natives.startPlaybackRecordedVehicle(vehicle, recording, script, p3 | 0);
};
mp.game2.vehicle.startPlaybackRecordedVehicle = function (vehicle, recording, script, p3) {
    let $res = natives.startPlaybackRecordedVehicle(vehicle, recording, script, p3 | 0);
};
mp.game2.vehicle.startPlaybackRecordedWithFlags = function (vehicle, recording, script, flags, time, drivingStyle) {
    let $res = natives.startPlaybackRecordedVehicleWithFlags(vehicle, recording, script, flags, time, drivingStyle);
};
mp.game2.vehicle.startPlaybackRecordedVehicleWithFlags = function (vehicle, recording, script, flags, time, drivingStyle) {
    let $res = natives.startPlaybackRecordedVehicleWithFlags(vehicle, recording, script, flags, time, drivingStyle);
};
mp.game2.vehicle.forcePlaybackRecordedUpdate = function (vehicle, p1) {
    let $res = natives.forcePlaybackRecordedVehicleUpdate(vehicle, p1 | 0);
};
mp.game2.vehicle.stopPlaybackRecorded = function (vehicle) {
    let $res = natives.stopPlaybackRecordedVehicle(vehicle);
};
mp.game2.vehicle.stopPlaybackRecordedVehicle = function (vehicle) {
    let $res = natives.stopPlaybackRecordedVehicle(vehicle);
};
mp.game2.vehicle.pausePlaybackRecorded = function (vehicle) {
    let $res = natives.pausePlaybackRecordedVehicle(vehicle);
};
mp.game2.vehicle.pausePlaybackRecordedVehicle = function (vehicle) {
    let $res = natives.pausePlaybackRecordedVehicle(vehicle);
};
mp.game2.vehicle.unpausePlaybackRecorded = function (vehicle) {
    let $res = natives.unpausePlaybackRecordedVehicle(vehicle);
};
mp.game2.vehicle.unpausePlaybackRecordedVehicle = function (vehicle) {
    let $res = natives.unpausePlaybackRecordedVehicle(vehicle);
};
mp.game2.vehicle.isPlaybackGoingOnFor = function (vehicle) {
    let $res = natives.isPlaybackGoingOnForVehicle(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isPlaybackGoingOnForVehicle = function (vehicle) {
    let $res = natives.isPlaybackGoingOnForVehicle(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isPlaybackUsingAiGoingOnFor = function (vehicle) {
    let $res = natives.isPlaybackUsingAiGoingOnForVehicle(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isPlaybackUsingAiGoingOnForVehicle = function (vehicle) {
    let $res = natives.isPlaybackUsingAiGoingOnForVehicle(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getCurrentPlaybackFor = function (vehicle) {
    let $res = natives.getCurrentPlaybackForVehicle(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getCurrentPlaybackForVehicle = function (vehicle) {
    let $res = natives.getCurrentPlaybackForVehicle(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.skipToEndAndStopPlaybackRecorded = function (vehicle) {
    let $res = natives.skipToEndAndStopPlaybackRecordedVehicle(vehicle);
};
mp.game2.vehicle.skipToEndAndStopPlaybackRecordedVehicle = function (vehicle) {
    let $res = natives.skipToEndAndStopPlaybackRecordedVehicle(vehicle);
};
mp.game2.vehicle.setPlaybackSpeed = function (vehicle, speed) {
    let $res = natives.setPlaybackSpeed(vehicle, speed);
};
mp.game2.vehicle.startPlaybackRecordedUsingAi = function (vehicle, recording, script, speed, drivingStyle) {
    let $res = natives.startPlaybackRecordedVehicleUsingAi(vehicle, recording, script, speed, drivingStyle);
};
mp.game2.vehicle.startPlaybackRecordedVehicleUsingAi = function (vehicle, recording, script, speed, drivingStyle) {
    let $res = natives.startPlaybackRecordedVehicleUsingAi(vehicle, recording, script, speed, drivingStyle);
};
mp.game2.vehicle.skipTimeInPlaybackRecorded = function (vehicle, time) {
    let $res = natives.skipTimeInPlaybackRecordedVehicle(vehicle, time);
};
mp.game2.vehicle.skipTimeInPlaybackRecordedVehicle = function (vehicle, time) {
    let $res = natives.skipTimeInPlaybackRecordedVehicle(vehicle, time);
};
mp.game2.vehicle.setPlaybackToUseAi = function (vehicle, drivingStyle) {
    let $res = natives.setPlaybackToUseAi(vehicle, drivingStyle);
};
mp.game2.vehicle.setPlaybackToUseAiTryToRevertBackLater = function (vehicle, time, drivingStyle, p3) {
    let $res = natives.setPlaybackToUseAiTryToRevertBackLater(vehicle, time, drivingStyle, p3 | 0);
};
mp.game2.vehicle.explodeInCutscene = function (vehicle, p1) {
    let $res = natives.explodeVehicleInCutscene(vehicle, p1 | 0);
};
mp.game2.vehicle.addStuckCheckWithWarp = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.addVehicleStuckCheckWithWarp(p0, p1, p2, p3 | 0, p4 | 0, p5 | 0, p6);
};
mp.game2.vehicle.addVehicleStuckCheckWithWarp = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.addVehicleStuckCheckWithWarp(p0, p1, p2, p3 | 0, p4 | 0, p5 | 0, p6);
};
mp.game2.vehicle.setModelIsSuppressed = function (model, suppressed) {
    let $res = natives.setVehicleModelIsSuppressed(model, suppressed | 0);
};
mp.game2.vehicle.setVehicleModelIsSuppressed = function (model, suppressed) {
    let $res = natives.setVehicleModelIsSuppressed(model, suppressed | 0);
};
mp.game2.vehicle.getRandomInSphere = function (x, y, z, radius, modelHash, flags) {
    let $res = natives.getRandomVehicleInSphere(x, y, z, radius, modelHash, flags);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getRandomVehicleInSphere = function (x, y, z, radius, modelHash, flags) {
    let $res = natives.getRandomVehicleInSphere(x, y, z, radius, modelHash, flags);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getRandomFrontBumperInSphere = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.getRandomVehicleFrontBumperInSphere(p0, p1, p2, p3, p4, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getRandomVehicleFrontBumperInSphere = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.getRandomVehicleFrontBumperInSphere(p0, p1, p2, p3, p4, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getRandomBackBumperInSphere = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.getRandomVehicleBackBumperInSphere(p0, p1, p2, p3, p4, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getRandomVehicleBackBumperInSphere = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.getRandomVehicleBackBumperInSphere(p0, p1, p2, p3, p4, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getClosest = function (x, y, z, radius, modelHash, flags) {
    let $res = natives.getClosestVehicle(x, y, z, radius, modelHash, flags);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getClosestVehicle = function (x, y, z, radius, modelHash, flags) {
    let $res = natives.getClosestVehicle(x, y, z, radius, modelHash, flags);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getTrainCarriage = function (train, trailerNumber) {
    let $res = natives.getTrainCarriage(train, trailerNumber);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isMissionTrain = function (vehicle) {
    let $res = natives.isMissionTrain(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.deleteMissionTrain = function (train) {
    let $res = natives.deleteMissionTrain(train);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.train = $res[1];
    return $resObj.train;
};
mp.game2.vehicle.setMissionTrainAsNoLongerNeeded = function (train, p1) {
    let $res = natives.setMissionTrainAsNoLongerNeeded(train, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.train = $res[1];
    return $resObj.train;
};
mp.game2.vehicle.setMissionTrainCoords = function (train, x, y, z) {
    let $res = natives.setMissionTrainCoords(train, x, y, z);
};
mp.game2.vehicle.isThisModelABoat = function (model) {
    let $res = natives.isThisModelABoat(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelAJetski = function (model) {
    let $res = natives.isThisModelAJetski(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelAnEmergencyBoat = function (model) {
    let $res = natives.isThisModelAJetski(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelAPlane = function (model) {
    let $res = natives.isThisModelAPlane(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelAHeli = function (model) {
    let $res = natives.isThisModelAHeli(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelACar = function (model) {
    let $res = natives.isThisModelACar(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelATrain = function (model) {
    let $res = natives.isThisModelATrain(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelABike = function (model) {
    let $res = natives.isThisModelABike(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelABicycle = function (model) {
    let $res = natives.isThisModelABicycle(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelAQuadbike = function (model) {
    let $res = natives.isThisModelAQuadbike(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelAnAmphibiousCar = function (model) {
    let $res = natives.isThisModelAnAmphibiousCar(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isThisModelAnAmphibiousQuadbike = function (model) {
    let $res = natives.isThisModelAnAmphibiousQuadbike(model);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setHeliBladesFullSpeed = function (vehicle) {
    let $res = natives.setHeliBladesFullSpeed(vehicle);
};
mp.game2.vehicle.setHeliBladesSpeed = function (vehicle, speed) {
    let $res = natives.setHeliBladesSpeed(vehicle, speed);
};
mp.game2.vehicle.setCanBeTargetted = function (vehicle, state) {
    let $res = natives.setVehicleCanBeTargetted(vehicle, state | 0);
};
mp.game2.vehicle.setCanBeVisiblyDamaged = function (vehicle, state) {
    let $res = natives.setVehicleCanBeVisiblyDamaged(vehicle, state | 0);
};
mp.game2.vehicle.setHasUnbreakableLights = function (vehicle, p1) {
    let $res = natives.setVehicleHasUnbreakableLights(vehicle, p1 | 0);
};
mp.game2.vehicle.getDirtLevel = function (vehicle) {
    let $res = natives.getVehicleDirtLevel(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setDirtLevel = function (vehicle, dirtLevel) {
    let $res = natives.setVehicleDirtLevel(vehicle, dirtLevel);
};
mp.game2.vehicle.isDamaged = function (vehicle) {
    let $res = natives.getDoesVehicleHaveDamageDecals(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isDoorFullyOpen = function (vehicle, doorId) {
    let $res = natives.isVehicleDoorFullyOpen(vehicle, doorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setEngineOn = function (vehicle, value, instantly, disableAutoStart) {
    let $res = natives.setVehicleEngineOn(vehicle, value | 0, instantly | 0, disableAutoStart | 0);
};
mp.game2.vehicle.setUndriveable = function (vehicle, toggle) {
    let $res = natives.setVehicleUndriveable(vehicle, toggle | 0);
};
mp.game2.vehicle.setProvidesCover = function (vehicle, toggle) {
    let $res = natives.setVehicleProvidesCover(vehicle, toggle | 0);
};
mp.game2.vehicle.setDoorControl = function (vehicle, doorId, speed, angle) {
    let $res = natives.setVehicleDoorControl(vehicle, doorId, speed, angle);
};
mp.game2.vehicle.setDoorLatched = function (vehicle, doorId, p2, p3, p4) {
    let $res = natives.setVehicleDoorLatched(vehicle, doorId, p2 | 0, p3 | 0, p4 | 0);
};
mp.game2.vehicle.getDoorAngleRatio = function (vehicle, doorId) {
    let $res = natives.getVehicleDoorAngleRatio(vehicle, doorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getPedUsingDoor = function (vehicle, doord) {
    let $res = natives.getPedUsingVehicleDoor(vehicle, doord);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setDoorShut = function (vehicle, doorId, closeInstantly) {
    let $res = natives.setVehicleDoorShut(vehicle, doorId, closeInstantly | 0);
};
mp.game2.vehicle.setDoorBroken = function (vehicle, doorId, deleteDoor) {
    let $res = natives.setVehicleDoorBroken(vehicle, doorId, deleteDoor | 0);
};
mp.game2.vehicle.setCanBreak = function (vehicle, toggle) {
    let $res = natives.setVehicleCanBreak(vehicle, toggle | 0);
};
mp.game2.vehicle.doesHaveRoof = function (vehicle) {
    let $res = natives.doesVehicleHaveRoof(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isBig = function (vehicle) {
    let $res = natives.isBigVehicle(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getNumberOfColours = function (vehicle) {
    let $res = natives.getNumberOfVehicleColours(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setColourCombination = function (vehicle, colorCombination) {
    let $res = natives.setVehicleColourCombination(vehicle, colorCombination);
};
mp.game2.vehicle.getColourCombination = function (vehicle) {
    let $res = natives.getVehicleColourCombination(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setXenonLightsColor = function (vehicle, colorIndex) {
    let $res = natives.setVehicleXenonLightColorIndex(vehicle, colorIndex);
};
mp.game2.vehicle.getXenonLightsColor = function (vehicle) {
    let $res = natives.getVehicleXenonLightColorIndex(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setIsConsideredByPlayer = function (vehicle, toggle) {
    let $res = natives.setVehicleIsConsideredByPlayer(vehicle, toggle | 0);
};
mp.game2.vehicle.getRandomModelInMemory = function (p0) {
    let $res = natives.getRandomVehicleModelInMemory(p0 | 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.modelHash = $res[1];
    $resObj.successIndicator = $res[2];
    return $resObj;
};
mp.game2.vehicle.getRandomVehicleModelInMemory = function (p0) {
    let $res = natives.getRandomVehicleModelInMemory(p0 | 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.modelHash = $res[1];
    $resObj.successIndicator = $res[2];
    return $resObj;
};
mp.game2.vehicle.getDoorLockStatus = function (vehicle) {
    let $res = natives.getVehicleDoorLockStatus(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getDoorDestroyType = function (vehicle, doorId) {
    let $res = natives.getVehicleIndividualDoorLockStatus(vehicle, doorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isDoorDamaged = function (veh, doorID) {
    let $res = natives.isVehicleDoorDamaged(veh, doorID);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setDoorCanBreak = function (vehicle, doorId, isBreakable) {
    let $res = natives.setDoorAllowedToBeBrokenOff(vehicle, doorId, isBreakable | 0);
};
mp.game2.vehicle.isBumperBouncing = function (vehicle, frontBumper) {
    let $res = natives.isVehicleBumperBouncing(vehicle, frontBumper | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isBumperBrokenOff = function (vehicle, front) {
    let $res = natives.isVehicleBumperBrokenOff(vehicle, front | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isCopInArea3D = function (x1, x2, y1, y2, z1, z2) {
    let $res = natives.isCopVehicleInArea3d(x1, x2, y1, y2, z1, z2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isOnAllWheels = function (vehicle) {
    let $res = natives.isVehicleOnAllWheels(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getModelMonetaryValue = function (vehicleModel) {
    let $res = natives.getVehicleModelValue(vehicleModel);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getLayoutHash = function (vehicle) {
    let $res = natives.getVehicleLayoutHash(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setRenderTrainAsDerailed = function (train, toggle) {
    let $res = natives.setRenderTrainAsDerailed(train, toggle | 0);
};
mp.game2.vehicle.setExtraColours = function (vehicle, pearlescentColor, wheelColor) {
    let $res = natives.setVehicleExtraColours(vehicle, pearlescentColor, wheelColor);
};
mp.game2.vehicle.getExtraColours = function (vehicle) {
    let $res = natives.getVehicleExtraColours(vehicle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.pearlescentColor = $res[1];
    $resObj.wheelColor = $res[2];
    return $resObj;
};
mp.game2.vehicle.setInteriorColor = function (vehicle, color) {
    let $res = natives.setVehicleExtraColour5(vehicle, color);
};
mp.game2.vehicle.getInteriorColor = function (vehicle) {
    let $res = natives.getVehicleExtraColour5(vehicle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.color = $res[1];
    return $resObj.color;
};
mp.game2.vehicle.setDashboardColor = function (vehicle, color) {
    let $res = natives.setVehicleExtraColour6(vehicle, color);
};
mp.game2.vehicle.getDashboardColor = function (vehicle) {
    let $res = natives.getVehicleExtraColour6(vehicle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.color = $res[1];
    return $resObj.color;
};
mp.game2.vehicle.stopAllGarageActivity = function () {
    let $res = natives.stopAllGarageActivity();
};
mp.game2.vehicle.setFixed = function (vehicle) {
    let $res = natives.setVehicleFixed(vehicle);
};
mp.game2.vehicle.setDeformationFixed = function (vehicle) {
    let $res = natives.setVehicleDeformationFixed(vehicle);
};
mp.game2.vehicle.setCanEngineOperateOnFire = function (vehicle, toggle) {
    let $res = natives.setVehicleCanEngineMissfire(vehicle, toggle | 0);
};
mp.game2.vehicle.setCanLeakOil = function (vehicle, toggle) {
    let $res = natives.setVehicleCanLeakOil(vehicle, toggle | 0);
};
mp.game2.vehicle.setCanLeakPetrol = function (vehicle, toggle) {
    let $res = natives.setVehicleCanLeakPetrol(vehicle, toggle | 0);
};
mp.game2.vehicle.setDisablePetrolTankFires = function (vehicle, toggle) {
    let $res = natives.setDisableVehiclePetrolTankFires(vehicle, toggle | 0);
};
mp.game2.vehicle.setDisablePetrolTankDamage = function (vehicle, toggle) {
    let $res = natives.setDisableVehiclePetrolTankDamage(vehicle, toggle | 0);
};
mp.game2.vehicle.setDisableEngineFires = function (vehicle, toggle) {
    let $res = natives.setDisableVehicleEngineFires(vehicle, toggle | 0);
};
mp.game2.vehicle.setDisablePretendOccupants = function (vehicle, toggle) {
    let $res = natives.setDisablePretendOccupants(vehicle, toggle | 0);
};
mp.game2.vehicle.removeVehiclesFromGeneratorsInArea = function (x1, y1, z1, x2, y2, z2, unk) {
    let $res = natives.removeVehiclesFromGeneratorsInArea(x1, y1, z1, x2, y2, z2, unk);
};
mp.game2.vehicle.setSteerBias = function (vehicle, value) {
    let $res = natives.setVehicleSteerBias(vehicle, value);
};
mp.game2.vehicle.isExtraTurnedOn = function (vehicle, extraId) {
    let $res = natives.isVehicleExtraTurnedOn(vehicle, extraId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setExtra = function (vehicle, extraId, disable) {
    let $res = natives.setVehicleExtra(vehicle, extraId, disable | 0);
};
mp.game2.vehicle.doesExtraExist = function (vehicle, extraId) {
    let $res = natives.doesExtraExist(vehicle, extraId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.doesTyreExist = function (vehicle, tyreIndex) {
    let $res = natives.isExtraBrokenOff(vehicle, tyreIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setConvertibleRoof = function (vehicle, p1) {
    let $res = natives.setConvertibleRoof(vehicle, p1 | 0);
};
mp.game2.vehicle.lowerConvertibleRoof = function (vehicle, instantlyLower) {
    let $res = natives.lowerConvertibleRoof(vehicle, instantlyLower | 0);
};
mp.game2.vehicle.raiseConvertibleRoof = function (vehicle, instantlyRaise) {
    let $res = natives.raiseConvertibleRoof(vehicle, instantlyRaise | 0);
};
mp.game2.vehicle.getConvertibleRoofState = function (vehicle) {
    let $res = natives.getConvertibleRoofState(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isAConvertible = function (vehicle, p1) {
    let $res = natives.isVehicleAConvertible(vehicle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.transformToSubmarine = function (vehicle, noAnimation) {
    let $res = natives.transformToSubmarine(vehicle, noAnimation | 0);
};
mp.game2.vehicle.transformSubmarineTo = function (vehicle, noAnimation) {
    let $res = natives.transformToCar(vehicle, noAnimation | 0);
};
mp.game2.vehicle.getIsSubmarineTransformed = function (vehicle) {
    let $res = natives.isVehicleInSubmarineMode(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isStoppedAtTrafficLights = function (vehicle) {
    let $res = natives.isVehicleStoppedAtTrafficLights(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setDamage = function (vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel) {
    let $res = natives.setVehicleDamage(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel | 0);
};
mp.game2.vehicle.setVehicleDamage = function (vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel) {
    let $res = natives.setVehicleDamage(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel | 0);
};
mp.game2.vehicle.getEngineHealth = function (vehicle) {
    let $res = natives.getVehicleEngineHealth(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setEngineHealth = function (vehicle, health) {
    let $res = natives.setVehicleEngineHealth(vehicle, health);
};
mp.game2.vehicle.setPlaneEngineHealth = function (vehicle, health) {
    let $res = natives.setPlaneEngineHealth(vehicle, health);
};
mp.game2.vehicle.getPetrolTankHealth = function (vehicle) {
    let $res = natives.getVehiclePetrolTankHealth(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setPetrolTankHealth = function (vehicle, health) {
    let $res = natives.setVehiclePetrolTankHealth(vehicle, health);
};
mp.game2.vehicle.isStuckTimerUp = function (vehicle, p1, p2) {
    let $res = natives.isVehicleStuckTimerUp(vehicle, p1, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.resetStuckTimer = function (vehicle, nullAttributes) {
    let $res = natives.resetVehicleStuckTimer(vehicle, nullAttributes | 0);
};
mp.game2.vehicle.isDriveable = function (vehicle, isOnFireCheck) {
    let $res = natives.isVehicleDriveable(vehicle, isOnFireCheck | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setHasBeenOwnedByPlayer = function (vehicle, owned) {
    let $res = natives.setVehicleHasBeenOwnedByPlayer(vehicle, owned | 0);
};
mp.game2.vehicle.setNeedsToBeHotwired = function (vehicle, toggle) {
    let $res = natives.setVehicleNeedsToBeHotwired(vehicle, toggle | 0);
};
mp.game2.vehicle.startHorn = function (vehicle, duration, mode, forever) {
    let $res = natives.startVehicleHorn(vehicle, duration, mode, forever | 0);
};
mp.game2.vehicle.setSilent = function (vehicle, toggle) {
    let $res = natives.setVehicleInCarModShop(vehicle, toggle | 0);
};
mp.game2.vehicle.setHasStrongAxles = function (vehicle, toggle) {
    let $res = natives.setVehicleHasStrongAxles(vehicle, toggle | 0);
};
mp.game2.vehicle.getDisplayNameFromModel = function (modelHash) {
    let $res = natives.getDisplayNameFromVehicleModel(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getDisplayNameFromVehicleModel = function (modelHash) {
    let $res = natives.getDisplayNameFromVehicleModel(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getMakeNameFromModel = function (modelHash) {
    let $res = natives.getMakeNameFromVehicleModel(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getDeformationAtPos = function (vehicle, offsetX, offsetY, offsetZ) {
    let $res = natives.getVehicleDeformationAtPos(vehicle, offsetX, offsetY, offsetZ);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.vehicle.setLivery = function (vehicle, livery) {
    let $res = natives.setVehicleLivery(vehicle, livery);
};
mp.game2.vehicle.getLivery = function (vehicle) {
    let $res = natives.getVehicleLivery(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getLiveryCount = function (vehicle) {
    let $res = natives.getVehicleLiveryCount(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setRoofLivery = function (vehicle, livery) {
    let $res = natives.setVehicleLivery2(vehicle, livery);
};
mp.game2.vehicle.getRoofLivery = function (vehicle) {
    let $res = natives.getVehicleLivery2(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getRoofLiveryCount = function (vehicle) {
    let $res = natives.getVehicleLivery2Count(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isWindowIntact = function (vehicle, windowIndex) {
    let $res = natives.isVehicleWindowIntact(vehicle, windowIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.areAllWindowsIntact = function (vehicle) {
    let $res = natives.areAllVehicleWindowsIntact(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.areAnySeatsFree = function (vehicle) {
    let $res = natives.areAnyVehicleSeatsFree(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.resetWheels = function (vehicle, toggle) {
    let $res = natives.resetVehicleWheels(vehicle, toggle | 0);
};
mp.game2.vehicle.isHeliPartBroken = function (vehicle, p1, p2, p3) {
    let $res = natives.isHeliPartBroken(vehicle, p1 | 0, p2 | 0, p3 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getHeliMainRotorHealth = function (vehicle) {
    let $res = natives.getHeliMainRotorHealth(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getHeliTailRotorHealth = function (vehicle) {
    let $res = natives.getHeliTailRotorHealth(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getHeliTailBoomHealth = function (vehicle) {
    let $res = natives.getHeliTailBoomHealth(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setHeliMainRotorHealth = function (vehicle, health) {
    let $res = natives.setHeliMainRotorHealth(vehicle, health);
};
mp.game2.vehicle.setHeliTailRotorHealth = function (vehicle, health) {
    let $res = natives.setHeliTailRotorHealth(vehicle, health);
};
mp.game2.vehicle.setHeliTailExplodeThrowDashboard = function (vehicle, p1) {
    let $res = natives.setHeliTailBoomCanBreakOff(vehicle, p1 | 0);
};
mp.game2.vehicle.setNameDebug = function (vehicle, name) {
    let $res = natives.setVehicleNameDebug(vehicle, name);
};
mp.game2.vehicle.setExplodesOnHighExplosionDamage = function (vehicle, toggle) {
    let $res = natives.setVehicleExplodesOnHighExplosionDamage(vehicle, toggle | 0);
};
mp.game2.vehicle.setDisableTowing = function (vehicle, toggle) {
    let $res = natives.setVehicleDisableTowing(vehicle, toggle | 0);
};
mp.game2.vehicle.doesHaveLandingGear = function (vehicle) {
    let $res = natives.getVehicleHasLandingGear(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.controlLandingGear = function (vehicle, state) {
    let $res = natives.controlLandingGear(vehicle, state);
};
mp.game2.vehicle.getLandingGearState = function (vehicle) {
    let $res = natives.getLandingGearState(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isAnyNearPoint = function (x, y, z, radius) {
    let $res = natives.isAnyVehicleNearPoint(x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isAnyVehicleNearPoint = function (x, y, z, radius) {
    let $res = natives.isAnyVehicleNearPoint(x, y, z, radius);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.requestHighDetailModel = function (vehicle) {
    let $res = natives.requestVehicleHighDetailModel(vehicle);
};
mp.game2.vehicle.removeHighDetailModel = function (vehicle) {
    let $res = natives.removeVehicleHighDetailModel(vehicle);
};
mp.game2.vehicle.isHighDetail = function (vehicle) {
    let $res = natives.isVehicleHighDetail(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.requestAsset = function (vehicleHash, vehicleAsset) {
    let $res = natives.requestVehicleAsset(vehicleHash, vehicleAsset);
};
mp.game2.vehicle.requestVehicleAsset = function (vehicleHash, vehicleAsset) {
    let $res = natives.requestVehicleAsset(vehicleHash, vehicleAsset);
};
mp.game2.vehicle.hasAssetLoaded = function (vehicleAsset) {
    let $res = natives.hasVehicleAssetLoaded(vehicleAsset);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.hasVehicleAssetLoaded = function (vehicleAsset) {
    let $res = natives.hasVehicleAssetLoaded(vehicleAsset);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.removeAsset = function (vehicleAsset) {
    let $res = natives.removeVehicleAsset(vehicleAsset);
};
mp.game2.vehicle.removeVehicleAsset = function (vehicleAsset) {
    let $res = natives.removeVehicleAsset(vehicleAsset);
};
mp.game2.vehicle.setTowTruckArmPosition = function (vehicle, position) {
    let $res = natives.setVehicleTowTruckArmPosition(vehicle, position);
};
mp.game2.vehicle.attachToTowTruck = function (towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ) {
    let $res = natives.attachVehicleToTowTruck(towTruck, vehicle, rear | 0, hookOffsetX, hookOffsetY, hookOffsetZ);
};
mp.game2.vehicle.detachFromTowTruck = function (towTruck, vehicle) {
    let $res = natives.detachVehicleFromTowTruck(towTruck, vehicle);
};
mp.game2.vehicle.detachFromAnyTowTruck = function (vehicle) {
    let $res = natives.detachVehicleFromAnyTowTruck(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isAttachedToTowTruck = function (towTruck, vehicle) {
    let $res = natives.isVehicleAttachedToTowTruck(towTruck, vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getEntityAttachedToTowTruck = function (towTruck) {
    let $res = natives.getEntityAttachedToTowTruck(towTruck);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setAutomaticallyAttaches = function (vehicle, p1, p2) {
    let $res = natives.setVehicleAutomaticallyAttaches(vehicle, p1 | 0, p2);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setBulldozerArmPosition = function (vehicle, position, p2) {
    let $res = natives.setVehicleBulldozerArmPosition(vehicle, position, p2 | 0);
};
mp.game2.vehicle.setTankTurretPosition = function (vehicle, position, p2) {
    let $res = natives.setVehicleTankTurretPosition(vehicle, position, p2 | 0);
};
mp.game2.vehicle.setTurretSpeedThisFrame = function (vehicle, speed) {
    let $res = natives.setVehicleTurretSpeedThisFrame(vehicle, speed);
};
mp.game2.vehicle.disableTurretMovementThisFrame = function (vehicle) {
    let $res = natives.disableVehicleTurretMovementThisFrame(vehicle);
};
mp.game2.vehicle.setFlightNozzlePosition = function (vehicle, angleRatio) {
    let $res = natives.setVehicleFlightNozzlePosition(vehicle, angleRatio);
};
mp.game2.vehicle.setFlightNozzlePositionImmediate = function (vehicle, angle) {
    let $res = natives.setVehicleFlightNozzlePositionImmediate(vehicle, angle);
};
mp.game2.vehicle.getFlightNozzlePosition = function (plane) {
    let $res = natives.getVehicleFlightNozzlePosition(plane);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setDisableFlightNozzlePosition = function (vehicle, toggle) {
    let $res = natives.setDisableVerticalFlightModeTransition(vehicle, toggle | 0);
};
mp.game2.vehicle.setBurnout = function (vehicle, toggle) {
    let $res = natives.setVehicleBurnout(vehicle, toggle | 0);
};
mp.game2.vehicle.isInBurnout = function (vehicle) {
    let $res = natives.isVehicleInBurnout(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setReduceGrip = function (vehicle, toggle) {
    let $res = natives.setVehicleReduceGrip(vehicle, toggle | 0);
};
mp.game2.vehicle.setReduceTraction = function (vehicle, val) {
    let $res = natives.setVehicleReduceGripLevel(vehicle, val);
};
mp.game2.vehicle.setIndicatorLights = function (vehicle, turnSignal, toggle) {
    let $res = natives.setVehicleIndicatorLights(vehicle, turnSignal, toggle | 0);
};
mp.game2.vehicle.setBrakeLights = function (vehicle, toggle) {
    let $res = natives.setVehicleBrakeLights(vehicle, toggle | 0);
};
mp.game2.vehicle.setHandbrake = function (vehicle, toggle) {
    let $res = natives.setVehicleHandbrake(vehicle, toggle | 0);
};
mp.game2.vehicle.setBrake = function (vehicle, toggle) {
    let $res = natives.setVehicleBrake(vehicle, toggle | 0);
};
mp.game2.vehicle.instantlyFillPopulation = function () {
    let $res = natives.instantlyFillVehiclePopulation();
};
mp.game2.vehicle.hasFilledPopulation = function () {
    let $res = natives.hasInstantFillVehiclePopulationFinished();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getTrailerVehicle = function (vehicle) {
    let $res = natives.getVehicleTrailerVehicle(vehicle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.trailer = $res[1];
    return $res[0] == 1 ? $resObj.trailer : undefined;
};
mp.game2.vehicle.setUsesLargeRearRamp = function (vehicle, toggle) {
    let $res = natives.setVehicleUsesLargeRearRamp(vehicle, toggle | 0);
};
mp.game2.vehicle.setRudderBroken = function (vehicle, toggle) {
    let $res = natives.setVehicleRudderBroken(vehicle, toggle | 0);
};
mp.game2.vehicle.setConvertibleRoofLatchState = function (vehicle, state) {
    let $res = natives.setConvertibleRoofLatchState(vehicle, state | 0);
};
mp.game2.vehicle.getEstimatedMaxSpeed = function (vehicle) {
    let $res = natives.getVehicleEstimatedMaxSpeed(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getMaxBraking = function (vehicle) {
    let $res = natives.getVehicleMaxBraking(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getMaxTraction = function (vehicle) {
    let $res = natives.getVehicleMaxTraction(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getAcceleration = function (vehicle) {
    let $res = natives.getVehicleAcceleration(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModelEstimatedMaxSpeed = function (modelHash) {
    let $res = natives.getVehicleModelEstimatedMaxSpeed(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleModelMaxSpeed = function (modelHash) {
    let $res = natives.getVehicleModelEstimatedMaxSpeed(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModelMaxBraking = function (modelHash) {
    let $res = natives.getVehicleModelMaxBraking(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleModelMaxBraking = function (modelHash) {
    let $res = natives.getVehicleModelMaxBraking(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModelMaxBrakingMaxMods = function (modelHash) {
    let $res = natives.getVehicleModelMaxBrakingMaxMods(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModelMaxTraction = function (modelHash) {
    let $res = natives.getVehicleModelMaxTraction(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleModelMaxTraction = function (modelHash) {
    let $res = natives.getVehicleModelMaxTraction(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModelAcceleration = function (modelHash) {
    let $res = natives.getVehicleModelAcceleration(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleModelAcceleration = function (modelHash) {
    let $res = natives.getVehicleModelAcceleration(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModelEstimatedAgility = function (modelHash) {
    let $res = natives.getVehicleModelAccelerationMaxMods(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModelMaxKnots = function (modelHash) {
    let $res = natives.getFlyingVehicleModelAgility(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModelMoveResistance = function (modelHash) {
    let $res = natives.getBoatVehicleModelAgility(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getClassEstimatedMaxSpeed = function (vehicleClass) {
    let $res = natives.getVehicleClassEstimatedMaxSpeed(vehicleClass);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getClassMaxTraction = function (vehicleClass) {
    let $res = natives.getVehicleClassMaxTraction(vehicleClass);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleClassMaxTraction = function (vehicleClass) {
    let $res = natives.getVehicleClassMaxTraction(vehicleClass);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getClassMaxAgility = function (vehicleClass) {
    let $res = natives.getVehicleClassMaxAgility(vehicleClass);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleClassMaxAgility = function (vehicleClass) {
    let $res = natives.getVehicleClassMaxAgility(vehicleClass);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getClassMaxAcceleration = function (vehicleClass) {
    let $res = natives.getVehicleClassMaxAcceleration(vehicleClass);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleClassMaxAcceleration = function (vehicleClass) {
    let $res = natives.getVehicleClassMaxAcceleration(vehicleClass);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getClassMaxBraking = function (vehicleClass) {
    let $res = natives.getVehicleClassMaxBraking(vehicleClass);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleClassMaxBraking = function (vehicleClass) {
    let $res = natives.getVehicleClassMaxBraking(vehicleClass);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.addRoadNodeSpeedZone = function (x, y, z, radius, speed, p5) {
    let $res = natives.addRoadNodeSpeedZone(x, y, z, radius, speed, p5 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.removeRoadNodeSpeedZone = function (speedzone) {
    let $res = natives.removeRoadNodeSpeedZone(speedzone);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.openBombBayDoors = function (vehicle) {
    let $res = natives.openBombBayDoors(vehicle);
};
mp.game2.vehicle.closeBombBayDoors = function (vehicle) {
    let $res = natives.closeBombBayDoors(vehicle);
};
mp.game2.vehicle.areBombBayDoorsOpen = function (aircraft) {
    let $res = natives.getAreBombBayDoorsOpen(aircraft);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isSearchlightOn = function (vehicle) {
    let $res = natives.isVehicleSearchlightOn(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setSearchlight = function (heli, toggle, canBeUsedByAI) {
    let $res = natives.setVehicleSearchlight(heli, toggle | 0, canBeUsedByAI | 0);
};
mp.game2.vehicle.doesHaveSearchlight = function (vehicle) {
    let $res = natives.doesVehicleHaveSearchlight(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isSeatAccessible = function (ped, vehicle, seatIndex, side, onEnter) {
    let $res = natives.isEntryPointForSeatClear(ped, vehicle, seatIndex, side | 0, onEnter | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getEntryPositionOfDoor = function (vehicle, doorId) {
    let $res = natives.getEntryPointPosition(vehicle, doorId);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.vehicle.canShuffleSeat = function (vehicle, seatIndex) {
    let $res = natives.canShuffleSeat(vehicle, seatIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getNumModKits = function (vehicle) {
    let $res = natives.getNumModKits(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setModKit = function (vehicle, modKit) {
    let $res = natives.setVehicleModKit(vehicle, modKit);
};
mp.game2.vehicle.getModKit = function (vehicle) {
    let $res = natives.getVehicleModKit(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModKitType = function (vehicle) {
    let $res = natives.getVehicleModKitType(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getWheelType = function (vehicle) {
    let $res = natives.getVehicleWheelType(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setWheelType = function (vehicle, WheelType) {
    let $res = natives.setVehicleWheelType(vehicle, WheelType);
};
mp.game2.vehicle.getNumModColors = function (paintType, p1) {
    let $res = natives.getNumModColors(paintType, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setModColor1 = function (vehicle, paintType, color, pearlescentColor) {
    let $res = natives.setVehicleModColor1(vehicle, paintType, color, pearlescentColor);
};
mp.game2.vehicle.setModColor2 = function (vehicle, paintType, color) {
    let $res = natives.setVehicleModColor2(vehicle, paintType, color);
};
mp.game2.vehicle.getModColor1 = function (vehicle) {
    let $res = natives.getVehicleModColor1(vehicle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.paintType = $res[1];
    $resObj.color = $res[2];
    $resObj.pearlescentColor = $res[3];
    return $resObj;
};
mp.game2.vehicle.getModColor2 = function (vehicle) {
    let $res = natives.getVehicleModColor2(vehicle, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.paintType = $res[1];
    $resObj.color = $res[2];
    return $resObj;
};
mp.game2.vehicle.getModColor1Name = function (vehicle, p1) {
    let $res = natives.getVehicleModColor1Name(vehicle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModColor2Name = function (vehicle) {
    let $res = natives.getVehicleModColor2Name(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.haveModsStreamedIn = function (vehicle) {
    let $res = natives.haveVehicleModsStreamedIn(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setMod = function (vehicle, modType, modIndex, customTires) {
    let $res = natives.setVehicleMod(vehicle, modType, modIndex, customTires | 0);
};
mp.game2.vehicle.setVehicleMod = function (vehicle, modType, modIndex, customTires) {
    let $res = natives.setVehicleMod(vehicle, modType, modIndex, customTires | 0);
};
mp.game2.vehicle.getMod = function (vehicle, modType) {
    let $res = natives.getVehicleMod(vehicle, modType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleMod = function (vehicle, modType) {
    let $res = natives.getVehicleMod(vehicle, modType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModVariation = function (vehicle, modType) {
    let $res = natives.getVehicleModVariation(vehicle, modType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getNumMods = function (vehicle, modType) {
    let $res = natives.getNumVehicleMods(vehicle, modType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.removeMod = function (vehicle, modType) {
    let $res = natives.removeVehicleMod(vehicle, modType);
};
mp.game2.vehicle.toggleMod = function (vehicle, modType, toggle) {
    let $res = natives.toggleVehicleMod(vehicle, modType, toggle | 0);
};
mp.game2.vehicle.isToggleModOn = function (vehicle, modType) {
    let $res = natives.isToggleModOn(vehicle, modType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getModTextLabel = function (vehicle, modType, modValue) {
    let $res = natives.getModTextLabel(vehicle, modType, modValue);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModSlotName = function (vehicle, modType) {
    let $res = natives.getModSlotName(vehicle, modType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getLiveryName = function (vehicle, liveryIndex) {
    let $res = natives.getLiveryName(vehicle, liveryIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModModifierValue = function (vehicle, modType, modIndex) {
    let $res = natives.getVehicleModModifierValue(vehicle, modType, modIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getModIdentifierHash = function (vehicle, modType, modIndex) {
    let $res = natives.getVehicleModIdentifierHash(vehicle, modType, modIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.preloadMod = function (p0, modType, p2) {
    let $res = natives.preloadVehicleMod(p0, modType, p2);
};
mp.game2.vehicle.preloadVehicleMod = function (p0, modType, p2) {
    let $res = natives.preloadVehicleMod(p0, modType, p2);
};
mp.game2.vehicle.hasPreloadModsFinished = function (p0) {
    let $res = natives.hasPreloadModsFinished(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.releasePreloadMods = function (vehicle) {
    let $res = natives.releasePreloadMods(vehicle);
};
mp.game2.vehicle.setTyreSmokeColor = function (vehicle, r, g, b) {
    let $res = natives.setVehicleTyreSmokeColor(vehicle, r, g, b);
};
mp.game2.vehicle.getTyreSmokeColor = function (vehicle) {
    let $res = natives.getVehicleTyreSmokeColor(vehicle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.game2.vehicle.setWindowTint = function (vehicle, tint) {
    let $res = natives.setVehicleWindowTint(vehicle, tint);
};
mp.game2.vehicle.getWindowTint = function (vehicle) {
    let $res = natives.getVehicleWindowTint(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getNumWindowTints = function () {
    let $res = natives.getNumVehicleWindowTints();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getColor = function (vehicle) {
    let $res = natives.getVehicleColor(vehicle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.game2.vehicle.getCauseOfDestruction = function (vehicle) {
    let $res = natives.getVehicleCauseOfDestruction(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.overrideOverheatHealth = function (vehicle, health) {
    let $res = natives.overridePlaneDamageThrehsold(vehicle, health);
};
mp.game2.vehicle.getIsLeftHeadlightDamaged = function (vehicle) {
    let $res = natives.getIsLeftVehicleHeadlightDamaged(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getIsRightHeadlightDamaged = function (vehicle) {
    let $res = natives.getIsRightVehicleHeadlightDamaged(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isEngineOnFire = function (vehicle) {
    let $res = natives.getBothVehicleHeadlightsDamaged(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.modifyTopSpeed = function (vehicle, value) {
    let $res = natives.modifyVehicleTopSpeed(vehicle, value);
};
mp.game2.vehicle.setMaxSpeed = function (vehicle, speed) {
    let $res = natives.setVehicleMaxSpeed(vehicle, speed);
};
mp.game2.vehicle.addCombatAngledAvoidanceArea = function (p0, p1, p2, p3, p4, p5, p6) {
    let $res = natives.addVehicleCombatAngledAvoidanceArea(p0, p1, p2, p3, p4, p5, p6);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.removeCombatAvoidanceArea = function (p0) {
    let $res = natives.removeVehicleCombatAvoidanceArea(p0);
};
mp.game2.vehicle.isAnyPedRappellingFromHeli = function (vehicle) {
    let $res = natives.isAnyPedRappellingFromHeli(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setCheatPowerIncrease = function (vehicle, value) {
    let $res = natives.setVehicleCheatPowerIncrease(vehicle, value);
};
mp.game2.vehicle.setIsWanted = function (vehicle, state) {
    let $res = natives.setVehicleIsWanted(vehicle, state | 0);
};
mp.game2.vehicle.setBoatBoomPositionRatio = function (vehicle, ratio) {
    let $res = natives.swingBoatBoomToRatio(vehicle, ratio);
};
mp.game2.vehicle.getBoatBoomPositionRatio2 = function (vehicle, p1) {
    let $res = natives.swingBoatBoomFreely(vehicle, p1 | 0);
};
mp.game2.vehicle.getBoatBoomPositionRatio3 = function (vehicle, p1) {
    let $res = natives.allowBoatBoomToAnimate(vehicle, p1 | 0);
};
mp.game2.vehicle.getBoatBoomPositionRatio = function (vehicle) {
    let $res = natives.getBoatBoomPositionRatio(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.disablePlaneAileron = function (vehicle, p1, p2) {
    let $res = natives.disablePlaneAileron(vehicle, p1 | 0, p2 | 0);
};
mp.game2.vehicle.getIsEngineRunning = function (vehicle) {
    let $res = natives.getIsVehicleEngineRunning(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setUseAlternateHandling = function (vehicle, toggle) {
    let $res = natives.setVehicleUseAlternateHandling(vehicle, toggle | 0);
};
mp.game2.vehicle.setBikeOnStand = function (vehicle, x, y) {
    let $res = natives.setBikeOnStand(vehicle, x, y);
};
mp.game2.vehicle.setLastDriven = function (vehicle) {
    let $res = natives.setLastDrivenVehicle(vehicle);
};
mp.game2.vehicle.getLastDriven = function () {
    let $res = natives.getLastDrivenVehicle();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.clearLastDriven = function () {
    let $res = natives.clearLastDrivenVehicle();
};
mp.game2.vehicle.setHasBeenDrivenFlag = function (vehicle, toggle) {
    let $res = natives.setVehicleHasBeenDrivenFlag(vehicle, toggle | 0);
};
mp.game2.vehicle.setTaskGotoPlaneMinHeightAboveTerrain = function (plane, height) {
    let $res = natives.setTaskVehicleGotoPlaneMinHeightAboveTerrain(plane, height);
};
mp.game2.vehicle.setLodMultiplier = function (vehicle, multiplier) {
    let $res = natives.setVehicleLodMultiplier(vehicle, multiplier);
};
mp.game2.vehicle.setCanSaveInGarage = function (vehicle, toggle) {
    let $res = natives.setVehicleCanSaveInGarage(vehicle, toggle | 0);
};
mp.game2.vehicle.getNumberOfBrokenOffBones = function (vehicle) {
    let $res = natives.getVehicleNumOfBrokenOffParts(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getNumberOfBrokenBones = function (vehicle) {
    let $res = natives.getVehicleNumOfBrokenLoosenParts(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setGeneratesEngineShockingEvents = function (vehicle, toggle) {
    let $res = natives.setVehicleGeneratesEngineShockingEvents(vehicle, toggle | 0);
};
mp.game2.vehicle.copyDamages = function (sourceVehicle, targetVehicle) {
    let $res = natives.copyVehicleDamages(sourceVehicle, targetVehicle);
};
mp.game2.vehicle.setLightsCutoffDistanceTweak = function (distance) {
    let $res = natives.setLightsCutoffDistanceTweak(distance);
};
mp.game2.vehicle.setShootAtTarget = function (driver, entity, xTarget, yTarget, zTarget) {
    let $res = natives.setVehicleShootAtTarget(driver, entity, xTarget, yTarget, zTarget);
};
mp.game2.vehicle.setVehicleShootAtTarget = function (driver, entity, xTarget, yTarget, zTarget) {
    let $res = natives.setVehicleShootAtTarget(driver, entity, xTarget, yTarget, zTarget);
};
mp.game2.vehicle.getLockOnTarget = function (vehicle) {
    let $res = natives.getVehicleLockOnTarget(vehicle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.entity = $res[1];
    return $res[0] == 1 ? $resObj.entity : undefined;
};
mp.game2.vehicle.setForceHd = function (vehicle, toggle) {
    let $res = natives.setForceHdVehicle(vehicle, toggle | 0);
};
mp.game2.vehicle.getPlateType = function (vehicle) {
    let $res = natives.getVehiclePlateType(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.trackVisibility = function (vehicle) {
    let $res = natives.trackVehicleVisibility(vehicle);
};
mp.game2.vehicle.isVisible = function (vehicle) {
    let $res = natives.isVehicleVisible(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setGravity = function (vehicle, toggle) {
    let $res = natives.setVehicleGravity(vehicle, toggle | 0);
};
mp.game2.vehicle.setEnableSlipstreaming = function (toggle) {
    let $res = natives.setEnableVehicleSlipstreaming(toggle | 0);
};
mp.game2.vehicle.getCurrentSlipstreamDraft = function (vehicle) {
    let $res = natives.getVehicleCurrentTimeInSlipStream(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isSlipstreamLeader = function (vehicle) {
    let $res = natives.isVehicleProducingSlipStream(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setInactiveDuringPlayback = function (vehicle, toggle) {
    let $res = natives.setVehicleInactiveDuringPlayback(vehicle, toggle | 0);
};
mp.game2.vehicle.setActiveDuringPlayback = function (p0, p1) {
    let $res = natives.setVehicleActiveDuringPlayback(p0, p1 | 0);
};
mp.game2.vehicle.isSprayable = function (vehicle) {
    let $res = natives.isVehicleSprayable(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setEngineCanDegrade = function (vehicle, toggle) {
    let $res = natives.setVehicleEngineCanDegrade(vehicle, toggle | 0);
};
mp.game2.vehicle.setShadowEffect = function (vehicle, p1, p2) {
    let $res = natives.disableVehcileDynamicAmbientScales(vehicle, p1, p2);
};
mp.game2.vehicle.removeShadowEffect = function (vehicle) {
    let $res = natives.enableVehicleDynamicAmbientScales(vehicle);
};
mp.game2.vehicle.isPlaneLandingGearIntact = function (plane) {
    let $res = natives.isPlaneLandingGearIntact(plane);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.arePlanePropellersIntact = function (plane) {
    let $res = natives.arePlanePropellersIntact(plane);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setPlanePropellersHealth = function (plane, health) {
    let $res = natives.setPlanePropellerHealth(plane, health);
};
mp.game2.vehicle.setCanDeformWheels = function (vehicle, toggle) {
    let $res = natives.setVehicleCanDeformWheels(vehicle, toggle | 0);
};
mp.game2.vehicle.isStolen = function (vehicle) {
    let $res = natives.isVehicleStolen(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setIsStolen = function (vehicle, isStolen) {
    let $res = natives.setVehicleIsStolen(vehicle, isStolen | 0);
};
mp.game2.vehicle.setPlaneTurbulenceMultiplier = function (vehicle, multiplier) {
    let $res = natives.setPlaneTurbulenceMultiplier(vehicle, multiplier);
};
mp.game2.vehicle.arePlaneWingsIntact = function (plane) {
    let $res = natives.areWingsOfPlaneIntact(plane);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.detachFromCargobob = function (vehicle, cargobob) {
    let $res = natives.detachVehicleFromCargobob(vehicle, cargobob);
};
mp.game2.vehicle.detachFromAnyCargobob = function (vehicle) {
    let $res = natives.detachVehicleFromAnyCargobob(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.detachEntityFromCargobob = function (cargobob, entity) {
    let $res = natives.detachEntityFromCargobob(cargobob, entity);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.isAttachedToCargobob = function (cargobob, vehicleAttached) {
    let $res = natives.isVehicleAttachedToCargobob(cargobob, vehicleAttached);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getAttachedToCargobob = function (cargobob) {
    let $res = natives.getVehicleAttachedToCargobob(cargobob);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getEntityAttachedToCargobob = function (p0) {
    let $res = natives.getEntityAttachedToCargobob(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.attachToCargobob = function (vehicle, cargobob, p2, x, y, z) {
    let $res = natives.attachVehicleToCargobob(vehicle, cargobob, p2, x, y, z);
};
mp.game2.vehicle.attachEntityToCargobob = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.attachEntityToCargobob(p0, p1, p2, p3, p4, p5);
};
mp.game2.vehicle.setCargobobHookCanDetach = function (cargobob, toggle) {
    let $res = natives.setCargobobForceDontDetachVehicle(cargobob, toggle | 0);
};
mp.game2.vehicle.getCargobobHookPosition = function (cargobob) {
    let $res = natives.getAttachedPickUpHookPosition(cargobob);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.vehicle.doesCargobobHavePickUpRope = function (cargobob) {
    let $res = natives.doesCargobobHavePickUpRope(cargobob);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.createPickUpRopeForCargobob = function (cargobob, state) {
    let $res = natives.createPickUpRopeForCargobob(cargobob, state);
};
mp.game2.vehicle.removePickUpRopeForCargobob = function (cargobob) {
    let $res = natives.removePickUpRopeForCargobob(cargobob);
};
mp.game2.vehicle.setPickupRopeLengthForCargobob = function (cargobob, length1, length2, p3) {
    let $res = natives.setPickupRopeLengthForCargobob(cargobob, length1, length2, p3 | 0);
};
mp.game2.vehicle.setCargobobHookPosition = function (cargobob, length1, length2, p3) {
    let $res = natives.setPickupRopeLengthForCargobob(cargobob, length1, length2, p3 | 0);
};
mp.game2.vehicle.setCargobobPickupRopeDampingMultiplier = function (p0, p1) {
    let $res = natives.setCargobobPickupRopeDampingMultiplier(p0, p1);
};
mp.game2.vehicle.setCargobobPickupRopeType = function (p0, p1) {
    let $res = natives.setCargobobPickupRopeType(p0, p1);
};
mp.game2.vehicle.doesCargobobHavePickupMagnet = function (cargobob) {
    let $res = natives.doesCargobobHavePickupMagnet(cargobob);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setCargobobPickupMagnetActive = function (cargobob, isActive) {
    let $res = natives.setCargobobPickupMagnetActive(cargobob, isActive | 0);
};
mp.game2.vehicle.setCargobobPickupMagnetStrength = function (cargobob, strength) {
    let $res = natives.setCargobobPickupMagnetStrength(cargobob, strength);
};
mp.game2.vehicle.setCargobobPickupMagnetEffectRadius = function (cargobob, p1) {
    let $res = natives.setCargobobPickupMagnetFalloff(cargobob, p1);
};
mp.game2.vehicle.setCargobobPickupMagnetReducedFalloff = function (cargobob, p1) {
    let $res = natives.setCargobobPickupMagnetReducedStrength(cargobob, p1);
};
mp.game2.vehicle.setCargobobPickupMagnetPullRopeLength = function (cargobob, p1) {
    let $res = natives.setCargobobPickupMagnetReducedFalloff(cargobob, p1);
};
mp.game2.vehicle.setCargobobPickupMagnetPullStrength = function (cargobob, p1) {
    let $res = natives.setCargobobPickupMagnetPullStrength(cargobob, p1);
};
mp.game2.vehicle.setCargobobPickupMagnetFalloff = function (vehicle, p1) {
    let $res = natives.setCargobobPickupMagnetPullRopeLength(vehicle, p1);
};
mp.game2.vehicle.setCargobobPickupMagnetReducedStrength = function (vehicle, cargobob) {
    let $res = natives.setCargobobPickupMagnetSetTargetedMode(vehicle, cargobob);
};
mp.game2.vehicle.doesHaveWeapons = function (vehicle) {
    let $res = natives.doesVehicleHaveWeapons(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.disableWeapon = function (disabled, weaponHash, vehicle, owner) {
    let $res = natives.disableVehicleWeapon(disabled | 0, weaponHash, vehicle, owner);
};
mp.game2.vehicle.disableVehicleWeapon = function (disabled, weaponHash, vehicle, owner) {
    let $res = natives.disableVehicleWeapon(disabled | 0, weaponHash, vehicle, owner);
};
mp.game2.vehicle.isWeaponDisabled = function (weaponHash, vehicle, owner) {
    let $res = natives.isVehicleWeaponDisabled(weaponHash, vehicle, owner);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setActiveForPedNavigation = function (vehicle, toggle) {
    let $res = natives.setVehicleActiveForPedNavigation(vehicle, toggle | 0);
};
mp.game2.vehicle.getClass = function (vehicle) {
    let $res = natives.getVehicleClass(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleClass = function (vehicle) {
    let $res = natives.getVehicleClass(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getClassFromName = function (modelHash) {
    let $res = natives.getVehicleClassFromName(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getVehicleClassFromName = function (modelHash) {
    let $res = natives.getVehicleClassFromName(modelHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setPlayersLast = function (vehicle) {
    let $res = natives.setPlayersLastVehicle(vehicle);
};
mp.game2.vehicle.setCanBeUsedByFleeingPeds = function (vehicle, toggle) {
    let $res = natives.setVehicleCanBeUsedByFleeingPeds(vehicle, toggle | 0);
};
mp.game2.vehicle.setDropsMoneyWhenBlownUp = function (vehicle, toggle) {
    let $res = natives.setVehicleDropsMoneyWhenBlownUp(vehicle, toggle | 0);
};
mp.game2.vehicle.setJetEngineOn = function (vehicle, toggle) {
    let $res = natives.setVehicleKeepEngineOnWhenAbandoned(vehicle, toggle | 0);
};
mp.game2.vehicle.setHandlingHashForAi = function (vehicle, hash) {
    let $res = natives.setVehicleHandlingOverride(vehicle, hash);
};
mp.game2.vehicle.setExtendedRemovalRange = function (vehicle, range) {
    let $res = natives.setVehicleExtendedRemovalRange(vehicle, range);
};
mp.game2.vehicle.setSteeringBiasScalar = function (p0, p1) {
    let $res = natives.setVehicleSteeringBiasScalar(p0, p1);
};
mp.game2.vehicle.setHelicopterRollPitchYawMult = function (helicopter, multiplier) {
    let $res = natives.setHeliControlLaggingRateScalar(helicopter, multiplier);
};
mp.game2.vehicle.setFrictionOverride = function (vehicle, friction) {
    let $res = natives.setVehicleFrictionOverride(vehicle, friction);
};
mp.game2.vehicle.setWheelsCanBreakOffWhenBlowUp = function (vehicle, toggle) {
    let $res = natives.setVehicleWheelsCanBreakOffWhenBlowUp(vehicle, toggle | 0);
};
mp.game2.vehicle.setCeilingHeight = function (vehicle, height) {
    let $res = natives.setVehicleCeilingHeight(vehicle, height);
};
mp.game2.vehicle.clearRouteHistory = function (vehicle) {
    let $res = natives.clearVehicleRouteHistory(vehicle);
};
mp.game2.vehicle.doesExistWithDecorator = function (decorator) {
    let $res = natives.doesVehicleExistWithDecorator(decorator);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.doesVehicleExistWithDecorator = function (decorator) {
    let $res = natives.doesVehicleExistWithDecorator(decorator);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setExclusiveDriver = function (vehicle, ped, index) {
    let $res = natives.setVehicleAiCanUseExclusiveSeats(vehicle, ped, index);
};
mp.game2.vehicle.isPedExclusiveDriverOf = function (ped, vehicle) {
    let $res = natives.isPedExclusiveDriverOfVehicle(ped, vehicle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outIndex = $res[1];
    return $res[0] == 1 ? $resObj.outIndex : undefined;
};
mp.game2.vehicle.disableIndividualPlanePropeller = function (vehicle, propeller) {
    let $res = natives.disableIndividualPlanePropeller(vehicle, propeller);
};
mp.game2.vehicle.setForceAfterburner = function (vehicle, toggle) {
    let $res = natives.setVehicleForceAfterburner(vehicle, toggle | 0);
};
mp.game2.vehicle.setDisableWindowCollisions = function (vehicle, toggle) {
    let $res = natives.setDontProcessVehicleGlass(vehicle, toggle | 0);
};
mp.game2.vehicle.setDistantCarsEnabled = function (toggle) {
    let $res = natives.setDistantCarsEnabled(toggle | 0);
};
mp.game2.vehicle.displayDistantVehicles = function (toggle) {
    let $res = natives.setDistantCarsEnabled(toggle | 0);
};
mp.game2.vehicle.setNeonLightsColour = function (vehicle, r, g, b) {
    let $res = natives.setVehicleNeonColour(vehicle, r, g, b);
};
mp.game2.vehicle.getNeonLightsColour = function (vehicle) {
    let $res = natives.getVehicleNeonColour(vehicle, 0, 0, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.r = $res[1];
    $resObj.g = $res[2];
    $resObj.b = $res[3];
    return $resObj;
};
mp.game2.vehicle.setNeonLightEnabled = function (vehicle, index, toggle) {
    let $res = natives.setVehicleNeonEnabled(vehicle, index, toggle | 0);
};
mp.game2.vehicle.isNeonLightEnabled = function (vehicle, index) {
    let $res = natives.getVehicleNeonEnabled(vehicle, index);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.disableNeonLights = function (vehicle, toggle) {
    let $res = natives.suppressNeonsOnVehicle(vehicle, toggle | 0);
};
mp.game2.vehicle.setDisableSuperdummyMode = function (vehicle, p1) {
    let $res = natives.setDisableSuperdummy(vehicle, p1 | 0);
};
mp.game2.vehicle.requestDashboardScaleformMovie = function (vehicle) {
    let $res = natives.requestVehicleDial(vehicle);
};
mp.game2.vehicle.getBodyHealth = function (vehicle) {
    let $res = natives.getVehicleBodyHealth(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setBodyHealth = function (vehicle, value) {
    let $res = natives.setVehicleBodyHealth(vehicle, value);
};
mp.game2.vehicle.getSuspensionBounds = function (vehicle) {
    let $res = natives.getVehicleSize(vehicle, undefined, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.out1 = new mp.Vector3($res[1]);
    $resObj.out2 = new mp.Vector3($res[2]);
    return $resObj;
};
mp.game2.vehicle.getSuspensionHeight = function (vehicle) {
    let $res = natives.getFakeSuspensionLoweringAmount(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setCarHighSpeedBumpSeverityMultiplier = function (multiplier) {
    let $res = natives.setCarHighSpeedBumpSeverityMultiplier(multiplier);
};
mp.game2.vehicle.getNumberOfDoors = function (vehicle) {
    let $res = natives.getNumberOfVehicleDoors(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setHydraulicRaised = function (p0, p1) {
    let $res = natives.setHydraulicsControl(p0, p1);
};
mp.game2.vehicle.getBodyHealth2 = function (vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth) {
    let $res = natives.getVehicleHealthPercentage(vehicle, maxEngineHealth || 0, maxPetrolTankHealth || 0, maxBodyHealth || 0, maxMainRotorHealth || 0, maxTailRotorHealth || 0, maxUnkHealth || 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setKersAllowed = function (vehicle, toggle) {
    let $res = natives.setVehicleKersAllowed(vehicle, toggle | 0);
};
mp.game2.vehicle.getHasKers = function (vehicle) {
    let $res = natives.getVehicleHasKers(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setHydraulicWheelValue = function (vehicle, wheelId, value) {
    let $res = natives.setHydraulicSuspensionRaiseFactor(vehicle, wheelId, value);
};
mp.game2.vehicle.getHydraulicWheelValue = function (vehicle, wheelId) {
    let $res = natives.getHydraulicSuspensionRaiseFactor(vehicle, wheelId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setCamberedWheelsDisabled = function (p0, p1) {
    let $res = natives.setCanUseHydraulics(p0, p1);
};
mp.game2.vehicle.setHydraulicWheelState = function (p0, p1) {
    let $res = natives.setHydraulicVehicleState(p0, p1);
};
mp.game2.vehicle.setHydraulicWheelStateTransition = function (vehicle, wheelId, state, value, p4) {
    let $res = natives.setHydraulicWheelState(vehicle, wheelId, state, value, p4);
};
mp.game2.vehicle.setDamageModifier = function (vehicle, p1) {
    let $res = natives.setVehicleDamageScale(vehicle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setUnkDamageMultiplier = function (vehicle, multiplier) {
    let $res = natives.setVehicleWeaponDamageScale(vehicle, multiplier);
};
mp.game2.vehicle.setControlsInverted = function (vehicle, state) {
    let $res = natives.setInvertVehicleControls(vehicle, state | 0);
};
mp.game2.vehicle.setRampLaunchModifier = function (p0, p1) {
    let $res = natives.setScriptRampImpulseScale(p0, p1);
};
mp.game2.vehicle.getIsDoorValid = function (vehicle, doorId) {
    let $res = natives.getIsDoorValid(vehicle, doorId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setRocketBoostRefillTime = function (vehicle, seconds) {
    let $res = natives.setScriptRocketBoostRechargeTime(vehicle, seconds);
};
mp.game2.vehicle.getHasRocketBoost = function (vehicle) {
    let $res = natives.getHasRocketBoost(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.isRocketBoostActive = function (vehicle) {
    let $res = natives.isRocketBoostActive(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setRocketBoostActive = function (vehicle, active) {
    let $res = natives.setRocketBoostActive(vehicle, active | 0);
};
mp.game2.vehicle.getHasRetractableWheels = function (vehicle) {
    let $res = natives.getHasRetractableWheels(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getIsWheelsLoweredStateActive = function (vehicle) {
    let $res = natives.getIsWheelsRetracted(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.raiseRetractableWheels = function (vehicle) {
    let $res = natives.setWheelsExtendedInstantly(vehicle);
};
mp.game2.vehicle.lowerRetractableWheels = function (vehicle) {
    let $res = natives.setWheelsRetractedInstantly(vehicle);
};
mp.game2.vehicle.getCanJump = function (vehicle) {
    let $res = natives.getCarHasJump(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setUseHigherJumpForce = function (vehicle, toggle) {
    let $res = natives.setUseHigherCarJump(vehicle, toggle | 0);
};
mp.game2.vehicle.setWeaponCapacity = function (vehicle, weaponIndex, capacity) {
    let $res = natives.setVehicleWeaponRestrictedAmmo(vehicle, weaponIndex, capacity);
};
mp.game2.vehicle.getWeaponCapacity = function (vehicle, weaponIndex) {
    let $res = natives.getVehicleWeaponRestrictedAmmo(vehicle, weaponIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.getHasParachute = function (vehicle) {
    let $res = natives.getVehicleHasParachute(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getCanActivateParachute = function (vehicle) {
    let $res = natives.getVehicleCanDeployParachute(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setParachuteActive = function (vehicle, active) {
    let $res = natives.vehicleStartParachuting(vehicle, active | 0);
};
mp.game2.vehicle.setReceivesRampDamage = function (vehicle, toggle) {
    let $res = natives.vehicleSetRampAndRammingCarsTakeDamage(vehicle, toggle | 0);
};
mp.game2.vehicle.setRampSidewaysLaunchMotion = function (p0, p1) {
    let $res = natives.vehicleSetEnableRampCarSideImpulse(p0, p1);
};
mp.game2.vehicle.setRampUpwardsLaunchMotion = function (p0, p1) {
    let $res = natives.vehicleSetEnableNormaliseRampCarVerticalVeloctiy(p0, p1);
};
mp.game2.vehicle.setWeaponsDisabled = function (p0, p1) {
    let $res = natives.setVehicleWeaponCanTargetObjects(p0, p1);
};
mp.game2.vehicle.setParachuteModel = function (vehicle, modelHash) {
    let $res = natives.vehicleSetParachuteModelOverride(vehicle, modelHash);
};
mp.game2.vehicle.setParachuteTextureVariation = function (vehicle, textureVariation) {
    let $res = natives.vehicleSetParachuteModelTintIndex(vehicle, textureVariation);
};
mp.game2.vehicle.getAllS = function () {
    let $res = natives.getAllVehicles(0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.vehsStruct = $res[0];
    $resObj.result = $res[0];
    return $resObj;
};
mp.game2.vehicle.setRocketBoostPercentage = function (vehicle, percentage) {
    let $res = natives.setRocketBoostFill(vehicle, percentage);
};
mp.game2.vehicle.setOppressorTransformState = function (vehicle, state) {
    let $res = natives.setGliderActive(vehicle, state | 0);
};
mp.game2.vehicle.disableWorldCollision = function (vehicle) {
    let $res = natives.setDisableMapCollision(vehicle);
};
mp.game2.vehicle.setCargobobHookCanAttach = function (vehicle, toggle) {
    let $res = natives.setHeliCanPickupEntityThatHasPickUpDisabled(vehicle, toggle | 0);
};
mp.game2.vehicle.setBombCount = function (vehicle, bombCount) {
    let $res = natives.setVehicleBombAmmo(vehicle, bombCount);
};
mp.game2.vehicle.getBombCount = function (vehicle) {
    let $res = natives.getVehicleBombAmmo(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setCountermeasureCount = function (vehicle, counterMeasureCount) {
    let $res = natives.setVehicleCountermeasureAmmo(vehicle, counterMeasureCount);
};
mp.game2.vehicle.getCountermeasureCount = function (vehicle) {
    let $res = natives.getVehicleCountermeasureAmmo(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setHoverTransformRatio = function (vehicle, ratio) {
    let $res = natives.setSpecialFlightModeRatio(vehicle, ratio);
};
mp.game2.vehicle.setHoverTransformPercentage = function (vehicle, percentage) {
    let $res = natives.setSpecialFlightModeTargetRatio(vehicle, percentage);
};
mp.game2.vehicle.setHoverTransformEnabled = function (vehicle, toggle) {
    let $res = natives.setSpecialFlightModeAllowed(vehicle, toggle | 0);
};
mp.game2.vehicle.setHoverTransformActive = function (vehicle, toggle) {
    let $res = natives.setDisableHoverModeFlight(vehicle, toggle | 0);
};
mp.game2.vehicle.findRandomPointInSpace = function (ped) {
    let $res = natives.findSpawnCoordinatesForHeli(ped);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = new mp.Vector3(0, 0, 0);
    $resObj.x = $res[0].x;
    $resObj.y = $res[0].y;
    $resObj.z = $res[0].z;
    return $resObj;
};
mp.game2.vehicle.setDeployHeliStubWings = function (vehicle, deploy, p2) {
    let $res = natives.setDeployFoldingWings(vehicle, deploy | 0, p2 | 0);
};
mp.game2.vehicle.areHeliStubWingsDeployed = function (vehicle) {
    let $res = natives.areFoldingWingsDeployed(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.setTurretUnk = function (vehicle, index, toggle) {
    let $res = natives.setTurretHidden(vehicle, index, toggle | 0);
};
mp.game2.vehicle.setSpecialflightWingRatio = function (vehicle, ratio) {
    let $res = natives.setHoverModeWingRatio(vehicle, ratio);
};
mp.game2.vehicle.setDisableTurretMovementThisFrame = function (vehicle, turretId) {
    let $res = natives.setDisableTurretMovement(vehicle, turretId);
};
mp.game2.vehicle.setUnkFloat0X104ForSubmarineTask = function (vehicle, value) {
    let $res = natives.setTransformRateForAnimation(vehicle, value);
};
mp.game2.vehicle.setUnkBool0X102ForSubmarineTask = function (vehicle, value) {
    let $res = natives.setTransformToSubmarineUsesAlternateInput(vehicle, value | 0);
};
mp.game2.vehicle.getIsShuntBoostActive = function (vehicle) {
    let $res = natives.getIsVehicleShunting(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getLastRammed = function (vehicle) {
    let $res = natives.getLastShuntVehicle(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setDisableUnk = function (toggle) {
    let $res = natives.setDisableVehicleExplosionsDamage(toggle | 0);
};
mp.game2.vehicle.setNitroEnabled = function (vehicle, toggle, level, power, rechargeTime, disableSound) {
    let $res = natives.setOverrideNitrousLevel(vehicle, toggle | 0, level, power, rechargeTime, disableSound | 0);
};
mp.game2.vehicle.setWheelsDealDamage = function (vehicle, toggle) {
    let $res = natives.setIncreaseWheelCrushDamage(vehicle, toggle | 0);
};
mp.game2.vehicle.setDisableUnk2 = function (toggle) {
    let $res = natives.setDisableWeaponBladeForces(toggle | 0);
};
mp.game2.vehicle.getDoesHaveTombstone = function (vehicle) {
    let $res = natives.getDoesVehicleHaveTombstone(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.hideTombstone = function (vehicle, toggle) {
    let $res = natives.hideTombstone(vehicle, toggle | 0);
};
mp.game2.vehicle.getIsEmpDisabled = function (vehicle) {
    let $res = natives.getIsVehicleDisabledByEmp(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.getTyreHealth = function (vehicle, wheelIndex) {
    let $res = natives.getTyreHealth(vehicle, wheelIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setTyreHealth = function (vehicle, wheelIndex, health) {
    let $res = natives.setTyreHealth(vehicle, wheelIndex, health);
};
mp.game2.vehicle.getTyreWearMultiplier = function (vehicle, wheelIndex) {
    let $res = natives.getTyreWearRate(vehicle, wheelIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.setTyreWearMultiplier = function (vehicle, wheelIndex, multiplier) {
    let $res = natives.setTyreWearRate(vehicle, wheelIndex, multiplier);
};
mp.game2.vehicle.setTyreSoftnessMultiplier = function (vehicle, wheelIndex, multiplier) {
    let $res = natives.setTyreWearRateScale(vehicle, wheelIndex, multiplier);
};
mp.game2.vehicle.setTyreTractionLossMultiplier = function (vehicle, wheelIndex, multiplier) {
    let $res = natives.setTyreMaximumGripDifferenceDueToWearRate(vehicle, wheelIndex, multiplier);
};
mp.game2.vehicle.setReduceDriftSuspension = function (vehicle, enable) {
    let $res = natives.setReducedSuspensionForce(vehicle, enable | 0);
};
mp.game2.vehicle.setDriftTyresEnabled = function (vehicle, toggle) {
    let $res = natives.setDriftTyres(vehicle, toggle | 0);
};
mp.game2.vehicle.getDriftTyresEnabled = function (vehicle) {
    let $res = natives.getDriftTyresSet(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.networkUseHighPrecisionBlending = function (vehicle, toggle) {
    let $res = natives.networkUseHighPrecisionTrainBlending(vehicle, toggle | 0);
};
if (!mp.game2.vehicle) mp.game2.vehicle = {};
if (!mp.game2.vehicle.unk) mp.game2.vehicle.unk = {};
mp.game2.vehicle.unk._0x7D6F9A3EF26136A0 = function (vehicle, toggle, p2) {
    let $res = natives.setVehicleAllowHomingMissleLockon(vehicle, toggle | 0, p2 | 0);
};
mp.game2.vehicle.unk._0x6EAAEFC76ACC311F = function (p0) {
    let $res = natives.getVehicleHomingLockedontoState(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0x407DC5E97DB1A4D3 = function (p0, p1) {
    let $res = natives.setVehicleHomingLockedontoState(p0, p1);
};
mp.game2.vehicle.unk._0x9A75585FB2E54FAD = function (x, y, z, radius) {
    let $res = natives.setVehicleGeneratorAreaOfInterest(x, y, z, radius);
};
mp.game2.vehicle.unk._0x0A436B8643716D14 = function () {
    let $res = natives.clearVehicleGeneratorAreaOfInterest();
};
mp.game2.vehicle.unk._0x76D26A22750E849E = function (vehicle) {
    let $res = natives.setVehicleDontTerminateTaskWhenAchieved(vehicle);
};
mp.game2.vehicle.unk._0xAB31EF4DE6800CE9 = function (p0, p1) {
    let $res = natives.setGoonBossVehicle(p0, p1);
};
mp.game2.vehicle.unk._0x1B212B26DD3C04DF = function (vehicle, toggle) {
    let $res = natives.setOpenRearDoorsOnExplosion(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0xC67DB108A9ADE3BE = function (p0, p1) {
    let $res = natives.forceSubmarineNeurtalBuoyancy(p0, p1);
};
mp.game2.vehicle.unk._0xED5EDE9E676643C9 = function (p0, p1) {
    let $res = natives.setBoatIgnoreLandProbes(p0, p1);
};
mp.game2.vehicle.unk._0xB28B1FE5BFADD7F5 = function (vehicle, p1) {
    let $res = natives.setForceLowLodAnchorMode(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x6501129C9E0FFA05 = function (p0, p1) {
    let $res = natives.setVehicleForwardSpeedXy(p0, p1);
};
mp.game2.vehicle.unk._0xDCE97BDF8A0EABC8 = function (vehicle, p1) {
    let $res = natives.setVehicleSteerForBuildings(vehicle, p1);
};
mp.game2.vehicle.unk._0x9849DE24FCF23CCC = function (vehicle, toggle) {
    let $res = natives.setVehicleCausesSwerving(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x8664170EF165C4A6 = function (p0, p1) {
    let $res = natives.setIgnorePlanesSmallPitchChange(p0, p1);
};
mp.game2.vehicle.unk._0x6A98C2ECF57FA5D4 = function (vehicle, entity) {
    let $res = natives.attachContainerToHandlerFrameWhenLinedUp(vehicle, entity);
};
mp.game2.vehicle.unk._0x8AA9180DE2FEDD45 = function (vehicle, p1) {
    let $res = natives.setVehicleDisableHeightMapAvoidance(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x107A473D7A6647A9 = function (vehicle) {
    let $res = natives.setShortSlowdownForLanding(vehicle);
};
mp.game2.vehicle.unk._0x3B458DDB57038F08 = function (vehicle, doorId, toggle) {
    let $res = natives.setVehicleDoorAutoLock(vehicle, doorId, toggle | 0);
};
mp.game2.vehicle.unk._0xA247F9EF01D8082E = function (p0) {
    let $res = natives.setFleeingVehiclesUseSwitchedOffNodes(p0);
};
mp.game2.vehicle.unk._0x8821196D91FA2DE5 = function (vehicle, toggle) {
    let $res = natives.setVehicleForceInteriorlight(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x2310A8F9421EBF43 = function (p0) {
    let $res = natives.allowTrainToBeRemovedByPopulation(p0);
};
mp.game2.vehicle.unk._0x5845066D8A1EA7F7 = function (vehicle, x, y, z, p4) {
    let $res = natives.setAdditionalRotationForRecordedVehiclePlayback(vehicle, x, y, z, p4);
};
mp.game2.vehicle.unk._0x796A877E459B99EA = function (p0, p1, p2, p3) {
    let $res = natives.setPositionOffsetForRecordedVehiclePlayback(p0, p1, p2, p3);
};
mp.game2.vehicle.unk._0xFAF2A78061FD9EF4 = function (p0, p1, p2, p3) {
    let $res = natives.setGlobalPositionOffsetForRecordedVehiclePlayback(p0, p1, p2, p3);
};
mp.game2.vehicle.unk._0x063AE2B2CC273588 = function (vehicle, p1) {
    let $res = natives.setShouldLerpFromAiToFullRecording(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x99CAD8E7AFDB60FA = function (vehicle, p1, p2) {
    let $res = natives.forceSubThrottleForTime(vehicle, p1, p2);
};
mp.game2.vehicle.unk._0xDBC631F109350B8C = function (vehicle, p1) {
    let $res = natives.setDontAllowPlayerToEnterVehicleIfLockedForPlayer(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x2311DD7159F00582 = function (vehicle, p1) {
    let $res = natives.setVehicleRespectsLocksWhenHasDriver(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x065D03A9D6B2C6B5 = function (p0, p1) {
    let $res = natives.setVehicleCanEjectPassengersIfLocked(p0, p1);
};
mp.game2.vehicle.unk._0xC4B3347BD68BD609 = function (p0) {
    let $res = natives.setVehicleRemoveAggressiveCarjackMission(p0);
};
mp.game2.vehicle.unk._0xD3301660A57C9272 = function (p0) {
    let $res = natives.setVehicleAvoidPlayerVehicleRiotVanMission(p0);
};
mp.game2.vehicle.unk._0xB9562064627FF9DB = function (p0, p1) {
    let $res = natives.setCarjackMissionRemovalParameters(p0, p1);
};
mp.game2.vehicle.unk._0xBE5C1255A1830FF5 = function (vehicle, toggle) {
    let $res = natives.setVehicleWillForceOtherVehiclesToStop(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x9BECD4B9FEF3F8A6 = function (vehicle, p1) {
    let $res = natives.setVehicleActAsIfHasSirenOn(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x88BC673CA9E0AE99 = function (vehicle, p1) {
    let $res = natives.setVehicleUseMoreRestrictiveSpawnChecks(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0xE851E480B814D4BA = function (vehicle, p1) {
    let $res = natives.setVehicleMayBeUsedByGotoPointAnyMeans(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0xA01BC64DD4BFBBAC = function (vehicle, p1) {
    let $res = natives.getInVehicleClipsetHashForSeat(vehicle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0xC50CE861B55EAB8B = function (vehicle, p1) {
    let $res = natives.setVehicleLimitSpeedWhenPlayerInactive(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x6EBFB22D646FFC18 = function (vehicle, p1) {
    let $res = natives.setVehicleStopInstantlyWhenPlayerInactive(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x35BB21DE06784373 = function (p0, p1) {
    let $res = natives.setVehicleOccupantsTakeExplosiveDamage(p0, p1);
};
mp.game2.vehicle.unk._0x9F3F689B814F2599 = function (vehicle, p1) {
    let $res = natives.setVehicleBlipThrottleRandomly(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x4E74E62E0A97E901 = function (vehicle, p1) {
    let $res = natives.setPoliceFocusWillTrackVehicle(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0xD565F438137F0E10 = function (p0, p1) {
    let $res = natives.setVehicleExplodesOnExplosionDamageAtZeroBodyHealth(p0, p1);
};
mp.game2.vehicle.unk._0x3441CAD2F2231923 = function (vehicle, p1) {
    let $res = natives.setAllowVehicleExplodesOnContact(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x0581730AB9380412 = function (p0, p1, p2, p3, p4, p5) {
    let $res = natives.setVehicleTurretTarget(p0, p1, p2, p3, p4, p5);
};
mp.game2.vehicle.unk._0x737E398138550FFF = function (p0, p1) {
    let $res = natives.setVehicleTankStationary(p0, p1);
};
mp.game2.vehicle.unk._0xA4822F1CF23F4810 = function (p1, p3, p4, p5, p6, p7, p8) {
    let $res = natives.generateVehicleCreationPosFromPaths(undefined, p1, undefined, p3, p4, p5, p6, p7, p8);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outVec = new mp.Vector3($res[1]);
    $resObj.outVec1 = new mp.Vector3($res[2]);
    $resObj.result = $res[1] == 1;
    return $resObj;
};
mp.game2.vehicle.unk._0x51DB102F4A3BA5E0 = function (toggle) {
    let $res = natives.networkEnableEmptyCrowdingVehiclesRemoval(toggle | 0);
};
mp.game2.vehicle.unk._0xA4A9A4C40E615885 = function (p0) {
    let $res = natives.networkCapEmptyCrowdingVehiclesRemoval(p0);
};
mp.game2.vehicle.unk._0xEEBFC7A7EFDC35B4 = function (vehicle) {
    let $res = natives.getVehicleColoursWhichCanBeSet(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0x1CF38D529D7441D9 = function (vehicle, toggle) {
    let $res = natives.setVehicleStaysFrozenWhenCleanedUp(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x1F9FB66F3A3842D2 = function (vehicle, p1) {
    let $res = natives.setVehicleActAsIfHighSpeedForFragSmashing(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x59C3757B3B7408E8 = function (vehicle, toggle, p2) {
    let $res = natives.setPedsCanFallOffThisVehicleFromLargeFallDamage(vehicle, toggle | 0, p2);
};
mp.game2.vehicle.unk._0x0AD9E8F87FF7C16F = function (p0, p1) {
    let $res = natives.setVehicleInfluencesWantedLevel(p0, p1 | 0);
};
mp.game2.vehicle.unk._0xAB04325045427AAE = function (vehicle, p1) {
    let $res = natives.setVehicleNotStealableAmbiently(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0xCFD778E7904C255E = function (vehicle) {
    let $res = natives.lockDoorsWhenNoLongerNeeded(vehicle);
};
mp.game2.vehicle.unk._0x4D9D109F63FEE1D4 = function (p0, p1) {
    let $res = natives.setForceVehicleEngineDamageByBullet(p0, p1 | 0);
};
mp.game2.vehicle.unk._0xF25E02CB9C5818F8 = function () {
    let $res = natives.disableVehicleExplosionBreakOffParts();
};
mp.game2.vehicle.unk._0x182F266C2D9E2BEB = function (vehicle, p1) {
    let $res = natives.setVehicleCustomPathNodeStreamingRadius(vehicle, p1);
};
mp.game2.vehicle.unk._0xF051D9BFB6BA39C0 = function (p0) {
    let $res = natives.setVehicleSlipstreamingShouldTimeOut(p0);
};
mp.game2.vehicle.unk._0xB264C4D2F2B0A78B = function (vehicle) {
    let $res = natives.allowAmbientVehiclesToAvoidAdverseConditions(vehicle);
};
mp.game2.vehicle.unk._0x1F34B0626C594380 = function (p0, p1) {
    let $res = natives.setCargobobExcludeFromPickupEntity(p0, p1);
};
mp.game2.vehicle.unk._0x2C1D8B3B19E517CC = function (p0, p1) {
    let $res = natives.canCargobobPickUpEntity(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0xC0ED6438E6D39BA8 = function (p0, p1, p2) {
    let $res = natives.setPickupRopeLengthWithoutCreatingRopeForCargobob(p0, p1, p2);
};
mp.game2.vehicle.unk._0x9BDDC73CC6A115D4 = function (vehicle, p1, p2) {
    let $res = natives.setCargobobPickupMagnetSetAmbientMode(vehicle, p1 | 0, p2 | 0);
};
mp.game2.vehicle.unk._0x56EB5E94318D3FB6 = function (vehicle, p1) {
    let $res = natives.setCargobobPickupMagnetEnsurePickupEntityUpright(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x2C4A1590ABF43E8B = function (vehicle, p1) {
    let $res = natives.setVehicleWillTellOthersToHurry(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0xE05DD0E9707003A3 = function (p0, p1) {
    let $res = natives.setVehicleUsedForPilotSchool(p0, p1 | 0);
};
mp.game2.vehicle.unk._0xE5810AC70602F2F5 = function (vehicle, p1) {
    let $res = natives.setAircraftPilotSkillNoiseScalar(vehicle, p1);
};
mp.game2.vehicle.unk._0x6A973569BA094650 = function (vehicle, p1) {
    let $res = natives.setVehicleImpatienceTimer(vehicle, p1);
};
mp.game2.vehicle.unk._0xF78F94D60248C737 = function (vehicle, p1) {
    let $res = natives.arePlaneControlPanelsIntact(vehicle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.unk._0x5E569EC46EC21CAE = function (vehicle, toggle) {
    let $res = natives.setVehicleNoExplosionDamageFromDriver(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x41062318F23ED854 = function (vehicle, toggle) {
    let $res = natives.setVehicleAiCanUseExclusiveSeats(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x4AD280EB48B2D8E6 = function (vehicle, togle) {
    let $res = natives.setDisableWantedConesResponse(vehicle, togle | 0);
};
mp.game2.vehicle.unk._0xB68CFAF83A02768D = function (vehicle, toggle) {
    let $res = natives.setUseDesiredZCruiseSpeedForLanding(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x0205F5365292D2EB = function (vehicle, p1) {
    let $res = natives.setArriveDistanceOverrideForVehiclePersuitAttack(vehicle, p1);
};
mp.game2.vehicle.unk._0xCF9159024555488C = function (p0) {
    let $res = natives.setVehicleReadyForCleanup(p0);
};
mp.game2.vehicle.unk._0xB93B2867F7B479D1 = function (vehicle, index) {
    let $res = natives.setVehicleNeonIndexColour(vehicle, index);
};
mp.game2.vehicle.unk._0x35E0654F4BAD7971 = function (p0) {
    let $res = natives.setAmbientVehicleNeonEnabled(p0 | 0);
};
mp.game2.vehicle.unk._0xA7DCDF4DED40A8F4 = function (vehicle, p1) {
    let $res = natives.setCanAdjustGroundClearance(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0xD4C4642CB7F50B5D = function (vehicle) {
    let $res = natives.getVehicleIsMercenary(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.unk._0xC361AA040D6637A8 = function (vehicle, p1) {
    let $res = natives.setVehicleBrokenPartsDontAffectAiHandling(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0xE16142B94664DEFD = function (vehicle, p1) {
    let $res = natives.setPlaneResistToExplosion(vehicle, p1 | 0);
};
mp.game2.vehicle.unk._0x26D99D5A82FD18E8 = function (p0) {
    let $res = natives.setDisableBmxExtraTrickForces(p0);
};
mp.game2.vehicle.unk._0x5BA68A0840D546AC = function (p0, p1) {
    let $res = natives.hasVehiclePetroltankSetOnFireByEntity(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0x4419966C9936071A = function (vehicle) {
    let $res = natives.clearVehiclePetroltankFireCulprit(vehicle);
};
mp.game2.vehicle.unk._0x870B8B7A766615C8 = function (p0, p1, p2) {
    let $res = natives.setVehicleBobbleheadVelocity(p0, p1, p2);
};
mp.game2.vehicle.unk._0x8533CAFDE1F0F336 = function (p0) {
    let $res = natives.getVehicleIsDummy(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0xD4196117AF7BB974 = function (p0, p1) {
    let $res = natives.setDisableDamageWithPickedUpEntity(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0xBB2333BB87DDD87F = function (p0, p1) {
    let $res = natives.setVehicleUsesMpPlayerDamageMultiplier(p0, p1);
};
mp.game2.vehicle.unk._0x73561D4425A021A2 = function (p0, p1) {
    let $res = natives.setBikeEasyToLand(p0, p1);
};
mp.game2.vehicle.unk._0x7BBE7FF626A591FE = function (p0) {
    let $res = natives.setSpeedBoostEffectDisabled(p0);
};
mp.game2.vehicle.unk._0x65B080555EA48149 = function (p0) {
    let $res = natives.setSlowDownEffectDisabled(p0);
};
mp.game2.vehicle.unk._0x428AD3E26C8D9EB0 = function (vehicle, x, y, z, p4) {
    let $res = natives.setFormationLeader(vehicle, x, y, z, p4);
};
mp.game2.vehicle.unk._0xE2F53F172B45EDE1 = function () {
    let $res = natives.resetFormationLeader();
};
mp.game2.vehicle.unk._0xBA91D045575699AD = function (vehicle) {
    let $res = natives.getIsBoatCapsized(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.unk._0x80E3357FDEF45C21 = function (p0, p1) {
    let $res = natives.setAllowRammingSoopOrRamp(p0, p1);
};
mp.game2.vehicle.unk._0xB2E0C0D6922D31F2 = function (vehicle, toggle) {
    let $res = natives.setClearFreezeWaitingOnCollisionOncePlayerEnters(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x3DE51E9C80B116CF = function (p0) {
    let $res = natives.isVehicleParachuteDeployed(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0x9D30687C57BAA0BB = function (p0) {
    let $res = natives.vehicleSetJetWashForceEnabled(p0);
};
mp.game2.vehicle.unk._0x41290B40FA63E6DA = function (p0) {
    let $res = natives.setVehicleUseBoostButtonForWheelRetract(p0);
};
mp.game2.vehicle.unk._0x0419B167EE128F33 = function (p0, p1) {
    let $res = natives.vehicleSetOverrideExtenableSideRatio(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0xF3B0E0AED097A3F5 = function (p0, p1) {
    let $res = natives.vehicleSetExtenableSideTargetRatio(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0xD3E51C0AB8C26EEE = function (p0, p1) {
    let $res = natives.vehicleSetOverrideSideRatio(p0, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0x72BECCF4B829522E = function (p0, p1) {
    let $res = natives.setCargobobExtaPickupRange(p0, p1);
};
mp.game2.vehicle.unk._0x66E3AAFACE2D1EB8 = function (p0, p1, p2) {
    let $res = natives.setOverrideVehicleDoorTorque(p0, p1, p2);
};
mp.game2.vehicle.unk._0x1312DDD8385AEE4E = function (p0, p1) {
    let $res = natives.setWheelieEnabled(p0, p1);
};
mp.game2.vehicle.unk._0xEDBC8405B3895CC9 = function (p0, p1) {
    let $res = natives.setDisableHeliExplodeFromBodyDamage(p0, p1);
};
mp.game2.vehicle.unk._0x26E13D440E7F6064 = function (vehicle, value) {
    let $res = natives.setDisableExplodeFromBodyDamageOnCollision(vehicle, value);
};
mp.game2.vehicle.unk._0x2FA2494B47FDD009 = function (p0, p1) {
    let $res = natives.setTrailerAttachmentEnabled(p0, p1);
};
mp.game2.vehicle.unk._0x78CEEE41F49F421F = function (p0, p1) {
    let $res = natives.setShouldResetTurretInScriptedCameras(p0, p1);
};
mp.game2.vehicle.unk._0xAF60E6A2936F982A = function (p0, p1) {
    let $res = natives.setVehicleDisableCollisionUponCreation(p0, p1);
};
mp.game2.vehicle.unk._0x430A7631A84C9BE7 = function (p0) {
    let $res = natives.setGroundEffectReducesDrag(p0);
};
mp.game2.vehicle.unk._0x8235F1BEAD557629 = function (vehicle, toggle) {
    let $res = natives.setDisablePedStandOnTop(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x9640E30A7F395E4B = function (vehicle, p1, p2, p3, p4) {
    let $res = natives.setVehicleDamageScales(vehicle, p1, p2, p3, p4);
};
mp.game2.vehicle.unk._0x0BBB9A7A8FFE931B = function (p0, p1, p2) {
    let $res = natives.setPlaneSectionDamageScale(p0, p1, p2);
};
mp.game2.vehicle.unk._0x0A3F820A9A9A9AC5 = function (vehicle, x, y, z) {
    let $res = natives.setHeliCombatOffset(vehicle, x, y, z);
};
mp.game2.vehicle.unk._0x51F30DB60626A20E = function (vehicle, x, y, z, rotX, rotY, rotZ, p7, p8) {
    let $res = natives.getCanVehicleBePlacedHere(vehicle, x, y, z, rotX, rotY, rotZ, p7, p8);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.unk._0x97841634EF7DF1D6 = function (vehicle, toggle) {
    let $res = natives.setDisableAutomaticCrashTask(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x3A9128352EAC9E85 = function (p0) {
    let $res = natives.getOutriggersDeployed(p0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.vehicle.unk._0xAA653AE61924B0A0 = function (vehicle, toggle) {
    let $res = natives.setDipStraightDownWhenCrashingPlane(vehicle, toggle | 0);
};
mp.game2.vehicle.unk._0x887FA38787DE8C72 = function (vehicle) {
    let $res = natives.setForceFixLinkMatrices(vehicle);
};
mp.game2.vehicle.unk._0x36DE109527A2C0C4 = function (toggle) {
    let $res = natives.setVehicleCombatMode(toggle | 0);
};
mp.game2.vehicle.unk._0x82E0AC411E41A5B4 = function (toggle) {
    let $res = natives.setVehicleDetonationMode(toggle | 0);
};
mp.game2.vehicle.unk._0x99A05839C46CE316 = function (toggle) {
    let $res = natives.setVehicleShuntOnStick(toggle | 0);
};
mp.game2.vehicle.unk._0xE8718FAF591FD224 = function (vehicle) {
    let $res = natives.getHasVehicleBeenHitByShunt(vehicle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.vehicle.unk._0x5BBCF35BF6E456F7 = function (toggle) {
    let $res = natives.setUseDoubleClickForCarJump(toggle | 0);
};
mp.game2.vehicle.unk._0x8F0D5BA1C2CC91D7 = function (toggle) {
    let $res = natives.setDisableRetractingWeaponBlades(toggle | 0);
};
mp.game2.vehicle.unk._0xF8B49F5BA7F850E7 = function (vehicle, p1) {
    let $res = natives.setAircraftIgnoreHightmapOptimisation(vehicle, p1);
};
if (!mp.game2.water) mp.game2.water = {};
mp.game2.water.getHeight = function (x, y, z) {
    let $res = natives.getWaterHeight(x, y, z, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.height = $res[1];
    return $res[0] == 1 ? $resObj.height : undefined;
};
mp.game2.water.getWaterHeight = function (x, y, z) {
    let $res = natives.getWaterHeight(x, y, z, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.height = $res[1];
    return $res[0] == 1 ? $resObj.height : undefined;
};
mp.game2.water.getHeightNoWaves = function (x, y, z) {
    let $res = natives.getWaterHeightNoWaves(x, y, z, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.height = $res[1];
    return $res[0] == 1 ? $resObj.height : undefined;
};
mp.game2.water.getWaterHeightNoWaves = function (x, y, z) {
    let $res = natives.getWaterHeightNoWaves(x, y, z, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.height = $res[1];
    return $res[0] == 1 ? $resObj.height : undefined;
};
mp.game2.water.testProbeAgainst = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.testProbeAgainstWater(x1, y1, z1, x2, y2, z2, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.result = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.result : undefined;
};
mp.game2.water.testProbeAgainstWater = function (x1, y1, z1, x2, y2, z2) {
    let $res = natives.testProbeAgainstWater(x1, y1, z1, x2, y2, z2, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.result = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.result : undefined;
};
mp.game2.water.testProbeAgainstAll = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.testProbeAgainstAllWater(p0, p1, p2, p3, p4, p5, p6, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.water.testProbeAgainstAllWater = function (p0, p1, p2, p3, p4, p5, p6, p7) {
    let $res = natives.testProbeAgainstAllWater(p0, p1, p2, p3, p4, p5, p6, p7);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.water.testVerticalProbeAgainstAll = function (x, y, z, p3) {
    let $res = natives.testVerticalProbeAgainstAllWater(x, y, z, p3, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.height = $res[1];
    return $res[0] == 1 ? $resObj.height : undefined;
};
mp.game2.water.testVerticalProbeAgainstAllWater = function (x, y, z, p3) {
    let $res = natives.testVerticalProbeAgainstAllWater(x, y, z, p3, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.height = $res[1];
    return $res[0] == 1 ? $resObj.height : undefined;
};
mp.game2.water.modify = function (x, y, radius, height) {
    let $res = natives.modifyWater(x, y, radius, height);
};
mp.game2.water.modifyWater = function (x, y, radius, height) {
    let $res = natives.modifyWater(x, y, radius, height);
};
mp.game2.water.addExtraCalmingQuad = function (xLow, yLow, xHigh, yHigh, height) {
    let $res = natives.addExtraCalmingQuad(xLow, yLow, xHigh, yHigh, height);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.water.removeExtraCalmingQuad = function (p0) {
    let $res = natives.removeExtraCalmingQuad(p0);
};
mp.game2.water.setDeepOceanScaler = function (intensity) {
    let $res = natives.setDeepOceanScaler(intensity);
};
mp.game2.water.setWavesIntensity = function (intensity) {
    let $res = natives.setDeepOceanScaler(intensity);
};
mp.game2.water.getDeepOceanScaler = function () {
    let $res = natives.getDeepOceanScaler();
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.water.resetDeepOceanScaler = function () {
    let $res = natives.resetDeepOceanScaler();
};
if (!mp.game2.water) mp.game2.water = {};
if (!mp.game2.water.unk) mp.game2.water.unk = {};
mp.game2.water.unk._0x547237AA71AB44DE = function (p0) {
    let $res = natives.setCalmedWaveHeightScaler(p0);
};
mp.Player.prototype.setCurrentPed = function (weaponHash, bForceInHand) {
    let $res = natives.setCurrentPedWeapon(this.handle, weaponHash, bForceInHand | 0);
};
mp.Ped.prototype.setCurrentPed = function (weaponHash, bForceInHand) {
    let $res = natives.setCurrentPedWeapon(this.handle, weaponHash, bForceInHand | 0);
};
mp.Player.prototype.getCurrentPed = function (p2) {
    let $res = natives.getCurrentPedWeapon(this.handle, 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[1];
    return $res[0] == 1 ? $resObj.weaponHash : undefined;
};
mp.Ped.prototype.getCurrentPed = function (p2) {
    let $res = natives.getCurrentPedWeapon(this.handle, 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[1];
    return $res[0] == 1 ? $resObj.weaponHash : undefined;
};
mp.Player.prototype.getCurrentPedEntityIndex = function (p1) {
    let $res = natives.getCurrentPedWeaponEntityIndex(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getCurrentPedEntityIndex = function (p1) {
    let $res = natives.getCurrentPedWeaponEntityIndex(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Blip.prototype.getBestPed = function (p1) {
    let $res = natives.getBestPedWeapon(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setCurrentPedVehicle = function (weaponHash) {
    let $res = natives.setCurrentPedVehicleWeapon(this.handle, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.setCurrentPedVehicle = function (weaponHash) {
    let $res = natives.setCurrentPedVehicleWeapon(this.handle, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getCurrentPedVehicle = function () {
    let $res = natives.getCurrentPedVehicleWeapon(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[1];
    return $res[0] == 1 ? $resObj.weaponHash : undefined;
};
mp.Ped.prototype.getCurrentPedVehicle = function () {
    let $res = natives.getCurrentPedVehicleWeapon(this.handle, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[1];
    return $res[0] == 1 ? $resObj.weaponHash : undefined;
};
mp.Player.prototype.isPedArmed = function (typeFlags) {
    let $res = natives.isPedArmed(this.handle, typeFlags);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedArmed = function (typeFlags) {
    let $res = natives.isPedArmed(this.handle, typeFlags);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.hasPedGot = function (weaponHash, p2) {
    let $res = natives.hasPedGotWeapon(this.handle, weaponHash, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasPedGot = function (weaponHash, p2) {
    let $res = natives.hasPedGotWeapon(this.handle, weaponHash, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedReadyToShoot = function () {
    let $res = natives.isPedWeaponReadyToShoot(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedReadyToShoot = function () {
    let $res = natives.isPedWeaponReadyToShoot(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getPedTypeInSlot = function (weaponSlot) {
    let $res = natives.getPedWeapontypeInSlot(this.handle, weaponSlot);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedTypeInSlot = function (weaponSlot) {
    let $res = natives.getPedWeapontypeInSlot(this.handle, weaponSlot);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getAmmoInPed = function (weaponhash) {
    let $res = natives.getAmmoInPedWeapon(this.handle, weaponhash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getAmmoInPed = function (weaponhash) {
    let $res = natives.getAmmoInPedWeapon(this.handle, weaponhash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.addAmmoToPed = function (weaponHash, ammo) {
    let $res = natives.addAmmoToPed(this.handle, weaponHash, ammo);
};
mp.Ped.prototype.addAmmoToPed = function (weaponHash, ammo) {
    let $res = natives.addAmmoToPed(this.handle, weaponHash, ammo);
};
mp.Player.prototype.setPedAmmo = function (weaponHash, ammo, p3) {
    let $res = natives.setPedAmmo(this.handle, weaponHash, ammo, p3 | 0);
};
mp.Ped.prototype.setPedAmmo = function (weaponHash, ammo, p3) {
    let $res = natives.setPedAmmo(this.handle, weaponHash, ammo, p3 | 0);
};
mp.Player.prototype.setPedInfiniteAmmo = function (toggle, weaponHash) {
    let $res = natives.setPedInfiniteAmmo(this.handle, toggle | 0, weaponHash);
};
mp.Ped.prototype.setPedInfiniteAmmo = function (toggle, weaponHash) {
    let $res = natives.setPedInfiniteAmmo(this.handle, toggle | 0, weaponHash);
};
mp.Player.prototype.setPedInfiniteAmmoClip = function (toggle) {
    let $res = natives.setPedInfiniteAmmoClip(this.handle, toggle | 0);
};
mp.Ped.prototype.setPedInfiniteAmmoClip = function (toggle) {
    let $res = natives.setPedInfiniteAmmoClip(this.handle, toggle | 0);
};
mp.Player.prototype.giveToPed = function (weaponHash, ammoCount, isHidden, bForceInHand) {
    let $res = natives.giveWeaponToPed(this.handle, weaponHash, ammoCount, isHidden | 0, bForceInHand | 0);
};
mp.Ped.prototype.giveToPed = function (weaponHash, ammoCount, isHidden, bForceInHand) {
    let $res = natives.giveWeaponToPed(this.handle, weaponHash, ammoCount, isHidden | 0, bForceInHand | 0);
};
mp.Player.prototype.giveDelayedToPed = function (weaponHash, ammoCount, bForceInHand) {
    let $res = natives.giveDelayedWeaponToPed(this.handle, weaponHash, ammoCount, bForceInHand | 0);
};
mp.Ped.prototype.giveDelayedToPed = function (weaponHash, ammoCount, bForceInHand) {
    let $res = natives.giveDelayedWeaponToPed(this.handle, weaponHash, ammoCount, bForceInHand | 0);
};
mp.Player.prototype.removeAllPedS = function (p1) {
    let $res = natives.removeAllPedWeapons(this.handle, p1 | 0);
};
mp.Ped.prototype.removeAllPedS = function (p1) {
    let $res = natives.removeAllPedWeapons(this.handle, p1 | 0);
};
mp.Player.prototype.removeFromPed = function (weaponHash) {
    let $res = natives.removeWeaponFromPed(this.handle, weaponHash);
};
mp.Ped.prototype.removeFromPed = function (weaponHash) {
    let $res = natives.removeWeaponFromPed(this.handle, weaponHash);
};
mp.Player.prototype.hidePedForScriptedCutscene = function (toggle) {
    let $res = natives.hidePedWeaponForScriptedCutscene(this.handle, toggle | 0);
};
mp.Ped.prototype.hidePedForScriptedCutscene = function (toggle) {
    let $res = natives.hidePedWeaponForScriptedCutscene(this.handle, toggle | 0);
};
mp.Player.prototype.setPedCurrentVisible = function (visible, deselectWeapon, p3, p4) {
    let $res = natives.setPedCurrentWeaponVisible(this.handle, visible | 0, deselectWeapon | 0, p3 | 0, p4 | 0);
};
mp.Ped.prototype.setPedCurrentVisible = function (visible, deselectWeapon, p3, p4) {
    let $res = natives.setPedCurrentWeaponVisible(this.handle, visible | 0, deselectWeapon | 0, p3 | 0, p4 | 0);
};
mp.Player.prototype.setPedDropsWeaponsWhenDead = function (toggle) {
    let $res = natives.setPedDropsWeaponsWhenDead(this.handle, toggle | 0);
};
mp.Ped.prototype.setPedDropsWeaponsWhenDead = function (toggle) {
    let $res = natives.setPedDropsWeaponsWhenDead(this.handle, toggle | 0);
};
mp.Player.prototype.hasPedBeenDamagedBy = function (weaponHash, weaponType) {
    let $res = natives.hasPedBeenDamagedByWeapon(this.handle, weaponHash, weaponType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasPedBeenDamagedBy = function (weaponHash, weaponType) {
    let $res = natives.hasPedBeenDamagedByWeapon(this.handle, weaponHash, weaponType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.clearPedLastDamage = function () {
    let $res = natives.clearPedLastWeaponDamage(this.handle);
};
mp.Ped.prototype.clearPedLastDamage = function () {
    let $res = natives.clearPedLastWeaponDamage(this.handle);
};
mp.Player.prototype.hasEntityBeenDamagedBy = function (weaponHash, weaponType) {
    let $res = natives.hasEntityBeenDamagedByWeapon(this.handle, weaponHash, weaponType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasEntityBeenDamagedBy = function (weaponHash, weaponType) {
    let $res = natives.hasEntityBeenDamagedByWeapon(this.handle, weaponHash, weaponType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.hasEntityBeenDamagedBy = function (weaponHash, weaponType) {
    let $res = natives.hasEntityBeenDamagedByWeapon(this.handle, weaponHash, weaponType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Vehicle.prototype.hasEntityBeenDamagedBy = function (weaponHash, weaponType) {
    let $res = natives.hasEntityBeenDamagedByWeapon(this.handle, weaponHash, weaponType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.clearEntityLastDamage = function () {
    let $res = natives.clearEntityLastWeaponDamage(this.handle);
};
mp.Ped.prototype.clearEntityLastDamage = function () {
    let $res = natives.clearEntityLastWeaponDamage(this.handle);
};
mp.Object.prototype.clearEntityLastDamage = function () {
    let $res = natives.clearEntityLastWeaponDamage(this.handle);
};
mp.Vehicle.prototype.clearEntityLastDamage = function () {
    let $res = natives.clearEntityLastWeaponDamage(this.handle);
};
mp.Player.prototype.setPedDrops = function () {
    let $res = natives.setPedDropsWeapon(this.handle);
};
mp.Ped.prototype.setPedDrops = function () {
    let $res = natives.setPedDropsWeapon(this.handle);
};
mp.Player.prototype.setPedDropsInventory = function (weaponHash, xOffset, yOffset, zOffset, ammoCount) {
    let $res = natives.setPedDropsInventoryWeapon(this.handle, weaponHash, xOffset, yOffset, zOffset, ammoCount);
};
mp.Ped.prototype.setPedDropsInventory = function (weaponHash, xOffset, yOffset, zOffset, ammoCount) {
    let $res = natives.setPedDropsInventoryWeapon(this.handle, weaponHash, xOffset, yOffset, zOffset, ammoCount);
};
mp.Player.prototype.getMaxAmmoInClip = function (weaponHash, p2) {
    let $res = natives.getMaxAmmoInClip(this.handle, weaponHash, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getMaxAmmoInClip = function (weaponHash, p2) {
    let $res = natives.getMaxAmmoInClip(this.handle, weaponHash, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getAmmoInClip = function (weaponHash) {
    let $res = natives.getAmmoInClip(this.handle, weaponHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ammo = $res[1];
    return $res[0] == 1 ? $resObj.ammo : undefined;
};
mp.Ped.prototype.getAmmoInClip = function (weaponHash) {
    let $res = natives.getAmmoInClip(this.handle, weaponHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ammo = $res[1];
    return $res[0] == 1 ? $resObj.ammo : undefined;
};
mp.Player.prototype.setAmmoInClip = function (weaponHash, ammo) {
    let $res = natives.setAmmoInClip(this.handle, weaponHash, ammo);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.setAmmoInClip = function (weaponHash, ammo) {
    let $res = natives.setAmmoInClip(this.handle, weaponHash, ammo);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getMaxAmmo = function (weaponHash) {
    let $res = natives.getMaxAmmo(this.handle, weaponHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ammo = $res[1];
    return $res[0] == 1 ? $resObj.ammo : undefined;
};
mp.Ped.prototype.getMaxAmmo = function (weaponHash) {
    let $res = natives.getMaxAmmo(this.handle, weaponHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ammo = $res[1];
    return $res[0] == 1 ? $resObj.ammo : undefined;
};
mp.Player.prototype.getMaxAmmoByType = function (ammoTypeHash) {
    let $res = natives.getMaxAmmoByType(this.handle, ammoTypeHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ammo = $res[1];
    return $res[0] == 1 ? $resObj.ammo : undefined;
};
mp.Ped.prototype.getMaxAmmoByType = function (ammoTypeHash) {
    let $res = natives.getMaxAmmoByType(this.handle, ammoTypeHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ammo = $res[1];
    return $res[0] == 1 ? $resObj.ammo : undefined;
};
mp.Player.prototype.addAmmoToPedByType = function (ammoTypeHash, ammo) {
    let $res = natives.addPedAmmoByType(this.handle, ammoTypeHash, ammo);
};
mp.Ped.prototype.addAmmoToPedByType = function (ammoTypeHash, ammo) {
    let $res = natives.addPedAmmoByType(this.handle, ammoTypeHash, ammo);
};
mp.Player.prototype.setPedAmmoByType = function (ammoTypeHash, ammo) {
    let $res = natives.setPedAmmoByType(this.handle, ammoTypeHash, ammo);
};
mp.Ped.prototype.setPedAmmoByType = function (ammoTypeHash, ammo) {
    let $res = natives.setPedAmmoByType(this.handle, ammoTypeHash, ammo);
};
mp.Player.prototype.getPedAmmoByType = function (ammoTypeHash) {
    let $res = natives.getPedAmmoByType(this.handle, ammoTypeHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedAmmoByType = function (ammoTypeHash) {
    let $res = natives.getPedAmmoByType(this.handle, ammoTypeHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setPedAmmoToDrop = function (p1) {
    let $res = natives.setPedAmmoToDrop(this.handle, p1);
};
mp.Ped.prototype.setPedAmmoToDrop = function (p1) {
    let $res = natives.setPedAmmoToDrop(this.handle, p1);
};
mp.Player.prototype.getPedAmmoTypeFrom = function (weaponHash) {
    let $res = natives.getPedAmmoTypeFromWeapon(this.handle, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedAmmoTypeFrom = function (weaponHash) {
    let $res = natives.getPedAmmoTypeFromWeapon(this.handle, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getPedAmmoTypeFrom2 = function (weaponHash) {
    let $res = natives.getPedOriginalAmmoTypeFromWeapon(this.handle, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedAmmoTypeFrom2 = function (weaponHash) {
    let $res = natives.getPedOriginalAmmoTypeFromWeapon(this.handle, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getPedLastImpactCoord = function () {
    let $res = natives.getPedLastWeaponImpactCoord(this.handle, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.coords = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.coords : undefined;
};
mp.Ped.prototype.getPedLastImpactCoord = function () {
    let $res = natives.getPedLastWeaponImpactCoord(this.handle, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.coords = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.coords : undefined;
};
mp.Player.prototype.setPedGadget = function (gadgetHash, p2) {
    let $res = natives.setPedGadget(this.handle, gadgetHash, p2 | 0);
};
mp.Ped.prototype.setPedGadget = function (gadgetHash, p2) {
    let $res = natives.setPedGadget(this.handle, gadgetHash, p2 | 0);
};
mp.Player.prototype.getIsPedGadgetEquipped = function (gadgetHash) {
    let $res = natives.getIsPedGadgetEquipped(this.handle, gadgetHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.getIsPedGadgetEquipped = function (gadgetHash) {
    let $res = natives.getIsPedGadgetEquipped(this.handle, gadgetHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.getSelectedPed = function () {
    let $res = natives.getSelectedPedWeapon(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getSelectedPed = function () {
    let $res = natives.getSelectedPedWeapon(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.explodeProjectiles = function (weaponHash, p2) {
    let $res = natives.explodeProjectiles(this.handle, weaponHash, p2 | 0);
};
mp.Ped.prototype.explodeProjectiles = function (weaponHash, p2) {
    let $res = natives.explodeProjectiles(this.handle, weaponHash, p2 | 0);
};
mp.Player.prototype.getLockonDistanceOfCurrentPed = function () {
    let $res = natives.getLockonDistanceOfCurrentPedWeapon(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getLockonDistanceOfCurrentPed = function () {
    let $res = natives.getLockonDistanceOfCurrentPedWeapon(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.getMaxRangeOfCurrentPed = function () {
    let $res = natives.getMaxRangeOfCurrentPedWeapon(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getMaxRangeOfCurrentPed = function () {
    let $res = natives.getMaxRangeOfCurrentPedWeapon(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Vehicle.prototype.hasVehicleGotProjectileAttached = function (vehicle, weaponHash, p3) {
    let $res = natives.hasVehicleGotProjectileAttached(this.handle, vehicle, weaponHash, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.giveComponentToPed = function (weaponHash, componentHash) {
    let $res = natives.giveWeaponComponentToPed(this.handle, weaponHash, componentHash);
};
mp.Ped.prototype.giveComponentToPed = function (weaponHash, componentHash) {
    let $res = natives.giveWeaponComponentToPed(this.handle, weaponHash, componentHash);
};
mp.Player.prototype.removeComponentFromPed = function (weaponHash, componentHash) {
    let $res = natives.removeWeaponComponentFromPed(this.handle, weaponHash, componentHash);
};
mp.Ped.prototype.removeComponentFromPed = function (weaponHash, componentHash) {
    let $res = natives.removeWeaponComponentFromPed(this.handle, weaponHash, componentHash);
};
mp.Player.prototype.hasPedGotComponent = function (weaponHash, componentHash) {
    let $res = natives.hasPedGotWeaponComponent(this.handle, weaponHash, componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.hasPedGotComponent = function (weaponHash, componentHash) {
    let $res = natives.hasPedGotWeaponComponent(this.handle, weaponHash, componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isPedComponentActive = function (weaponHash, componentHash) {
    let $res = natives.isPedWeaponComponentActive(this.handle, weaponHash, componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedComponentActive = function (weaponHash, componentHash) {
    let $res = natives.isPedWeaponComponentActive(this.handle, weaponHash, componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.refillAmmoInstantly = function () {
    let $res = natives.refillAmmoInstantly(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.refillAmmoInstantly = function () {
    let $res = natives.refillAmmoInstantly(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.makePedReload = function () {
    let $res = natives.makePedReload(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.makePedReload = function () {
    let $res = natives.makePedReload(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.giveComponentToWeaponObject = function (addonHash) {
    let $res = natives.giveWeaponComponentToWeaponObject(this.handle, addonHash);
};
mp.Object.prototype.hasGotWeaponComponent = function (addonHash) {
    let $res = natives.hasWeaponGotWeaponComponent(this.handle, addonHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Object.prototype.giveObjectToPed = function (ped) {
    let $res = natives.giveWeaponObjectToPed(this.handle, ped);
};
mp.Player.prototype.getObjectFromPed = function (p1) {
    let $res = natives.getWeaponObjectFromPed(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getObjectFromPed = function (p1) {
    let $res = natives.getWeaponObjectFromPed(this.handle, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.giveLoadoutToPed = function (loadoutHash) {
    let $res = natives.giveLoadoutToPed(this.handle, loadoutHash);
};
mp.Ped.prototype.giveLoadoutToPed = function (loadoutHash) {
    let $res = natives.giveLoadoutToPed(this.handle, loadoutHash);
};
mp.Player.prototype.setPedTintIndex = function (weaponHash, tintIndex) {
    let $res = natives.setPedWeaponTintIndex(this.handle, weaponHash, tintIndex);
};
mp.Ped.prototype.setPedTintIndex = function (weaponHash, tintIndex) {
    let $res = natives.setPedWeaponTintIndex(this.handle, weaponHash, tintIndex);
};
mp.Player.prototype.getPedTintIndex = function (weaponHash) {
    let $res = natives.getPedWeaponTintIndex(this.handle, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedTintIndex = function (weaponHash) {
    let $res = natives.getPedWeaponTintIndex(this.handle, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.setObjectTintIndex = function (tintIndex) {
    let $res = natives.setWeaponObjectTintIndex(this.handle, tintIndex);
};
mp.Object.prototype.getObjectTintIndex = function () {
    let $res = natives.getWeaponObjectTintIndex(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setPedLiveryColor = function (weaponHash, camoComponentHash, colorIndex) {
    let $res = natives.setPedWeaponComponentTintIndex(this.handle, weaponHash, camoComponentHash, colorIndex);
};
mp.Ped.prototype.setPedLiveryColor = function (weaponHash, camoComponentHash, colorIndex) {
    let $res = natives.setPedWeaponComponentTintIndex(this.handle, weaponHash, camoComponentHash, colorIndex);
};
mp.Player.prototype.getPedLiveryColor = function (weaponHash, camoComponentHash) {
    let $res = natives.getPedWeaponComponentTintIndex(this.handle, weaponHash, camoComponentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.getPedLiveryColor = function (weaponHash, camoComponentHash) {
    let $res = natives.getPedWeaponComponentTintIndex(this.handle, weaponHash, camoComponentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Object.prototype.setObjectLiveryColor = function (camoComponentHash, colorIndex) {
    let $res = natives.setWeaponObjectComponentTintIndex(this.handle, camoComponentHash, colorIndex);
};
mp.Object.prototype.getObjectLiveryColor = function (camoComponentHash) {
    let $res = natives.getWeaponObjectComponentTintIndex(this.handle, camoComponentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.setPedChanceOfFiringBlanks = function (xBias, yBias) {
    let $res = natives.setPedChanceOfFiringBlanks(this.handle, xBias, yBias);
};
mp.Ped.prototype.setPedChanceOfFiringBlanks = function (xBias, yBias) {
    let $res = natives.setPedChanceOfFiringBlanks(this.handle, xBias, yBias);
};
mp.Player.prototype.setPedShootOrdnance = function (p1) {
    let $res = natives.setPedShootOrdnanceWeapon(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Ped.prototype.setPedShootOrdnance = function (p1) {
    let $res = natives.setPedShootOrdnanceWeapon(this.handle, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.Player.prototype.requestHighDetailModel = function () {
    let $res = natives.requestWeaponHighDetailModel(this.handle);
};
mp.Ped.prototype.requestHighDetailModel = function () {
    let $res = natives.requestWeaponHighDetailModel(this.handle);
};
mp.Object.prototype.requestHighDetailModel = function () {
    let $res = natives.requestWeaponHighDetailModel(this.handle);
};
mp.Vehicle.prototype.requestHighDetailModel = function () {
    let $res = natives.requestWeaponHighDetailModel(this.handle);
};
mp.Player.prototype.isPedCurrentSilenced = function () {
    let $res = natives.isPedCurrentWeaponSilenced(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isPedCurrentSilenced = function () {
    let $res = natives.isPedCurrentWeaponSilenced(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.isFlashLightOn = function () {
    let $res = natives.isFlashLightOn(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Ped.prototype.isFlashLightOn = function () {
    let $res = natives.isFlashLightOn(this.handle);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.Player.prototype.setFlashLightEnabled = function (toggle) {
    let $res = natives.setFlashLightActiveHistory(this.handle, toggle | 0);
};
mp.Ped.prototype.setFlashLightEnabled = function (toggle) {
    let $res = natives.setFlashLightActiveHistory(this.handle, toggle | 0);
};
mp.Player.prototype.setAnimationOverride = function (animStyle) {
    let $res = natives.setWeaponAnimationOverride(this.handle, animStyle);
};
mp.Ped.prototype.setAnimationOverride = function (animStyle) {
    let $res = natives.setWeaponAnimationOverride(this.handle, animStyle);
};
mp.Player.prototype.setCanPedEquip = function (weaponHash, toggle) {
    let $res = natives.setCanPedSelectInventoryWeapon(this.handle, weaponHash, toggle | 0);
};
mp.Ped.prototype.setCanPedEquip = function (weaponHash, toggle) {
    let $res = natives.setCanPedSelectInventoryWeapon(this.handle, weaponHash, toggle | 0);
};
mp.Player.prototype.setCanPedEquipAllS = function (toggle) {
    let $res = natives.setCanPedSelectAllWeapons(this.handle, toggle | 0);
};
mp.Ped.prototype.setCanPedEquipAllS = function (toggle) {
    let $res = natives.setCanPedSelectAllWeapons(this.handle, toggle | 0);
};
if (!mp.game2.weapon) mp.game2.weapon = {};
mp.game2.weapon.enableLaserSightRendering = function (toggle) {
    let $res = natives.enableLaserSightRendering(toggle | 0);
};
mp.game2.weapon.getComponentTypeModel = function (componentHash) {
    let $res = natives.getWeaponComponentTypeModel(componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getWeaponComponentTypeModel = function (componentHash) {
    let $res = natives.getWeaponComponentTypeModel(componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getTypeModel = function (weaponHash) {
    let $res = natives.getWeapontypeModel(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getWeapontypeModel = function (weaponHash) {
    let $res = natives.getWeapontypeModel(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getTypeSlot = function (weaponHash) {
    let $res = natives.getWeapontypeSlot(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getWeapontypeSlot = function (weaponHash) {
    let $res = natives.getWeapontypeSlot(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getTypeGroup = function (weaponHash) {
    let $res = natives.getWeapontypeGroup(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getWeapontypeGroup = function (weaponHash) {
    let $res = natives.getWeapontypeGroup(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getComponentVariantExtraComponentCount = function (componentHash) {
    let $res = natives.getWeaponComponentVariantExtraCount(componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getComponentVariantExtraComponentModel = function (componentHash, extraComponentIndex) {
    let $res = natives.getWeaponComponentVariantExtraModel(componentHash, extraComponentIndex);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.setCurrentPed = function (ped, weaponHash, bForceInHand) {
    let $res = natives.setCurrentPedWeapon(ped, weaponHash, bForceInHand | 0);
};
mp.game2.weapon.getCurrentPed = function (ped, p2) {
    let $res = natives.getCurrentPedWeapon(ped, 0, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[1];
    return $res[0] == 1 ? $resObj.weaponHash : undefined;
};
mp.game2.weapon.getCurrentPedEntityIndex = function (ped, p1) {
    let $res = natives.getCurrentPedWeaponEntityIndex(ped, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getBestPed = function (ped, p1) {
    let $res = natives.getBestPedWeapon(ped, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.setCurrentPedVehicle = function (ped, weaponHash) {
    let $res = natives.setCurrentPedVehicleWeapon(ped, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.getCurrentPedVehicle = function (ped) {
    let $res = natives.getCurrentPedVehicleWeapon(ped, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.weaponHash = $res[1];
    return $res[0] == 1 ? $resObj.weaponHash : undefined;
};
mp.game2.weapon.isPedArmed = function (ped, typeFlags) {
    let $res = natives.isPedArmed(ped, typeFlags);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.isValid = function (weaponHash) {
    let $res = natives.isWeaponValid(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.isWeaponValid = function (weaponHash) {
    let $res = natives.isWeaponValid(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.hasPedGot = function (ped, weaponHash, p2) {
    let $res = natives.hasPedGotWeapon(ped, weaponHash, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.isPedReadyToShoot = function (ped) {
    let $res = natives.isPedWeaponReadyToShoot(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.getPedTypeInSlot = function (ped, weaponSlot) {
    let $res = natives.getPedWeapontypeInSlot(ped, weaponSlot);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getAmmoInPed = function (ped, weaponhash) {
    let $res = natives.getAmmoInPedWeapon(ped, weaponhash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.addAmmoToPed = function (ped, weaponHash, ammo) {
    let $res = natives.addAmmoToPed(ped, weaponHash, ammo);
};
mp.game2.weapon.setPedAmmo = function (ped, weaponHash, ammo, p3) {
    let $res = natives.setPedAmmo(ped, weaponHash, ammo, p3 | 0);
};
mp.game2.weapon.setPedInfiniteAmmo = function (ped, toggle, weaponHash) {
    let $res = natives.setPedInfiniteAmmo(ped, toggle | 0, weaponHash);
};
mp.game2.weapon.setPedInfiniteAmmoClip = function (ped, toggle) {
    let $res = natives.setPedInfiniteAmmoClip(ped, toggle | 0);
};
mp.game2.weapon.giveToPed = function (ped, weaponHash, ammoCount, isHidden, bForceInHand) {
    let $res = natives.giveWeaponToPed(ped, weaponHash, ammoCount, isHidden | 0, bForceInHand | 0);
};
mp.game2.weapon.giveDelayedToPed = function (ped, weaponHash, ammoCount, bForceInHand) {
    let $res = natives.giveDelayedWeaponToPed(ped, weaponHash, ammoCount, bForceInHand | 0);
};
mp.game2.weapon.removeAllPedS = function (ped, p1) {
    let $res = natives.removeAllPedWeapons(ped, p1 | 0);
};
mp.game2.weapon.removeFromPed = function (ped, weaponHash) {
    let $res = natives.removeWeaponFromPed(ped, weaponHash);
};
mp.game2.weapon.hidePedForScriptedCutscene = function (ped, toggle) {
    let $res = natives.hidePedWeaponForScriptedCutscene(ped, toggle | 0);
};
mp.game2.weapon.setPedCurrentVisible = function (ped, visible, deselectWeapon, p3, p4) {
    let $res = natives.setPedCurrentWeaponVisible(ped, visible | 0, deselectWeapon | 0, p3 | 0, p4 | 0);
};
mp.game2.weapon.setPedDropsWeaponsWhenDead = function (ped, toggle) {
    let $res = natives.setPedDropsWeaponsWhenDead(ped, toggle | 0);
};
mp.game2.weapon.hasPedBeenDamagedBy = function (ped, weaponHash, weaponType) {
    let $res = natives.hasPedBeenDamagedByWeapon(ped, weaponHash, weaponType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.clearPedLastDamage = function (ped) {
    let $res = natives.clearPedLastWeaponDamage(ped);
};
mp.game2.weapon.hasEntityBeenDamagedBy = function (entity, weaponHash, weaponType) {
    let $res = natives.hasEntityBeenDamagedByWeapon(entity, weaponHash, weaponType);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.clearEntityLastDamage = function (entity) {
    let $res = natives.clearEntityLastWeaponDamage(entity);
};
mp.game2.weapon.setPedDrops = function (ped) {
    let $res = natives.setPedDropsWeapon(ped);
};
mp.game2.weapon.setPedDropsInventory = function (ped, weaponHash, xOffset, yOffset, zOffset, ammoCount) {
    let $res = natives.setPedDropsInventoryWeapon(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
};
mp.game2.weapon.getMaxAmmoInClip = function (ped, weaponHash, p2) {
    let $res = natives.getMaxAmmoInClip(ped, weaponHash, p2 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getAmmoInClip = function (ped, weaponHash) {
    let $res = natives.getAmmoInClip(ped, weaponHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ammo = $res[1];
    return $res[0] == 1 ? $resObj.ammo : undefined;
};
mp.game2.weapon.setAmmoInClip = function (ped, weaponHash, ammo) {
    let $res = natives.setAmmoInClip(ped, weaponHash, ammo);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.getMaxAmmo = function (ped, weaponHash) {
    let $res = natives.getMaxAmmo(ped, weaponHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ammo = $res[1];
    return $res[0] == 1 ? $resObj.ammo : undefined;
};
mp.game2.weapon.getMaxAmmoByType = function (ped, ammoTypeHash) {
    let $res = natives.getMaxAmmoByType(ped, ammoTypeHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.ammo = $res[1];
    return $res[0] == 1 ? $resObj.ammo : undefined;
};
mp.game2.weapon.addAmmoToPedByType = function (ped, ammoTypeHash, ammo) {
    let $res = natives.addPedAmmoByType(ped, ammoTypeHash, ammo);
};
mp.game2.weapon.setPedAmmoByType = function (ped, ammoTypeHash, ammo) {
    let $res = natives.setPedAmmoByType(ped, ammoTypeHash, ammo);
};
mp.game2.weapon.getPedAmmoByType = function (ped, ammoTypeHash) {
    let $res = natives.getPedAmmoByType(ped, ammoTypeHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.setPedAmmoToDrop = function (ped, p1) {
    let $res = natives.setPedAmmoToDrop(ped, p1);
};
mp.game2.weapon.setPickupAmmoAmountScaler = function (p0) {
    let $res = natives.setPickupAmmoAmountScaler(p0);
};
mp.game2.weapon.getPedAmmoTypeFrom = function (ped, weaponHash) {
    let $res = natives.getPedAmmoTypeFromWeapon(ped, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getPedAmmoTypeFrom2 = function (ped, weaponHash) {
    let $res = natives.getPedOriginalAmmoTypeFromWeapon(ped, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getPedLastImpactCoord = function (ped) {
    let $res = natives.getPedLastWeaponImpactCoord(ped, undefined);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.coords = new mp.Vector3($res[1]);
    return $res[0] == 1 ? $resObj.coords : undefined;
};
mp.game2.weapon.setPedGadget = function (ped, gadgetHash, p2) {
    let $res = natives.setPedGadget(ped, gadgetHash, p2 | 0);
};
mp.game2.weapon.getIsPedGadgetEquipped = function (ped, gadgetHash) {
    let $res = natives.getIsPedGadgetEquipped(ped, gadgetHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.getSelectedPed = function (ped) {
    let $res = natives.getSelectedPedWeapon(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.explodeProjectiles = function (ped, weaponHash, p2) {
    let $res = natives.explodeProjectiles(ped, weaponHash, p2 | 0);
};
mp.game2.weapon.removeAllProjectilesOfType = function (weaponHash, explode) {
    let $res = natives.removeAllProjectilesOfType(weaponHash, explode | 0);
};
mp.game2.weapon.getLockonDistanceOfCurrentPed = function (ped) {
    let $res = natives.getLockonDistanceOfCurrentPedWeapon(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getMaxRangeOfCurrentPed = function (ped) {
    let $res = natives.getMaxRangeOfCurrentPedWeapon(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.hasVehicleGotProjectileAttached = function (driver, vehicle, weaponHash, p3) {
    let $res = natives.hasVehicleGotProjectileAttached(driver, vehicle, weaponHash, p3);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.giveComponentToPed = function (ped, weaponHash, componentHash) {
    let $res = natives.giveWeaponComponentToPed(ped, weaponHash, componentHash);
};
mp.game2.weapon.removeComponentFromPed = function (ped, weaponHash, componentHash) {
    let $res = natives.removeWeaponComponentFromPed(ped, weaponHash, componentHash);
};
mp.game2.weapon.hasPedGotComponent = function (ped, weaponHash, componentHash) {
    let $res = natives.hasPedGotWeaponComponent(ped, weaponHash, componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.isPedComponentActive = function (ped, weaponHash, componentHash) {
    let $res = natives.isPedWeaponComponentActive(ped, weaponHash, componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.refillAmmoInstantly = function (ped) {
    let $res = natives.refillAmmoInstantly(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.makePedReload = function (ped) {
    let $res = natives.makePedReload(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.requestAsset = function (weaponHash, p1, p2) {
    let $res = natives.requestWeaponAsset(weaponHash, p1, p2);
};
mp.game2.weapon.requestWeaponAsset = function (weaponHash, p1, p2) {
    let $res = natives.requestWeaponAsset(weaponHash, p1, p2);
};
mp.game2.weapon.hasAssetLoaded = function (weaponHash) {
    let $res = natives.hasWeaponAssetLoaded(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.hasWeaponAssetLoaded = function (weaponHash) {
    let $res = natives.hasWeaponAssetLoaded(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.removeAsset = function (weaponHash) {
    let $res = natives.removeWeaponAsset(weaponHash);
};
mp.game2.weapon.removeWeaponAsset = function (weaponHash) {
    let $res = natives.removeWeaponAsset(weaponHash);
};
mp.game2.weapon.createObject = function (weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7, p8, p9) {
    let $res = natives.createWeaponObject(weaponHash, ammoCount, x, y, z, showWorldModel | 0, scale, p7, p8 | 0, p9 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.createWeaponObject = function (weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7, p8, p9) {
    let $res = natives.createWeaponObject(weaponHash, ammoCount, x, y, z, showWorldModel | 0, scale, p7, p8 | 0, p9 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.giveComponentToWeaponObject = function (weaponObject, addonHash) {
    let $res = natives.giveWeaponComponentToWeaponObject(weaponObject, addonHash);
};
mp.game2.weapon.giveWeaponComponentToWeaponObject = function (weaponObject, addonHash) {
    let $res = natives.giveWeaponComponentToWeaponObject(weaponObject, addonHash);
};
mp.game2.weapon.removeComponentFromWeaponObject = function (p0, p1) {
    let $res = natives.removeWeaponComponentFromWeaponObject(p0, p1);
};
mp.game2.weapon.removeWeaponComponentFromWeaponObject = function (p0, p1) {
    let $res = natives.removeWeaponComponentFromWeaponObject(p0, p1);
};
mp.game2.weapon.hasGotWeaponComponent = function (weapon, addonHash) {
    let $res = natives.hasWeaponGotWeaponComponent(weapon, addonHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.hasWeaponGotWeaponComponent = function (weapon, addonHash) {
    let $res = natives.hasWeaponGotWeaponComponent(weapon, addonHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.giveObjectToPed = function (weaponObject, ped) {
    let $res = natives.giveWeaponObjectToPed(weaponObject, ped);
};
mp.game2.weapon.giveWeaponObjectToPed = function (weaponObject, ped) {
    let $res = natives.giveWeaponObjectToPed(weaponObject, ped);
};
mp.game2.weapon.doesTakeWeaponComponent = function (weaponHash, componentHash) {
    let $res = natives.doesWeaponTakeWeaponComponent(weaponHash, componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.doesWeaponTakeWeaponComponent = function (weaponHash, componentHash) {
    let $res = natives.doesWeaponTakeWeaponComponent(weaponHash, componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.getObjectFromPed = function (ped, p1) {
    let $res = natives.getWeaponObjectFromPed(ped, p1 | 0);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.giveLoadoutToPed = function (ped, loadoutHash) {
    let $res = natives.giveLoadoutToPed(ped, loadoutHash);
};
mp.game2.weapon.setPedTintIndex = function (ped, weaponHash, tintIndex) {
    let $res = natives.setPedWeaponTintIndex(ped, weaponHash, tintIndex);
};
mp.game2.weapon.getPedTintIndex = function (ped, weaponHash) {
    let $res = natives.getPedWeaponTintIndex(ped, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.setObjectTintIndex = function (weapon, tintIndex) {
    let $res = natives.setWeaponObjectTintIndex(weapon, tintIndex);
};
mp.game2.weapon.setWeaponObjectTintIndex = function (weapon, tintIndex) {
    let $res = natives.setWeaponObjectTintIndex(weapon, tintIndex);
};
mp.game2.weapon.getObjectTintIndex = function (weapon) {
    let $res = natives.getWeaponObjectTintIndex(weapon);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getWeaponObjectTintIndex = function (weapon) {
    let $res = natives.getWeaponObjectTintIndex(weapon);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getTintCount = function (weaponHash) {
    let $res = natives.getWeaponTintCount(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getWeaponTintCount = function (weaponHash) {
    let $res = natives.getWeaponTintCount(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.setPedLiveryColor = function (ped, weaponHash, camoComponentHash, colorIndex) {
    let $res = natives.setPedWeaponComponentTintIndex(ped, weaponHash, camoComponentHash, colorIndex);
};
mp.game2.weapon.getPedLiveryColor = function (ped, weaponHash, camoComponentHash) {
    let $res = natives.getPedWeaponComponentTintIndex(ped, weaponHash, camoComponentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.setObjectLiveryColor = function (weaponObject, camoComponentHash, colorIndex) {
    let $res = natives.setWeaponObjectComponentTintIndex(weaponObject, camoComponentHash, colorIndex);
};
mp.game2.weapon.getObjectLiveryColor = function (weaponObject, camoComponentHash) {
    let $res = natives.getWeaponObjectComponentTintIndex(weaponObject, camoComponentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getHudStats = function (weaponHash) {
    let $res = natives.getWeaponHudStats(weaponHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outData = $res[0];
    return $res[0] == 1 ? $resObj.outData : undefined;
};
mp.game2.weapon.getWeaponHudStats = function (weaponHash) {
    let $res = natives.getWeaponHudStats(weaponHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outData = $res[0];
    return $res[0] == 1 ? $resObj.outData : undefined;
};
mp.game2.weapon.getComponentHudStats = function (componentHash) {
    let $res = natives.getWeaponComponentHudStats(componentHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outData = $res[0];
    return $res[0] == 1 ? $resObj.outData : undefined;
};
mp.game2.weapon.getWeaponComponentHudStats = function (componentHash) {
    let $res = natives.getWeaponComponentHudStats(componentHash, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outData = $res[0];
    return $res[0] == 1 ? $resObj.outData : undefined;
};
mp.game2.weapon.getDamage = function (weaponHash, componentHash) {
    let $res = natives.getWeaponDamage(weaponHash, componentHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getClipSize = function (weaponHash) {
    let $res = natives.getWeaponClipSize(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getWeaponClipSize = function (weaponHash) {
    let $res = natives.getWeaponClipSize(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getTimeBetweenShots = function (weaponHash) {
    let $res = natives.getWeaponTimeBetweenShots(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.setPedChanceOfFiringBlanks = function (ped, xBias, yBias) {
    let $res = natives.setPedChanceOfFiringBlanks(ped, xBias, yBias);
};
mp.game2.weapon.setPedShootOrdnance = function (ped, p1) {
    let $res = natives.setPedShootOrdnanceWeapon(ped, p1);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.requestHighDetailModel = function (weaponObject) {
    let $res = natives.requestWeaponHighDetailModel(weaponObject);
};
mp.game2.weapon.requestWeaponHighDetailModel = function (weaponObject) {
    let $res = natives.requestWeaponHighDetailModel(weaponObject);
};
mp.game2.weapon.setDamageModifierThisFrame = function (weaponHash, damageMultiplier) {
    let $res = natives.setWeaponDamageModifier(weaponHash, damageMultiplier);
};
mp.game2.weapon.setExplosionRadiusMultiplier = function (weaponHash, multiplier) {
    let $res = natives.setWeaponAoeModifier(weaponHash, multiplier);
};
mp.game2.weapon.isPedCurrentSilenced = function (ped) {
    let $res = natives.isPedCurrentWeaponSilenced(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.isFlashLightOn = function (ped) {
    let $res = natives.isFlashLightOn(ped);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.setFlashLightFadeDistance = function (distance) {
    let $res = natives.setFlashLightFadeDistance(distance);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.setFlashLightEnabled = function (ped, toggle) {
    let $res = natives.setFlashLightActiveHistory(ped, toggle | 0);
};
mp.game2.weapon.setAnimationOverride = function (ped, animStyle) {
    let $res = natives.setWeaponAnimationOverride(ped, animStyle);
};
mp.game2.weapon.getDamageType = function (weaponHash) {
    let $res = natives.getWeaponDamageType(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.getWeaponDamageType = function (weaponHash) {
    let $res = natives.getWeaponDamageType(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.canUseOnParachute = function (weaponHash) {
    let $res = natives.canUseWeaponOnParachute(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.canUseWeaponOnParachute = function (weaponHash) {
    let $res = natives.canUseWeaponOnParachute(weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.createAirDefenseSphere = function (x, y, z, radius, p4, p5, p6, weaponHash) {
    let $res = natives.createAirDefenceSphere(x, y, z, radius, p4, p5, p6, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.createAirDefenseArea = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, weaponHash) {
    let $res = natives.createAirDefenceAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.removeAirDefenseZone = function (zoneId) {
    let $res = natives.removeAirDefenceSphere(zoneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.removeAllAirDefenseZones = function () {
    let $res = natives.removeAllAirDefenceSpheres();
};
mp.game2.weapon.setPlayerAirDefenseZoneFlag = function (player, zoneId, enable) {
    let $res = natives.setPlayerTargettableForAirDefenceSphere(player, zoneId, enable | 0);
};
mp.game2.weapon.isAnyAirDefenseZoneInsideSphere = function (x, y, z, radius) {
    let $res = natives.isAirDefenceSphereInArea(x, y, z, radius, 0);
    if (!Array.isArray($res)) $res = [$res];
    let $resObj = {};
    $resObj.outZoneId = $res[1];
    return $res[0] == 1 ? $resObj.outZoneId : undefined;
};
mp.game2.weapon.fireAirDefense = function (zoneId, x, y, z) {
    let $res = natives.fireAirDefenceSphereWeaponAtPosition(zoneId, x, y, z);
};
mp.game2.weapon.doesAirDefenseZoneExist = function (zoneId) {
    let $res = natives.doesAirDefenceSphereExist(zoneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0] == 1;
};
mp.game2.weapon.setCanPedEquip = function (ped, weaponHash, toggle) {
    let $res = natives.setCanPedSelectInventoryWeapon(ped, weaponHash, toggle | 0);
};
mp.game2.weapon.setCanPedEquipAllS = function (ped, toggle) {
    let $res = natives.setCanPedSelectAllWeapons(ped, toggle | 0);
};
if (!mp.game2.weapon) mp.game2.weapon = {};
if (!mp.game2.weapon.unk) mp.game2.weapon.unk = {};
mp.game2.weapon.unk._0x50276EF8172F5F12 = function (ped) {
    let $res = natives.setPedCycleVehicleWeaponsOnly(ped);
};
mp.game2.weapon.unk._0x24C024BA8379A70A = function (p0, p1) {
    let $res = natives.setPedStunGunFiniteAmmo(p0, p1);
};
mp.game2.weapon.unk._0xA2C9AC24B4061285 = function (ped, weaponHash) {
    let $res = natives.getPedWeaponCamoIndex(ped, weaponHash);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.weapon.unk._0x977CA98939E82E4B = function (weaponObject, p1) {
    let $res = natives.setWeaponObjectCamoIndex(weaponObject, p1);
};
mp.game2.weapon.unk._0xE6D2CEDD370FF98E = function (p0, p1) {
    let $res = natives.setWeaponEffectDurationModifier(p0, p1);
};
mp.game2.weapon.unk._0xE4DCEC7FD5B739A5 = function (ped) {
    let $res = natives.setEqippedWeaponStartSpinningAtFullSpeed(ped);
};
if (!mp.game2.zone) mp.game2.zone = {};
mp.game2.zone.getAtCoords = function (x, y, z) {
    let $res = natives.getZoneAtCoords(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.zone.getZoneAtCoords = function (x, y, z) {
    let $res = natives.getZoneAtCoords(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.zone.getFromNameId = function (zoneName) {
    let $res = natives.getZoneFromNameId(zoneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.zone.getZoneFromNameId = function (zoneName) {
    let $res = natives.getZoneFromNameId(zoneName);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.zone.getPopschedule = function (zoneId) {
    let $res = natives.getZonePopschedule(zoneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.zone.getZonePopschedule = function (zoneId) {
    let $res = natives.getZonePopschedule(zoneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.zone.getNameOf = function (x, y, z) {
    let $res = natives.getNameOfZone(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.zone.getNameOfZone = function (x, y, z) {
    let $res = natives.getNameOfZone(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.zone.setEnabled = function (zoneId, toggle) {
    let $res = natives.setZoneEnabled(zoneId, toggle | 0);
};
mp.game2.zone.setZoneEnabled = function (zoneId, toggle) {
    let $res = natives.setZoneEnabled(zoneId, toggle | 0);
};
mp.game2.zone.getScumminess = function (zoneId) {
    let $res = natives.getZoneScumminess(zoneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.zone.getZoneScumminess = function (zoneId) {
    let $res = natives.getZoneScumminess(zoneId);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
mp.game2.zone.overridePopscheduleVehicleModel = function (scheduleId, vehicleHash) {
    let $res = natives.overridePopscheduleVehicleModel(scheduleId, vehicleHash);
};
mp.game2.zone.clearPopscheduleOverrideVehicleModel = function (scheduleId) {
    let $res = natives.clearPopscheduleOverrideVehicleModel(scheduleId);
};
mp.game2.zone.getHashOfMapAreaAtCoords = function (x, y, z) {
    let $res = natives.getHashOfMapAreaAtCoords(x, y, z);
    if (!Array.isArray($res)) $res = [$res];
    return $res[0];
};
hashes['0x4EDE34FBADD967A6'] = function(p0) {
    const $res = natives.wait(p0);
    return $res;
}
hashes['0xE81651AD79516E48'] = function(p0, p1) {
    const $res = natives.startNewScript(p0, p1);
    return $res;
}
hashes['0xB8BA7F44DF1575E1'] = function(p0, p1, p2, p3) {
    const $res = natives.startNewScriptWithArgs(p0, p1, p2, p3);
    return $res;
}
hashes['0xEB1C67C3A5333A92'] = function(p0, p1) {
    const $res = natives.startNewScriptWithNameHash(p0, p1);
    return $res;
}
hashes['0xC4BB298BD441BE78'] = function(p0, p1, p2, p3) {
    const $res = natives.startNewScriptWithNameHashAndArgs(p0, p1, p2, p3);
    return $res;
}
hashes['0x83666F9FB8FEBD4B'] = function() {
    const $res = natives.timera();
    return $res;
}
hashes['0xC9D9444186B5A374'] = function() {
    const $res = natives.timerb();
    return $res;
}
hashes['0xC1B1E9A034A63A62'] = function(p0) {
    const $res = natives.settimera(p0);
    return $res;
}
hashes['0x5AE11BC36633DE4E'] = function(p0) {
    const $res = natives.settimerb(p0);
    return $res;
}
hashes['0x0000000050597EE2'] = function() {
    const $res = natives.timestep();
    return $res;
}
hashes['0x0BADBFA3B172435F'] = function(p0) {
    const $res = natives.sin(p0);
    return $res;
}
hashes['0xD0FFB162F40A139C'] = function(p0) {
    const $res = natives.cos(p0);
    return $res;
}
hashes['0x71D93B57D07F9804'] = function(p0) {
    const $res = natives.sqrt(p0);
    return $res;
}
hashes['0xE3621CC40F31FE2E'] = function(p0, p1) {
    const $res = natives.pow(p0, p1);
    return $res;
}
hashes['0xE816E655DE37FE20'] = function(p0) {
    const $res = natives.log10(p0);
    return $res;
}
hashes['0x652D2EEEF1D3E62C'] = function(p0, p1, p2) {
    const $res = natives.vmag(p0, p1, p2);
    return $res;
}
hashes['0xA8CEACB4F35AE058'] = function(p0, p1, p2) {
    const $res = natives.vmag2(p0, p1, p2);
    return $res;
}
hashes['0x2A488C176D52CCA5'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.vdist(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xB7A628320EFF8E47'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.vdist2(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xEDD95A39E5544DE8'] = function(p0, p1) {
    const $res = natives.shiftLeft(p0, p1);
    return $res;
}
hashes['0x97EF1E5BCE9DC075'] = function(p0, p1) {
    const $res = natives.shiftRight(p0, p1);
    return $res;
}
hashes['0xF34EE736CF047844'] = function(p0) {
    const $res = natives.floor(p0);
    return $res;
}
hashes['0x11E019C8F43ACC8A'] = function(p0) {
    const $res = natives.ceil(p0);
    return $res;
}
hashes['0xF2DB717A73826179'] = function(p0) {
    const $res = natives.round(p0);
    return $res;
}
hashes['0xBBDA792448DB5A89'] = function(p0) {
    const $res = natives.toFloat(p0);
    return $res;
}
hashes['0x42B65DEEF2EDF2A1'] = function(p0) {
    const $res = natives.setThisThreadPriority(p0);
    return $res;
}
hashes['0x846AA8E7D55EE5B6'] = function() {
    const $res = natives.appDataValid();
    return $res;
}
hashes['0xD3A58A12C77D9D4B'] = function(p0) {
    const $res = natives.appGetInt(p0);
    return $res;
}
hashes['0x1514FB24C02C2322'] = function(p0) {
    const $res = natives.appGetFloat(p0);
    return $res;
}
hashes['0x749B023950D2311C'] = function(p0) {
    const $res = natives.appGetString(p0);
    return $res;
}
hashes['0x607E8E3D3E4F9611'] = function(p0, p1) {
    const $res = natives.appSetInt(p0, p1);
    return $res;
}
hashes['0x25D7687C68E0DAA4'] = function(p0, p1) {
    const $res = natives.appSetFloat(p0, p1);
    return $res;
}
hashes['0x3FF2FCEC4B7721B4'] = function(p0, p1) {
    const $res = natives.appSetString(p0, p1);
    return $res;
}
hashes['0xCFD0406ADAF90D2B'] = function(p0) {
    const $res = natives.appSetApp(p0);
    return $res;
}
hashes['0x262AB456A3D21F93'] = function(p0) {
    const $res = natives.appSetBlock(p0);
    return $res;
}
hashes['0x5FE1DF3342DB7DBA'] = function() {
    const $res = natives.appClearBlock();
    return $res;
}
hashes['0xE41C65E07A5F05FC'] = function() {
    const $res = natives.appCloseApp();
    return $res;
}
hashes['0xE8E3FCF72EAC0EF8'] = function() {
    const $res = natives.appCloseBlock();
    return $res;
}
hashes['0x71EEE69745088DA0'] = function() {
    const $res = natives.appHasLinkedSocialClubAccount();
    return $res;
}
hashes['0xCA52279A7271517F'] = function(p0) {
    const $res = natives.appHasSyncedData(p0);
    return $res;
}
hashes['0x95C5D356CDA6E85F'] = function() {
    const $res = natives.appSaveData();
    return $res;
}
hashes['0xC9853A2BE3DED1A6'] = function() {
    const $res = natives.appGetDeletedFileStatus();
    return $res;
}
hashes['0x44151AEA95C8A003'] = function(p0) {
    const $res = natives.appDeleteAppData(p0);
    return $res;
}
hashes['0xF9E56683CA8E11A5'] = function(p0, p1, p2) {
    const $res = natives.playPedRingtone(p0, p1, p2);
    return $res;
}
hashes['0x1E8E5E20937E3137'] = function(p0) {
    const $res = natives.isPedRingtonePlaying(p0);
    return $res;
}
hashes['0x6C5AE23EFA885092'] = function(p0) {
    const $res = natives.stopPedRingtone(p0);
    return $res;
}
hashes['0x7497D2CE2C30D24C'] = function() {
    const $res = natives.isMobilePhoneCallOngoing();
    return $res;
}
hashes['0xC8B1B2425604CDD0'] = function() {
    const $res = natives.isMobileInterferenceActive();
    return $res;
}
hashes['0xD2C91A0B572AAE56'] = function() {
    const $res = natives.createNewScriptedConversation();
    return $res;
}
hashes['0xC5EF963405593646'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.addLineToConversation(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x95D9F4BC443956E7'] = function(p0, p1, p2) {
    const $res = natives.addPedToConversation(p0, p1, p2);
    return $res;
}
hashes['0x33E3C6C6F2F0B506'] = function(p0, p1, p2, p3) {
    const $res = natives.setPositionForNullConvPed(p0, p1, p2, p3);
    return $res;
}
hashes['0x892B6AB8F33606F5'] = function(p0, p1) {
    const $res = natives.setEntityForNullConvPed(p0, p1);
    return $res;
}
hashes['0xB6AE90EDDE95C762'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.setMicrophonePosition(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x0B568201DD99F0EB'] = function(p0) {
    const $res = natives.setConversationAudioControlledByAnim(p0);
    return $res;
}
hashes['0x61631F5DF50D1C34'] = function(p0) {
    const $res = natives.setConversationAudioPlaceholder(p0);
    return $res;
}
hashes['0x252E5F915EABB675'] = function(p0, p1) {
    const $res = natives.startScriptPhoneConversation(p0, p1);
    return $res;
}
hashes['0x6004BCB0E226AAEA'] = function(p0, p1) {
    const $res = natives.preloadScriptPhoneConversation(p0, p1);
    return $res;
}
hashes['0x6B17C62C9635D2DC'] = function(p0, p1, p2, p3) {
    const $res = natives.startScriptConversation(p0, p1, p2, p3);
    return $res;
}
hashes['0x3B3CAD6166916D87'] = function(p0, p1, p2, p3) {
    const $res = natives.preloadScriptConversation(p0, p1, p2, p3);
    return $res;
}
hashes['0x23641AFE870AF385'] = function() {
    const $res = natives.startPreloadedConversation();
    return $res;
}
hashes['0xE73364DB90778FFA'] = function() {
    const $res = natives.getIsPreloadedConversationReady();
    return $res;
}
hashes['0x16754C556D2EDE3D'] = function() {
    const $res = natives.isScriptedConversationOngoing();
    return $res;
}
hashes['0xDF0D54BE7A776737'] = function() {
    const $res = natives.isScriptedConversationLoaded();
    return $res;
}
hashes['0x480357EE890C295A'] = function() {
    const $res = natives.getCurrentScriptedConversationLine();
    return $res;
}
hashes['0x8530AD776CD72B12'] = function(p0) {
    const $res = natives.pauseScriptedConversation(p0);
    return $res;
}
hashes['0x9AEB285D1818C9AC'] = function() {
    const $res = natives.restartScriptedConversation();
    return $res;
}
hashes['0xD79DEEFB53455EBA'] = function(p0) {
    const $res = natives.stopScriptedConversation(p0);
    return $res;
}
hashes['0x9663FE6B7A61EB00'] = function() {
    const $res = natives.skipToNextScriptedConversationLine();
    return $res;
}
hashes['0xA018A12E5C5C2FA6'] = function(p0, p1, p2) {
    const $res = natives.interruptConversation(p0, p1, p2);
    return $res;
}
hashes['0x8A694D7A68F8DC38'] = function(p0, p1, p2) {
    const $res = natives.interruptConversationAndPause(p0, p1, p2);
    return $res;
}
hashes['0xAA19F5572C38B564'] = function(p0) {
    const $res = natives.getVariationChosenForScriptedLine(p0);
    return $res;
}
hashes['0xB542DE8C3D1CB210'] = function(p0) {
    const $res = natives.setNoDuckingForConversation(p0);
    return $res;
}
hashes['0xC6ED9D5092438D91'] = function(p0) {
    const $res = natives.registerScriptWithAudio(p0);
    return $res;
}
hashes['0xA8638BE228D4751A'] = function() {
    const $res = natives.unregisterScriptWithAudio();
    return $res;
}
hashes['0x7345BDD95E62E0F2'] = function(p0, p1, p2) {
    const $res = natives.requestMissionAudioBank(p0, p1, p2);
    return $res;
}
hashes['0xFE02FFBED8CA9D99'] = function(p0, p1, p2) {
    const $res = natives.requestAmbientAudioBank(p0, p1, p2);
    return $res;
}
hashes['0x2F844A8B08D76685'] = function(p0, p1, p2) {
    const $res = natives.requestScriptAudioBank(p0, p1, p2);
    return $res;
}
hashes['0x40763EA7B9B783E7'] = function(p0, p1, p2) {
    const $res = natives.hintMissionAudioBank(p0, p1, p2);
    return $res;
}
hashes['0x8F8C0E370AE62F5C'] = function(p0, p1, p2) {
    const $res = natives.hintAmbientAudioBank(p0, p1, p2);
    return $res;
}
hashes['0xFB380A29641EC31A'] = function(p0, p1, p2) {
    const $res = natives.hintScriptAudioBank(p0, p1, p2);
    return $res;
}
hashes['0x0EC92A1BF0857187'] = function() {
    const $res = natives.releaseMissionAudioBank();
    return $res;
}
hashes['0x65475A218FFAA93D'] = function() {
    const $res = natives.releaseAmbientAudioBank();
    return $res;
}
hashes['0x77ED170667F50170'] = function(p0) {
    const $res = natives.releaseNamedScriptAudioBank(p0);
    return $res;
}
hashes['0x7A2D8AD0A9EB9C3F'] = function() {
    const $res = natives.releaseScriptAudioBank();
    return $res;
}
hashes['0x19AF7ED9B9D23058'] = function() {
    const $res = natives.unhintAmbientAudioBank();
    return $res;
}
hashes['0x9AC92EED5E4793AB'] = function() {
    const $res = natives.unhintScriptAudioBank();
    return $res;
}
hashes['0x11579D940949C49E'] = function(p0) {
    const $res = natives.unhintNamedScriptAudioBank(p0);
    return $res;
}
hashes['0x430386FE9BF80B45'] = function() {
    const $res = natives.getSoundId();
    return $res;
}
hashes['0x353FC880830B88FA'] = function(p0) {
    const $res = natives.releaseSoundId(p0);
    return $res;
}
hashes['0x7FF4944CC209192D'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.playSound(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x67C540AA08E4A6F5'] = function(p0, p1, p2, p3) {
    const $res = natives.playSoundFrontend(p0, p1, p2, p3);
    return $res;
}
hashes['0xCADA5A0D0702381E'] = function(p0, p1) {
    const $res = natives.playDeferredSoundFrontend(p0, p1);
    return $res;
}
hashes['0xE65F427EB70AB1ED'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.playSoundFromEntity(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x5B9853296731E88D'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.playSoundFromEntityHash(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x8D8686B622B88120'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.playSoundFromCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x7EC3C679D0E7E46B'] = function(p0, p1, p2, p3) {
    const $res = natives.updateSoundCoord(p0, p1, p2, p3);
    return $res;
}
hashes['0xA3B0C41BA5CC0BB5'] = function(p0) {
    const $res = natives.stopSound(p0);
    return $res;
}
hashes['0x2DE3F0A134FFBC0D'] = function(p0) {
    const $res = natives.getNetworkIdFromSoundId(p0);
    return $res;
}
hashes['0x75262FD12D0A1C84'] = function(p0) {
    const $res = natives.getSoundIdFromNetworkId(p0);
    return $res;
}
hashes['0xAD6B3148A78AE9B6'] = function(p0, p1, p2) {
    const $res = natives.setVariableOnSound(p0, p1, p2);
    return $res;
}
hashes['0x2F9D3834AEB9EF79'] = function(p0, p1) {
    const $res = natives.setVariableOnStream(p0, p1);
    return $res;
}
hashes['0xF2A9CDABCEA04BD6'] = function(p0, p1) {
    const $res = natives.overrideUnderwaterStream(p0, p1);
    return $res;
}
hashes['0x733ADF241531E5C2'] = function(p0, p1) {
    const $res = natives.setVariableOnUnderWaterStream(p0, p1);
    return $res;
}
hashes['0xFCBDCE714A7C88E5'] = function(p0) {
    const $res = natives.hasSoundFinished(p0);
    return $res;
}
hashes['0x8E04FEDD28D42462'] = function(p0, p1, p2, p3) {
    const $res = natives.playPedAmbientSpeechNative(p0, p1, p2, p3);
    return $res;
}
hashes['0xC6941B4A3A8FBBB9'] = function(p0, p1, p2, p3) {
    const $res = natives.playPedAmbientSpeechAndCloneNative(p0, p1, p2, p3);
    return $res;
}
hashes['0x3523634255FC3318'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playPedAmbientSpeechWithVoiceNative(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xED640017ED337E45'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.playAmbientSpeechFromPositionNative(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x13AD665062541A7E'] = function(p0) {
    const $res = natives.overrideTrevorRage(p0);
    return $res;
}
hashes['0xE78503B10C4314E0'] = function() {
    const $res = natives.resetTrevorRage();
    return $res;
}
hashes['0xEA241BB04110F091'] = function(p0, p1) {
    const $res = natives.setPlayerAngry(p0, p1);
    return $res;
}
hashes['0xBC9AE166038A5CEC'] = function(p0, p1, p2, p3) {
    const $res = natives.playPain(p0, p1, p2, p3);
    return $res;
}
hashes['0xCE4AC0439F607045'] = function() {
    const $res = natives.releaseWeaponAudio();
    return $res;
}
hashes['0xD01005D2BA2EB778'] = function(p0) {
    const $res = natives.activateAudioSlowmoMode(p0);
    return $res;
}
hashes['0xDDC635D5B3262C56'] = function(p0) {
    const $res = natives.deactivateAudioSlowmoMode(p0);
    return $res;
}
hashes['0x6C8065A3B780185B'] = function(p0, p1) {
    const $res = natives.setAmbientVoiceName(p0, p1);
    return $res;
}
hashes['0x9A53DED9921DE990'] = function(p0, p1) {
    const $res = natives.setAmbientVoiceNameHash(p0, p1);
    return $res;
}
hashes['0x5E203DA2BA15D436'] = function(p0) {
    const $res = natives.getAmbientVoiceNameHash(p0);
    return $res;
}
hashes['0x40CF0D12D142A9E8'] = function(p0) {
    const $res = natives.setPedVoiceFull(p0);
    return $res;
}
hashes['0x1B7ABE26CBCBF8C7'] = function(p0, p1, p2) {
    const $res = natives.setPedRaceAndVoiceGroup(p0, p1, p2);
    return $res;
}
hashes['0x7CDC8C3B89F661B3'] = function(p0, p1) {
    const $res = natives.setPedVoiceGroup(p0, p1);
    return $res;
}
hashes['0x0BABC1345ABBFB16'] = function(p0, p1) {
    const $res = natives.setPedVoiceGroupFromRaceToPvg(p0, p1);
    return $res;
}
hashes['0xA5342D390CDA41D6'] = function(p0, p1) {
    const $res = natives.setPedGender(p0, p1);
    return $res;
}
hashes['0x7A73D05A607734C7'] = function(p0) {
    const $res = natives.stopCurrentPlayingSpeech(p0);
    return $res;
}
hashes['0xB8BEC0CA6F0EDB0F'] = function(p0) {
    const $res = natives.stopCurrentPlayingAmbientSpeech(p0);
    return $res;
}
hashes['0x9072C8B49907BFAD'] = function(p0) {
    const $res = natives.isAmbientSpeechPlaying(p0);
    return $res;
}
hashes['0xCC9AA18DCC7084F4'] = function(p0) {
    const $res = natives.isScriptedSpeechPlaying(p0);
    return $res;
}
hashes['0x729072355FA39EC9'] = function(p0) {
    const $res = natives.isAnySpeechPlaying(p0);
    return $res;
}
hashes['0x30CA2EF91D15ADF8'] = function() {
    const $res = natives.isAnyPositionalSpeechPlaying();
    return $res;
}
hashes['0x49B99BF3FDA89A7A'] = function(p0, p1, p2) {
    const $res = natives.doesContextExistForThisPed(p0, p1, p2);
    return $res;
}
hashes['0x049E937F18F4020C'] = function(p0) {
    const $res = natives.isPedInCurrentConversation(p0);
    return $res;
}
hashes['0x95D2D383D5396B8A'] = function(p0, p1) {
    const $res = natives.setPedIsDrunk(p0, p1);
    return $res;
}
hashes['0xEE066C7006C49C0A'] = function(p0, p1, p2) {
    const $res = natives.playAnimalVocalization(p0, p1, p2);
    return $res;
}
hashes['0xC265DF9FB44A9FBD'] = function(p0) {
    const $res = natives.isAnimalVocalizationPlaying(p0);
    return $res;
}
hashes['0xCC97B29285B1DC3B'] = function(p0, p1) {
    const $res = natives.setAnimalMood(p0, p1);
    return $res;
}
hashes['0xB35CE999E8EF317E'] = function() {
    const $res = natives.isMobilePhoneRadioActive();
    return $res;
}
hashes['0xBF286C554784F3DF'] = function(p0) {
    const $res = natives.setMobilePhoneRadioState(p0);
    return $res;
}
hashes['0xE8AF77C4C06ADC93'] = function() {
    const $res = natives.getPlayerRadioStationIndex();
    return $res;
}
hashes['0xF6D733C32076AD03'] = function() {
    const $res = natives.getPlayerRadioStationName();
    return $res;
}
hashes['0xB28ECA15046CA8B9'] = function(p0) {
    const $res = natives.getRadioStationName(p0);
    return $res;
}
hashes['0xA571991A7FE6CCEB'] = function() {
    const $res = natives.getPlayerRadioStationGenre();
    return $res;
}
hashes['0xA151A7394A214E65'] = function() {
    const $res = natives.isRadioRetuning();
    return $res;
}
hashes['0x0626A247D2405330'] = function() {
    const $res = natives.isRadioFadedOut();
    return $res;
}
hashes['0xFF266D1D0EB1195D'] = function() {
    const $res = natives.setRadioRetuneUp();
    return $res;
}
hashes['0xDD6BCF9E94425DF9'] = function() {
    const $res = natives.setRadioRetuneDown();
    return $res;
}
hashes['0xC69EDA28699D5107'] = function(p0) {
    const $res = natives.setRadioToStationName(p0);
    return $res;
}
hashes['0x1B9C0099CB942AC6'] = function(p0, p1) {
    const $res = natives.setVehRadioStation(p0, p1);
    return $res;
}
hashes['0x3E45765F3FBB582F'] = function(p0) {
    const $res = natives.setVehHasNormalRadio(p0);
    return $res;
}
hashes['0x0BE4BE946463F917'] = function(p0) {
    const $res = natives.isVehicleRadioOn(p0);
    return $res;
}
hashes['0xC1805D05E6D4FE10'] = function(p0) {
    const $res = natives.setVehForcedRadioThisFrame(p0);
    return $res;
}
hashes['0xACF57305B12AF907'] = function(p0, p1, p2) {
    const $res = natives.setEmitterRadioStation(p0, p1, p2);
    return $res;
}
hashes['0x399D2D3B33F1B8EB'] = function(p0, p1) {
    const $res = natives.setStaticEmitterEnabled(p0, p1);
    return $res;
}
hashes['0x651D3228960D08AF'] = function(p0, p1) {
    const $res = natives.linkStaticEmitterToEntity(p0, p1);
    return $res;
}
hashes['0xA619B168B8A8570F'] = function(p0) {
    const $res = natives.setRadioToStationIndex(p0);
    return $res;
}
hashes['0xF7F26C6E9CC9EBB8'] = function(p0) {
    const $res = natives.setFrontendRadioActive(p0);
    return $res;
}
hashes['0xB165AB7C248B2DC1'] = function(p0) {
    const $res = natives.unlockMissionNewsStory(p0);
    return $res;
}
hashes['0x66E49BF55B4B1874'] = function(p0) {
    const $res = natives.isMissionNewsStoryUnlocked(p0);
    return $res;
}
hashes['0x50B196FC9ED6545B'] = function() {
    const $res = natives.getAudibleMusicTrackTextId();
    return $res;
}
hashes['0xCD536C4D33DCC900'] = function(p0) {
    const $res = natives.playEndCreditsMusic(p0);
    return $res;
}
hashes['0x6DDBBDD98E2E9C25'] = function() {
    const $res = natives.skipRadioForward();
    return $res;
}
hashes['0x344F393B027E38C3'] = function(p0) {
    const $res = natives.freezeRadioStation(p0);
    return $res;
}
hashes['0xFC00454CF60B91DD'] = function(p0) {
    const $res = natives.unfreezeRadioStation(p0);
    return $res;
}
hashes['0xC1AA9F53CE982990'] = function(p0) {
    const $res = natives.setRadioAutoUnfreeze(p0);
    return $res;
}
hashes['0x88795F13FACDA88D'] = function(p0) {
    const $res = natives.setInitialPlayerStation(p0);
    return $res;
}
hashes['0x19F21E63AE6EAE4E'] = function(p0) {
    const $res = natives.setUserRadioControlEnabled(p0);
    return $res;
}
hashes['0xB39786F201FEE30B'] = function(p0, p1) {
    const $res = natives.setRadioTrack(p0, p1);
    return $res;
}
hashes['0x2CB0075110BE1E56'] = function(p0, p1, p2) {
    const $res = natives.setRadioTrackWithStartOffset(p0, p1, p2);
    return $res;
}
hashes['0x55ECF4D13D9903B0'] = function(p0, p1, p2, p3) {
    const $res = natives.setNextRadioTrack(p0, p1, p2, p3);
    return $res;
}
hashes['0xBB6F1CAEC68B0BCE'] = function(p0, p1) {
    const $res = natives.setVehicleRadioLoud(p0, p1);
    return $res;
}
hashes['0x032A116663A4D5AC'] = function(p0) {
    const $res = natives.canVehicleReceiveCbRadio(p0);
    return $res;
}
hashes['0x1098355A16064BB3'] = function(p0) {
    const $res = natives.setMobileRadioEnabledDuringGameplay(p0);
    return $res;
}
hashes['0x109697E2FFBAC8A1'] = function() {
    const $res = natives.doesPlayerVehHaveRadio();
    return $res;
}
hashes['0x5F43D83FD6738741'] = function() {
    const $res = natives.isPlayerVehRadioEnable();
    return $res;
}
hashes['0x3B988190C0AA6C0B'] = function(p0, p1) {
    const $res = natives.setVehicleRadioEnabled(p0, p1);
    return $res;
}
hashes['0xDA07819E452FFE8F'] = function(p0) {
    const $res = natives.setPositionedPlayerVehicleRadioEmitterEnabled(p0);
    return $res;
}
hashes['0x4E404A9361F75BB2'] = function(p0, p1, p2) {
    const $res = natives.setCustomRadioTrackList(p0, p1, p2);
    return $res;
}
hashes['0x1654F24A88A8E3FE'] = function(p0) {
    const $res = natives.clearCustomRadioTrackList(p0);
    return $res;
}
hashes['0xF1620ECB50E01DE7'] = function() {
    const $res = natives.getNumUnlockedRadioStations();
    return $res;
}
hashes['0x8D67489793FF428B'] = function(p0) {
    const $res = natives.findRadioStationIndex(p0);
    return $res;
}
hashes['0x774BD811F656A122'] = function(p0, p1) {
    const $res = natives.setRadioStationMusicOnly(p0, p1);
    return $res;
}
hashes['0x2C96CDB04FCA358E'] = function(p0) {
    const $res = natives.setRadioFrontendFadeTime(p0);
    return $res;
}
hashes['0x031ACB6ABA18C729'] = function(p0, p1) {
    const $res = natives.unlockRadioStationTrackList(p0, p1);
    return $res;
}
hashes['0xFF5E5EA2DCEEACF3'] = function(p0, p1) {
    const $res = natives.lockRadioStationTrackList(p0, p1);
    return $res;
}
hashes['0x47AED84213A47510'] = function(p0) {
    const $res = natives.updateUnlockableDjRadioTracks(p0);
    return $res;
}
hashes['0x477D9DB48F889591'] = function(p0, p1) {
    const $res = natives.lockRadioStation(p0, p1);
    return $res;
}
hashes['0x4CAFEBFA21EC188D'] = function(p0, p1) {
    const $res = natives.setRadioStationAsFavourite(p0, p1);
    return $res;
}
hashes['0x2B1784DB08AFEA79'] = function(p0) {
    const $res = natives.isRadioStationFavourited(p0);
    return $res;
}
hashes['0xC64A06D939F826F5'] = function(p0, p1, p2) {
    if (!Array.isArray(p0)) throw new Error('Argument out1 should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument out2 should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument out3 should be an array');
    const $res = natives.getNextAudibleBeat();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    p2[0] = $res[3];
    return $res[0];
}
hashes['0x4E0AF9114608257C'] = function(p0, p1, p2) {
    const $res = natives.forceMusicTrackList(p0, p1, p2);
    return $res;
}
hashes['0x3E65CDE5215832C1'] = function(p0) {
    const $res = natives.getCurrentTrackPlayTime(p0);
    return $res;
}
hashes['0x34D66BC058019CE0'] = function(p0) {
    const $res = natives.getCurrentTrackSoundName(p0);
    return $res;
}
hashes['0xF3365489E0DD50F9'] = function(p0, p1) {
    const $res = natives.setVehicleMissileWarningEnabled(p0, p1);
    return $res;
}
hashes['0xBDA07E5950085E46'] = function(p0, p1, p2) {
    const $res = natives.setAmbientZoneState(p0, p1, p2);
    return $res;
}
hashes['0x218DD44AAAC964FF'] = function(p0, p1) {
    const $res = natives.clearAmbientZoneState(p0, p1);
    return $res;
}
hashes['0x9748FA4DE50CCE3E'] = function(p0, p1, p2) {
    const $res = natives.setAmbientZoneListState(p0, p1, p2);
    return $res;
}
hashes['0x120C48C614909FA4'] = function(p0, p1) {
    const $res = natives.clearAmbientZoneListState(p0, p1);
    return $res;
}
hashes['0x1D6650420CEC9D3B'] = function(p0, p1, p2) {
    const $res = natives.setAmbientZoneStatePersistent(p0, p1, p2);
    return $res;
}
hashes['0xF3638DAE8C4045E1'] = function(p0, p1, p2) {
    const $res = natives.setAmbientZoneListStatePersistent(p0, p1, p2);
    return $res;
}
hashes['0x01E2817A479A7F9B'] = function(p0) {
    const $res = natives.isAmbientZoneEnabled(p0);
    return $res;
}
hashes['0x5D2BFAAB8D956E0E'] = function() {
    const $res = natives.refreshClosestOceanShoreline();
    return $res;
}
hashes['0x3B4BF5F0859204D9'] = function(p0) {
    const $res = natives.setCutsceneAudioOverride(p0);
    return $res;
}
hashes['0xBCC29F935ED07688'] = function(p0, p1) {
    const $res = natives.setVariableOnSynchSceneAudio(p0, p1);
    return $res;
}
hashes['0xDFEBD56D9BD1EB16'] = function(p0, p1) {
    const $res = natives.playPoliceReport(p0, p1);
    return $res;
}
hashes['0xB4F90FAF7670B16F'] = function() {
    const $res = natives.cancelAllPoliceReports();
    return $res;
}
hashes['0x1B9025BDA76822B6'] = function(p0) {
    const $res = natives.blipSiren(p0);
    return $res;
}
hashes['0x3CDC1E622CCE0356'] = function(p0, p1, p2) {
    const $res = natives.overrideVehHorn(p0, p1, p2);
    return $res;
}
hashes['0x9D6BFC12B05C6121'] = function(p0) {
    const $res = natives.isHornActive(p0);
    return $res;
}
hashes['0x395BF71085D1B1D9'] = function(p0) {
    const $res = natives.setAggressiveHorns(p0);
    return $res;
}
hashes['0x02E93C796ABD3A97'] = function(p0) {
    const $res = natives.setRadioPositionAudioMute(p0);
    return $res;
}
hashes['0x58BB377BEC7CD5F4'] = function(p0, p1) {
    const $res = natives.setVehicleConversationsPersist(p0, p1);
    return $res;
}
hashes['0x9BD7BD55E4533183'] = function(p0, p1, p2) {
    const $res = natives.setVehicleConversationsPersistNew(p0, p1, p2);
    return $res;
}
hashes['0xD11FA52EB849D978'] = function() {
    const $res = natives.isStreamPlaying();
    return $res;
}
hashes['0x4E72BBDBCA58A3DB'] = function() {
    const $res = natives.getStreamPlayTime();
    return $res;
}
hashes['0x1F1F957154EC51DF'] = function(p0, p1) {
    const $res = natives.loadStream(p0, p1);
    return $res;
}
hashes['0x59C16B79F53B3712'] = function(p0, p1, p2) {
    const $res = natives.loadStreamWithStartOffset(p0, p1, p2);
    return $res;
}
hashes['0x89049DD63C08B5D1'] = function(p0) {
    const $res = natives.playStreamFromPed(p0);
    return $res;
}
hashes['0xB70374A758007DFA'] = function(p0) {
    const $res = natives.playStreamFromVehicle(p0);
    return $res;
}
hashes['0xEBAA9B64D76356FD'] = function(p0) {
    const $res = natives.playStreamFromObject(p0);
    return $res;
}
hashes['0x58FCE43488F9F5F4'] = function() {
    const $res = natives.playStreamFrontend();
    return $res;
}
hashes['0x21442F412E8DE56B'] = function(p0, p1, p2) {
    const $res = natives.playStreamFromPosition(p0, p1, p2);
    return $res;
}
hashes['0xA4718A1419D18151'] = function() {
    const $res = natives.stopStream();
    return $res;
}
hashes['0x9D64D7405520E3D3'] = function(p0, p1) {
    const $res = natives.stopPedSpeaking(p0, p1);
    return $res;
}
hashes['0xF8AD2EED7C47E8FE'] = function(p0, p1, p2) {
    const $res = natives.blockAllSpeechFromPed(p0, p1, p2);
    return $res;
}
hashes['0xAB6781A5F3101470'] = function(p0, p1) {
    const $res = natives.stopPedSpeakingSynced(p0, p1);
    return $res;
}
hashes['0xA9A41C1E940FB0E8'] = function(p0, p1) {
    const $res = natives.disablePedPainAudio(p0, p1);
    return $res;
}
hashes['0x932C2D096A2C3FFF'] = function(p0) {
    const $res = natives.isAmbientSpeechDisabled(p0);
    return $res;
}
hashes['0xA8A7D434AFB4B97B'] = function(p0, p1) {
    const $res = natives.blockSpeechContextGroup(p0, p1);
    return $res;
}
hashes['0x2ACABED337622DF2'] = function(p0) {
    const $res = natives.unblockSpeechContextGroup(p0);
    return $res;
}
hashes['0x1FEF0683B96EBCF2'] = function(p0, p1) {
    const $res = natives.setSirenWithNoDriver(p0, p1);
    return $res;
}
hashes['0xF584CF8529B51434'] = function(p0, p1) {
    const $res = natives.setSirenBypassMpDriverCheck(p0, p1);
    return $res;
}
hashes['0x66C3FB05206041BA'] = function(p0) {
    const $res = natives.triggerSirenAudio(p0);
    return $res;
}
hashes['0x9C11908013EA4715'] = function(p0) {
    const $res = natives.setHornPermanentlyOn(p0);
    return $res;
}
hashes['0x76D683C108594D0E'] = function(p0, p1) {
    const $res = natives.setHornEnabled(p0, p1);
    return $res;
}
hashes['0xE5564483E407F914'] = function(p0, p1) {
    const $res = natives.setAudioVehiclePriority(p0, p1);
    return $res;
}
hashes['0x9D3AF56E94C9AE98'] = function(p0, p1) {
    const $res = natives.setHornPermanentlyOnTime(p0, p1);
    return $res;
}
hashes['0xFA932DE350266EF8'] = function(p0, p1) {
    const $res = natives.useSirenAsHorn(p0, p1);
    return $res;
}
hashes['0x4F0C413926060B38'] = function(p0, p1) {
    const $res = natives.forceUseAudioGameObject(p0, p1);
    return $res;
}
hashes['0xCA4CEA6AE0000A7E'] = function(p0) {
    const $res = natives.preloadVehicleAudioBank(p0);
    return $res;
}
hashes['0xF1F8157B8C3F171C'] = function(p0, p1, p2) {
    const $res = natives.setVehicleStartupRevSound(p0, p1, p2);
    return $res;
}
hashes['0xD2DCCD8E16E20997'] = function(p0) {
    const $res = natives.resetVehicleStartupRevSound(p0);
    return $res;
}
hashes['0x97FFB4ADEED08066'] = function(p0, p1) {
    const $res = natives.setVehicleForceReverseWarning(p0, p1);
    return $res;
}
hashes['0x5DB8010EE71FDEF2'] = function(p0) {
    const $res = natives.isVehicleAudiblyDamaged(p0);
    return $res;
}
hashes['0x59E7B488451F4D3A'] = function(p0, p1) {
    const $res = natives.setVehicleAudioEngineDamageFactor(p0, p1);
    return $res;
}
hashes['0x01BB4D577D38BD9E'] = function(p0, p1) {
    const $res = natives.setVehicleAudioBodyDamageFactor(p0, p1);
    return $res;
}
hashes['0x1C073274E065C6D2'] = function(p0, p1) {
    const $res = natives.enableVehicleFanbeltDamage(p0, p1);
    return $res;
}
hashes['0x2BE4BC731D039D5A'] = function(p0, p1) {
    const $res = natives.enableVehicleExhaustPops(p0, p1);
    return $res;
}
hashes['0x4A04DE7CAB2739A1'] = function(p0, p1) {
    const $res = natives.setVehicleBoostActive(p0, p1);
    return $res;
}
hashes['0x6FDDAD856E36988A'] = function(p0, p1) {
    const $res = natives.setPlayerVehicleAlarmAudioActive(p0, p1);
    return $res;
}
hashes['0x06C0023BED16DD6B'] = function(p0, p1) {
    const $res = natives.setScriptUpdateDoorAudio(p0, p1);
    return $res;
}
hashes['0x3A539D52857EA82D'] = function(p0, p1) {
    const $res = natives.playVehicleDoorOpenSound(p0, p1);
    return $res;
}
hashes['0x62A456AA4769EF34'] = function(p0, p1) {
    const $res = natives.playVehicleDoorCloseSound(p0, p1);
    return $res;
}
hashes['0xC15907D667F7CFB2'] = function(p0, p1) {
    const $res = natives.enableStallWarningSounds(p0, p1);
    return $res;
}
hashes['0x6D28DC1671E334FD'] = function() {
    const $res = natives.isGameInControlOfMusic();
    return $res;
}
hashes['0x3BD3F52BA9B1E4E8'] = function(p0) {
    const $res = natives.setGpsActive(p0);
    return $res;
}
hashes['0xB138AAB8A70D3C69'] = function(p0) {
    const $res = natives.playMissionCompleteAudio(p0);
    return $res;
}
hashes['0x19A30C23F5827F8A'] = function() {
    const $res = natives.isMissionCompletePlaying();
    return $res;
}
hashes['0x6F259F82D873B8B8'] = function() {
    const $res = natives.isMissionCompleteReadyForUi();
    return $res;
}
hashes['0xF154B8D1775B2DEC'] = function(p0) {
    const $res = natives.blockDeathJingle(p0);
    return $res;
}
hashes['0x013A80FC08F6E4F2'] = function(p0) {
    const $res = natives.startAudioScene(p0);
    return $res;
}
hashes['0xDFE8422B3B94E688'] = function(p0) {
    const $res = natives.stopAudioScene(p0);
    return $res;
}
hashes['0xBAC7FC81A75EC1A1'] = function() {
    const $res = natives.stopAudioScenes();
    return $res;
}
hashes['0xB65B60556E2A9225'] = function(p0) {
    const $res = natives.isAudioSceneActive(p0);
    return $res;
}
hashes['0xEF21A9EF089A2668'] = function(p0, p1, p2) {
    const $res = natives.setAudioSceneVariable(p0, p1, p2);
    return $res;
}
hashes['0xA5F377B175A699C5'] = function(p0) {
    const $res = natives.setAudioScriptCleanupTime(p0);
    return $res;
}
hashes['0x153973AB99FE8980'] = function(p0, p1, p2) {
    const $res = natives.addEntityToAudioMixGroup(p0, p1, p2);
    return $res;
}
hashes['0x18EB48CFC41F2EA0'] = function(p0, p1) {
    const $res = natives.removeEntityFromAudioMixGroup(p0, p1);
    return $res;
}
hashes['0x845FFC3A4FEEFA3E'] = function() {
    const $res = natives.audioIsMusicPlaying();
    return $res;
}
hashes['0x2DD39BF3E2F9C47F'] = function() {
    const $res = natives.audioIsScriptedMusicPlaying();
    return $res;
}
hashes['0x1E5185B72EF5158A'] = function(p0) {
    const $res = natives.prepareMusicEvent(p0);
    return $res;
}
hashes['0x5B17A90291133DA5'] = function(p0) {
    const $res = natives.cancelMusicEvent(p0);
    return $res;
}
hashes['0x706D57B0F50DA710'] = function(p0) {
    const $res = natives.triggerMusicEvent(p0);
    return $res;
}
hashes['0xA097AB275061FB21'] = function() {
    const $res = natives.isMusicOneshotPlaying();
    return $res;
}
hashes['0xE7A0D23DC414507B'] = function() {
    const $res = natives.getMusicPlaytime();
    return $res;
}
hashes['0x159B7318403A1CD8'] = function(p0) {
    const $res = natives.setGlobalRadioSignalLevel(p0);
    return $res;
}
hashes['0xFBE20329593DEC9D'] = function(p0, p1, p2, p3) {
    const $res = natives.recordBrokenGlass(p0, p1, p2, p3);
    return $res;
}
hashes['0xB32209EFFDC04913'] = function() {
    const $res = natives.clearAllBrokenGlass();
    return $res;
}
hashes['0x70B8EC8FC108A634'] = function(p0, p1) {
    const $res = natives.scriptOverridesWindElevation(p0, p1);
    return $res;
}
hashes['0x149AEE66F0CB3A99'] = function(p0, p1) {
    const $res = natives.setPedWallaDensity(p0, p1);
    return $res;
}
hashes['0x8BF907833BE275DE'] = function(p0, p1) {
    const $res = natives.setPedInteriorWallaDensity(p0, p1);
    return $res;
}
hashes['0x062D5EAD4DA2FA6A'] = function() {
    const $res = natives.forcePedPanicWalla();
    return $res;
}
hashes['0x9D74AE343DB65533'] = function(p0) {
    const $res = natives.prepareAlarm(p0);
    return $res;
}
hashes['0x0355EF116C4C97B2'] = function(p0, p1) {
    const $res = natives.startAlarm(p0, p1);
    return $res;
}
hashes['0xA1CADDCD98415A41'] = function(p0, p1) {
    const $res = natives.stopAlarm(p0, p1);
    return $res;
}
hashes['0x2F794A877ADD4C92'] = function(p0) {
    const $res = natives.stopAllAlarms(p0);
    return $res;
}
hashes['0x226435CB96CCFC8C'] = function(p0) {
    const $res = natives.isAlarmPlaying(p0);
    return $res;
}
hashes['0x02165D55000219AC'] = function(p0) {
    const $res = natives.getVehicleDefaultHorn(p0);
    return $res;
}
hashes['0xACB5DCCA1EC76840'] = function(p0) {
    const $res = natives.getVehicleDefaultHornIgnoreMods(p0);
    return $res;
}
hashes['0xF54BB7B61036F335'] = function(p0) {
    const $res = natives.resetPedAudioFlags(p0);
    return $res;
}
hashes['0x0653B735BFBDFE87'] = function(p0, p1) {
    const $res = natives.setPedFootstepsEventsEnabled(p0, p1);
    return $res;
}
hashes['0x29DA3CA8D8B2692D'] = function(p0, p1) {
    const $res = natives.setPedClothEventsEnabled(p0, p1);
    return $res;
}
hashes['0xD2CC78CD3D0B50F9'] = function(p0, p1) {
    const $res = natives.overridePlayerGroundMaterial(p0, p1);
    return $res;
}
hashes['0xBF4DC1784BE94DFA'] = function(p0, p1, p2) {
    const $res = natives.useFootstepScriptSweeteners(p0, p1, p2);
    return $res;
}
hashes['0x75773E11BA459E90'] = function(p0, p1) {
    const $res = natives.overrideMicrophoneSettings(p0, p1);
    return $res;
}
hashes['0xD57AAAE0E2214D11'] = function() {
    const $res = natives.freezeMicrophone();
    return $res;
}
hashes['0x552369F549563AD5'] = function(p0) {
    const $res = natives.distantCopCarSirens(p0);
    return $res;
}
hashes['0x43FA0DFC5DF87815'] = function(p0, p1) {
    const $res = natives.setSirenCanBeControlledByAudio(p0, p1);
    return $res;
}
hashes['0xB81CF134AEB56FFB'] = function() {
    const $res = natives.enableStuntJumpAudio();
    return $res;
}
hashes['0xB9EFD5C25018725A'] = function(p0, p1) {
    const $res = natives.setAudioFlag(p0, p1);
    return $res;
}
hashes['0xC7ABCACA4985A766'] = function(p0, p1) {
    const $res = natives.prepareSynchronizedAudioEvent(p0, p1);
    return $res;
}
hashes['0x029FE7CD1B7E2E75'] = function(p0, p1) {
    const $res = natives.prepareSynchronizedAudioEventForScene(p0, p1);
    return $res;
}
hashes['0x8B2FD4560E55DD2D'] = function(p0) {
    const $res = natives.playSynchronizedAudioEvent(p0);
    return $res;
}
hashes['0x92D6A88E64A94430'] = function(p0) {
    const $res = natives.stopSynchronizedAudioEvent(p0);
    return $res;
}
hashes['0xC8EDE9BDBCCBA6D4'] = function(p0, p1, p2, p3) {
    const $res = natives.initSynchSceneAudioWithPosition(p0, p1, p2, p3);
    return $res;
}
hashes['0x950A154B8DAB6185'] = function(p0, p1) {
    const $res = natives.initSynchSceneAudioWithEntity(p0, p1);
    return $res;
}
hashes['0x12561FCBB62D5B9C'] = function(p0) {
    const $res = natives.setAudioSpecialEffectMode(p0);
    return $res;
}
hashes['0x044DBAD7A7FA2BE5'] = function(p0, p1) {
    const $res = natives.setPortalSettingsOverride(p0, p1);
    return $res;
}
hashes['0xB4BBFD9CD8B3922B'] = function(p0) {
    const $res = natives.removePortalSettingsOverride(p0);
    return $res;
}
hashes['0xE4E6DD5566D28C82'] = function() {
    const $res = natives.stopSmokeGrenadeExplosionSounds();
    return $res;
}
hashes['0x3A48AB4445D499BE'] = function() {
    const $res = natives.getMusicVolSlider();
    return $res;
}
hashes['0x4ADA3F19BE4A6047'] = function(p0) {
    const $res = natives.requestTennisBanks(p0);
    return $res;
}
hashes['0x0150B6FF25A9E2E5'] = function() {
    const $res = natives.unrequestTennisBanks();
    return $res;
}
hashes['0xBEF34B1D9624D5DD'] = function(p0) {
    const $res = natives.setSkipMinigunSpinUpAudio(p0);
    return $res;
}
hashes['0x806058BBDC136E06'] = function() {
    const $res = natives.stopCutsceneAudio();
    return $res;
}
hashes['0x544810ED9DB6BBE6'] = function() {
    const $res = natives.hasLoadedMpDataSet();
    return $res;
}
hashes['0x5B50ABB1FE3746F4'] = function() {
    const $res = natives.hasLoadedSpDataSet();
    return $res;
}
hashes['0xD53F3A29BCE2580E'] = function(p0) {
    const $res = natives.getVehicleHornSoundIndex(p0);
    return $res;
}
hashes['0x0350E7E17BA767D0'] = function(p0, p1) {
    const $res = natives.setVehicleHornSoundIndex(p0, p1);
    return $res;
}
hashes['0x4EE5367468A65CCC'] = function(p0, p1, p2, p3) {
    const $res = natives.addScriptToRandomPed(p0, p1, p2, p3);
    return $res;
}
hashes['0x0BE84C318BA6EC22'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.registerObjectScriptBrain(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xCCBA154209823057'] = function(p0) {
    const $res = natives.isObjectWithinBrainActivationRange(p0);
    return $res;
}
hashes['0x3CDC7136613284BD'] = function(p0, p1, p2) {
    const $res = natives.registerWorldPointScriptBrain(p0, p1, p2);
    return $res;
}
hashes['0xC5042CC6F5E3D450'] = function() {
    const $res = natives.isWorldPointWithinBrainActivationRange();
    return $res;
}
hashes['0x67AA4D73F0CFA86B'] = function(p0) {
    const $res = natives.enableScriptBrainSet(p0);
    return $res;
}
hashes['0x14D8518E9760F08F'] = function(p0) {
    const $res = natives.disableScriptBrainSet(p0);
    return $res;
}
hashes['0x0B40ED49D7D6FF84'] = function() {
    const $res = natives.reactivateAllWorldBrainsThatAreWaitingTillOutOfRange();
    return $res;
}
hashes['0x4D953DF78EBF8158'] = function() {
    const $res = natives.reactivateAllObjectBrainsThatAreWaitingTillOutOfRange();
    return $res;
}
hashes['0x6D6840CEE8845831'] = function(p0) {
    const $res = natives.reactivateNamedWorldBrainsWaitingTillOutOfRange(p0);
    return $res;
}
hashes['0x6E91B04E08773030'] = function(p0) {
    const $res = natives.reactivateNamedObjectBrainsWaitingTillOutOfRange(p0);
    return $res;
}
hashes['0x07E5B515DB0636FC'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.renderScriptCams(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xC819F3CBB62BF692'] = function(p0, p1, p2, p3) {
    const $res = natives.stopRenderingScriptCamsUsingCatchUp(p0, p1, p2, p3);
    return $res;
}
hashes['0xC3981DCE61D9E13F'] = function(p0, p1) {
    const $res = natives.createCam(p0, p1);
    return $res;
}
hashes['0xB51194800B257161'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.createCamWithParams(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x5E3CF89C6BCCA67D'] = function(p0, p1) {
    const $res = natives.createCamera(p0, p1);
    return $res;
}
hashes['0x6ABFA3E16460F22D'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.createCameraWithParams(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x865908C81A2C22E9'] = function(p0, p1) {
    const $res = natives.destroyCam(p0, p1);
    return $res;
}
hashes['0x8E5FB15663F79120'] = function(p0) {
    const $res = natives.destroyAllCams(p0);
    return $res;
}
hashes['0xA7A932170592B50E'] = function(p0) {
    const $res = natives.doesCamExist(p0);
    return $res;
}
hashes['0x026FB97D0A425F84'] = function(p0, p1) {
    const $res = natives.setCamActive(p0, p1);
    return $res;
}
hashes['0xDFB2B516207D3534'] = function(p0) {
    const $res = natives.isCamActive(p0);
    return $res;
}
hashes['0x02EC0AF5C5A49B7A'] = function(p0) {
    const $res = natives.isCamRendering(p0);
    return $res;
}
hashes['0x5234F9F10919EABA'] = function() {
    const $res = natives.getRenderingCam();
    return $res;
}
hashes['0xBAC038F7459AE5AE'] = function(p0) {
    const $res = natives.getCamCoord(p0);
    return new mp.Vector3($res);
}
hashes['0x7D304C1C955E3E12'] = function(p0, p1) {
    const $res = natives.getCamRot(p0, p1);
    return new mp.Vector3($res);
}
hashes['0xC3330A45CCCDB26A'] = function(p0) {
    const $res = natives.getCamFov(p0);
    return $res;
}
hashes['0xC520A34DAFBF24B1'] = function(p0) {
    const $res = natives.getCamNearClip(p0);
    return $res;
}
hashes['0xB60A9CFEB21CA6AA'] = function(p0) {
    const $res = natives.getCamFarClip(p0);
    return $res;
}
hashes['0xC2612D223D915A1C'] = function(p0) {
    const $res = natives.getCamNearDof(p0);
    return $res;
}
hashes['0x255F8DAFD540D397'] = function(p0) {
    const $res = natives.getCamFarDof(p0);
    return $res;
}
hashes['0x06D153C0B99B6128'] = function(p0) {
    const $res = natives.getCamDofStrength(p0);
    return $res;
}
hashes['0xBFD8727AEA3CCEBA'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.setCamParams(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x4D41783FB745E42E'] = function(p0, p1, p2, p3) {
    const $res = natives.setCamCoord(p0, p1, p2, p3);
    return $res;
}
hashes['0x85973643155D0B07'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setCamRot(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xB13C14F66A00D047'] = function(p0, p1) {
    const $res = natives.setCamFov(p0, p1);
    return $res;
}
hashes['0xC7848EFCCC545182'] = function(p0, p1) {
    const $res = natives.setCamNearClip(p0, p1);
    return $res;
}
hashes['0xAE306F2A904BF86E'] = function(p0, p1) {
    const $res = natives.setCamFarClip(p0, p1);
    return $res;
}
hashes['0xAABD62873FFB1A33'] = function(p0, p1) {
    const $res = natives.forceCamFarClip(p0, p1);
    return $res;
}
hashes['0x6F0F77FBA9A8F2E6'] = function(p0, p1) {
    const $res = natives.setCamMotionBlurStrength(p0, p1);
    return $res;
}
hashes['0x3FA4BF0A7AB7DE2C'] = function(p0, p1) {
    const $res = natives.setCamNearDof(p0, p1);
    return $res;
}
hashes['0xEDD91296CD01AEE0'] = function(p0, p1) {
    const $res = natives.setCamFarDof(p0, p1);
    return $res;
}
hashes['0x5EE29B4D7D5DF897'] = function(p0, p1) {
    const $res = natives.setCamDofStrength(p0, p1);
    return $res;
}
hashes['0x3CF48F6F96E749DC'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setCamDofPlanes(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x16A96863A17552BB'] = function(p0, p1) {
    const $res = natives.setCamUseShallowDofMode(p0, p1);
    return $res;
}
hashes['0xA13B0222F3D94A94'] = function() {
    const $res = natives.setUseHiDof();
    return $res;
}
hashes['0x731A880555DA3647'] = function() {
    const $res = natives.setUseHiDofOnSyncedSceneThisUpdate();
    return $res;
}
hashes['0xF55E4046F6F831DC'] = function(p0, p1) {
    const $res = natives.setCamDofOverriddenFocusDistance(p0, p1);
    return $res;
}
hashes['0xE111A7C0D200CBC5'] = function(p0, p1) {
    const $res = natives.setCamDofOverriddenFocusDistanceBlendLevel(p0, p1);
    return $res;
}
hashes['0x7DD234D6F3914C5B'] = function(p0, p1) {
    const $res = natives.setCamDofFnumberOfLens(p0, p1);
    return $res;
}
hashes['0x47B595D60664CFFA'] = function(p0, p1) {
    const $res = natives.setCamDofFocalLengthMultiplier(p0, p1);
    return $res;
}
hashes['0xC669EEA5D031B7DE'] = function(p0, p1) {
    const $res = natives.setCamDofFocusDistanceBias(p0, p1);
    return $res;
}
hashes['0xC3654A441402562D'] = function(p0, p1) {
    const $res = natives.setCamDofMaxNearInFocusDistance(p0, p1);
    return $res;
}
hashes['0x2C654B4943BDDF7C'] = function(p0, p1) {
    const $res = natives.setCamDofMaxNearInFocusDistanceBlendLevel(p0, p1);
    return $res;
}
hashes['0xFEDB7D269E8C60E3'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.attachCamToEntity(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x61A3DBA14AB7F411'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.attachCamToPedBone(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x149916F50C34A40D'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.hardAttachCamToPedBone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x202A5ED9CE01D6E7'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.hardAttachCamToEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x8DB3F12A02CAEF72'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.attachCamToVehicleBone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0xA2FABBE87F4BAD82'] = function(p0) {
    const $res = natives.detachCam(p0);
    return $res;
}
hashes['0x45F1DE9C34B93AE6'] = function(p0, p1) {
    const $res = natives.setCamInheritRollVehicle(p0, p1);
    return $res;
}
hashes['0xF75497BB865F0803'] = function(p0, p1, p2, p3) {
    const $res = natives.pointCamAtCoord(p0, p1, p2, p3);
    return $res;
}
hashes['0x5640BFF86B16E8DC'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.pointCamAtEntity(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x68B2B5F33BA63C41'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.pointCamAtPedBone(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xF33AB75780BA57DE'] = function(p0) {
    const $res = natives.stopCamPointing(p0);
    return $res;
}
hashes['0x8C1DC7770C51DC8D'] = function(p0, p1) {
    const $res = natives.setCamAffectsAiming(p0, p1);
    return $res;
}
hashes['0x661B5C8654ADD825'] = function(p0, p1) {
    const $res = natives.setCamControlsMiniMapHeading(p0, p1);
    return $res;
}
hashes['0xA2767257A320FC82'] = function(p0, p1) {
    const $res = natives.setCamIsInsideVehicle(p0, p1);
    return $res;
}
hashes['0x271017B9BA825366'] = function(p0, p1) {
    const $res = natives.allowMotionBlurDecay(p0, p1);
    return $res;
}
hashes['0x1B93E0107865DD40'] = function(p0, p1) {
    const $res = natives.setCamDebugName(p0, p1);
    return $res;
}
hashes['0x77C3CEC46BE286F6'] = function() {
    const $res = natives.getDebugCam();
    return $res;
}
hashes['0x8609C75EC438FB3B'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.addCamSplineNode(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x0A9F2A468B328E74'] = function(p0, p1, p2, p3) {
    const $res = natives.addCamSplineNodeUsingCameraFrame(p0, p1, p2, p3);
    return $res;
}
hashes['0x0FB82563989CF4FB'] = function(p0, p1, p2, p3) {
    const $res = natives.addCamSplineNodeUsingCamera(p0, p1, p2, p3);
    return $res;
}
hashes['0x609278246A29CA34'] = function(p0, p1, p2) {
    const $res = natives.addCamSplineNodeUsingGameplayFrame(p0, p1, p2);
    return $res;
}
hashes['0x242B5874F0A4E052'] = function(p0, p1) {
    const $res = natives.setCamSplinePhase(p0, p1);
    return $res;
}
hashes['0xB5349E36C546509A'] = function(p0) {
    const $res = natives.getCamSplinePhase(p0);
    return $res;
}
hashes['0xD9D0E694C8282C96'] = function(p0) {
    const $res = natives.getCamSplineNodePhase(p0);
    return $res;
}
hashes['0x1381539FEE034CDA'] = function(p0, p1) {
    const $res = natives.setCamSplineDuration(p0, p1);
    return $res;
}
hashes['0xD1B0F412F109EA5D'] = function(p0, p1) {
    const $res = natives.setCamSplineSmoothingStyle(p0, p1);
    return $res;
}
hashes['0xB22B17DF858716A6'] = function(p0) {
    const $res = natives.getCamSplineNodeIndex(p0);
    return $res;
}
hashes['0x83B8201ED82A9A2D'] = function(p0, p1, p2, p3) {
    const $res = natives.setCamSplineNodeEase(p0, p1, p2, p3);
    return $res;
}
hashes['0xA6385DEB180F319F'] = function(p0, p1, p2) {
    const $res = natives.setCamSplineNodeVelocityScale(p0, p1, p2);
    return $res;
}
hashes['0x40B62FA033EB0346'] = function(p0, p1, p2, p3) {
    const $res = natives.overrideCamSplineVelocity(p0, p1, p2, p3);
    return $res;
}
hashes['0x7DCF7C708D292D55'] = function(p0, p1, p2, p3) {
    const $res = natives.overrideCamSplineMotionBlur(p0, p1, p2, p3);
    return $res;
}
hashes['0x7BF1A54AE67AC070'] = function(p0, p1, p2) {
    const $res = natives.setCamSplineNodeExtraFlags(p0, p1, p2);
    return $res;
}
hashes['0x0290F35C0AD97864'] = function(p0) {
    const $res = natives.isCamSplinePaused(p0);
    return $res;
}
hashes['0x9FBDA379383A52A4'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setCamActiveWithInterp(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x036F97C908C2B52C'] = function(p0) {
    const $res = natives.isCamInterpolating(p0);
    return $res;
}
hashes['0x6A25241C340D3822'] = function(p0, p1, p2) {
    const $res = natives.shakeCam(p0, p1, p2);
    return $res;
}
hashes['0xA2746EEAE3E577CD'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.animatedShakeCam(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x6B24BFE83A2BE47B'] = function(p0) {
    const $res = natives.isCamShaking(p0);
    return $res;
}
hashes['0xD93DB43B82BC0D00'] = function(p0, p1) {
    const $res = natives.setCamShakeAmplitude(p0, p1);
    return $res;
}
hashes['0xBDECF64367884AC3'] = function(p0, p1) {
    const $res = natives.stopCamShaking(p0, p1);
    return $res;
}
hashes['0xF4C8CF9E353AFECA'] = function(p0, p1) {
    const $res = natives.shakeScriptGlobal(p0, p1);
    return $res;
}
hashes['0xC2EAE3FB8CDBED31'] = function(p0, p1, p2, p3) {
    const $res = natives.animatedShakeScriptGlobal(p0, p1, p2, p3);
    return $res;
}
hashes['0xC912AF078AF19212'] = function() {
    const $res = natives.isScriptGlobalShaking();
    return $res;
}
hashes['0x1C9D7949FA533490'] = function(p0) {
    const $res = natives.stopScriptGlobalShaking(p0);
    return $res;
}
hashes['0x5D96CFB59DA076A0'] = function(p0, p1, p2) {
    const $res = natives.triggerVehiclePartBrokenCameraShake(p0, p1, p2);
    return $res;
}
hashes['0x9A2D0FB2E7852392'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.playCamAnim(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0xC90621D8A0CEECF2'] = function(p0, p1, p2) {
    const $res = natives.isCamPlayingAnim(p0, p1, p2);
    return $res;
}
hashes['0x4145A4C44FF3B5A6'] = function(p0, p1) {
    const $res = natives.setCamAnimCurrentPhase(p0, p1);
    return $res;
}
hashes['0xA10B2DB49E92A6B0'] = function(p0) {
    const $res = natives.getCamAnimCurrentPhase(p0);
    return $res;
}
hashes['0xE32EFE9AB4A9AA0C'] = function(p0, p1, p2, p3) {
    const $res = natives.playSynchronizedCamAnim(p0, p1, p2, p3);
    return $res;
}
hashes['0x503F5920162365B2'] = function(p0, p1, p2, p3) {
    const $res = natives.setFlyCamHorizontalResponse(p0, p1, p2, p3);
    return $res;
}
hashes['0xE827B9382CFB41BA'] = function(p0, p1, p2, p3) {
    const $res = natives.setFlyCamVerticalResponse(p0, p1, p2, p3);
    return $res;
}
hashes['0xF9D02130ECDD1D77'] = function(p0, p1) {
    const $res = natives.setFlyCamMaxHeight(p0, p1);
    return $res;
}
hashes['0xC91C6C55199308CA'] = function(p0, p1, p2, p3) {
    const $res = natives.setFlyCamCoordAndConstrain(p0, p1, p2, p3);
    return $res;
}
hashes['0xC8B5C4A79CC18B94'] = function(p0) {
    const $res = natives.setFlyCamVerticalControlsThisUpdate(p0);
    return $res;
}
hashes['0x5C48A1D6E3B33179'] = function(p0) {
    const $res = natives.wasFlyCamConstrainedOnPreviousUdpate(p0);
    return $res;
}
hashes['0xB16FCE9DDC7BA182'] = function() {
    const $res = natives.isScreenFadedOut();
    return $res;
}
hashes['0x5A859503B0C08678'] = function() {
    const $res = natives.isScreenFadedIn();
    return $res;
}
hashes['0x797AC7CB535BA28F'] = function() {
    const $res = natives.isScreenFadingOut();
    return $res;
}
hashes['0x5C544BC6C57AC575'] = function() {
    const $res = natives.isScreenFadingIn();
    return $res;
}
hashes['0xD4E8E24955024033'] = function(p0) {
    const $res = natives.doScreenFadeIn(p0);
    return $res;
}
hashes['0x891B5B39AC6302AF'] = function(p0) {
    const $res = natives.doScreenFadeOut(p0);
    return $res;
}
hashes['0xDCD4EA924F42D01A'] = function(p0, p1) {
    const $res = natives.setWidescreenBorders(p0, p1);
    return $res;
}
hashes['0x4879E4FE39074CDF'] = function() {
    const $res = natives.areWidescreenBordersActive();
    return $res;
}
hashes['0x14D6F5678D8F1B37'] = function() {
    const $res = natives.getGameplayCamCoord();
    return new mp.Vector3($res);
}
hashes['0x837765A25378F0BB'] = function(p0) {
    const $res = natives.getGameplayCamRot(p0);
    return new mp.Vector3($res);
}
hashes['0x65019750A0324133'] = function() {
    const $res = natives.getGameplayCamFov();
    return $res;
}
hashes['0x487A82C650EB7799'] = function(p0) {
    const $res = natives.setGameplayCamMotionBlurScalingThisUpdate(p0);
    return $res;
}
hashes['0x0225778816FDC28C'] = function(p0) {
    const $res = natives.setGameplayCamMaxMotionBlurStrengthThisUpdate(p0);
    return $res;
}
hashes['0x743607648ADD4587'] = function() {
    const $res = natives.getGameplayCamRelativeHeading();
    return $res;
}
hashes['0xB4EC2312F4E5B1F1'] = function(p0) {
    const $res = natives.setGameplayCamRelativeHeading(p0);
    return $res;
}
hashes['0x3A6867B4845BEDA2'] = function() {
    const $res = natives.getGameplayCamRelativePitch();
    return $res;
}
hashes['0x6D0858B8EDFD2B7D'] = function(p0, p1) {
    const $res = natives.setGameplayCamRelativePitch(p0, p1);
    return $res;
}
hashes['0x7295C203DD659DFE'] = function() {
    const $res = natives.resetGameplayCamFullAttachParentTransformTimer();
    return $res;
}
hashes['0x48608C3464F58AB4'] = function(p0, p1, p2) {
    const $res = natives.forceCameraRelativeHeadingAndPitch(p0, p1, p2);
    return $res;
}
hashes['0x28B022A17B068A3A'] = function(p0, p1) {
    const $res = natives.forceBonnetCameraRelativeHeadingAndPitch(p0, p1);
    return $res;
}
hashes['0x103991D4A307D472'] = function(p0) {
    const $res = natives.setFirstPersonShooterCameraHeading(p0);
    return $res;
}
hashes['0x759E13EBC1C15C5A'] = function(p0) {
    const $res = natives.setFirstPersonShooterCameraPitch(p0);
    return $res;
}
hashes['0x469F2ECDEC046337'] = function(p0) {
    const $res = natives.setScriptedCameraIsFirstPersonThisFrame(p0);
    return $res;
}
hashes['0xFD55E49555E017CF'] = function(p0, p1) {
    const $res = natives.shakeGameplayCam(p0, p1);
    return $res;
}
hashes['0x016C090630DF1F89'] = function() {
    const $res = natives.isGameplayCamShaking();
    return $res;
}
hashes['0xA87E00932DB4D85D'] = function(p0) {
    const $res = natives.setGameplayCamShakeAmplitude(p0);
    return $res;
}
hashes['0x0EF93E9F3D08C178'] = function(p0) {
    const $res = natives.stopGameplayCamShaking(p0);
    return $res;
}
hashes['0x8BBACBF51DA047A8'] = function(p0) {
    const $res = natives.setGameplayCamFollowPedThisUpdate(p0);
    return $res;
}
hashes['0x39B5D1B10383F0C8'] = function() {
    const $res = natives.isGameplayCamRendering();
    return $res;
}
hashes['0x3044240D2E0FA842'] = function() {
    const $res = natives.isInterpolatingFromScriptCams();
    return $res;
}
hashes['0x705A276EBFF3133D'] = function() {
    const $res = natives.isInterpolatingToScriptCams();
    return $res;
}
hashes['0xDB90C6CCA48940F1'] = function(p0) {
    const $res = natives.setGameplayCamAltitudeFovScalingState(p0);
    return $res;
}
hashes['0xEA7F0AD7E9BA676F'] = function() {
    const $res = natives.disableGameplayCamAltitudeFovScalingThisUpdate();
    return $res;
}
hashes['0x70FDA869F3317EA9'] = function() {
    const $res = natives.isGameplayCamLookingBehind();
    return $res;
}
hashes['0x2AED6301F67007D5'] = function(p0) {
    const $res = natives.setGameplayCamIgnoreEntityCollisionThisUpdate(p0);
    return $res;
}
hashes['0x49482F9FCD825AAA'] = function(p0) {
    const $res = natives.disableCamCollisionForObject(p0);
    return $res;
}
hashes['0xA7092AFE81944852'] = function() {
    const $res = natives.bypassCameraCollisionBuoyancyTestThisUpdate();
    return $res;
}
hashes['0xFD3151CD37EA2245'] = function(p0) {
    const $res = natives.setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate(p0);
    return $res;
}
hashes['0xB1381B97F70C7B30'] = function() {
    const $res = natives.disableFirstPersonCameraWaterClippingTestThisUpdate();
    return $res;
}
hashes['0xDD79DF9F4D26E1C9'] = function() {
    const $res = natives.setFollowCamIgnoreAttachParentMovementThisUpdate();
    return $res;
}
hashes['0xE33D59DA70B58FDF'] = function(p0, p1, p2, p3) {
    const $res = natives.isSphereVisible(p0, p1, p2, p3);
    return $res;
}
hashes['0xC6D3D26810C8E0F9'] = function() {
    const $res = natives.isFollowPedCamActive();
    return $res;
}
hashes['0x44A113DD6FFC48D1'] = function(p0, p1) {
    const $res = natives.setFollowPedCamThisUpdate(p0, p1);
    return $res;
}
hashes['0x271401846BD26E92'] = function(p0, p1) {
    const $res = natives.useScriptCamForAmbientPopulationOriginThisFrame(p0, p1);
    return $res;
}
hashes['0xC8391C309684595A'] = function() {
    const $res = natives.setFollowPedCamLadderAlignThisUpdate();
    return $res;
}
hashes['0x8F993D26E0CA5E8E'] = function(p0, p1) {
    const $res = natives.setThirdPersonCamRelativeHeadingLimitsThisUpdate(p0, p1);
    return $res;
}
hashes['0xA516C198B7DCA1E1'] = function(p0, p1) {
    const $res = natives.setThirdPersonCamRelativePitchLimitsThisUpdate(p0, p1);
    return $res;
}
hashes['0xDF2E1F7742402E81'] = function(p0, p1) {
    const $res = natives.setThirdPersonCamOrbitDistanceLimitsThisUpdate(p0, p1);
    return $res;
}
hashes['0xE9EA16D6E54CDCA4'] = function(p0, p1) {
    const $res = natives.setInVehicleCamStateThisUpdate(p0, p1);
    return $res;
}
hashes['0xDE2EF5DA284CC8DF'] = function() {
    const $res = natives.disableOnFootFirstPersonViewThisUpdate();
    return $res;
}
hashes['0x59424BD75174C9B1'] = function() {
    const $res = natives.disableFirstPersonFlashEffectThisUpdate();
    return $res;
}
hashes['0x9F97DA93681F87EA'] = function() {
    const $res = natives.blockFirstPersonOrientationResetThisUpdate();
    return $res;
}
hashes['0x33E6C8EFD0CD93E9'] = function() {
    const $res = natives.getFollowPedCamZoomLevel();
    return $res;
}
hashes['0x8D4D46230B2C353A'] = function() {
    const $res = natives.getFollowPedCamViewMode();
    return $res;
}
hashes['0x5A4F9EDF1673F704'] = function(p0) {
    const $res = natives.setFollowPedCamViewMode(p0);
    return $res;
}
hashes['0xCBBDE6D335D6D496'] = function() {
    const $res = natives.isFollowVehicleCamActive();
    return $res;
}
hashes['0x91EF6EE6419E5B97'] = function(p0) {
    const $res = natives.setFollowVehicleCamHighAngleModeThisUpdate(p0);
    return $res;
}
hashes['0x9DFE13ECDC1EC196'] = function(p0, p1) {
    const $res = natives.setFollowVehicleCamHighAngleModeEveryUpdate(p0, p1);
    return $res;
}
hashes['0x79C0E43EB9B944E2'] = function(p0) {
    const $res = natives.setTableGamesCameraThisUpdate(p0);
    return $res;
}
hashes['0xEE82280AB767B690'] = function() {
    const $res = natives.getFollowVehicleCamZoomLevel();
    return $res;
}
hashes['0x19464CB6E4078C8A'] = function(p0) {
    const $res = natives.setFollowVehicleCamZoomLevel(p0);
    return $res;
}
hashes['0xA4FF579AC0E3AAAE'] = function() {
    const $res = natives.getFollowVehicleCamViewMode();
    return $res;
}
hashes['0xAC253D7842768F48'] = function(p0) {
    const $res = natives.setFollowVehicleCamViewMode(p0);
    return $res;
}
hashes['0xEE778F8C7E1142E2'] = function(p0) {
    const $res = natives.getCamViewModeForContext(p0);
    return $res;
}
hashes['0x2A2173E46DAECD12'] = function(p0, p1) {
    const $res = natives.setCamViewModeForContext(p0, p1);
    return $res;
}
hashes['0x19CAFA3C87F7C2FF'] = function() {
    const $res = natives.getCamActiveViewModeContext();
    return $res;
}
hashes['0x6493CF69859B116A'] = function() {
    const $res = natives.useVehicleCamStuntSettingsThisUpdate();
    return $res;
}
hashes['0x425A920FDB9A0DDA'] = function(p0) {
    const $res = natives.useDedicatedStuntCameraThisUpdate(p0);
    return $res;
}
hashes['0x0AA27680A0BD43FA'] = function() {
    const $res = natives.forceVehicleCamStuntSettingsThisUpdate();
    return $res;
}
hashes['0x5C90CAB09951A12F'] = function(p0) {
    const $res = natives.setFollowVehicleCamSeatThisUpdate(p0);
    return $res;
}
hashes['0x68EDDA28A5976D07'] = function() {
    const $res = natives.isAimCamActive();
    return $res;
}
hashes['0x74BD83EA840F6BC9'] = function() {
    const $res = natives.isAimCamActiveInAccurateMode();
    return $res;
}
hashes['0x5E346D934122613F'] = function() {
    const $res = natives.isFirstPersonAimCamActive();
    return $res;
}
hashes['0x1A31FE0049E542F6'] = function() {
    const $res = natives.disableAimCamThisUpdate();
    return $res;
}
hashes['0x7EC52CC40597D170'] = function() {
    const $res = natives.getFirstPersonAimCamZoomFactor();
    return $res;
}
hashes['0x70894BD0915C5BCA'] = function(p0) {
    const $res = natives.setFirstPersonAimCamZoomFactor(p0);
    return $res;
}
hashes['0xCED08CBE8EBB97C7'] = function(p0, p1) {
    const $res = natives.setFirstPersonAimCamZoomFactorLimitsThisUpdate(p0, p1);
    return $res;
}
hashes['0x2F7F2B26DD3F18EE'] = function(p0, p1) {
    const $res = natives.setFirstPersonAimCamRelativeHeadingLimitsThisUpdate(p0, p1);
    return $res;
}
hashes['0xBCFC632DB7673BF0'] = function(p0, p1) {
    const $res = natives.setFirstPersonAimCamRelativePitchLimitsThisUpdate(p0, p1);
    return $res;
}
hashes['0x0AF7B437918103B3'] = function(p0) {
    const $res = natives.setFirstPersonAimCamNearClipThisUpdate(p0);
    return $res;
}
hashes['0x42156508606DE65E'] = function(p0) {
    const $res = natives.setThirdPersonAimCamNearClipThisUpdate(p0);
    return $res;
}
hashes['0x4008EDF7D6E48175'] = function(p0) {
    const $res = natives.setAllowCustomVehicleDriveByCamThisUpdate(p0);
    return $res;
}
hashes['0x380B4968D1E09E55'] = function() {
    const $res = natives.forceTightspaceCustomFramingThisUpdate();
    return $res;
}
hashes['0xA200EB1EE790F448'] = function() {
    const $res = natives.getFinalRenderedCamCoord();
    return new mp.Vector3($res);
}
hashes['0x5B4E4C817FCC2DFB'] = function(p0) {
    const $res = natives.getFinalRenderedCamRot(p0);
    return new mp.Vector3($res);
}
hashes['0x26903D9CD1175F2C'] = function(p0, p1) {
    const $res = natives.getFinalRenderedRemotePlayerCamRot(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x80EC114669DAEFF4'] = function() {
    const $res = natives.getFinalRenderedCamFov();
    return $res;
}
hashes['0x5F35F6732C3FBBA0'] = function(p0) {
    const $res = natives.getFinalRenderedRemotePlayerCamFov(p0);
    return $res;
}
hashes['0xD0082607100D7193'] = function() {
    const $res = natives.getFinalRenderedCamNearClip();
    return $res;
}
hashes['0xDFC8CBC606FDB0FC'] = function() {
    const $res = natives.getFinalRenderedCamFarClip();
    return $res;
}
hashes['0xA03502FC581F7D9B'] = function() {
    const $res = natives.getFinalRenderedCamNearDof();
    return $res;
}
hashes['0x9780F32BCAF72431'] = function() {
    const $res = natives.getFinalRenderedCamFarDof();
    return $res;
}
hashes['0x162F9D995753DC19'] = function() {
    const $res = natives.getFinalRenderedCamMotionBlurStrength();
    return $res;
}
hashes['0xD51ADCD2D8BC0FB3'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setGameplayCoordHint(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x2B486269ACD548D3'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setGameplayPedHint(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xA2297E18F3E71C2E'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setGameplayVehicleHint(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x83E87508A2CA2AC6'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setGameplayObjectHint(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x189E955A8313E298'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.setGameplayEntityHint(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xE520FF1AD2785B40'] = function() {
    const $res = natives.isGameplayHintActive();
    return $res;
}
hashes['0xF46C581C61718916'] = function(p0) {
    const $res = natives.stopGameplayHint(p0);
    return $res;
}
hashes['0xCCD078C2665D2973'] = function(p0) {
    const $res = natives.stopGameplayHintBeingCancelledThisUpdate(p0);
    return $res;
}
hashes['0x247ACBC4ABBC9D1C'] = function(p0) {
    const $res = natives.stopCodeGameplayHint(p0);
    return $res;
}
hashes['0xBF72910D0F26F025'] = function() {
    const $res = natives.isCodeGameplayHintActive();
    return $res;
}
hashes['0x513403FB9C56211F'] = function(p0) {
    const $res = natives.setGameplayHintFov(p0);
    return $res;
}
hashes['0xF8BDBF3D573049A1'] = function(p0) {
    const $res = natives.setGameplayHintFollowDistanceScalar(p0);
    return $res;
}
hashes['0xD1F8363DFAD03848'] = function(p0) {
    const $res = natives.setGameplayHintBaseOrbitPitchOffset(p0);
    return $res;
}
hashes['0x5D7B620DAE436138'] = function(p0) {
    const $res = natives.setGameplayHintCameraRelativeSideOffset(p0);
    return $res;
}
hashes['0xC92717EF615B6704'] = function(p0) {
    const $res = natives.setGameplayHintCameraRelativeVerticalOffset(p0);
    return $res;
}
hashes['0xE3433EADAAF7EE40'] = function(p0) {
    const $res = natives.setGameplayHintCameraBlendToFollowPedMediumViewMode(p0);
    return $res;
}
hashes['0x51669F7D1FB53D9F'] = function(p0) {
    const $res = natives.setCinematicButtonActive(p0);
    return $res;
}
hashes['0xB15162CB5826E9E8'] = function() {
    const $res = natives.isCinematicCamRendering();
    return $res;
}
hashes['0xDCE214D9ED58F3CF'] = function(p0, p1) {
    const $res = natives.shakeCinematicCam(p0, p1);
    return $res;
}
hashes['0xBBC08F6B4CB8FF0A'] = function() {
    const $res = natives.isCinematicCamShaking();
    return $res;
}
hashes['0xC724C701C30B2FE7'] = function(p0) {
    const $res = natives.setCinematicCamShakeAmplitude(p0);
    return $res;
}
hashes['0x2238E588E588A6D7'] = function(p0) {
    const $res = natives.stopCinematicCamShaking(p0);
    return $res;
}
hashes['0xADFF1B2A555F5FBA'] = function() {
    const $res = natives.disableCinematicBonnetCameraThisUpdate();
    return $res;
}
hashes['0x62ECFCFDEE7885D6'] = function() {
    const $res = natives.disableCinematicVehicleIdleModeThisUpdate();
    return $res;
}
hashes['0x9E4CFFF989258472'] = function() {
    const $res = natives.invalidateCinematicVehicleIdleMode();
    return $res;
}
hashes['0xF4F2C0D4EE209E20'] = function() {
    const $res = natives.invalidateIdleCam();
    return $res;
}
hashes['0xCA9D2AA3E326D720'] = function() {
    const $res = natives.isCinematicIdleCamRendering();
    return $res;
}
hashes['0x4F32C0D5A90A9B40'] = function() {
    const $res = natives.isCinematicFirstPersonVehicleInteriorCamRendering();
    return $res;
}
hashes['0x741B0129D4560F31'] = function(p0, p1, p2, p3) {
    const $res = natives.createCinematicShot(p0, p1, p2, p3);
    return $res;
}
hashes['0xCC9F3371A7C28BC9'] = function(p0) {
    const $res = natives.isCinematicShotActive(p0);
    return $res;
}
hashes['0x7660C6E75D3A078E'] = function(p0) {
    const $res = natives.stopCinematicShot(p0);
    return $res;
}
hashes['0xA41BCD7213805AAC'] = function(p0) {
    const $res = natives.forceCinematicRenderingThisUpdate(p0);
    return $res;
}
hashes['0xDC9DA9E8789F5246'] = function() {
    const $res = natives.setCinematicNewsChannelActiveThisUpdate();
    return $res;
}
hashes['0xDCF0754AC3D6FD4E'] = function(p0) {
    const $res = natives.setCinematicModeActive(p0);
    return $res;
}
hashes['0x1F2300CB7FA7B7F6'] = function() {
    const $res = natives.isInVehicleMobilePhoneCameraRendering();
    return $res;
}
hashes['0x17FCA7199A530203'] = function() {
    const $res = natives.disableCinematicSlowMoThisUpdate();
    return $res;
}
hashes['0xD7360051C885628B'] = function() {
    const $res = natives.isBonnetCinematicCamRendering();
    return $res;
}
hashes['0xF5F1E89A970B7796'] = function() {
    const $res = natives.isCinematicCamInputActive();
    return $res;
}
hashes['0x7B8A361C1813FBEF'] = function() {
    const $res = natives.ignoreMenuPreferenceForBonnetCameraThisUpdate();
    return $res;
}
hashes['0xDB629FFD9285FA06'] = function() {
    const $res = natives.bypassCutsceneCamRenderingThisUpdate();
    return $res;
}
hashes['0x324C5AA411DA7737'] = function(p0) {
    const $res = natives.stopCutsceneCamShaking(p0);
    return $res;
}
hashes['0x12DED8CA53D47EA5'] = function(p0) {
    const $res = natives.setCutsceneCamFarClipThisUpdate(p0);
    return $res;
}
hashes['0x89215EC747DF244A'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.getFocusPedOnScreen(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x5A43C76F7FC7BA5F'] = function() {
    const $res = natives.disableNearClipScanThisUpdate();
    return $res;
}
hashes['0x80C8B1846639BB19'] = function(p0) {
    const $res = natives.setCamDeathFailEffectState(p0);
    return $res;
}
hashes['0x5C41E6BABC9E2112'] = function(p0) {
    const $res = natives.setFirstPersonFlashEffectType(p0);
    return $res;
}
hashes['0x21E253A7F8DA5DFB'] = function(p0) {
    const $res = natives.setFirstPersonFlashEffectVehicleModelName(p0);
    return $res;
}
hashes['0x11FA5D3479C7DD47'] = function(p0) {
    const $res = natives.setFirstPersonFlashEffectVehicleModelHash(p0);
    return $res;
}
hashes['0xEAF0FA793D05C592'] = function() {
    const $res = natives.isAllowedIndependentCameraModes();
    return $res;
}
hashes['0x62374889A4D59F72'] = function() {
    const $res = natives.cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate();
    return $res;
}
hashes['0x8BFCEB5EA1B161B6'] = function() {
    const $res = natives.replayGetMaxDistanceAllowedFromPlayer();
    return $res;
}
hashes['0x47C3B5848C3E45D8'] = function(p0, p1, p2) {
    const $res = natives.setClockTime(p0, p1, p2);
    return $res;
}
hashes['0x4055E40BD2DBEC1D'] = function(p0) {
    const $res = natives.pauseClock(p0);
    return $res;
}
hashes['0xC8CA9670B9D83B3B'] = function(p0, p1, p2) {
    const $res = natives.advanceClockTimeTo(p0, p1, p2);
    return $res;
}
hashes['0xD716F30D8C8980E2'] = function(p0, p1, p2) {
    const $res = natives.addToClockTime(p0, p1, p2);
    return $res;
}
hashes['0x25223CA6B4D20B7F'] = function() {
    const $res = natives.getClockHours();
    return $res;
}
hashes['0x13D2B8ADD79640F2'] = function() {
    const $res = natives.getClockMinutes();
    return $res;
}
hashes['0x494E97C2EF27C470'] = function() {
    const $res = natives.getClockSeconds();
    return $res;
}
hashes['0xB096419DF0D06CE7'] = function(p0, p1, p2) {
    const $res = natives.setClockDate(p0, p1, p2);
    return $res;
}
hashes['0xD972E4BD7AEB235F'] = function() {
    const $res = natives.getClockDayOfWeek();
    return $res;
}
hashes['0x3D10BC92A4DB1D35'] = function() {
    const $res = natives.getClockDayOfMonth();
    return $res;
}
hashes['0xBBC72712E80257A1'] = function() {
    const $res = natives.getClockMonth();
    return $res;
}
hashes['0x961777E64BDAF717'] = function() {
    const $res = natives.getClockYear();
    return $res;
}
hashes['0x2F8B4D1C595B11DB'] = function() {
    const $res = natives.getMillisecondsPerGameMinute();
    return $res;
}
hashes['0xDA488F299A5B164E'] = function(p0, p1, p2, p3, p4, p5) {
    if (!Array.isArray(p0)) throw new Error('Argument year should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument month should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument day should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument hour should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument minute should be an array');
    if (!Array.isArray(p5)) throw new Error('Argument second should be an array');
    const $res = natives.getPosixTime();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    p2[0] = $res[3];
    p3[0] = $res[4];
    p4[0] = $res[5];
    p5[0] = $res[6];
    return $res[0];
}
hashes['0x8117E09A19EEF4D3'] = function(p0, p1, p2, p3, p4, p5) {
    if (!Array.isArray(p0)) throw new Error('Argument year should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument month should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument day should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument hour should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument minute should be an array');
    if (!Array.isArray(p5)) throw new Error('Argument second should be an array');
    const $res = natives.getUtcTime();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    p2[0] = $res[3];
    p3[0] = $res[4];
    p4[0] = $res[5];
    p5[0] = $res[6];
    return $res[0];
}
hashes['0x50C7A99057A69748'] = function(p0, p1, p2, p3, p4, p5) {
    if (!Array.isArray(p0)) throw new Error('Argument year should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument month should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument day should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument hour should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument minute should be an array');
    if (!Array.isArray(p5)) throw new Error('Argument second should be an array');
    const $res = natives.getLocalTime();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    p2[0] = $res[3];
    p3[0] = $res[4];
    p4[0] = $res[5];
    p5[0] = $res[6];
    return $res[0];
}
hashes['0x7A86743F475D9E09'] = function(p0, p1) {
    const $res = natives.requestCutscene(p0, p1);
    return $res;
}
hashes['0xC23DE0E91C30B58C'] = function(p0, p1, p2) {
    const $res = natives.requestCutsceneWithPlaybackList(p0, p1, p2);
    return $res;
}
hashes['0x440AF51A3462B86F'] = function() {
    const $res = natives.removeCutscene();
    return $res;
}
hashes['0xC59F528E9AB9F339'] = function() {
    const $res = natives.hasCutsceneLoaded();
    return $res;
}
hashes['0x228D3D94F8A11C3C'] = function(p0) {
    const $res = natives.hasThisCutsceneLoaded(p0);
    return $res;
}
hashes['0x8D9DF6ECA8768583'] = function(p0) {
    const $res = natives.setScriptCanStartCutscene(p0);
    return $res;
}
hashes['0xB56BBBCC2955D9CB'] = function() {
    const $res = natives.canRequestAssetsForCutsceneEntity();
    return $res;
}
hashes['0x71B74D2AE19338D0'] = function(p0) {
    const $res = natives.isCutscenePlaybackFlagSet(p0);
    return $res;
}
hashes['0x4C61C75BEE8184C2'] = function(p0, p1, p2) {
    const $res = natives.setCutsceneEntityStreamingFlags(p0, p1, p2);
    return $res;
}
hashes['0x06A3524161C502BA'] = function(p0) {
    const $res = natives.requestCutFile(p0);
    return $res;
}
hashes['0xA1C996C2A744262E'] = function(p0) {
    const $res = natives.hasCutFileLoaded(p0);
    return $res;
}
hashes['0xD00D76A7DFC9D852'] = function(p0) {
    const $res = natives.removeCutFile(p0);
    return $res;
}
hashes['0x0ABC54DE641DC0FC'] = function(p0) {
    const $res = natives.getCutFileConcatCount(p0);
    return $res;
}
hashes['0x186D5CB5E7B0FF7B'] = function(p0) {
    const $res = natives.startCutscene(p0);
    return $res;
}
hashes['0x1C9ADDA3244A1FBF'] = function(p0, p1, p2, p3) {
    const $res = natives.startCutsceneAtCoords(p0, p1, p2, p3);
    return $res;
}
hashes['0xC7272775B4DC786E'] = function(p0) {
    const $res = natives.stopCutscene(p0);
    return $res;
}
hashes['0xD220BDD222AC4A1E'] = function() {
    const $res = natives.stopCutsceneImmediately();
    return $res;
}
hashes['0xB812B3FD1C01CF27'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setCutsceneOrigin(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x011883F41211432A'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setCutsceneOriginAndOrientation(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xE625BEABBAFFDAB9'] = function() {
    const $res = natives.getCutsceneTime();
    return $res;
}
hashes['0xEE53B14A19E480D4'] = function() {
    const $res = natives.getCutsceneTotalDuration();
    return $res;
}
hashes['0x971D7B15BCDBEF99'] = function() {
    const $res = natives.getCutsceneEndTime();
    return $res;
}
hashes['0x5D583F71C901F2A3'] = function() {
    const $res = natives.getCutscenePlayDuration();
    return $res;
}
hashes['0x40C8656EDAEDD569'] = function() {
    const $res = natives.wasCutsceneSkipped();
    return $res;
}
hashes['0x7C0A893088881D57'] = function() {
    const $res = natives.hasCutsceneFinished();
    return $res;
}
hashes['0x991251AFC3981F84'] = function() {
    const $res = natives.isCutsceneActive();
    return $res;
}
hashes['0xD3C2E180A40F031E'] = function() {
    const $res = natives.isCutscenePlaying();
    return $res;
}
hashes['0x49010A6A396553D8'] = function() {
    const $res = natives.getCutsceneSectionPlaying();
    return $res;
}
hashes['0x0A2E9FDB9A8C62F6'] = function(p0, p1) {
    const $res = natives.getEntityIndexOfCutsceneEntity(p0, p1);
    return $res;
}
hashes['0x583DF8E3D4AFBD98'] = function() {
    const $res = natives.getCutsceneConcatSectionPlaying();
    return $res;
}
hashes['0x4CEBC1ED31E8925E'] = function(p0) {
    const $res = natives.isCutsceneAuthorized(p0);
    return $res;
}
hashes['0x4FCD976DA686580C'] = function(p0) {
    const $res = natives.doesCutsceneHandleExist(p0);
    return $res;
}
hashes['0xE40C1C56DF95C2E8'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.registerEntityForCutscene(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC0741A26499654CD'] = function(p0, p1) {
    const $res = natives.getEntityIndexOfRegisteredEntity(p0, p1);
    return $res;
}
hashes['0x7F96F23FA9B73327'] = function(p0) {
    const $res = natives.setVehicleModelPlayerWillExitScene(p0);
    return $res;
}
hashes['0x9896CE4721BE84BA'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setCutsceneTriggerArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x645D0B458D8E17B5'] = function(p0, p1) {
    const $res = natives.canSetEnterStateForRegisteredEntity(p0, p1);
    return $res;
}
hashes['0x4C6A6451C79E4662'] = function(p0, p1) {
    const $res = natives.canSetExitStateForRegisteredEntity(p0, p1);
    return $res;
}
hashes['0xB2CBCD0930DFB420'] = function(p0) {
    const $res = natives.canSetExitStateForCamera(p0);
    return $res;
}
hashes['0xC61B86C9F61EB404'] = function(p0) {
    const $res = natives.setPadCanShakeDuringCutscene(p0);
    return $res;
}
hashes['0x8093F23ABACCC7D4'] = function(p0, p1, p2, p3) {
    const $res = natives.setCutsceneFadeValues(p0, p1, p2, p3);
    return $res;
}
hashes['0x20746F7B1032A3C7'] = function(p0, p1, p2, p3) {
    const $res = natives.setCutsceneMultiheadFade(p0, p1, p2, p3);
    return $res;
}
hashes['0x06EE9048FD080382'] = function(p0) {
    const $res = natives.setCutsceneMultiheadFadeManual(p0);
    return $res;
}
hashes['0xA0FE76168A189DDB'] = function() {
    const $res = natives.isMultiheadFadeUp();
    return $res;
}
hashes['0x2F137B508DE238F2'] = function(p0) {
    const $res = natives.networkSetMocapCutsceneCanBeSkipped(p0);
    return $res;
}
hashes['0xE36A98D8AB3D3C66'] = function(p0) {
    const $res = natives.setCarGeneratorsCanUpdateDuringCutscene(p0);
    return $res;
}
hashes['0x5EDEF0CF8C1DAB3C'] = function() {
    const $res = natives.canUseMobilePhoneDuringCutscene();
    return $res;
}
hashes['0x41FAA8FB2ECE8720'] = function(p0) {
    const $res = natives.setCutsceneCanBeSkipped(p0);
    return $res;
}
hashes['0x2131046957F31B04'] = function() {
    const $res = natives.setCanDisplayMinimapDuringCutsceneThisUpdate();
    return $res;
}
hashes['0xBA01E7B6DEEFBBC9'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setCutscenePedComponentVariation(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x2A56C06EBEF2B0D9'] = function(p0, p1, p2) {
    const $res = natives.setCutscenePedComponentVariationFromPed(p0, p1, p2);
    return $res;
}
hashes['0x499EF20C5DB25C59'] = function(p0, p1) {
    const $res = natives.doesCutsceneEntityExist(p0, p1);
    return $res;
}
hashes['0x0546524ADE2E9723'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setCutscenePedPropVariation(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x708BDD8CD795B043'] = function() {
    const $res = natives.hasCutsceneCutThisFrame();
    return $res;
}
hashes['0xAD6875BBC0FC899C'] = function(p0) {
    const $res = natives.datafileWatchRequestId(p0);
    return $res;
}
hashes['0x6CC86E78358D5119'] = function() {
    const $res = natives.datafileClearWatchList();
    return $res;
}
hashes['0xFCCAE5B92A830878'] = function(p0) {
    const $res = natives.datafileIsValidRequestId(p0);
    return $res;
}
hashes['0x15FF52B809DB2353'] = function(p0) {
    const $res = natives.datafileHasLoadedFileData(p0);
    return $res;
}
hashes['0xF8CC1EBE0B62E29F'] = function(p0) {
    const $res = natives.datafileHasValidFileData(p0);
    return $res;
}
hashes['0x22DA66936E0FFF37'] = function(p0, p1) {
    const $res = natives.datafileSelectActiveFile(p0, p1);
    return $res;
}
hashes['0x8F5EA1C01D65A100'] = function(p0) {
    const $res = natives.datafileDeleteRequestedFile(p0);
    return $res;
}
hashes['0xC84527E235FCA219'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.ugcCreateContent(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xA5EFC3E847D60507'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.ugcCreateMission(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x648E7A5434AF7969'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.ugcUpdateContent(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x4645DE9980999E93'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.ugcUpdateMission(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x692D808C34A82143'] = function(p0, p1, p2, p3) {
    const $res = natives.ugcSetPlayerData(p0, p1, p2, p3);
    return $res;
}
hashes['0xA69AC4ADE82B57A4'] = function(p0, p1) {
    const $res = natives.datafileSelectUgcData(p0, p1);
    return $res;
}
hashes['0x9CB0BFA7A9342C3D'] = function(p0, p1, p2) {
    const $res = natives.datafileSelectUgcStats(p0, p1, p2);
    return $res;
}
hashes['0x52818819057F2B40'] = function(p0, p1) {
    const $res = natives.datafileSelectUgcPlayerData(p0, p1);
    return $res;
}
hashes['0x01095C95CD46B624'] = function(p0, p1) {
    const $res = natives.datafileSelectCreatorStats(p0, p1);
    return $res;
}
hashes['0xC5238C011AF405E4'] = function(p0, p1) {
    const $res = natives.datafileLoadOfflineUgc(p0, p1);
    return $res;
}
hashes['0xD27058A1CA2B13EE'] = function(p0) {
    const $res = natives.datafileCreate(p0);
    return $res;
}
hashes['0x9AB9C1CFC8862DFB'] = function(p0) {
    const $res = natives.datafileDelete(p0);
    return $res;
}
hashes['0x2ED61456317B8178'] = function(p0) {
    const $res = natives.datafileStoreMissionHeader(p0);
    return $res;
}
hashes['0xC55854C7D7274882'] = function() {
    const $res = natives.datafileFlushMissionHeader();
    return $res;
}
hashes['0x906B778CA1DC72B6'] = function(p0) {
    const $res = natives.datafileGetFileDict(p0);
    return $res;
}
hashes['0x83BCCE3224735F05'] = function(p0, p1) {
    const $res = natives.datafileStartSaveToCloud(p0, p1);
    return $res;
}
hashes['0x4DFDD9EB705F8140'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.datafileUpdateSaveToCloud();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xBEDB96A7584AA8CF'] = function() {
    const $res = natives.datafileIsSavePending();
    return $res;
}
hashes['0xA6EEF01087181EDD'] = function(p0, p1) {
    const $res = natives.datafileLoadOfflineUgcForAdditionalDataFile(p0, p1);
    return $res;
}
hashes['0x6AD0BD5E087866CB'] = function(p0) {
    const $res = natives.datafileDeleteForAdditionalDataFile(p0);
    return $res;
}
hashes['0xDBF860CF1DB8E599'] = function(p0) {
    const $res = natives.datafileGetFileDictForAdditionalDataFile(p0);
    return $res;
}
hashes['0x35124302A556A325'] = function(p0, p1, p2) {
    const $res = natives.datadictSetBool(p0, p1, p2);
    return $res;
}
hashes['0xE7E035450A7948D5'] = function(p0, p1, p2) {
    const $res = natives.datadictSetInt(p0, p1, p2);
    return $res;
}
hashes['0xC27E1CC2D795105E'] = function(p0, p1, p2) {
    const $res = natives.datadictSetFloat(p0, p1, p2);
    return $res;
}
hashes['0x8FF3847DADD8E30C'] = function(p0, p1, p2) {
    const $res = natives.datadictSetString(p0, p1, p2);
    return $res;
}
hashes['0x4CD49B76338C7DEE'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.datadictSetVector(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xA358F56F10732EE1'] = function(p0, p1) {
    const $res = natives.datadictCreateDict(p0, p1);
    return $res;
}
hashes['0x5B11728527CA6E5F'] = function(p0, p1) {
    const $res = natives.datadictCreateArray(p0, p1);
    return $res;
}
hashes['0x1186940ED72FFEEC'] = function(p0, p1) {
    const $res = natives.datadictGetBool(p0, p1);
    return $res;
}
hashes['0x78F06F6B1FB5A80C'] = function(p0, p1) {
    const $res = natives.datadictGetInt(p0, p1);
    return $res;
}
hashes['0x06610343E73B9727'] = function(p0, p1) {
    const $res = natives.datadictGetFloat(p0, p1);
    return $res;
}
hashes['0x3D2FD9E763B24472'] = function(p0, p1) {
    const $res = natives.datadictGetString(p0, p1);
    return $res;
}
hashes['0x46CD3CB66E0825CC'] = function(p0, p1) {
    const $res = natives.datadictGetVector(p0, p1);
    return new mp.Vector3($res);
}
hashes['0xB6B9DDC412FCEEE2'] = function(p0, p1) {
    const $res = natives.datadictGetDict(p0, p1);
    return $res;
}
hashes['0x7A983AA9DA2659ED'] = function(p0, p1) {
    const $res = natives.datadictGetArray(p0, p1);
    return $res;
}
hashes['0x031C55ED33227371'] = function(p0, p1) {
    const $res = natives.datadictGetType(p0, p1);
    return $res;
}
hashes['0xF8B0F5A43E928C76'] = function(p0, p1) {
    const $res = natives.dataarrayAddBool(p0, p1);
    return $res;
}
hashes['0xCABDB751D86FE93B'] = function(p0, p1) {
    const $res = natives.dataarrayAddInt(p0, p1);
    return $res;
}
hashes['0x57A995FD75D37F56'] = function(p0, p1) {
    const $res = natives.dataarrayAddFloat(p0, p1);
    return $res;
}
hashes['0x2F0661C155AEEEAA'] = function(p0, p1) {
    const $res = natives.dataarrayAddString(p0, p1);
    return $res;
}
hashes['0x407F8D034F70F0C2'] = function(p0, p1, p2, p3) {
    const $res = natives.dataarrayAddVector(p0, p1, p2, p3);
    return $res;
}
hashes['0x6889498B3E19C797'] = function(p0) {
    const $res = natives.dataarrayAddDict(p0);
    return $res;
}
hashes['0x50C1B2874E50C114'] = function(p0, p1) {
    const $res = natives.dataarrayGetBool(p0, p1);
    return $res;
}
hashes['0x3E5AE19425CD74BE'] = function(p0, p1) {
    const $res = natives.dataarrayGetInt(p0, p1);
    return $res;
}
hashes['0xC0C527B525D7CFB5'] = function(p0, p1) {
    const $res = natives.dataarrayGetFloat(p0, p1);
    return $res;
}
hashes['0xD3F2FFEB8D836F52'] = function(p0, p1) {
    const $res = natives.dataarrayGetString(p0, p1);
    return $res;
}
hashes['0x8D2064E5B64A628A'] = function(p0, p1) {
    const $res = natives.dataarrayGetVector(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x8B5FADCC4E3A145F'] = function(p0, p1) {
    const $res = natives.dataarrayGetDict(p0, p1);
    return $res;
}
hashes['0x065DB281590CEA2D'] = function(p0) {
    const $res = natives.dataarrayGetCount(p0);
    return $res;
}
hashes['0x3A0014ADB172A3C5'] = function(p0, p1) {
    const $res = natives.dataarrayGetType(p0, p1);
    return $res;
}
hashes['0x95AED7B8E39ECAA4'] = function(p0, p1, p2) {
    const $res = natives.decorSetTime(p0, p1, p2);
    return $res;
}
hashes['0x6B1E8E2ED1335B71'] = function(p0, p1, p2) {
    const $res = natives.decorSetBool(p0, p1, p2);
    return $res;
}
hashes['0x211AB1DD8D0F363A'] = function(p0, p1, p2) {
    const $res = natives.decorSetFloat(p0, p1, p2);
    return $res;
}
hashes['0x0CE3AA5E1CA19E10'] = function(p0, p1, p2) {
    const $res = natives.decorSetInt(p0, p1, p2);
    return $res;
}
hashes['0xDACE671663F2F5DB'] = function(p0, p1) {
    const $res = natives.decorGetBool(p0, p1);
    return $res;
}
hashes['0x6524A2F114706F43'] = function(p0, p1) {
    const $res = natives.decorGetFloat(p0, p1);
    return $res;
}
hashes['0xA06C969B02A97298'] = function(p0, p1) {
    const $res = natives.decorGetInt(p0, p1);
    return $res;
}
hashes['0x05661B80A8C9165F'] = function(p0, p1) {
    const $res = natives.decorExistOn(p0, p1);
    return $res;
}
hashes['0x00EE9F297C738720'] = function(p0, p1) {
    const $res = natives.decorRemove(p0, p1);
    return $res;
}
hashes['0x9FD90732F56403CE'] = function(p0, p1) {
    const $res = natives.decorRegister(p0, p1);
    return $res;
}
hashes['0x4F14F9F870D6FBC8'] = function(p0, p1) {
    const $res = natives.decorIsRegisteredAsType(p0, p1);
    return $res;
}
hashes['0xA9D14EEA259F9248'] = function() {
    const $res = natives.decorRegisterLock();
    return $res;
}
hashes['0x241FCA5B1AA14F75'] = function() {
    const $res = natives.areAnyCcsPending();
    return $res;
}
hashes['0x812595A0644CE1DE'] = function(p0) {
    const $res = natives.isDlcPresent(p0);
    return $res;
}
hashes['0xF2E07819EF1A5289'] = function() {
    const $res = natives.dlcCheckCloudDataCorrect();
    return $res;
}
hashes['0x9489659372A81585'] = function() {
    const $res = natives.getExtracontentCloudResult();
    return $res;
}
hashes['0xA213B11DFF526300'] = function() {
    const $res = natives.dlcCheckCompatPackConfiguration();
    return $res;
}
hashes['0x8D30F648014A92B5'] = function() {
    const $res = natives.getEverHadBadPackOrder();
    return $res;
}
hashes['0x10D0A8F259E93EC9'] = function() {
    const $res = natives.getIsLoadingScreenActive();
    return $res;
}
hashes['0xC4637A6D03C24CC3'] = function() {
    const $res = natives.getIsInitialLoadingScreenActive();
    return $res;
}
hashes['0x46E2B844905BC5F0'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.hasCloudRequestsFinished(p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xD7C10C4A637992C9'] = function() {
    const $res = natives.onEnterSp();
    return $res;
}
hashes['0x0888C3502DBBEEF5'] = function() {
    const $res = natives.onEnterMp();
    return $res;
}
hashes['0x7239B21A38F536BA'] = function(p0) {
    const $res = natives.doesEntityExist(p0);
    return $res;
}
hashes['0xDDE6DF5AE89981D2'] = function(p0, p1) {
    const $res = natives.doesEntityBelongToThisScript(p0, p1);
    return $res;
}
hashes['0x060D6E96F8B8E48D'] = function(p0) {
    const $res = natives.doesEntityHaveDrawable(p0);
    return $res;
}
hashes['0xDA95EA3317CC5064'] = function(p0) {
    const $res = natives.doesEntityHavePhysics(p0);
    return $res;
}
hashes['0x764EB96874EFFDC1'] = function(p0) {
    const $res = natives.doesEntityHaveSkeleton(p0);
    return $res;
}
hashes['0x2158E81A6AF65EA9'] = function(p0) {
    const $res = natives.doesEntityHaveAnimDirector(p0);
    return $res;
}
hashes['0x20B711662962B472'] = function(p0, p1, p2, p3) {
    const $res = natives.hasEntityAnimFinished(p0, p1, p2, p3);
    return $res;
}
hashes['0x95EB9964FF5C5C65'] = function(p0) {
    const $res = natives.hasEntityBeenDamagedByAnyObject(p0);
    return $res;
}
hashes['0x605F5A140F202491'] = function(p0) {
    const $res = natives.hasEntityBeenDamagedByAnyPed(p0);
    return $res;
}
hashes['0xDFD5033FDBA0A9C8'] = function(p0) {
    const $res = natives.hasEntityBeenDamagedByAnyVehicle(p0);
    return $res;
}
hashes['0xC86D67D52A707CF8'] = function(p0, p1, p2) {
    const $res = natives.hasEntityBeenDamagedByEntity(p0, p1, p2);
    return $res;
}
hashes['0xFCDFF7B72D23A1AC'] = function(p0, p1, p2) {
    const $res = natives.hasEntityClearLosToEntity(p0, p1, p2);
    return $res;
}
hashes['0x394BDE2A7BBA031E'] = function(p0, p1, p2) {
    const $res = natives.hasEntityClearLosToEntityAdjustForCover(p0, p1, p2);
    return $res;
}
hashes['0x0267D00AF114F17A'] = function(p0, p1) {
    const $res = natives.hasEntityClearLosToEntityInFront(p0, p1);
    return $res;
}
hashes['0x8BAD02F0368D9E14'] = function(p0) {
    const $res = natives.hasEntityCollidedWithAnything(p0);
    return $res;
}
hashes['0xA75EE4F689B85391'] = function(p0) {
    const $res = natives.getLastEntityHitByEntity(p0);
    return $res;
}
hashes['0x5C3D0A935F535C4C'] = function(p0) {
    const $res = natives.getLastMaterialHitByEntity(p0);
    return $res;
}
hashes['0xE465D4AB7CA6AE72'] = function(p0) {
    const $res = natives.getCollisionNormalOfLastHitForEntity(p0);
    return new mp.Vector3($res);
}
hashes['0x40FDEDB72F8293B2'] = function(p0) {
    const $res = natives.forceEntityAiAndAnimationUpdate(p0);
    return $res;
}
hashes['0x346D81500D088F42'] = function(p0, p1, p2) {
    const $res = natives.getEntityAnimCurrentTime(p0, p1, p2);
    return $res;
}
hashes['0x50BD2730B191E360'] = function(p0, p1, p2) {
    const $res = natives.getEntityAnimTotalTime(p0, p1, p2);
    return $res;
}
hashes['0xFEDDF04D62B8D790'] = function(p0, p1) {
    const $res = natives.getAnimDuration(p0, p1);
    return $res;
}
hashes['0x48C2BED9180FE123'] = function(p0) {
    const $res = natives.getEntityAttachedTo(p0);
    return $res;
}
hashes['0x3FEF770D40960D5A'] = function(p0, p1) {
    const $res = natives.getEntityCoords(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x0A794A5A57F8DF91'] = function(p0) {
    const $res = natives.getEntityForwardVector(p0);
    return new mp.Vector3($res);
}
hashes['0x8BB4EF4214E0E6D5'] = function(p0) {
    const $res = natives.getEntityForwardX(p0);
    return $res;
}
hashes['0x866A4A5FAE349510'] = function(p0) {
    const $res = natives.getEntityForwardY(p0);
    return $res;
}
hashes['0xE83D4F9BA2A38914'] = function(p0) {
    const $res = natives.getEntityHeading(p0);
    return $res;
}
hashes['0x846BF6291198A71E'] = function(p0) {
    const $res = natives.getEntityHeadingFromEulers(p0);
    return $res;
}
hashes['0xEEF059FAD016D209'] = function(p0) {
    const $res = natives.getEntityHealth(p0);
    return $res;
}
hashes['0x15D757606D170C3C'] = function(p0) {
    const $res = natives.getEntityMaxHealth(p0);
    return $res;
}
hashes['0x166E7CF68597D8B5'] = function(p0, p1) {
    const $res = natives.setEntityMaxHealth(p0, p1);
    return $res;
}
hashes['0x5A504562485944DD'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.getEntityHeight(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x1DD55701034110E5'] = function(p0) {
    const $res = natives.getEntityHeightAboveGround(p0);
    return $res;
}
hashes['0xECB2FC7235A7D137'] = function(p0, p1, p2, p3, p4) {
    if (typeof p1 != 'object') throw new Error('Argument forwardVector should be a Vector3 or an array');
    if (typeof p2 != 'object') throw new Error('Argument rightVector should be a Vector3 or an array');
    if (typeof p3 != 'object') throw new Error('Argument upVector should be a Vector3 or an array');
    if (typeof p4 != 'object') throw new Error('Argument position should be a Vector3 or an array');
    const $res = natives.getEntityMatrix(p0, Array.isArray(p1[0]) ? new alt.Vector3(p1[0][0], p1[0][1], p1[0][2]) : new alt.Vector3(p1[0].x, p1[0].y, p1[0].z), Array.isArray(p2[0]) ? new alt.Vector3(p2[0][0], p2[0][1], p2[0][2]) : new alt.Vector3(p2[0].x, p2[0].y, p2[0].z), Array.isArray(p3[0]) ? new alt.Vector3(p3[0][0], p3[0][1], p3[0][2]) : new alt.Vector3(p3[0].x, p3[0].y, p3[0].z), Array.isArray(p4[0]) ? new alt.Vector3(p4[0][0], p4[0][1], p4[0][2]) : new alt.Vector3(p4[0].x, p4[0].y, p4[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p1[0])) { p1[0][0] = $res[1].x; p1[0][1] = $res[1].y; p1[0][2] = $res[1].z }
    else { p1[0].x = $res[1].x; p1[0].y = $res[1].y; p1[0].z = $res[1].z; }
    if (Array.isArray(p2[0])) { p2[0][0] = $res[2].x; p2[0][1] = $res[2].y; p2[0][2] = $res[2].z }
    else { p2[0].x = $res[2].x; p2[0].y = $res[2].y; p2[0].z = $res[2].z; }
    if (Array.isArray(p3[0])) { p3[0][0] = $res[3].x; p3[0][1] = $res[3].y; p3[0][2] = $res[3].z }
    else { p3[0].x = $res[3].x; p3[0].y = $res[3].y; p3[0].z = $res[3].z; }
    if (Array.isArray(p4[0])) { p4[0][0] = $res[4].x; p4[0][1] = $res[4].y; p4[0][2] = $res[4].z }
    else { p4[0].x = $res[4].x; p4[0].y = $res[4].y; p4[0].z = $res[4].z; }
    return $res[0];
}
hashes['0x9F47B058362C84B5'] = function(p0) {
    const $res = natives.getEntityModel(p0);
    return $res;
}
hashes['0x2274BC1C4885E333'] = function(p0, p1, p2, p3) {
    const $res = natives.getOffsetFromEntityGivenWorldCoords(p0, p1, p2, p3);
    return new mp.Vector3($res);
}
hashes['0x1899F328B0E12848'] = function(p0, p1, p2, p3) {
    const $res = natives.getOffsetFromEntityInWorldCoords(p0, p1, p2, p3);
    return new mp.Vector3($res);
}
hashes['0xD45DC2893621E1FE'] = function(p0) {
    const $res = natives.getEntityPitch(p0);
    return $res;
}
hashes['0x7B3703D2D32DFA18'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p1)) throw new Error('Argument x should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument y should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument z should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument w should be an array');
    const $res = natives.getEntityQuaternion(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    p4[0] = $res[4];
    return $res[0];
}
hashes['0x831E0242595560DF'] = function(p0) {
    const $res = natives.getEntityRoll(p0);
    return $res;
}
hashes['0xAFBD61CC738D9EB9'] = function(p0, p1) {
    const $res = natives.getEntityRotation(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x213B91045D09B983'] = function(p0) {
    const $res = natives.getEntityRotationVelocity(p0);
    return new mp.Vector3($res);
}
hashes['0xA6E9C38DB51D7748'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument script should be an array');
    const $res = natives.getEntityScript(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xD5037BA82E12416F'] = function(p0) {
    const $res = natives.getEntitySpeed(p0);
    return $res;
}
hashes['0x9A8D700A51CB7B0D'] = function(p0, p1) {
    const $res = natives.getEntitySpeedVector(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x95EED5A694951F9F'] = function(p0) {
    const $res = natives.getEntityUprightValue(p0);
    return $res;
}
hashes['0x4805D2B1D8CF94A9'] = function(p0) {
    const $res = natives.getEntityVelocity(p0);
    return new mp.Vector3($res);
}
hashes['0xD7E3B9735C0F89D6'] = function(p0) {
    const $res = natives.getObjectIndexFromEntityIndex(p0);
    return $res;
}
hashes['0x04A2A40C73395041'] = function(p0) {
    const $res = natives.getPedIndexFromEntityIndex(p0);
    return $res;
}
hashes['0x4B53F92932ADFAC0'] = function(p0) {
    const $res = natives.getVehicleIndexFromEntityIndex(p0);
    return $res;
}
hashes['0x44A8FCB8ED227738'] = function(p0, p1) {
    const $res = natives.getWorldPositionOfEntityBone(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x7196842CB375CDB3'] = function(p0) {
    const $res = natives.getNearestPlayerToEntity(p0);
    return $res;
}
hashes['0x4DC9A62F844D9337'] = function(p0, p1) {
    const $res = natives.getNearestPlayerToEntityOnTeam(p0, p1);
    return $res;
}
hashes['0x8ACD366038D14505'] = function(p0) {
    const $res = natives.getEntityType(p0);
    return $res;
}
hashes['0xF6F5161F4534EDFF'] = function(p0) {
    const $res = natives.getEntityPopulationType(p0);
    return $res;
}
hashes['0x731EC8A916BD11A1'] = function(p0) {
    const $res = natives.isAnEntity(p0);
    return $res;
}
hashes['0x524AC5ECEA15343E'] = function(p0) {
    const $res = natives.isEntityAPed(p0);
    return $res;
}
hashes['0x0A7B270912999B3C'] = function(p0) {
    const $res = natives.isEntityAMissionEntity(p0);
    return $res;
}
hashes['0x6AC7003FA6E5575E'] = function(p0) {
    const $res = natives.isEntityAVehicle(p0);
    return $res;
}
hashes['0x8D68C8FD0FACA94E'] = function(p0) {
    const $res = natives.isEntityAnObject(p0);
    return $res;
}
hashes['0x20B60995556D004F'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.isEntityAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x751B70C3D034E187'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.isEntityAtEntity(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xB346476EF1A64897'] = function(p0) {
    const $res = natives.isEntityAttached(p0);
    return $res;
}
hashes['0xCF511840CEEDE0CC'] = function(p0) {
    const $res = natives.isEntityAttachedToAnyObject(p0);
    return $res;
}
hashes['0xB1632E9A5F988D11'] = function(p0) {
    const $res = natives.isEntityAttachedToAnyPed(p0);
    return $res;
}
hashes['0x26AA915AD89BFB4B'] = function(p0) {
    const $res = natives.isEntityAttachedToAnyVehicle(p0);
    return $res;
}
hashes['0xEFBE71898A993728'] = function(p0, p1) {
    const $res = natives.isEntityAttachedToEntity(p0, p1);
    return $res;
}
hashes['0x5F9532F3B5CC2551'] = function(p0, p1) {
    const $res = natives.isEntityDead(p0, p1);
    return $res;
}
hashes['0x886E37EC497200B6'] = function(p0) {
    const $res = natives.isEntityInAir(p0);
    return $res;
}
hashes['0x51210CED3DA1C78A'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.isEntityInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x54736AA40E271165'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.isEntityInArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xB6463CF6AF527071'] = function(p0, p1) {
    const $res = natives.isEntityInZone(p0, p1);
    return $res;
}
hashes['0xCFB0A0D8EDD145A3'] = function(p0) {
    const $res = natives.isEntityInWater(p0);
    return $res;
}
hashes['0xE81AFC1BC4CC41CE'] = function(p0) {
    const $res = natives.getEntitySubmergedLevel(p0);
    return $res;
}
hashes['0x694E00132F2823ED'] = function(p0, p1) {
    const $res = natives.setEntityRequiresMoreExpensiveRiverCheck(p0, p1);
    return $res;
}
hashes['0xE659E47AF827484B'] = function(p0) {
    const $res = natives.isEntityOnScreen(p0);
    return $res;
}
hashes['0x1F0B79228E461EC9'] = function(p0, p1, p2, p3) {
    const $res = natives.isEntityPlayingAnim(p0, p1, p2, p3);
    return $res;
}
hashes['0x1218E6886D3D8327'] = function(p0) {
    const $res = natives.isEntityStatic(p0);
    return $res;
}
hashes['0x17FFC1B2BA35A494'] = function(p0, p1) {
    const $res = natives.isEntityTouchingEntity(p0, p1);
    return $res;
}
hashes['0x0F42323798A58C8C'] = function(p0, p1) {
    const $res = natives.isEntityTouchingModel(p0, p1);
    return $res;
}
hashes['0x5333F526F6AB19AA'] = function(p0, p1) {
    const $res = natives.isEntityUpright(p0, p1);
    return $res;
}
hashes['0x1DBD58820FA61D71'] = function(p0) {
    const $res = natives.isEntityUpsidedown(p0);
    return $res;
}
hashes['0x47D6F43D77935C75'] = function(p0) {
    const $res = natives.isEntityVisible(p0);
    return $res;
}
hashes['0xD796CB5BA8F20E32'] = function(p0) {
    const $res = natives.isEntityVisibleToScript(p0);
    return $res;
}
hashes['0xE31C2C72B8692B64'] = function(p0) {
    const $res = natives.isEntityOccluded(p0);
    return $res;
}
hashes['0xEE5D2A122E09EC42'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.wouldEntityBeOccluded(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xD05BFF0C0A12C68F'] = function(p0) {
    const $res = natives.isEntityWaitingForWorldCollision(p0);
    return $res;
}
hashes['0x18FF00FC7EFF559E'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.applyForceToEntityCenterOfMass(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xC5F68BE9613E2D18'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.applyForceToEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0x6B9BBD38AB0796DF'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
    const $res = natives.attachEntityToEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
    return $res;
}
hashes['0x5C48B75732C8456C'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.attachEntityBoneToEntityBone(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xFD1695C5D3B05439'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.attachEntityBoneToEntityBoneYForward(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xC3675780C92F90F9'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18) {
    const $res = natives.attachEntityToEntityPhysically(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18);
    return $res;
}
hashes['0xF4080490ADC51C6F'] = function(p0) {
    const $res = natives.processEntityAttachments(p0);
    return $res;
}
hashes['0xFB71170B7E76ACBA'] = function(p0, p1) {
    const $res = natives.getEntityBoneIndexByName(p0, p1);
    return $res;
}
hashes['0xA72CD9CA74A5ECBA'] = function(p0) {
    const $res = natives.clearEntityLastDamageEntity(p0);
    return $res;
}
hashes['0xAE3CBE5BF394C9C9'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument entity should be an array');
    const $res = natives.deleteEntity();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x961AC54BF0613F5D'] = function(p0, p1, p2) {
    const $res = natives.detachEntity(p0, p1, p2);
    return $res;
}
hashes['0x428CA6DBD1094446'] = function(p0, p1) {
    const $res = natives.freezeEntityPosition(p0, p1);
    return $res;
}
hashes['0x3910051CCECDB00C'] = function(p0, p1) {
    const $res = natives.setEntityShouldFreezeWaitingOnCollision(p0, p1);
    return $res;
}
hashes['0x7FB218262B810701'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.playEntityAnim(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xC77720A12FE14A86'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.playSynchronizedEntityAnim(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xB9C54555ED30FBC4'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.playSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x11E79CAB7183B6F5'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.stopSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x28004F88151E03E0'] = function(p0, p1, p2, p3) {
    const $res = natives.stopEntityAnim(p0, p1, p2, p3);
    return $res;
}
hashes['0x43D3807C077261E3'] = function(p0, p1, p2) {
    const $res = natives.stopSynchronizedEntityAnim(p0, p1, p2);
    return $res;
}
hashes['0xEAF4CD9EA3E7E922'] = function(p0, p1) {
    const $res = natives.hasAnimEventFired(p0, p1);
    return $res;
}
hashes['0x07F1BE2BCCAA27A7'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.findAnimEventPhase(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x4487C259F0F70977'] = function(p0, p1, p2, p3) {
    const $res = natives.setEntityAnimCurrentTime(p0, p1, p2, p3);
    return $res;
}
hashes['0x28D1A16553C51776'] = function(p0, p1, p2, p3) {
    const $res = natives.setEntityAnimSpeed(p0, p1, p2, p3);
    return $res;
}
hashes['0xAD738C3085FE7E11'] = function(p0, p1, p2) {
    const $res = natives.setEntityAsMissionEntity(p0, p1, p2);
    return $res;
}
hashes['0xB736A491E64A32CF'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument entity should be an array');
    const $res = natives.setEntityAsNoLongerNeeded();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x2595DD4236549CE3'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument ped should be an array');
    const $res = natives.setPedAsNoLongerNeeded();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x629BFA74418D6239'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument vehicle should be an array');
    const $res = natives.setVehicleAsNoLongerNeeded();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x3AE22DEB5BA5A3E6'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument object should be an array');
    const $res = natives.setObjectAsNoLongerNeeded();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x1760FFA8AB074D66'] = function(p0, p1) {
    const $res = natives.setEntityCanBeDamaged(p0, p1);
    return $res;
}
hashes['0xD95CC5D2AB15A09F'] = function(p0) {
    const $res = natives.getEntityCanBeDamaged(p0);
    return $res;
}
hashes['0xE22D8FDE858B8119'] = function(p0, p1, p2) {
    const $res = natives.setEntityCanBeDamagedByRelationshipGroup(p0, p1, p2);
    return $res;
}
hashes['0x352E2B5CF420BF3B'] = function(p0, p1) {
    const $res = natives.setEntityCanOnlyBeDamagedByScriptParticipants(p0, p1);
    return $res;
}
hashes['0xD3997889736FD899'] = function(p0, p1) {
    const $res = natives.setEntityCanBeTargetedWithoutLos(p0, p1);
    return $res;
}
hashes['0x1A9205C1B9EE827F'] = function(p0, p1, p2) {
    const $res = natives.setEntityCollision(p0, p1, p2);
    return $res;
}
hashes['0xCCF1E97BEFDAE480'] = function(p0) {
    const $res = natives.getEntityCollisionDisabled(p0);
    return $res;
}
hashes['0x9EBC85ED0FFFE51C'] = function(p0, p1, p2) {
    const $res = natives.setEntityCompletelyDisableCollision(p0, p1, p2);
    return $res;
}
hashes['0x06843DA7060A026B'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setEntityCoords(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x621873ECE1178967'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setEntityCoordsWithoutPlantsReset(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x239A3351AC1DA385'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setEntityCoordsNoOffset(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x1718DE8E3F2823CA'] = function(p0, p1) {
    const $res = natives.setEntityDynamic(p0, p1);
    return $res;
}
hashes['0x8E2530AA8ADA980E'] = function(p0, p1) {
    const $res = natives.setEntityHeading(p0, p1);
    return $res;
}
hashes['0x6B76DC1F3AE6E6A3'] = function(p0, p1, p2) {
    const $res = natives.setEntityHealth(p0, p1, p2);
    return $res;
}
hashes['0x3882114BDE571AD4'] = function(p0, p1) {
    const $res = natives.setEntityInvincible(p0, p1);
    return $res;
}
hashes['0xEA02E132F5C68722'] = function(p0, p1, p2) {
    const $res = natives.setEntityIsTargetPriority(p0, p1, p2);
    return $res;
}
hashes['0x7CFBA6A80BDF3874'] = function(p0, p1) {
    const $res = natives.setEntityLights(p0, p1);
    return $res;
}
hashes['0x0DC7CABAB1E9B67E'] = function(p0, p1, p2) {
    const $res = natives.setEntityLoadCollisionFlag(p0, p1, p2);
    return $res;
}
hashes['0xE9676F61BC0B3321'] = function(p0) {
    const $res = natives.hasCollisionLoadedAroundEntity(p0);
    return $res;
}
hashes['0x0E46A3FCBDE2A1B1'] = function(p0, p1) {
    const $res = natives.setEntityMaxSpeed(p0, p1);
    return $res;
}
hashes['0x79F020FF9EDC0748'] = function(p0, p1) {
    const $res = natives.setEntityOnlyDamagedByPlayer(p0, p1);
    return $res;
}
hashes['0x7022BD828FA0B082'] = function(p0, p1, p2) {
    const $res = natives.setEntityOnlyDamagedByRelationshipGroup(p0, p1, p2);
    return $res;
}
hashes['0xFAEE099C6F890BB8'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.setEntityProofs(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xBE8CD9BE829BBEBF'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    if (!Array.isArray(p1)) throw new Error('Argument bulletProof should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument fireProof should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument explosionProof should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument collisionProof should be an array');
    if (!Array.isArray(p5)) throw new Error('Argument meleeProof should be an array');
    if (!Array.isArray(p6)) throw new Error('Argument steamProof should be an array');
    if (!Array.isArray(p7)) throw new Error('Argument p7 should be an array');
    if (!Array.isArray(p8)) throw new Error('Argument drownProof should be an array');
    const $res = natives.getEntityProofs(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    p4[0] = $res[4];
    p5[0] = $res[5];
    p6[0] = $res[6];
    p7[0] = $res[7];
    p8[0] = $res[8];
    return $res[0];
}
hashes['0x77B21BE7AC540F07'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setEntityQuaternion(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x0A50A1EEDAD01E65'] = function(p0, p1) {
    const $res = natives.setEntityRecordsCollisions(p0, p1);
    return $res;
}
hashes['0x8524A8B0171D5E07'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setEntityRotation(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xEA1C610A04DB6BBB'] = function(p0, p1, p2) {
    const $res = natives.setEntityVisible(p0, p1, p2);
    return $res;
}
hashes['0xC34BC448DA29F5E9'] = function(p0, p1) {
    const $res = natives.setEntityWaterReflectionFlag(p0, p1);
    return $res;
}
hashes['0xE66377CDDADA4810'] = function(p0, p1) {
    const $res = natives.setEntityMirrorReflectionFlag(p0, p1);
    return $res;
}
hashes['0x1C99BB7B6E96D16F'] = function(p0, p1, p2, p3) {
    const $res = natives.setEntityVelocity(p0, p1, p2, p3);
    return $res;
}
hashes['0x8339643499D1222E'] = function(p0, p1, p2, p3) {
    const $res = natives.setEntityAngularVelocity(p0, p1, p2, p3);
    return $res;
}
hashes['0x4A4722448F18EEF5'] = function(p0, p1) {
    const $res = natives.setEntityHasGravity(p0, p1);
    return $res;
}
hashes['0x5927F96A78577363'] = function(p0, p1) {
    const $res = natives.setEntityLodDist(p0, p1);
    return $res;
}
hashes['0x4159C2762B5791D6'] = function(p0) {
    const $res = natives.getEntityLodDist(p0);
    return $res;
}
hashes['0x44A0870B7E92D7C0'] = function(p0, p1, p2) {
    const $res = natives.setEntityAlpha(p0, p1, p2);
    return $res;
}
hashes['0x5A47B3B5E63E94C6'] = function(p0) {
    const $res = natives.getEntityAlpha(p0);
    return $res;
}
hashes['0x9B1E824FFBB7027A'] = function(p0) {
    const $res = natives.resetEntityAlpha(p0);
    return $res;
}
hashes['0x490861B88F4FD846'] = function(p0) {
    const $res = natives.resetPickupEntityGlow(p0);
    return $res;
}
hashes['0xCEA7C8E1B48FF68C'] = function(p0, p1) {
    const $res = natives.setPickupCollidesWithProjectiles(p0, p1);
    return $res;
}
hashes['0x5C3B791D580E0BC2'] = function(p0, p1) {
    const $res = natives.setEntitySortBias(p0, p1);
    return $res;
}
hashes['0xACAD101E1FB66689'] = function(p0, p1) {
    const $res = natives.setEntityAlwaysPrerender(p0, p1);
    return $res;
}
hashes['0x730F5F8D3F0F2050'] = function(p0, p1) {
    const $res = natives.setEntityRenderScorched(p0, p1);
    return $res;
}
hashes['0x57C5DB656185EAC4'] = function(p0, p1) {
    const $res = natives.setEntityTrafficlightOverride(p0, p1);
    return $res;
}
hashes['0x78E8E3A640178255'] = function(p0) {
    const $res = natives.setEntityIsInVehicle(p0);
    return $res;
}
hashes['0x92C47782FDA8B2A3'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.createModelSwap(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x033C0F9A64E229AE'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.removeModelSwap(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x8A97BCA30A0CE478'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.createModelHide(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x3A52AE588830BF7F'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.createModelHideExcludingScriptObjects(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xD9E3006FB3CBD765'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.removeModelHide(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x150E808B375A385A'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.createForcedObject(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x61B6775E83C0DB6F'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.removeForcedObject(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xA53ED5520C07654A'] = function(p0, p1, p2) {
    const $res = natives.setEntityNoCollisionEntity(p0, p1, p2);
    return $res;
}
hashes['0x295D82A8559F9150'] = function(p0, p1) {
    const $res = natives.setEntityMotionBlur(p0, p1);
    return $res;
}
hashes['0xE12ABE5E3A389A6C'] = function(p0, p1) {
    const $res = natives.setCanAutoVaultOnEntity(p0, p1);
    return $res;
}
hashes['0xA80AE305E0A3044F'] = function(p0, p1) {
    const $res = natives.setCanClimbOnEntity(p0, p1);
    return $res;
}
hashes['0xDC6F8601FAF2E893'] = function(p0, p1) {
    const $res = natives.setWaitForCollisionsBeforeProbe(p0, p1);
    return $res;
}
hashes['0x2C2E3DC128F44309'] = function(p0, p1) {
    const $res = natives.setEntityNoweapondecals(p0, p1);
    return $res;
}
hashes['0x1A092BB0C3808B96'] = function(p0, p1) {
    const $res = natives.setEntityUseMaxDistanceForWaterReflection(p0, p1);
    return $res;
}
hashes['0xCE6294A232D03786'] = function(p0, p1) {
    const $res = natives.getEntityBoneRotation(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x46F8696933A63C9B'] = function(p0, p1) {
    const $res = natives.getEntityBonePostion(p0, p1);
    return new mp.Vector3($res);
}
hashes['0xBD8D32550E5CEBFE'] = function(p0, p1) {
    const $res = natives.getEntityBoneObjectRotation(p0, p1);
    return new mp.Vector3($res);
}
hashes['0xCF1247CC86961FD6'] = function(p0, p1) {
    const $res = natives.getEntityBoneObjectPostion(p0, p1);
    return new mp.Vector3($res);
}
hashes['0xB328DCC3A3AA401B'] = function(p0) {
    const $res = natives.getEntityBoneCount(p0);
    return $res;
}
hashes['0x6CE177D014502E8A'] = function(p0) {
    const $res = natives.enableEntityBulletCollision(p0);
    return $res;
}
hashes['0xB17BC6453F6CF5AC'] = function(p0, p1) {
    const $res = natives.setEntityCanOnlyBeDamagedByEntity(p0, p1);
    return $res;
}
hashes['0x68B562E124CC0AEF'] = function(p0, p1) {
    const $res = natives.setEntityCantCauseCollisionDamagedEntity(p0, p1);
    return $res;
}
hashes['0x36F32DE87082343E'] = function(p0, p1) {
    const $res = natives.setAllowMigrateToSpectator(p0, p1);
    return $res;
}
hashes['0x1F922734E259BD26'] = function(p0, p1) {
    const $res = natives.getEntityOfTypeAttachedToEntity(p0, p1);
    return $res;
}
hashes['0xD7B80E7C3BEFC396'] = function(p0, p1) {
    const $res = natives.setPickUpByCargobobDisabled(p0, p1);
    return $res;
}
hashes['0xB604A2942ADED0EE'] = function(p0, p1) {
    const $res = natives.setDecisionMaker(p0, p1);
    return $res;
}
hashes['0x4FC9381A7AEE8968'] = function(p0, p1) {
    const $res = natives.clearDecisionMakerEventResponse(p0, p1);
    return $res;
}
hashes['0xE42FCDFD0E4196F7'] = function(p0, p1) {
    const $res = natives.blockDecisionMakerEvent(p0, p1);
    return $res;
}
hashes['0xD7CD9CF34F2C99E8'] = function(p0, p1) {
    const $res = natives.unblockDecisionMakerEvent(p0, p1);
    return $res;
}
hashes['0xD9F8455409B525E9'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.addShockingEventAtPosition(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x7FD8F3BE76F89422'] = function(p0, p1, p2) {
    const $res = natives.addShockingEventForEntity(p0, p1, p2);
    return $res;
}
hashes['0x1374ABB7C15BAB92'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isShockingEventInSphere(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x2CDA538C44C6CCE5'] = function(p0) {
    const $res = natives.removeShockingEvent(p0);
    return $res;
}
hashes['0xEAABE8FDFA21274C'] = function(p0) {
    const $res = natives.removeAllShockingEvents(p0);
    return $res;
}
hashes['0x340F1415B68AEADE'] = function() {
    const $res = natives.removeShockingEventSpawnBlockingAreas();
    return $res;
}
hashes['0x2F9A292AD0A3BD89'] = function() {
    const $res = natives.suppressShockingEventsNextFrame();
    return $res;
}
hashes['0x3FD2EC8BF1F1CF30'] = function(p0) {
    const $res = natives.suppressShockingEventTypeNextFrame(p0);
    return $res;
}
hashes['0x5F3B7749C112D552'] = function() {
    const $res = natives.suppressAgitationEventsNextFrame();
    return $res;
}
hashes['0x278F76C3B0A8F109'] = function(p0) {
    const $res = natives.getNumTattooShopDlcItems(p0);
    return $res;
}
hashes['0xFF56381874F82086'] = function(p0, p1, p2) {
    const $res = natives.getTattooShopDlcItemData(p0, p1, p2);
    return $res;
}
hashes['0x10144267DD22866C'] = function(p0, p1, p2) {
    const $res = natives.getTattooShopDlcItemIndex(p0, p1, p2);
    return $res;
}
hashes['0x1E8C308FD312C036'] = function(p0) {
    const $res = natives.initShopPedComponent(p0);
    return $res;
}
hashes['0xEB0A2B758F7B850F'] = function(p0) {
    const $res = natives.initShopPedProp(p0);
    return $res;
}
hashes['0x50F457823CE6EB5F'] = function(p0, p1, p2, p3) {
    const $res = natives.setupShopPedApparelQuery(p0, p1, p2, p3);
    return $res;
}
hashes['0x9BDF59818B1E38C1'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setupShopPedApparelQueryTu(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x249E310B2D920699'] = function(p0, p1) {
    const $res = natives.getShopPedQueryComponent(p0, p1);
    return $res;
}
hashes['0x96E2929292A4DB77'] = function(p0) {
    const $res = natives.getShopPedQueryComponentIndex(p0);
    return $res;
}
hashes['0x74C0E2A57EC66760'] = function(p0, p1) {
    const $res = natives.getShopPedComponent(p0, p1);
    return $res;
}
hashes['0xDE44A00999B2837D'] = function(p0, p1) {
    const $res = natives.getShopPedQueryProp(p0, p1);
    return $res;
}
hashes['0x6CEBE002E58DEE97'] = function(p0) {
    const $res = natives.getShopPedQueryPropIndex(p0);
    return $res;
}
hashes['0x5D5CAFF661DDF6FC'] = function(p0, p1) {
    const $res = natives.getShopPedProp(p0, p1);
    return $res;
}
hashes['0x0368B3A838070348'] = function(p0, p1, p2, p3) {
    const $res = natives.getHashNameForComponent(p0, p1, p2, p3);
    return $res;
}
hashes['0x5D6160275CAEC8DD'] = function(p0, p1, p2, p3) {
    const $res = natives.getHashNameForProp(p0, p1, p2, p3);
    return $res;
}
hashes['0xC17AD0E5752BECDA'] = function(p0) {
    const $res = natives.getItemVariantsCount(p0);
    return $res;
}
hashes['0xD40AAC51E8E4C663'] = function(p0) {
    const $res = natives.getShopPedApparelVariantPropCount(p0);
    return $res;
}
hashes['0x6E11F282F11863B6'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p2)) throw new Error('Argument nameHash should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument enumValue should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument componentType should be an array');
    const $res = natives.getVariantComponent(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    p3[0] = $res[2];
    p4[0] = $res[3];
    return $res[0];
}
hashes['0xD81B7F27BC773E66'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p2)) throw new Error('Argument nameHash should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument enumValue should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument anchorPoint should be an array');
    const $res = natives.getVariantProp(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    p3[0] = $res[2];
    p4[0] = $res[3];
    return $res[0];
}
hashes['0xC6B9DB42C04DD8C3'] = function(p0) {
    const $res = natives.getShopPedApparelForcedComponentCount(p0);
    return $res;
}
hashes['0x017568A8182D98A6'] = function(p0) {
    const $res = natives.getShopPedApparelForcedPropCount(p0);
    return $res;
}
hashes['0x6C93ED8C2F74859B'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p2)) throw new Error('Argument nameHash should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument enumValue should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument componentType should be an array');
    const $res = natives.getForcedComponent(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    p3[0] = $res[2];
    p4[0] = $res[3];
    return $res[0];
}
hashes['0xE1CA84EBF72E691D'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p2)) throw new Error('Argument nameHash should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument enumValue should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument anchorPoint should be an array');
    const $res = natives.getForcedProp(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    p3[0] = $res[2];
    p4[0] = $res[3];
    return $res[0];
}
hashes['0x341DE7ED1D2A1BFD'] = function(p0, p1, p2) {
    const $res = natives.isTagRestricted(p0, p1, p2);
    return $res;
}
hashes['0x7796B21B76221BC5'] = function(p0, p1, p2) {
    const $res = natives.doesCurrentPedComponentHaveRestrictionTag(p0, p1, p2);
    return $res;
}
hashes['0xD726BAB4554DA580'] = function(p0, p1, p2) {
    const $res = natives.doesCurrentPedPropHaveRestrictionTag(p0, p1, p2);
    return $res;
}
hashes['0xF3FBE2D50A6A8C28'] = function(p0, p1) {
    const $res = natives.setupShopPedOutfitQuery(p0, p1);
    return $res;
}
hashes['0x6D793F03A631FE56'] = function(p0, p1) {
    const $res = natives.getShopPedQueryOutfit(p0, p1);
    return $res;
}
hashes['0xB7952076E444979D'] = function(p0, p1) {
    const $res = natives.getShopPedOutfit(p0, p1);
    return $res;
}
hashes['0x073CA26B079F956E'] = function(p0) {
    const $res = natives.getShopPedOutfitLocate(p0);
    return $res;
}
hashes['0xA9F9C2E0FDE11CBB'] = function(p0, p1, p2) {
    const $res = natives.getShopPedOutfitPropVariant(p0, p1, p2);
    return $res;
}
hashes['0x19F2A026EDF0013F'] = function(p0, p1, p2) {
    const $res = natives.getShopPedOutfitComponentVariant(p0, p1, p2);
    return $res;
}
hashes['0xA7A866D21CD2329B'] = function() {
    const $res = natives.getNumDlcVehicles();
    return $res;
}
hashes['0xECC01B7C5763333C'] = function(p0) {
    const $res = natives.getDlcVehicleModel(p0);
    return $res;
}
hashes['0x33468EDC08E371F6'] = function(p0, p1) {
    const $res = natives.getDlcVehicleData(p0, p1);
    return $res;
}
hashes['0x5549EE11FA22FCF2'] = function(p0) {
    const $res = natives.getDlcVehicleFlags(p0);
    return $res;
}
hashes['0xEE47635F352DA367'] = function() {
    const $res = natives.getNumDlcWeapons();
    return $res;
}
hashes['0x4160B65AE085B5A9'] = function() {
    const $res = natives.getNumDlcWeaponsSp();
    return $res;
}
hashes['0x79923CD21BECE14E'] = function(p0, p1) {
    const $res = natives.getDlcWeaponData(p0, p1);
    return $res;
}
hashes['0x310836EE7129BA33'] = function(p0, p1) {
    const $res = natives.getDlcWeaponDataSp(p0, p1);
    return $res;
}
hashes['0x405425358A7D61FE'] = function(p0) {
    const $res = natives.getNumDlcWeaponComponents(p0);
    return $res;
}
hashes['0xAD2A7A6DFF55841B'] = function(p0) {
    const $res = natives.getNumDlcWeaponComponentsSp(p0);
    return $res;
}
hashes['0x6CF598A2957C2BF8'] = function(p0, p1, p2) {
    const $res = natives.getDlcWeaponComponentData(p0, p1, p2);
    return $res;
}
hashes['0x31D5E073B6F93CDC'] = function(p0, p1, p2) {
    const $res = natives.getDlcWeaponComponentDataSp(p0, p1, p2);
    return $res;
}
hashes['0xD4D7B033C3AA243C'] = function(p0) {
    const $res = natives.isContentItemLocked(p0);
    return $res;
}
hashes['0x0564B9FF9631B82C'] = function(p0) {
    const $res = natives.isDlcVehicleMod(p0);
    return $res;
}
hashes['0xC098810437312FFF'] = function(p0) {
    const $res = natives.getDlcVehicleModLockHash(p0);
    return $res;
}
hashes['0x6BEDF5769AC2DC07'] = function(p0) {
    const $res = natives.executeContentChangesetGroupForAll(p0);
    return $res;
}
hashes['0x3C1978285B036B25'] = function(p0) {
    const $res = natives.revertContentChangesetGroupForAll(p0);
    return $res;
}
hashes['0x6B83617E04503888'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.startScriptFire(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x7FF548385680673F'] = function(p0) {
    const $res = natives.removeScriptFire(p0);
    return $res;
}
hashes['0xF6A9D9708F6F23DF'] = function(p0) {
    const $res = natives.startEntityFire(p0);
    return $res;
}
hashes['0x7F0DD2EBBB651AFF'] = function(p0) {
    const $res = natives.stopEntityFire(p0);
    return $res;
}
hashes['0x28D3FED7190D3A0B'] = function(p0) {
    const $res = natives.isEntityOnFire(p0);
    return $res;
}
hashes['0x50CAD495A460B305'] = function(p0, p1, p2, p3) {
    const $res = natives.getNumberOfFiresInRange(p0, p1, p2, p3);
    return $res;
}
hashes['0x8F390AC4155099BA'] = function(p0) {
    const $res = natives.setFlammabilityMultiplier(p0);
    return $res;
}
hashes['0x056A8A219B8E829F'] = function(p0, p1, p2, p3) {
    const $res = natives.stopFireInRange(p0, p1, p2, p3);
    return $res;
}
hashes['0x352A9F6BCF90081F'] = function(p0, p1, p2, p3) {
    if (typeof p0 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    const $res = natives.getClosestFirePos(Array.isArray(p0[0]) ? new alt.Vector3(p0[0][0], p0[0][1], p0[0][2]) : new alt.Vector3(p0[0].x, p0[0].y, p0[0].z), p1, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p0[0])) { p0[0][0] = $res[1].x; p0[0][1] = $res[1].y; p0[0][2] = $res[1].z }
    else { p0[0].x = $res[1].x; p0[0].y = $res[1].y; p0[0].z = $res[1].z; }
    return $res[0];
}
hashes['0xE3AD2BDBAEE269AC'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.addExplosion(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x172AA1B624FA1013'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.addOwnedExplosion(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x36DD3FE58B5E5212'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.addExplosionWithUserVfx(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x2E2EBA0EE7CED0E0'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.isExplosionInArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x6070104B699B2EF4'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.isExplosionActiveInArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xAB0F816885B0E483'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isExplosionInSphere(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xB3CD51E3DB86F176'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.getOwnerOfExplosionInSphere(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xA079A6C51525DC4B'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.isExplosionInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x14BA4BA137AF6CEC'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.getOwnerOfExplosionInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x175B6BFC15CDD0C5'] = function(p0) {
    const $res = natives.setDebugLinesAndSpheresDrawingActive(p0);
    return $res;
}
hashes['0x7FDFADE676AA3CB0'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.drawDebugLine(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xD8B9A8AC5608FF94'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.drawDebugLineWithTwoColours(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0xAAD68E1AB39DA632'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.drawDebugSphere(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x083A2CA4F2E573BD'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.drawDebugBox(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x73B1189623049839'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.drawDebugCross(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x3903E216620488E8'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.drawDebugText(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xA3BB2E9555C05A8F'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.drawDebugText2d(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x6B7256074AE34680'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.drawLine(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xAC26716048436851'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.drawPoly(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x29280002282F1928'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23) {
    const $res = natives.drawTexturedPoly(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23);
    return $res;
}
hashes['0x736D7AA1B750856B'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31) {
    const $res = natives.drawTexturedPolyWithThreeColours(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31);
    return $res;
}
hashes['0xD3A9971CADAC7252'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.drawBox(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x23BA6B0C2AD7B0D3'] = function(p0) {
    const $res = natives.setBackfaceculling(p0);
    return $res;
}
hashes['0xC5C8F970D4EDFF71'] = function(p0) {
    const $res = natives.setDepthwriting(p0);
    return $res;
}
hashes['0x1DD2139A9A20DCE8'] = function() {
    const $res = natives.beginTakeMissionCreatorPhoto();
    return $res;
}
hashes['0x90A78ECAA4E78453'] = function() {
    const $res = natives.getStatusOfTakeMissionCreatorPhoto();
    return $res;
}
hashes['0x0A46AF8A78DC5E0A'] = function() {
    const $res = natives.freeMemoryForMissionCreatorPhoto();
    return $res;
}
hashes['0x4862437A486F91B0'] = function(p0, p1, p2, p3) {
    const $res = natives.loadMissionCreatorPhoto(p0, p1, p2, p3);
    return $res;
}
hashes['0x1670F8D05056F257'] = function(p0) {
    const $res = natives.getStatusOfLoadMissionCreatorPhoto(p0);
    return $res;
}
hashes['0x7FA5D82B8F58EC06'] = function() {
    const $res = natives.beginCreateMissionCreatorPhotoPreview();
    return $res;
}
hashes['0x5B0316762AFD4A64'] = function() {
    const $res = natives.getStatusOfCreateMissionCreatorPhotoPreview();
    return $res;
}
hashes['0x346EF3ECAAAB149E'] = function() {
    const $res = natives.freeMemoryForMissionCreatorPhotoPreview();
    return $res;
}
hashes['0xA67C35C56EB1BD9D'] = function() {
    const $res = natives.beginTakeHighQualityPhoto();
    return $res;
}
hashes['0x0D6CA79EEEBD8CA3'] = function() {
    const $res = natives.getStatusOfTakeHighQualityPhoto();
    return $res;
}
hashes['0xD801CC02177FA3F1'] = function() {
    const $res = natives.freeMemoryForHighQualityPhoto();
    return $res;
}
hashes['0x1BBC135A4D25EDDE'] = function(p0) {
    const $res = natives.setTakenPhotoIsMugshot(p0);
    return $res;
}
hashes['0xF3F776ADA161E47D'] = function(p0, p1) {
    const $res = natives.setArenaThemeAndVariationForTakenPhoto(p0, p1);
    return $res;
}
hashes['0xADD6627C4D325458'] = function(p0) {
    const $res = natives.setOnIslandXForTakenPhoto(p0);
    return $res;
}
hashes['0x3DEC726C25A11BAC'] = function(p0) {
    const $res = natives.saveHighQualityPhoto(p0);
    return $res;
}
hashes['0x0C0C4E81E1AC60A0'] = function() {
    const $res = natives.getStatusOfSaveHighQualityPhoto();
    return $res;
}
hashes['0x759650634F07B6B4'] = function(p0) {
    const $res = natives.beginCreateLowQualityCopyOfPhoto(p0);
    return $res;
}
hashes['0xCB82A0BF0E3E3265'] = function(p0) {
    const $res = natives.getStatusOfCreateLowQualityCopyOfPhoto(p0);
    return $res;
}
hashes['0x6A12D88881435DCA'] = function() {
    const $res = natives.freeMemoryForLowQualityPhoto();
    return $res;
}
hashes['0x1072F115DAB0717E'] = function(p0, p1) {
    const $res = natives.drawLowQualityPhotoToPhone(p0, p1);
    return $res;
}
hashes['0x34D23450F028B0BF'] = function() {
    const $res = natives.getMaximumNumberOfPhotos();
    return $res;
}
hashes['0xDC54A7AF8B3A14EF'] = function() {
    const $res = natives.getMaximumNumberOfCloudPhotos();
    return $res;
}
hashes['0x473151EBC762C6DA'] = function() {
    const $res = natives.getCurrentNumberOfCloudPhotos();
    return $res;
}
hashes['0x2A893980E96B659A'] = function(p0) {
    const $res = natives.queueOperationToCreateSortedListOfPhotos(p0);
    return $res;
}
hashes['0xF5BED327CEA362B1'] = function(p0) {
    const $res = natives.getStatusOfSortedListOperation(p0);
    return $res;
}
hashes['0x4AF92ACD3141D96C'] = function() {
    const $res = natives.clearStatusOfSortedListOperation();
    return $res;
}
hashes['0xE791DF1F73ED2C8B'] = function(p0) {
    const $res = natives.doesThisPhotoSlotContainAValidPhoto(p0);
    return $res;
}
hashes['0xEC72C258667BE5EA'] = function(p0) {
    const $res = natives.loadHighQualityPhoto(p0);
    return $res;
}
hashes['0x40AFB081F8ADD4EE'] = function(p0) {
    const $res = natives.getLoadHighQualityPhotoStatus(p0);
    return $res;
}
hashes['0xF49E9A9716A04595'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.drawLightWithRangeex(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xF2A1B2771A01DBD4'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.drawLightWithRange(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xD0F64B265C8C8B33'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.drawSpotLight(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0x5BCA583A583194DB'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
    const $res = natives.drawShadowedSpotLight(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
    return $res;
}
hashes['0xC9B18B4619F48F7B'] = function(p0) {
    const $res = natives.fadeUpPedLight(p0);
    return $res;
}
hashes['0xDEADC0DEDEADC0DE'] = function(p0) {
    const $res = natives.updateLightsOnEntity(p0);
    return $res;
}
hashes['0x9641588DAB93B4B5'] = function(p0) {
    const $res = natives.setLightOverrideMaxIntensityScale(p0);
    return $res;
}
hashes['0x393BD2275CEB7793'] = function() {
    const $res = natives.getLightOverrideMaxIntensityScale();
    return $res;
}
hashes['0x28477EC23D892089'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23) {
    const $res = natives.drawMarker(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23);
    return $res;
}
hashes['0xE82728F0DE75D13A'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25) {
    const $res = natives.drawMarkerEx(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25);
    return $res;
}
hashes['0x799017F9E3B10112'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.drawMarkerSphere(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x0134F0835AB6BFCB'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.createCheckpoint(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x4B5B4DA5D79F1943'] = function(p0, p1) {
    const $res = natives.setCheckpointInsideCylinderHeightScale(p0, p1);
    return $res;
}
hashes['0x44621483FF966526'] = function(p0, p1) {
    const $res = natives.setCheckpointInsideCylinderScale(p0, p1);
    return $res;
}
hashes['0x2707AAE9D9297D89'] = function(p0, p1, p2, p3) {
    const $res = natives.setCheckpointCylinderHeight(p0, p1, p2, p3);
    return $res;
}
hashes['0x7167371E8AD747F7'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setCheckpointRgba(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xB9EA40907C680580'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setCheckpointRgba2(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xF51D36185993515D'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setCheckpointClipplaneWithPosNorm(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xFCF6788FC4860CD4'] = function(p0) {
    const $res = natives.setCheckpointForceOldArrowPointing(p0);
    return $res;
}
hashes['0x615D3925E87A3B26'] = function(p0) {
    const $res = natives.setCheckpointDecalRotAlignedToCameraRot(p0);
    return $res;
}
hashes['0xDB1EA9411C8911EC'] = function(p0) {
    const $res = natives.setCheckpointForceDirection(p0);
    return $res;
}
hashes['0x3C788E7F6438754D'] = function(p0, p1, p2, p3) {
    const $res = natives.setCheckpointDirection(p0, p1, p2, p3);
    return $res;
}
hashes['0xF5ED37F54CD4D52E'] = function(p0) {
    const $res = natives.deleteCheckpoint(p0);
    return $res;
}
hashes['0x22A249A53034450A'] = function(p0) {
    const $res = natives.dontRenderInGameUi(p0);
    return $res;
}
hashes['0xDC459CFA0CCE245B'] = function(p0) {
    const $res = natives.forceRenderInGameUi(p0);
    return $res;
}
hashes['0xDFA2EF8E04127DD5'] = function(p0, p1) {
    const $res = natives.requestStreamedTextureDict(p0, p1);
    return $res;
}
hashes['0x0145F696AAAAD2E4'] = function(p0) {
    const $res = natives.hasStreamedTextureDictLoaded(p0);
    return $res;
}
hashes['0xBE2CACCF5A8AA805'] = function(p0) {
    const $res = natives.setStreamedTextureDictAsNoLongerNeeded(p0);
    return $res;
}
hashes['0x3A618A217E5154F0'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.drawRect(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xC6372ECD45D73BCD'] = function(p0) {
    const $res = natives.setScriptGfxDrawBehindPausemenu(p0);
    return $res;
}
hashes['0x61BB1D9B3A95D802'] = function(p0) {
    const $res = natives.setScriptGfxDrawOrder(p0);
    return $res;
}
hashes['0xB8A850F20A067EB6'] = function(p0, p1) {
    const $res = natives.setScriptGfxAlign(p0, p1);
    return $res;
}
hashes['0xE3A3DB414A373DAB'] = function() {
    const $res = natives.resetScriptGfxAlign();
    return $res;
}
hashes['0xF5A2C681787E579D'] = function(p0, p1, p2, p3) {
    const $res = natives.setScriptGfxAlignParams(p0, p1, p2, p3);
    return $res;
}
hashes['0x6DD8F5AA635EB4B2'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p2)) throw new Error('Argument calculatedX should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument calculatedY should be an array');
    const $res = natives.getScriptGfxAlignPosition(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    p3[0] = $res[2];
    return $res[0];
}
hashes['0xBAF107B6BB2C97F0'] = function() {
    const $res = natives.getSafeZoneSize();
    return $res;
}
hashes['0xE7FFAE5EBF23D890'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.drawSprite(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x2D3B147AFAD49DE0'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.drawSpriteArx(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x2BC54A8188768488'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.drawSpriteNamedRendertarget(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x95812F9B26074726'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
    const $res = natives.drawSpriteArxWithUv(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
    return $res;
}
hashes['0x9CD43EEE12BF4DD0'] = function(p0, p1) {
    const $res = natives.addEntityIcon(p0, p1);
    return $res;
}
hashes['0xE0E8BEECCA96BA31'] = function(p0, p1) {
    const $res = natives.setEntityIconVisibility(p0, p1);
    return $res;
}
hashes['0x1D5F595CCAE2E238'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setEntityIconColor(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xAA0008F3BBB8F416'] = function(p0, p1, p2, p3) {
    const $res = natives.setDrawOrigin(p0, p1, p2, p3);
    return $res;
}
hashes['0xFF0B610F6BE0D7AF'] = function() {
    const $res = natives.clearDrawOrigin();
    return $res;
}
hashes['0x338D9F609FD632DB'] = function(p0) {
    const $res = natives.setBinkMovie(p0);
    return $res;
}
hashes['0x70D2CC8A542A973C'] = function(p0) {
    const $res = natives.playBinkMovie(p0);
    return $res;
}
hashes['0x63606A61DE68898A'] = function(p0) {
    const $res = natives.stopBinkMovie(p0);
    return $res;
}
hashes['0x04D950EEFA4EED8C'] = function(p0) {
    const $res = natives.releaseBinkMovie(p0);
    return $res;
}
hashes['0x7118E83EEB9F7238'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.drawBinkMovie(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x0CB6B3446855B57A'] = function(p0, p1) {
    const $res = natives.setBinkMovieTime(p0, p1);
    return $res;
}
hashes['0x8E17DDD6B9D5BF29'] = function(p0) {
    const $res = natives.getBinkMovieTime(p0);
    return $res;
}
hashes['0xAFF33B1178172223'] = function(p0, p1) {
    const $res = natives.setBinkMovieVolume(p0, p1);
    return $res;
}
hashes['0x845BAD77CC770633'] = function(p0) {
    const $res = natives.attachTvAudioToEntity(p0);
    return $res;
}
hashes['0xF816F2933752322D'] = function(p0, p1) {
    const $res = natives.setBinkMovieAudioFrontend(p0, p1);
    return $res;
}
hashes['0x113D2C5DC57E1774'] = function(p0) {
    const $res = natives.setTvAudioFrontend(p0);
    return $res;
}
hashes['0x6805D58CAA427B72'] = function(p0, p1) {
    const $res = natives.setBinkShouldSkip(p0, p1);
    return $res;
}
hashes['0xB66064452270E8F1'] = function(p0) {
    const $res = natives.loadMovieMeshSet(p0);
    return $res;
}
hashes['0xEB119AA014E89183'] = function(p0) {
    const $res = natives.releaseMovieMeshSet(p0);
    return $res;
}
hashes['0x9B6E70C5CEEF4EEB'] = function(p0) {
    const $res = natives.queryMovieMeshSetState(p0);
    return $res;
}
hashes['0x888D57E407E63624'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument x should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument y should be an array');
    const $res = natives.getScreenResolution();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    return $res[0];
}
hashes['0x873C9F3104101DD3'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument x should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument y should be an array');
    const $res = natives.getActualScreenResolution();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    return $res[0];
}
hashes['0xF1307EF624A80D87'] = function(p0) {
    const $res = natives.getAspectRatio(p0);
    return $res;
}
hashes['0xB2EBE8CBC58B90E9'] = function() {
    const $res = natives.getScreenAspectRatio();
    return $res;
}
hashes['0x30CF4BDA4FCB1905'] = function() {
    const $res = natives.getIsWidescreen();
    return $res;
}
hashes['0x84ED31191CC5D2C9'] = function() {
    const $res = natives.getIsHidef();
    return $res;
}
hashes['0xEFABC7722293DA7C'] = function() {
    const $res = natives.adjustNextPosSizeAsNormalized169();
    return $res;
}
hashes['0x18F621F7A5B1F85D'] = function(p0) {
    const $res = natives.setNightvision(p0);
    return $res;
}
hashes['0x35FB78DC42B7BD21'] = function() {
    const $res = natives.getRequestingnightvision();
    return $res;
}
hashes['0x2202A3F42C8E5F79'] = function() {
    const $res = natives.getUsingnightvision();
    return $res;
}
hashes['0xEF398BEEE4EF45F9'] = function(p0) {
    const $res = natives.setExposuretweak(p0);
    return $res;
}
hashes['0x814AF7DCAACC597B'] = function(p0) {
    const $res = natives.forceExposureReadback(p0);
    return $res;
}
hashes['0x43FA7CBE20DAB219'] = function(p0) {
    const $res = natives.overrideNightvisionLightRange(p0);
    return $res;
}
hashes['0xE787BF1C5CF823C9'] = function(p0) {
    const $res = natives.setNoiseoveride(p0);
    return $res;
}
hashes['0xCB6A7C3BB17A0C67'] = function(p0) {
    const $res = natives.setNoisinessoveride(p0);
    return $res;
}
hashes['0x34E82F05DF2974F5'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p3)) throw new Error('Argument screenX should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument screenY should be an array');
    const $res = natives.getScreenCoordFromWorldCoord(p0, p1, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p3[0] = $res[1];
    p4[0] = $res[2];
    return $res[0];
}
hashes['0x35736EE65BD00C11'] = function(p0, p1) {
    const $res = natives.getTextureResolution(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x95EB5E34F821BABE'] = function(p0, p1, p2) {
    const $res = natives.overridePedCrewLogoTexture(p0, p1, p2);
    return $res;
}
hashes['0xE2892E7E55D7073A'] = function(p0) {
    const $res = natives.setDistanceBlurStrengthOverride(p0);
    return $res;
}
hashes['0x0AB84296FED9CFC6'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setFlash(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x3669F1B198DCAA4F'] = function() {
    const $res = natives.disableOcclusionThisFrame();
    return $res;
}
hashes['0x1268615ACE24D504'] = function(p0) {
    const $res = natives.setArtificialLightsState(p0);
    return $res;
}
hashes['0xE2B187C0939B3D32'] = function(p0) {
    const $res = natives.setArtificialVehicleLightsState(p0);
    return $res;
}
hashes['0xC35A6D07C93802B2'] = function() {
    const $res = natives.disableHdtexThisFrame();
    return $res;
}
hashes['0xE2C9439ED45DEA60'] = function() {
    const $res = natives.createTrackedPoint();
    return $res;
}
hashes['0x164ECBB3CF750CB0'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setTrackedPointInfo(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC45CCDAAC9221CA8'] = function(p0) {
    const $res = natives.isTrackedPointVisible(p0);
    return $res;
}
hashes['0xB25DC90BAD56CA42'] = function(p0) {
    const $res = natives.destroyTrackedPoint(p0);
    return $res;
}
hashes['0xBE197EAA669238F4'] = function(p0, p1, p2, p3) {
    const $res = natives.setGrassCullSphere(p0, p1, p2, p3);
    return $res;
}
hashes['0x61F95E5BB3E0A8C6'] = function(p0) {
    const $res = natives.removeGrassCullSphere(p0);
    return $res;
}
hashes['0xAE51BC858F32BA66'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.procgrassEnableCullsphere(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x649C97D52332341A'] = function(p0) {
    const $res = natives.procgrassDisableCullsphere(p0);
    return $res;
}
hashes['0x2C42340F916C5930'] = function(p0) {
    const $res = natives.procgrassIsCullsphereEnabled(p0);
    return $res;
}
hashes['0x14FC5833464340A8'] = function() {
    const $res = natives.procgrassEnableAmbscalescan();
    return $res;
}
hashes['0x0218BA067D249DEA'] = function() {
    const $res = natives.procgrassDisableAmbscalescan();
    return $res;
}
hashes['0x1612C45F9E3E0D44'] = function() {
    const $res = natives.disableProcobjCreation();
    return $res;
}
hashes['0x5DEBD9C4DC995692'] = function() {
    const $res = natives.enableProcobjCreation();
    return $res;
}
hashes['0xAAE9BE70EC7C69AB'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.grassbatchEnableFlatteningExtInSphere(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x6D955F6A9E0295B1'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.grassbatchEnableFlatteningInSphere(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x302C91AB2D477F7E'] = function() {
    const $res = natives.grassbatchDisableFlattening();
    return $res;
}
hashes['0x03FC694AE06C5A20'] = function() {
    const $res = natives.cascadeShadowsInitSession();
    return $res;
}
hashes['0xD2936CAB8B58FCBD'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.cascadeShadowsSetCascadeBounds(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x5F0F3F56635809EF'] = function(p0) {
    const $res = natives.cascadeShadowsSetCascadeBoundsScale(p0);
    return $res;
}
hashes['0x5E9DAF5A20F15908'] = function(p0) {
    const $res = natives.cascadeShadowsSetEntityTrackerScale(p0);
    return $res;
}
hashes['0x36F6626459D91457'] = function(p0) {
    const $res = natives.cascadeShadowsSetSplitZExpWeight(p0);
    return $res;
}
hashes['0x259BA6D4E6F808F1'] = function(p0) {
    const $res = natives.cascadeShadowsSetBoundPosition(p0);
    return $res;
}
hashes['0x80ECBC0C856D3B0B'] = function(p0) {
    const $res = natives.cascadeShadowsEnableEntityTracker(p0);
    return $res;
}
hashes['0x25FC3E33A31AD0C9'] = function(p0) {
    const $res = natives.cascadeShadowsSetScreenSizeCheckEnabled(p0);
    return $res;
}
hashes['0xB11D94BC55F41932'] = function(p0) {
    const $res = natives.cascadeShadowsSetShadowSampleType(p0);
    return $res;
}
hashes['0x27CB772218215325'] = function() {
    const $res = natives.cascadeShadowsClearShadowSampleType();
    return $res;
}
hashes['0x6DDBF9DFFC4AC080'] = function(p0) {
    const $res = natives.cascadeShadowsSetAircraftMode(p0);
    return $res;
}
hashes['0xD39D13C9FEBF0511'] = function(p0) {
    const $res = natives.cascadeShadowsSetDynamicDepthMode(p0);
    return $res;
}
hashes['0x02AC28F3A01FA04A'] = function(p0) {
    const $res = natives.cascadeShadowsSetDynamicDepthValue(p0);
    return $res;
}
hashes['0x0AE73D8DF3A762B2'] = function(p0) {
    const $res = natives.cascadeShadowsEnableFreezer(p0);
    return $res;
}
hashes['0xCA465D9CC0D231BA'] = function(p0) {
    const $res = natives.waterReflectionSetScriptObjectVisibility(p0);
    return $res;
}
hashes['0xA51C4B86B71652AE'] = function(p0) {
    const $res = natives.golfTrailSetEnabled(p0);
    return $res;
}
hashes['0x312342E1A4874F3F'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.golfTrailSetPath(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x2485D34E50A22E84'] = function(p0, p1, p2) {
    const $res = natives.golfTrailSetRadius(p0, p1, p2);
    return $res;
}
hashes['0x12995F2E53FFA601'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.golfTrailSetColour(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0xDBAA5EC848BA2D46'] = function(p0, p1) {
    const $res = natives.golfTrailSetTessellation(p0, p1);
    return $res;
}
hashes['0xC0416B061F2B7E5E'] = function(p0) {
    const $res = natives.golfTrailSetFixedControlPointEnable(p0);
    return $res;
}
hashes['0xB1BB03742917A5D6'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.golfTrailSetFixedControlPoint(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x9CFDD90B2B844BF7'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.golfTrailSetShaderParams(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x06F761EA47C1D3ED'] = function(p0) {
    const $res = natives.golfTrailSetFacing(p0);
    return $res;
}
hashes['0xA4819F5E23E2FFAD'] = function() {
    const $res = natives.golfTrailGetMaxHeight();
    return $res;
}
hashes['0xA4664972A9B8F8BA'] = function(p0) {
    const $res = natives.golfTrailGetVisualControlPoint(p0);
    return new mp.Vector3($res);
}
hashes['0x7E08924259E08CE0'] = function(p0) {
    const $res = natives.setSeethrough(p0);
    return $res;
}
hashes['0x44B80ABAB9D80BD3'] = function() {
    const $res = natives.getUsingseethrough();
    return $res;
}
hashes['0x70A64C0234EF522C'] = function() {
    const $res = natives.seethroughReset();
    return $res;
}
hashes['0xA78DE25577300BA1'] = function(p0) {
    const $res = natives.seethroughSetFadeStartdistance(p0);
    return $res;
}
hashes['0x9D75795B9DC6EBBF'] = function(p0) {
    const $res = natives.seethroughSetFadeEnddistance(p0);
    return $res;
}
hashes['0x43DBAE39626CE83F'] = function() {
    const $res = natives.seethroughGetMaxThickness();
    return $res;
}
hashes['0x0C8FAC83902A62DF'] = function(p0) {
    const $res = natives.seethroughSetMaxThickness(p0);
    return $res;
}
hashes['0xFF5992E1C9E65D05'] = function(p0) {
    const $res = natives.seethroughSetNoiseMin(p0);
    return $res;
}
hashes['0xFEBFBFDFB66039DE'] = function(p0) {
    const $res = natives.seethroughSetNoiseMax(p0);
    return $res;
}
hashes['0x19E50EB6E33E1D28'] = function(p0) {
    const $res = natives.seethroughSetHilightIntensity(p0);
    return $res;
}
hashes['0x1636D7FC127B10D2'] = function(p0) {
    const $res = natives.seethroughSetHighlightNoise(p0);
    return $res;
}
hashes['0xD7D0B00177485411'] = function(p0, p1) {
    const $res = natives.seethroughSetHeatscale(p0, p1);
    return $res;
}
hashes['0x1086127B3A63505E'] = function(p0, p1, p2) {
    const $res = natives.seethroughSetColorNear(p0, p1, p2);
    return $res;
}
hashes['0xB3C641F3630BF6DA'] = function(p0) {
    const $res = natives.setMotionblurMaxVelScaler(p0);
    return $res;
}
hashes['0xE59343E9E96529E7'] = function() {
    const $res = natives.getMotionblurMaxVelScaler();
    return $res;
}
hashes['0x6A51F78772175A51'] = function(p0) {
    const $res = natives.setForceMotionblur(p0);
    return $res;
}
hashes['0xE63D7C6EECECB66B'] = function(p0) {
    const $res = natives.togglePlayerDamageOverlay(p0);
    return $res;
}
hashes['0xE3E2C1B4C59DBC77'] = function(p0) {
    const $res = natives.resetAdaptation(p0);
    return $res;
}
hashes['0xA328A24AAA6B7FDC'] = function(p0) {
    const $res = natives.triggerScreenblurFadeIn(p0);
    return $res;
}
hashes['0xEFACC8AEF94430D5'] = function(p0) {
    const $res = natives.triggerScreenblurFadeOut(p0);
    return $res;
}
hashes['0xDE81239437E8C5A8'] = function() {
    const $res = natives.disableScreenblurFade();
    return $res;
}
hashes['0x5CCABFFCA31DDE33'] = function() {
    const $res = natives.getScreenblurFadeCurrentTime();
    return $res;
}
hashes['0x7B226C785A52A0A9'] = function() {
    const $res = natives.isScreenblurFadeRunning();
    return $res;
}
hashes['0xDFC252D8A3E15AB7'] = function(p0) {
    const $res = natives.togglePausedRenderphases(p0);
    return $res;
}
hashes['0xEB3DAC2C86001E5E'] = function() {
    const $res = natives.getTogglePausedRenderphasesStatus();
    return $res;
}
hashes['0xE1C8709406F2C41C'] = function() {
    const $res = natives.resetPausedRenderphases();
    return $res;
}
hashes['0x851CD923176EBA7C'] = function() {
    const $res = natives.grabPausemenuOwnership();
    return $res;
}
hashes['0xBA3D65906822BED5'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setHidofOverride(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xB569F41F3E7E83A4'] = function(p0) {
    const $res = natives.setLockAdaptiveDofDistance(p0);
    return $res;
}
hashes['0x7AC24EAB6D74118D'] = function(p0) {
    const $res = natives.phonephotoeditorToggle(p0);
    return $res;
}
hashes['0xBCEDB009461DA156'] = function() {
    const $res = natives.phonephotoeditorIsActive();
    return $res;
}
hashes['0x27FEB5254759CDE3'] = function(p0, p1) {
    const $res = natives.phonephotoeditorSetFrameTxd(p0, p1);
    return $res;
}
hashes['0x25129531F77B9ED3'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.startParticleFxNonLoopedAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0xF56B8137DF10135D'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.startNetworkedParticleFxNonLoopedAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x0E7E72961BA18619'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.startParticleFxNonLoopedOnPedBone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0xA41B6A43642AC2CF'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.startNetworkedParticleFxNonLoopedOnPedBone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x0D53A3B8DA0809D2'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.startParticleFxNonLoopedOnEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0xC95EB1DB6E92113D'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.startNetworkedParticleFxNonLoopedOnEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x02B1F2A72E0F5325'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.startParticleFxNonLoopedOnEntityBone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x26143A59EF48B262'] = function(p0, p1, p2) {
    const $res = natives.setParticleFxNonLoopedColour(p0, p1, p2);
    return $res;
}
hashes['0x77168D722C58B2FC'] = function(p0) {
    const $res = natives.setParticleFxNonLoopedAlpha(p0);
    return $res;
}
hashes['0xB7EF5850C39FABCA'] = function(p0) {
    const $res = natives.setParticleFxNonLoopedScale(p0);
    return $res;
}
hashes['0x1E2E01C00837D26E'] = function(p0, p1, p2) {
    const $res = natives.setParticleFxNonLoopedEmitterSize(p0, p1, p2);
    return $res;
}
hashes['0x8CDE909A0370BB3A'] = function(p0) {
    const $res = natives.setParticleFxForceVehicleInterior(p0);
    return $res;
}
hashes['0xE184F4F0DC5910E7'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.startParticleFxLoopedAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0xF28DA9F38CD1787C'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.startParticleFxLoopedOnPedBone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x1AE42C1660FD6517'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.startParticleFxLoopedOnEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0xC6EB449E33977F0B'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.startParticleFxLoopedOnEntityBone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x6F60E89A7B64EE1D'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
    const $res = natives.startNetworkedParticleFxLoopedOnEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
    return $res;
}
hashes['0xDDE23F30CC5A0F03'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16) {
    const $res = natives.startNetworkedParticleFxLoopedOnEntityBone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);
    return $res;
}
hashes['0x8F75998877616996'] = function(p0, p1) {
    const $res = natives.stopParticleFxLooped(p0, p1);
    return $res;
}
hashes['0xC401503DFE8D53CF'] = function(p0, p1) {
    const $res = natives.removeParticleFx(p0, p1);
    return $res;
}
hashes['0xB8FEAEEBCC127425'] = function(p0) {
    const $res = natives.removeParticleFxFromEntity(p0);
    return $res;
}
hashes['0xDD19FA1C6D657305'] = function(p0, p1, p2, p3) {
    const $res = natives.removeParticleFxInRange(p0, p1, p2, p3);
    return $res;
}
hashes['0xBA0127DA25FD54C9'] = function(p0, p1) {
    const $res = natives.forceParticleFxInVehicleInterior(p0, p1);
    return $res;
}
hashes['0x74AFEF0D2E1E409B'] = function(p0) {
    const $res = natives.doesParticleFxLoopedExist(p0);
    return $res;
}
hashes['0xF7DDEBEC43483C43'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setParticleFxLoopedOffsets(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x5F0C4B5B1C393BE2'] = function(p0, p1, p2, p3) {
    const $res = natives.setParticleFxLoopedEvolution(p0, p1, p2, p3);
    return $res;
}
hashes['0x7F8F65877F88783B'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setParticleFxLoopedColour(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x726845132380142E'] = function(p0, p1) {
    const $res = natives.setParticleFxLoopedAlpha(p0, p1);
    return $res;
}
hashes['0xB44250AAA456492D'] = function(p0, p1) {
    const $res = natives.setParticleFxLoopedScale(p0, p1);
    return $res;
}
hashes['0xDCB194B85EF7B541'] = function(p0, p1) {
    const $res = natives.setParticleFxLoopedFarClipDist(p0, p1);
    return $res;
}
hashes['0xEEC4047028426510'] = function(p0) {
    const $res = natives.setParticleFxCamInsideVehicle(p0);
    return $res;
}
hashes['0xACEE6F360FC1F6B6'] = function(p0, p1) {
    const $res = natives.setParticleFxCamInsideNonplayerVehicle(p0, p1);
    return $res;
}
hashes['0x96EF97DAEB89BEF5'] = function(p0) {
    const $res = natives.setParticleFxShootoutBoat(p0);
    return $res;
}
hashes['0x2A251AA48B2B46DB'] = function() {
    const $res = natives.clearParticleFxShootoutBoat();
    return $res;
}
hashes['0x908311265D42A820'] = function(p0) {
    const $res = natives.setParticleFxBloodScale(p0);
    return $res;
}
hashes['0xCFD16F0DB5A3535C'] = function(p0) {
    const $res = natives.disableInWaterPtfx(p0);
    return $res;
}
hashes['0x5F6DF3D92271E8A1'] = function(p0) {
    const $res = natives.disableDownwashPtfx(p0);
    return $res;
}
hashes['0x2B40A97646381508'] = function(p0) {
    const $res = natives.setParticleFxSlipstreamLodrangeScale(p0);
    return $res;
}
hashes['0xD821490579791273'] = function(p0) {
    const $res = natives.enableClownBloodVfx(p0);
    return $res;
}
hashes['0x9DCE1F0F78260875'] = function(p0) {
    const $res = natives.enableAlienBloodVfx(p0);
    return $res;
}
hashes['0x27E32866E9A5C416'] = function(p0) {
    const $res = natives.setParticleFxBulletImpactScale(p0);
    return $res;
}
hashes['0xBB90E12CAC1DAB25'] = function(p0) {
    const $res = natives.setParticleFxBulletImpactLodrangeScale(p0);
    return $res;
}
hashes['0xCA4AE345A153D573'] = function(p0) {
    const $res = natives.setParticleFxBulletTraceNoAngleReject(p0);
    return $res;
}
hashes['0x54E22EA2C1956A8D'] = function(p0) {
    const $res = natives.setParticleFxBangScrapeLodrangeScale(p0);
    return $res;
}
hashes['0x949F397A288B28B3'] = function(p0) {
    const $res = natives.setParticleFxFootLodrangeScale(p0);
    return $res;
}
hashes['0xBA3D194057C79A7B'] = function(p0) {
    const $res = natives.setParticleFxFootOverrideName(p0);
    return $res;
}
hashes['0x5DBF05DB5926D089'] = function(p0) {
    const $res = natives.setSkidmarkRangeScale(p0);
    return $res;
}
hashes['0xC6730E0D14E50703'] = function(p0) {
    const $res = natives.setPtfxForceVehicleInteriorFlag(p0);
    return $res;
}
hashes['0x170911F37F646F29'] = function(p0, p1, p2, p3) {
    const $res = natives.registerPostfxBulletImpact(p0, p1, p2, p3);
    return $res;
}
hashes['0x9B079E5221D984D3'] = function(p0) {
    const $res = natives.forcePostfxBulletImpactsAfterHud(p0);
    return $res;
}
hashes['0x6C38AF3693A69A91'] = function(p0) {
    const $res = natives.useParticleFxAsset(p0);
    return $res;
}
hashes['0xEA1E2D93F6F75ED9'] = function(p0, p1) {
    const $res = natives.setParticleFxOverride(p0, p1);
    return $res;
}
hashes['0x89C8553DD3274AAE'] = function(p0) {
    const $res = natives.resetParticleFxOverride(p0);
    return $res;
}
hashes['0xA46B73FAA3460AE1'] = function(p0) {
    const $res = natives.setWeatherPtfxUseOverrideSettings(p0);
    return $res;
}
hashes['0xF78B803082D4386F'] = function(p0) {
    const $res = natives.setWeatherPtfxOverrideCurrLevel(p0);
    return $res;
}
hashes['0x9C30613D50A6ADEF'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.washDecalsInRange(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x5B712761429DBC14'] = function(p0, p1) {
    const $res = natives.washDecalsFromVehicle(p0, p1);
    return $res;
}
hashes['0xD77EDADB0420E6E0'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.fadeDecalsInRange(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x5D6B2D4830A67C62'] = function(p0, p1, p2, p3) {
    const $res = natives.removeDecalsInRange(p0, p1, p2, p3);
    return $res;
}
hashes['0xCCF71CBDDF5B6CB9'] = function(p0) {
    const $res = natives.removeDecalsFromObject(p0);
    return $res;
}
hashes['0xA6F6F70FDC6D144C'] = function(p0, p1, p2, p3) {
    const $res = natives.removeDecalsFromObjectFacing(p0, p1, p2, p3);
    return $res;
}
hashes['0xE91F1B65F2B48D57'] = function(p0) {
    const $res = natives.removeDecalsFromVehicle(p0);
    return $res;
}
hashes['0xB302244A1839BDAD'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19) {
    const $res = natives.addDecal(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19);
    return $res;
}
hashes['0x4F5212C7AD880DF8'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.addPetrolDecal(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x126D7F89FE859A5E'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.addOilDecal(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x99AC7F0D8B9C893D'] = function(p0) {
    const $res = natives.startPetrolTrailDecals(p0);
    return $res;
}
hashes['0x967278682CB6967A'] = function(p0, p1, p2, p3) {
    const $res = natives.addPetrolTrailDecalInfo(p0, p1, p2, p3);
    return $res;
}
hashes['0x0A123435A26C36CD'] = function() {
    const $res = natives.endPetrolTrailDecals();
    return $res;
}
hashes['0xED3F346429CCD659'] = function(p0) {
    const $res = natives.removeDecal(p0);
    return $res;
}
hashes['0xC694D74949CAFD0C'] = function(p0) {
    const $res = natives.isDecalAlive(p0);
    return $res;
}
hashes['0x323F647679A09103'] = function(p0) {
    const $res = natives.getDecalWashLevel(p0);
    return $res;
}
hashes['0xD9454B5752C857DC'] = function() {
    const $res = natives.setDisablePetrolDecalsIgnitingThisFrame();
    return $res;
}
hashes['0x27CFB1B1E078CB2D'] = function() {
    const $res = natives.setDisablePetrolDecalsRecyclingThisFrame();
    return $res;
}
hashes['0x4B5CFC83122DF602'] = function() {
    const $res = natives.setDisableDecalRenderingThisFrame();
    return $res;
}
hashes['0x2F09F7976C512404'] = function(p0, p1, p2, p3) {
    const $res = natives.getIsPetrolDecalInRange(p0, p1, p2, p3);
    return $res;
}
hashes['0x8A35C742130C6080'] = function(p0, p1, p2) {
    const $res = natives.patchDecalDiffuseMap(p0, p1, p2);
    return $res;
}
hashes['0xB7ED70C49521A61D'] = function(p0) {
    const $res = natives.unpatchDecalDiffuseMap(p0);
    return $res;
}
hashes['0x84C8D7C2D30D3280'] = function(p0, p1) {
    const $res = natives.moveVehicleDecals(p0, p1);
    return $res;
}
hashes['0x428BDCB9DA58DA53'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
    const $res = natives.addVehicleCrewEmblem(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
    return $res;
}
hashes['0x82ACC484FFA3B05F'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.abortVehicleCrewEmblemRequest();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xD2300034310557E4'] = function(p0, p1) {
    const $res = natives.removeVehicleCrewEmblem(p0, p1);
    return $res;
}
hashes['0xFE26117A5841B2FF'] = function(p0, p1) {
    const $res = natives.getVehicleCrewEmblemRequestState(p0, p1);
    return $res;
}
hashes['0x060D935D3981A275'] = function(p0, p1) {
    const $res = natives.doesVehicleHaveCrewEmblem(p0, p1);
    return $res;
}
hashes['0x0E4299C549F0D1F1'] = function(p0) {
    const $res = natives.disableCompositeShotgunDecals(p0);
    return $res;
}
hashes['0x02369D5C8A51FDCF'] = function(p0) {
    const $res = natives.disableScuffDecals(p0);
    return $res;
}
hashes['0x46D1A61A21F566FC'] = function(p0) {
    const $res = natives.setDecalBulletImpactRangeScale(p0);
    return $res;
}
hashes['0x2A2A52824DB96700'] = function(p0) {
    const $res = natives.overrideInteriorSmokeName(p0);
    return $res;
}
hashes['0x1600FD8CF72EBC12'] = function(p0) {
    const $res = natives.overrideInteriorSmokeLevel(p0);
    return $res;
}
hashes['0xEFB55E7C25D3B3BE'] = function() {
    const $res = natives.overrideInteriorSmokeEnd();
    return $res;
}
hashes['0xA44FF770DFBC5DAE'] = function() {
    const $res = natives.registerNoirLensEffect();
    return $res;
}
hashes['0xC9F98AC1884E73A2'] = function(p0) {
    const $res = natives.disableVehicleDistantlights(p0);
    return $res;
}
hashes['0x03300B57FCAC6DDB'] = function(p0) {
    const $res = natives.renderShadowedLightsWithNoShadows(p0);
    return $res;
}
hashes['0x98EDF76A7271E4F2'] = function() {
    const $res = natives.requestEarlyLightCheck();
    return $res;
}
hashes['0xAEEDAD1420C65CC0'] = function(p0) {
    const $res = natives.useSnowFootVfxWhenUnsheltered(p0);
    return $res;
}
hashes['0x4CC7F0FEA5283FE0'] = function(p0) {
    const $res = natives.useSnowWheelVfxWhenUnsheltered(p0);
    return $res;
}
hashes['0xEFD97FF47B745B8D'] = function(p0) {
    const $res = natives.disableRegionVfx(p0);
    return $res;
}
hashes['0xD7021272EB0A451E'] = function(p0) {
    const $res = natives.presetInteriorAmbientCache(p0);
    return $res;
}
hashes['0x2C933ABF17A1DF41'] = function(p0) {
    const $res = natives.setTimecycleModifier(p0);
    return $res;
}
hashes['0x82E7FFCD5B2326B3'] = function(p0) {
    const $res = natives.setTimecycleModifierStrength(p0);
    return $res;
}
hashes['0x3BCF567485E1971C'] = function(p0, p1) {
    const $res = natives.setTransitionTimecycleModifier(p0, p1);
    return $res;
}
hashes['0x1CBA05AE7BD7EE05'] = function(p0) {
    const $res = natives.setTransitionOutOfTimecycleModifier(p0);
    return $res;
}
hashes['0x0F07E7745A236711'] = function() {
    const $res = natives.clearTimecycleModifier();
    return $res;
}
hashes['0xFDF3D97C674AFB66'] = function() {
    const $res = natives.getTimecycleModifierIndex();
    return $res;
}
hashes['0x459FD2C8D0AB78BC'] = function() {
    const $res = natives.getTimecycleTransitionModifierIndex();
    return $res;
}
hashes['0x98D18905BF723B99'] = function() {
    const $res = natives.getIsTimecycleTransitioningOut();
    return $res;
}
hashes['0x58F735290861E6B4'] = function() {
    const $res = natives.pushTimecycleModifier();
    return $res;
}
hashes['0x3C8938D7D872211E'] = function() {
    const $res = natives.popTimecycleModifier();
    return $res;
}
hashes['0xBBF327DED94E4DEB'] = function(p0) {
    const $res = natives.setCurrentPlayerTcmodifier(p0);
    return $res;
}
hashes['0xBDEB86F4D5809204'] = function(p0) {
    const $res = natives.setPlayerTcmodifierTransition(p0);
    return $res;
}
hashes['0xBF59707B3E5ED531'] = function(p0) {
    const $res = natives.setNextPlayerTcmodifier(p0);
    return $res;
}
hashes['0x1A8E2C8B9CF4549C'] = function(p0, p1) {
    const $res = natives.addTcmodifierOverride(p0, p1);
    return $res;
}
hashes['0x15E33297C3E8DC60'] = function(p0) {
    const $res = natives.clearAllTcmodifierOverrides(p0);
    return $res;
}
hashes['0x5096FD9CCB49056D'] = function(p0) {
    const $res = natives.setExtraTcmodifier(p0);
    return $res;
}
hashes['0x92CCC17A7A2285DA'] = function() {
    const $res = natives.clearExtraTcmodifier();
    return $res;
}
hashes['0xBB0527EC6341496D'] = function() {
    const $res = natives.getExtraTcmodifier();
    return $res;
}
hashes['0x2C328AF17210F009'] = function(p0) {
    const $res = natives.enableMoonCycleOverride(p0);
    return $res;
}
hashes['0x2BF72AD5B41AA739'] = function() {
    const $res = natives.disableMoonCycleOverride();
    return $res;
}
hashes['0x11FE353CF9733E6F'] = function(p0) {
    const $res = natives.requestScaleformMovie(p0);
    return $res;
}
hashes['0x65E7E78842E74CDB'] = function(p0) {
    const $res = natives.requestScaleformMovieWithIgnoreSuperWidescreen(p0);
    return $res;
}
hashes['0xC514489CFB8AF806'] = function(p0) {
    const $res = natives.requestScaleformMovieInstance(p0);
    return $res;
}
hashes['0xBD06C611BB9048C2'] = function(p0) {
    const $res = natives.requestScaleformMovieSkipRenderWhilePaused(p0);
    return $res;
}
hashes['0x85F01B8D5B90570E'] = function(p0) {
    const $res = natives.hasScaleformMovieLoaded(p0);
    return $res;
}
hashes['0x2FCB133CA50A49EB'] = function(p0) {
    const $res = natives.isActiveScaleformMovieDeleting(p0);
    return $res;
}
hashes['0x86255B1FC929E33E'] = function(p0) {
    const $res = natives.isScaleformMovieDeleting(p0);
    return $res;
}
hashes['0x0C1C5D756FB5F337'] = function(p0) {
    const $res = natives.hasScaleformMovieFilenameLoaded(p0);
    return $res;
}
hashes['0x8217150E1217EBFD'] = function(p0) {
    const $res = natives.hasScaleformContainerMovieLoadedIntoParent(p0);
    return $res;
}
hashes['0x1D132D614DD86811'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument scaleformHandle should be an array');
    const $res = natives.setScaleformMovieAsNoLongerNeeded();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x6D8EB211944DCE08'] = function(p0, p1) {
    const $res = natives.setScaleformMovieToUseSystemTime(p0, p1);
    return $res;
}
hashes['0x32F34FF7F617643B'] = function(p0, p1) {
    const $res = natives.setScaleformMovieToUseLargeRt(p0, p1);
    return $res;
}
hashes['0xE6A9F00D4240B519'] = function(p0, p1) {
    const $res = natives.setScaleformMovieToUseSuperLargeRt(p0, p1);
    return $res;
}
hashes['0x54972ADAF0294A93'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.drawScaleformMovie(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x0DF606929C105BE1'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.drawScaleformMovieFullscreen(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xCF537FDE4FBD4CE5'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.drawScaleformMovieFullscreenMasked(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x87D51D72255D4E78'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.drawScaleformMovie3d(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0x1CE592FDC749D6F5'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.drawScaleformMovie3dSolid(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0xFBD96D87AC96D533'] = function(p0, p1) {
    const $res = natives.callScaleformMovieMethod(p0, p1);
    return $res;
}
hashes['0xD0837058AE2E4BEE'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.callScaleformMovieMethodWithNumber(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x51BC1ED3CC44E8F7'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.callScaleformMovieMethodWithString(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xEF662D8D57E290B1'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.callScaleformMovieMethodWithNumberAndString(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x98C494FD5BDFBFD5'] = function(p0, p1) {
    const $res = natives.beginScaleformScriptHudMovieMethod(p0, p1);
    return $res;
}
hashes['0xF6E48914C7A8694E'] = function(p0, p1) {
    const $res = natives.beginScaleformMovieMethod(p0, p1);
    return $res;
}
hashes['0xAB58C27C2E6123C6'] = function(p0) {
    const $res = natives.beginScaleformMovieMethodOnFrontend(p0);
    return $res;
}
hashes['0xB9449845F73F5E9C'] = function(p0) {
    const $res = natives.beginScaleformMovieMethodOnFrontendHeader(p0);
    return $res;
}
hashes['0xC6796A8FFA375E53'] = function() {
    const $res = natives.endScaleformMovieMethod();
    return $res;
}
hashes['0xC50AA39A577AF886'] = function() {
    const $res = natives.endScaleformMovieMethodReturnValue();
    return $res;
}
hashes['0x768FF8961BA904D6'] = function(p0) {
    const $res = natives.isScaleformMovieMethodReturnValueReady(p0);
    return $res;
}
hashes['0x2DE7EFA66B906036'] = function(p0) {
    const $res = natives.getScaleformMovieMethodReturnValueInt(p0);
    return $res;
}
hashes['0xD80A80346A45D761'] = function(p0) {
    const $res = natives.getScaleformMovieMethodReturnValueBool(p0);
    return $res;
}
hashes['0xE1E258829A885245'] = function(p0) {
    const $res = natives.getScaleformMovieMethodReturnValueString(p0);
    return $res;
}
hashes['0xC3D0841A0CC546A6'] = function(p0) {
    const $res = natives.scaleformMovieMethodAddParamInt(p0);
    return $res;
}
hashes['0xD69736AAE04DB51A'] = function(p0) {
    const $res = natives.scaleformMovieMethodAddParamFloat(p0);
    return $res;
}
hashes['0xC58424BA936EB458'] = function(p0) {
    const $res = natives.scaleformMovieMethodAddParamBool(p0);
    return $res;
}
hashes['0x80338406F3475E55'] = function(p0) {
    const $res = natives.beginTextCommandScaleformString(p0);
    return $res;
}
hashes['0x362E2D3FE93A9959'] = function() {
    const $res = natives.endTextCommandScaleformString();
    return $res;
}
hashes['0xAE4E8157D9ECF087'] = function() {
    const $res = natives.endTextCommandUnparsedScaleformString();
    return $res;
}
hashes['0x77FE3402004CD1B0'] = function(p0) {
    const $res = natives.scaleformMovieMethodAddParamLiteralString(p0);
    return $res;
}
hashes['0xBA7148484BD90365'] = function(p0) {
    const $res = natives.scaleformMovieMethodAddParamTextureNameString(p0);
    return $res;
}
hashes['0xE83A3E3557A56640'] = function(p0) {
    const $res = natives.scaleformMovieMethodAddParamPlayerNameString(p0);
    return $res;
}
hashes['0x5E657EF1099EDD65'] = function(p0) {
    const $res = natives.doesLatestBriefStringExist(p0);
    return $res;
}
hashes['0xEC52C631A1831C03'] = function(p0) {
    const $res = natives.scaleformMovieMethodAddParamLatestBriefString(p0);
    return $res;
}
hashes['0x9304881D6F6537EA'] = function(p0) {
    const $res = natives.requestScaleformScriptHudMovie(p0);
    return $res;
}
hashes['0xDF6E5987D2B4D140'] = function(p0) {
    const $res = natives.hasScaleformScriptHudMovieLoaded(p0);
    return $res;
}
hashes['0xF44A5456AC3F4F97'] = function(p0) {
    const $res = natives.removeScaleformScriptHudMovie(p0);
    return $res;
}
hashes['0xD1C7CB175E012964'] = function(p0) {
    const $res = natives.passKeyboardInputToScaleform(p0);
    return $res;
}
hashes['0xBAABBB23EB6E484E'] = function(p0) {
    const $res = natives.setTvChannel(p0);
    return $res;
}
hashes['0xFC1E275A90D39995'] = function() {
    const $res = natives.getTvChannel();
    return $res;
}
hashes['0x2982BF73F66E9DDC'] = function(p0) {
    const $res = natives.setTvVolume(p0);
    return $res;
}
hashes['0x2170813D3DD8661B'] = function() {
    const $res = natives.getTvVolume();
    return $res;
}
hashes['0xFDDC2B4ED3C69DF0'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.drawTvChannel(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xF7B38B8305F1FE8B'] = function(p0, p1, p2) {
    const $res = natives.setTvChannelPlaylist(p0, p1, p2);
    return $res;
}
hashes['0x2201C576FACAEBE8'] = function(p0, p1, p2) {
    const $res = natives.setTvChannelPlaylistAtHour(p0, p1, p2);
    return $res;
}
hashes['0xBEB3D46BB7F043C0'] = function(p0) {
    const $res = natives.clearTvChannelPlaylist(p0);
    return $res;
}
hashes['0x1F710BFF7DAE6261'] = function(p0, p1) {
    const $res = natives.isPlaylistOnChannel(p0, p1);
    return $res;
}
hashes['0x0AD973CA1E077B60'] = function(p0) {
    const $res = natives.isTvshowCurrentlyPlaying(p0);
    return $res;
}
hashes['0x74C180030FDE4B69'] = function(p0) {
    const $res = natives.enableMovieKeyframeWait(p0);
    return $res;
}
hashes['0xD1C55B110E4DF534'] = function(p0) {
    const $res = natives.setTvPlayerWatchingThisFrame(p0);
    return $res;
}
hashes['0x30432A0118736E00'] = function() {
    const $res = natives.getCurrentTvClipNamehash();
    return $res;
}
hashes['0x873FA65C778AD970'] = function(p0) {
    const $res = natives.enableMovieSubtitles(p0);
    return $res;
}
hashes['0xD3A10FC7FD8D98CD'] = function() {
    const $res = natives.ui3dsceneIsAvailable();
    return $res;
}
hashes['0xF1CEA8A4198D8E9A'] = function(p0) {
    const $res = natives.ui3dscenePushPreset(p0);
    return $res;
}
hashes['0x98C4FE6EC34154CA'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.ui3dsceneAssignPedToSlot(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x7A42B2E236E71415'] = function() {
    const $res = natives.ui3dsceneClearPatchedData();
    return $res;
}
hashes['0x108BE26959A9D9BB'] = function(p0) {
    const $res = natives.ui3dsceneMakePushedPresetPersistent(p0);
    return $res;
}
hashes['0xA356990E161C9E65'] = function(p0) {
    const $res = natives.terraingridActivate(p0);
    return $res;
}
hashes['0x1C4FC5752BCD8E48'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.terraingridSetParams(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x5CE62918F8D703C7'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.terraingridSetColours(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x2206BF9A37B7F724'] = function(p0, p1, p2) {
    const $res = natives.animpostfxPlay(p0, p1, p2);
    return $res;
}
hashes['0x068E835A1D0DC0E3'] = function(p0) {
    const $res = natives.animpostfxStop(p0);
    return $res;
}
hashes['0xE35B38A27E8E7179'] = function(p0) {
    const $res = natives.animpostfxGetCurrentTime(p0);
    return $res;
}
hashes['0x36AD3E690DA5ACEB'] = function(p0) {
    const $res = natives.animpostfxIsRunning(p0);
    return $res;
}
hashes['0xB4EDDC19532BFB85'] = function() {
    const $res = natives.animpostfxStopAll();
    return $res;
}
hashes['0xD2209BE128B5418C'] = function(p0) {
    const $res = natives.animpostfxStopAndFlushRequests(p0);
    return $res;
}
hashes['0xABA17D7CE615ADBF'] = function(p0) {
    const $res = natives.beginTextCommandBusyspinnerOn(p0);
    return $res;
}
hashes['0xBD12F8228410D9B4'] = function(p0) {
    const $res = natives.endTextCommandBusyspinnerOn(p0);
    return $res;
}
hashes['0x10D373323E5B9C0D'] = function() {
    const $res = natives.busyspinnerOff();
    return $res;
}
hashes['0xC65AB383CD91DF98'] = function() {
    const $res = natives.preloadBusyspinner();
    return $res;
}
hashes['0xD422FCC5F239A915'] = function() {
    const $res = natives.busyspinnerIsOn();
    return $res;
}
hashes['0xB2A592B04648A9CB'] = function() {
    const $res = natives.busyspinnerIsDisplaying();
    return $res;
}
hashes['0x9245E81072704B8A'] = function(p0) {
    const $res = natives.disablePausemenuSpinner(p0);
    return $res;
}
hashes['0xAAE7CE1D63167423'] = function() {
    const $res = natives.setMouseCursorThisFrame();
    return $res;
}
hashes['0x8DB8CFFD58B62552'] = function(p0) {
    const $res = natives.setMouseCursorStyle(p0);
    return $res;
}
hashes['0x98215325A695E78A'] = function(p0) {
    const $res = natives.setMouseCursorVisible(p0);
    return $res;
}
hashes['0x3D9ACB1EB139E702'] = function() {
    const $res = natives.isMouseRolledOverInstructionalButtons();
    return $res;
}
hashes['0x632B2940C67F4EA9'] = function(p0, p1, p2, p3) {
    const $res = natives.getMouseEvent(p0, p1, p2, p3);
    return $res;
}
hashes['0x6F1554B0CC2089FA'] = function(p0) {
    const $res = natives.thefeedOnlyShowTooltips(p0);
    return $res;
}
hashes['0x55598D21339CB998'] = function(p0) {
    const $res = natives.thefeedSetScriptedMenuHeight(p0);
    return $res;
}
hashes['0x32888337579A5970'] = function() {
    const $res = natives.thefeedHide();
    return $res;
}
hashes['0x25F87B30C382FCA7'] = function() {
    const $res = natives.thefeedHideThisFrame();
    return $res;
}
hashes['0x15CFA549788D35EF'] = function() {
    const $res = natives.thefeedShow();
    return $res;
}
hashes['0xA8FDB297A8D25FBA'] = function() {
    const $res = natives.thefeedFlushQueue();
    return $res;
}
hashes['0xBE4390CB40B3E627'] = function(p0) {
    const $res = natives.thefeedRemoveItem(p0);
    return $res;
}
hashes['0xA13C11E1B5C06BFC'] = function() {
    const $res = natives.thefeedForceRenderOn();
    return $res;
}
hashes['0x583049884A2EEE3C'] = function() {
    const $res = natives.thefeedForceRenderOff();
    return $res;
}
hashes['0xFDB423997FA30340'] = function() {
    const $res = natives.thefeedPause();
    return $res;
}
hashes['0xE1CD1E48E025E661'] = function() {
    const $res = natives.thefeedResume();
    return $res;
}
hashes['0xA9CBFD40B3FA3010'] = function() {
    const $res = natives.thefeedIsPaused();
    return $res;
}
hashes['0xD4438C0564490E63'] = function() {
    const $res = natives.thefeedReportLogoOn();
    return $res;
}
hashes['0xB695E2CD0A2DA9EE'] = function() {
    const $res = natives.thefeedReportLogoOff();
    return $res;
}
hashes['0x82352748437638CA'] = function() {
    const $res = natives.thefeedGetLastShownPhoneActivatableFeedId();
    return $res;
}
hashes['0x56C8B608CFD49854'] = function() {
    const $res = natives.thefeedAutoPostGametipsOn();
    return $res;
}
hashes['0xADED7F5748ACAFE6'] = function() {
    const $res = natives.thefeedAutoPostGametipsOff();
    return $res;
}
hashes['0x92F0DA1E27DB96DC'] = function(p0) {
    const $res = natives.thefeedSetBackgroundColorForNextPost(p0);
    return $res;
}
hashes['0x17430B918701C342'] = function(p0, p1, p2, p3) {
    const $res = natives.thefeedSetRgbaParameterForNextMessage(p0, p1, p2, p3);
    return $res;
}
hashes['0x17AD8C9706BDD88A'] = function(p0) {
    const $res = natives.thefeedSetFlashDurationParameterForNextMessage(p0);
    return $res;
}
hashes['0x4A0C7C9BB10ABB36'] = function(p0) {
    const $res = natives.thefeedSetVibrateParameterForNextMessage(p0);
    return $res;
}
hashes['0xFDD85225B2DEA55E'] = function() {
    const $res = natives.thefeedResetAllParameters();
    return $res;
}
hashes['0xFDEC055AB549E328'] = function() {
    const $res = natives.thefeedFreezeNextPost();
    return $res;
}
hashes['0x80FE4F3AB4E1B62A'] = function() {
    const $res = natives.thefeedClearFrozenPost();
    return $res;
}
hashes['0xBAE4F9B97CD43B30'] = function(p0) {
    const $res = natives.thefeedSetSnapFeedItemPositions(p0);
    return $res;
}
hashes['0x317EBA71D7543F52'] = function(p0, p1, p2, p3) {
    const $res = natives.thefeedUpdateItemTexture(p0, p1, p2, p3);
    return $res;
}
hashes['0x202709F4C58A0424'] = function(p0) {
    const $res = natives.beginTextCommandThefeedPost(p0);
    return $res;
}
hashes['0x2B7E9A4EAAA93C89'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.endTextCommandThefeedPostStats(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x1CCD9A37359072CF'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.endTextCommandThefeedPostMessagetext(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xC6F580E4C94926AC'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.endTextCommandThefeedPostMessagetextSubtitleLabel(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x1E6611149DB3DB6B'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.endTextCommandThefeedPostMessagetextTu(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x5CBF7BADE20DB93E'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.endTextCommandThefeedPostMessagetextWithCrewTag(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x531B84E7DA981FB6'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x2ED7843F8F801023'] = function(p0, p1) {
    const $res = natives.endTextCommandThefeedPostTicker(p0, p1);
    return $res;
}
hashes['0x44FA03975424A0EE'] = function(p0, p1) {
    const $res = natives.endTextCommandThefeedPostTickerForced(p0, p1);
    return $res;
}
hashes['0x378E809BF61EC840'] = function(p0, p1) {
    const $res = natives.endTextCommandThefeedPostTickerWithTokens(p0, p1);
    return $res;
}
hashes['0xAA295B6F28BD587D'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.endTextCommandThefeedPostAward(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x97C9E4E7024A8F2C'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    if (!Array.isArray(p2)) throw new Error('Argument p2 should be an array');
    const $res = natives.endTextCommandThefeedPostCrewtag(p0, p1, p3, p4, p5, p6, p7, p8, p9);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x137BC35589E34E1E'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    if (!Array.isArray(p2)) throw new Error('Argument p2 should be an array');
    const $res = natives.endTextCommandThefeedPostCrewtagWithGameName(p0, p1, p3, p4, p5, p6, p7, p8, p9, p10);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x33EE12743CCD6343'] = function(p0, p1, p2) {
    const $res = natives.endTextCommandThefeedPostUnlock(p0, p1, p2);
    return $res;
}
hashes['0xC8F3AAF93D0600BF'] = function(p0, p1, p2, p3) {
    const $res = natives.endTextCommandThefeedPostUnlockTu(p0, p1, p2, p3);
    return $res;
}
hashes['0x7AE0589093A2E088'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.endTextCommandThefeedPostUnlockTuWithColor(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xF020C96915705B3A'] = function(p0, p1) {
    const $res = natives.endTextCommandThefeedPostMpticker(p0, p1);
    return $res;
}
hashes['0x8EFCCF6EC66D85E4'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.endTextCommandThefeedPostCrewRankupWithLiteralFlag(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xB6871B0555B02996'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.endTextCommandThefeedPostVersusTu(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xD202B92CBF1D816F'] = function(p0, p1, p2) {
    const $res = natives.endTextCommandThefeedPostReplay(p0, p1, p2);
    return $res;
}
hashes['0xDD6CB2CCE7C2735C'] = function(p0, p1, p2) {
    const $res = natives.endTextCommandThefeedPostReplayInput(p0, p1, p2);
    return $res;
}
hashes['0xB87A37EEB7FAA67D'] = function(p0) {
    const $res = natives.beginTextCommandPrint(p0);
    return $res;
}
hashes['0x9D77056A530643F6'] = function(p0, p1) {
    const $res = natives.endTextCommandPrint(p0, p1);
    return $res;
}
hashes['0x853648FD1063A213'] = function(p0) {
    const $res = natives.beginTextCommandIsMessageDisplayed(p0);
    return $res;
}
hashes['0x8A9BA1AB3E237613'] = function() {
    const $res = natives.endTextCommandIsMessageDisplayed();
    return $res;
}
hashes['0x25FBB336DF1804CB'] = function(p0) {
    const $res = natives.beginTextCommandDisplayText(p0);
    return $res;
}
hashes['0xCD015E5BB0D96A57'] = function(p0, p1, p2) {
    const $res = natives.endTextCommandDisplayText(p0, p1, p2);
    return $res;
}
hashes['0x54CE8AC98E120CAB'] = function(p0) {
    const $res = natives.beginTextCommandGetScreenWidthOfDisplayText(p0);
    return $res;
}
hashes['0x85F061DA64ED2F67'] = function(p0) {
    const $res = natives.endTextCommandGetScreenWidthOfDisplayText(p0);
    return $res;
}
hashes['0x521FB041D93DD0E4'] = function(p0) {
    const $res = natives.beginTextCommandGetNumberOfLinesForString(p0);
    return $res;
}
hashes['0x9040DFB09BE75706'] = function(p0, p1) {
    const $res = natives.endTextCommandGetNumberOfLinesForString(p0, p1);
    return $res;
}
hashes['0x8509B634FBE7DA11'] = function(p0) {
    const $res = natives.beginTextCommandDisplayHelp(p0);
    return $res;
}
hashes['0x238FFE5C7B0498A6'] = function(p0, p1, p2, p3) {
    const $res = natives.endTextCommandDisplayHelp(p0, p1, p2, p3);
    return $res;
}
hashes['0x0A24DA3A41B718F5'] = function(p0) {
    const $res = natives.beginTextCommandIsThisHelpMessageBeingDisplayed(p0);
    return $res;
}
hashes['0x10BDDBFC529428DD'] = function(p0) {
    const $res = natives.endTextCommandIsThisHelpMessageBeingDisplayed(p0);
    return $res;
}
hashes['0xF9113A30DE5C6670'] = function(p0) {
    const $res = natives.beginTextCommandSetBlipName(p0);
    return $res;
}
hashes['0xBC38B49BCB83BC9B'] = function(p0) {
    const $res = natives.endTextCommandSetBlipName(p0);
    return $res;
}
hashes['0x23D69E0465570028'] = function(p0) {
    const $res = natives.beginTextCommandAddDirectlyToPreviousBriefs(p0);
    return $res;
}
hashes['0xCFDBDF5AE59BA0F4'] = function(p0) {
    const $res = natives.endTextCommandAddDirectlyToPreviousBriefs(p0);
    return $res;
}
hashes['0xE124FA80A759019C'] = function(p0) {
    const $res = natives.beginTextCommandClearPrint(p0);
    return $res;
}
hashes['0xFCC75460ABA29378'] = function() {
    const $res = natives.endTextCommandClearPrint();
    return $res;
}
hashes['0x8F9EE5687F8EECCD'] = function(p0) {
    const $res = natives.beginTextCommandOverrideButtonText(p0);
    return $res;
}
hashes['0xA86911979638106F'] = function(p0) {
    const $res = natives.endTextCommandOverrideButtonText(p0);
    return $res;
}
hashes['0x03B504CF259931BC'] = function(p0) {
    const $res = natives.addTextComponentInteger(p0);
    return $res;
}
hashes['0xE7DCB5B874BCD96E'] = function(p0, p1) {
    const $res = natives.addTextComponentFloat(p0, p1);
    return $res;
}
hashes['0xC63CD5D2920ACBE7'] = function(p0) {
    const $res = natives.addTextComponentSubstringTextLabel(p0);
    return $res;
}
hashes['0x17299B63C7683A2B'] = function(p0) {
    const $res = natives.addTextComponentSubstringTextLabelHashKey(p0);
    return $res;
}
hashes['0x80EAD8E2E1D5D52E'] = function(p0) {
    const $res = natives.addTextComponentSubstringBlipName(p0);
    return $res;
}
hashes['0x6C188BE134E074AA'] = function(p0) {
    const $res = natives.addTextComponentSubstringPlayerName(p0);
    return $res;
}
hashes['0x1115F16B8AB9E8BF'] = function(p0, p1) {
    const $res = natives.addTextComponentSubstringTime(p0, p1);
    return $res;
}
hashes['0x0E4C749FF9DE9CC4'] = function(p0, p1) {
    const $res = natives.addTextComponentFormattedInteger(p0, p1);
    return $res;
}
hashes['0x761B77454205A61D'] = function(p0, p1) {
    const $res = natives.addTextComponentSubstringPhoneNumber(p0, p1);
    return $res;
}
hashes['0x94CF4AC034C9C986'] = function(p0) {
    const $res = natives.addTextComponentSubstringWebsite(p0);
    return $res;
}
hashes['0x5F68520888E69014'] = function(p0) {
    const $res = natives.addTextComponentSubstringKeyboardDisplay(p0);
    return $res;
}
hashes['0x39BBF623FC803EAC'] = function(p0) {
    const $res = natives.setColourOfNextTextComponent(p0);
    return $res;
}
hashes['0x169BD9382084C8C0'] = function(p0, p1, p2) {
    const $res = natives.getCharacterFromAudioConversationFilename(p0, p1, p2);
    return $res;
}
hashes['0xB2798643312205C5'] = function(p0, p1, p2, p3) {
    const $res = natives.getCharacterFromAudioConversationFilenameWithByteLimit(p0, p1, p2, p3);
    return $res;
}
hashes['0xCE94AEBA5D82908A'] = function(p0, p1, p2) {
    const $res = natives.getCharacterFromAudioConversationFilenameBytes(p0, p1, p2);
    return $res;
}
hashes['0x7B5280EBA9840C72'] = function(p0) {
    const $res = natives.getFilenameForAudioConversation(p0);
    return $res;
}
hashes['0xCC33FA791322B9D9'] = function() {
    const $res = natives.clearPrints();
    return $res;
}
hashes['0x9D292F73ADBD9313'] = function() {
    const $res = natives.clearBrief();
    return $res;
}
hashes['0x6178F68A87A4D3A0'] = function() {
    const $res = natives.clearAllHelpMessages();
    return $res;
}
hashes['0xCF708001E1E536DD'] = function(p0) {
    const $res = natives.clearThisPrint(p0);
    return $res;
}
hashes['0x2CEA2839313C09AC'] = function() {
    const $res = natives.clearSmallPrints();
    return $res;
}
hashes['0x1C7302E725259789'] = function(p0) {
    const $res = natives.doesTextBlockExist(p0);
    return $res;
}
hashes['0x71A78003C8E71424'] = function(p0, p1) {
    const $res = natives.requestAdditionalText(p0, p1);
    return $res;
}
hashes['0x6009F9F1AE90D8A6'] = function(p0, p1) {
    const $res = natives.requestAdditionalTextForDlc(p0, p1);
    return $res;
}
hashes['0x02245FE4BED318B8'] = function(p0) {
    const $res = natives.hasAdditionalTextLoaded(p0);
    return $res;
}
hashes['0x2A179DF17CCF04CD'] = function(p0, p1) {
    const $res = natives.clearAdditionalText(p0, p1);
    return $res;
}
hashes['0x8B6817B71B85EBF0'] = function(p0) {
    const $res = natives.isStreamingAdditionalText(p0);
    return $res;
}
hashes['0xADBF060E2B30C5BC'] = function(p0, p1) {
    const $res = natives.hasThisAdditionalTextLoaded(p0, p1);
    return $res;
}
hashes['0x7984C03AA5CC2F41'] = function() {
    const $res = natives.isMessageBeingDisplayed();
    return $res;
}
hashes['0xAC09CA973C564252'] = function(p0) {
    const $res = natives.doesTextLabelExist(p0);
    return $res;
}
hashes['0x98C3CF913D895111'] = function(p0, p1) {
    const $res = natives.getFirstNCharactersOfLiteralString(p0, p1);
    return $res;
}
hashes['0x801BD273D3A23F74'] = function(p0) {
    const $res = natives.getLengthOfStringWithThisTextLabel(p0);
    return $res;
}
hashes['0xF030907CCBB8A9FD'] = function(p0) {
    const $res = natives.getLengthOfLiteralString(p0);
    return $res;
}
hashes['0x43E4111189E54F0E'] = function(p0) {
    const $res = natives.getLengthOfLiteralStringInBytes(p0);
    return $res;
}
hashes['0xD0EF8A959B8A4CB9'] = function(p0) {
    const $res = natives.getStreetNameFromHashKey(p0);
    return $res;
}
hashes['0x1930DFA731813EC4'] = function() {
    const $res = natives.isHudPreferenceSwitchedOn();
    return $res;
}
hashes['0x9EB6522EA68F22FE'] = function() {
    const $res = natives.isRadarPreferenceSwitchedOn();
    return $res;
}
hashes['0xAD6DACA4BA53E0A4'] = function() {
    const $res = natives.isSubtitlePreferenceSwitchedOn();
    return $res;
}
hashes['0xA6294919E56FF02A'] = function(p0) {
    const $res = natives.displayHud(p0);
    return $res;
}
hashes['0x7669F9E39DC17063'] = function() {
    const $res = natives.displayHudWhenNotInStateOfPlayThisFrame();
    return $res;
}
hashes['0x402F9ED62087E898'] = function() {
    const $res = natives.displayHudWhenPausedThisFrame();
    return $res;
}
hashes['0xA0EBB943C300E693'] = function(p0) {
    const $res = natives.displayRadar(p0);
    return $res;
}
hashes['0xCD74233600C4EA6B'] = function(p0) {
    const $res = natives.setFakeSpectatorMode(p0);
    return $res;
}
hashes['0xC2D2AD9EAAE265B8'] = function() {
    const $res = natives.getFakeSpectatorMode();
    return $res;
}
hashes['0xA86478C6958735C5'] = function() {
    const $res = natives.isHudHidden();
    return $res;
}
hashes['0x157F93B036700462'] = function() {
    const $res = natives.isRadarHidden();
    return $res;
}
hashes['0xAF754F20EB5CD51A'] = function() {
    const $res = natives.isMinimapRendering();
    return $res;
}
hashes['0x0C698D8F099174C7'] = function(p0) {
    const $res = natives.useVehicleTargetingReticule(p0);
    return $res;
}
hashes['0xE4C3B169876D33D7'] = function(p0) {
    const $res = natives.addValidVehicleHitHash(p0);
    return $res;
}
hashes['0xEB81A3DADD503187'] = function() {
    const $res = natives.clearValidVehicleHitHashes();
    return $res;
}
hashes['0x4F7D8A9BFB0B43E9'] = function(p0, p1) {
    const $res = natives.setBlipRoute(p0, p1);
    return $res;
}
hashes['0xD12882D3FF82BF11'] = function() {
    const $res = natives.clearAllBlipRoutes();
    return $res;
}
hashes['0x837155CD2F63DA09'] = function(p0, p1) {
    const $res = natives.setBlipRouteColour(p0, p1);
    return $res;
}
hashes['0x2790F4B17D098E26'] = function(p0) {
    const $res = natives.setForceShowGps(p0);
    return $res;
}
hashes['0x6CDD58146A436083'] = function(p0) {
    const $res = natives.setUseSetDestinationInPauseMap(p0);
    return $res;
}
hashes['0xD1942374085C8469'] = function(p0) {
    const $res = natives.setBlockWantedFlash(p0);
    return $res;
}
hashes['0x60296AF4BA14ABC5'] = function(p0) {
    const $res = natives.addNextMessageToPreviousBriefs(p0);
    return $res;
}
hashes['0x57D760D55F54E071'] = function(p0) {
    const $res = natives.forceNextMessageToPreviousBriefsList(p0);
    return $res;
}
hashes['0xBD12C5EEE184C337'] = function(p0) {
    const $res = natives.setRadarZoomPrecise(p0);
    return $res;
}
hashes['0x096EF57A0C999BBA'] = function(p0) {
    const $res = natives.setRadarZoom(p0);
    return $res;
}
hashes['0xF98E4B3E56AFC7B1'] = function(p0, p1) {
    const $res = natives.setRadarZoomToBlip(p0, p1);
    return $res;
}
hashes['0xCB7CC0D58405AD41'] = function(p0) {
    const $res = natives.setRadarZoomToDistance(p0);
    return $res;
}
hashes['0xD2049635DEB9C375'] = function() {
    const $res = natives.updateRadarZoomToBlip();
    return $res;
}
hashes['0x7C9C91AB74A0360F'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p1)) throw new Error('Argument r should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument g should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument b should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument a should be an array');
    const $res = natives.getHudColour(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    p4[0] = $res[4];
    return $res[0];
}
hashes['0xD68A5FF8A3A89874'] = function(p0, p1, p2, p3) {
    const $res = natives.setScriptVariableHudColour(p0, p1, p2, p3);
    return $res;
}
hashes['0x16A304E6CB2BFAB9'] = function(p0, p1, p2, p3) {
    const $res = natives.setSecondScriptVariableHudColour(p0, p1, p2, p3);
    return $res;
}
hashes['0x1CCC708F0F850613'] = function(p0, p1) {
    const $res = natives.replaceHudColour(p0, p1);
    return $res;
}
hashes['0xF314CF4F0211894E'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.replaceHudColourWithRgba(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x1DFEDD15019315A9'] = function(p0) {
    const $res = natives.setAbilityBarVisibility(p0);
    return $res;
}
hashes['0x889329C80FE5963C'] = function(p0) {
    const $res = natives.setAllowAbilityBar(p0);
    return $res;
}
hashes['0x02CFBA0C9E9275CE'] = function(p0) {
    const $res = natives.flashAbilityBar(p0);
    return $res;
}
hashes['0x9969599CCFF5D85E'] = function(p0, p1) {
    const $res = natives.setAbilityBarValue(p0, p1);
    return $res;
}
hashes['0xA18AFB39081B6A1F'] = function(p0) {
    const $res = natives.flashWantedDisplay(p0);
    return $res;
}
hashes['0xBA8D65C1C65702E5'] = function(p0) {
    const $res = natives.forceOffWantedStarFlash(p0);
    return $res;
}
hashes['0x2ACCB195F3CCD9DE'] = function(p0) {
    const $res = natives.setCustomMpHudColor(p0);
    return $res;
}
hashes['0xDB88A37483346780'] = function(p0, p1) {
    const $res = natives.getRenderedCharacterHeight(p0, p1);
    return $res;
}
hashes['0x07C837F9A01C34C9'] = function(p0, p1) {
    const $res = natives.setTextScale(p0, p1);
    return $res;
}
hashes['0xBE6B23FFA53FB442'] = function(p0, p1, p2, p3) {
    const $res = natives.setTextColour(p0, p1, p2, p3);
    return $res;
}
hashes['0xC02F4DBFB51D988B'] = function(p0) {
    const $res = natives.setTextCentre(p0);
    return $res;
}
hashes['0x6B3C4650BC8BEE47'] = function(p0) {
    const $res = natives.setTextRightJustify(p0);
    return $res;
}
hashes['0x4E096588B13FFECA'] = function(p0) {
    const $res = natives.setTextJustification(p0);
    return $res;
}
hashes['0x63145D9C883A1A70'] = function(p0, p1) {
    const $res = natives.setTextWrap(p0, p1);
    return $res;
}
hashes['0xA50ABC31E3CDFAFF'] = function(p0) {
    const $res = natives.setTextLeading(p0);
    return $res;
}
hashes['0x038C1F517D7FDCF8'] = function(p0) {
    const $res = natives.setTextProportional(p0);
    return $res;
}
hashes['0x66E0276CC5F6B9DA'] = function(p0) {
    const $res = natives.setTextFont(p0);
    return $res;
}
hashes['0x1CA3E9EAC9D93E5E'] = function() {
    const $res = natives.setTextDropShadow();
    return $res;
}
hashes['0x465C84BC39F1C351'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setTextDropshadow(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x2513DFB0FB8400FE'] = function() {
    const $res = natives.setTextOutline();
    return $res;
}
hashes['0x441603240D202FA6'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setTextEdge(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x5F15302936E07111'] = function(p0) {
    const $res = natives.setTextRenderId(p0);
    return $res;
}
hashes['0x52F0982D7FD156B6'] = function() {
    const $res = natives.getDefaultScriptRendertargetRenderId();
    return $res;
}
hashes['0x57D9C12635E25CE3'] = function(p0, p1) {
    const $res = natives.registerNamedRendertarget(p0, p1);
    return $res;
}
hashes['0x78DCDC15C9F116B4'] = function(p0) {
    const $res = natives.isNamedRendertargetRegistered(p0);
    return $res;
}
hashes['0xE9F6FFE837354DD4'] = function(p0) {
    const $res = natives.releaseNamedRendertarget(p0);
    return $res;
}
hashes['0xF6C09E276AEB3F2D'] = function(p0) {
    const $res = natives.linkNamedRendertarget(p0);
    return $res;
}
hashes['0x1A6478B61C6BDC3B'] = function(p0) {
    const $res = natives.getNamedRendertargetRenderId(p0);
    return $res;
}
hashes['0x113750538FA31298'] = function(p0) {
    const $res = natives.isNamedRendertargetLinked(p0);
    return $res;
}
hashes['0x8DFCED7A656F8802'] = function(p0) {
    const $res = natives.clearHelp(p0);
    return $res;
}
hashes['0xDAD37F45428801AE'] = function() {
    const $res = natives.isHelpMessageOnScreen();
    return $res;
}
hashes['0x214CD562A939246A'] = function() {
    const $res = natives.hasScriptHiddenHelpThisFrame();
    return $res;
}
hashes['0x4D79439A6B55AC67'] = function() {
    const $res = natives.isHelpMessageBeingDisplayed();
    return $res;
}
hashes['0x327EDEEEAC55C369'] = function() {
    const $res = natives.isHelpMessageFadingOut();
    return $res;
}
hashes['0xB9C362BABECDDC7A'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setHelpMessageStyle(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x4A9923385BDB9DAD'] = function() {
    const $res = natives.getStandardBlipEnumId();
    return $res;
}
hashes['0x186E5D252FA50E7D'] = function() {
    const $res = natives.getWaypointBlipEnumId();
    return $res;
}
hashes['0x9A3FF3DE163034E8'] = function() {
    const $res = natives.getNumberOfActiveBlips();
    return $res;
}
hashes['0x14F96AA50D6FBEA7'] = function(p0) {
    const $res = natives.getNextBlipInfoId(p0);
    return $res;
}
hashes['0x1BEDE233E6CD2A1F'] = function(p0) {
    const $res = natives.getFirstBlipInfoId(p0);
    return $res;
}
hashes['0xD484BF71050CA1EE'] = function(p0) {
    const $res = natives.getClosestBlipInfoId(p0);
    return $res;
}
hashes['0xFA7C7F0AADF25D09'] = function(p0) {
    const $res = natives.getBlipInfoIdCoord(p0);
    return new mp.Vector3($res);
}
hashes['0x1E314167F701DC3B'] = function(p0) {
    const $res = natives.getBlipInfoIdDisplay(p0);
    return $res;
}
hashes['0xBE9B0959FFD0779B'] = function(p0) {
    const $res = natives.getBlipInfoIdType(p0);
    return $res;
}
hashes['0x4BA4E2553AFEDC2C'] = function(p0) {
    const $res = natives.getBlipInfoIdEntityIndex(p0);
    return $res;
}
hashes['0x9B6786E4C03DD382'] = function(p0) {
    const $res = natives.getBlipInfoIdPickupIndex(p0);
    return $res;
}
hashes['0xBC8DBDCA2436F7E8'] = function(p0) {
    const $res = natives.getBlipFromEntity(p0);
    return $res;
}
hashes['0x46818D79B1F7499A'] = function(p0, p1, p2, p3) {
    const $res = natives.addBlipForRadius(p0, p1, p2, p3);
    return $res;
}
hashes['0xCE5D0E5E315DB238'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.addBlipForArea(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x5CDE92C702A8FCE7'] = function(p0) {
    const $res = natives.addBlipForEntity(p0);
    return $res;
}
hashes['0xBE339365C863BD36'] = function(p0) {
    const $res = natives.addBlipForPickup(p0);
    return $res;
}
hashes['0x5A039BB0BCA604B6'] = function(p0, p1, p2) {
    const $res = natives.addBlipForCoord(p0, p1, p2);
    return $res;
}
hashes['0x72DD432F3CDFC0EE'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.triggerSonarBlip(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x60734CC207C9833C'] = function(p0) {
    const $res = natives.allowSonarBlips(p0);
    return $res;
}
hashes['0xAE2AF67E9D9AF65D'] = function(p0, p1, p2, p3) {
    const $res = natives.setBlipCoords(p0, p1, p2, p3);
    return $res;
}
hashes['0x586AFE3FF72D996E'] = function(p0) {
    const $res = natives.getBlipCoords(p0);
    return new mp.Vector3($res);
}
hashes['0xDF735600A4696DAF'] = function(p0, p1) {
    const $res = natives.setBlipSprite(p0, p1);
    return $res;
}
hashes['0x1FC877464A04FC4F'] = function(p0) {
    const $res = natives.getBlipSprite(p0);
    return $res;
}
hashes['0x9FCB3CBFB3EAD69A'] = function(p0, p1) {
    const $res = natives.setCopBlipSprite(p0, p1);
    return $res;
}
hashes['0xB7B873520C84C118'] = function() {
    const $res = natives.setCopBlipSpriteAsStandard();
    return $res;
}
hashes['0xEAA0FFE120D92784'] = function(p0, p1) {
    const $res = natives.setBlipNameFromTextFile(p0, p1);
    return $res;
}
hashes['0x127DE7B20C60A6A3'] = function(p0, p1) {
    const $res = natives.setBlipNameToPlayerName(p0, p1);
    return $res;
}
hashes['0x45FF974EEE1C8734'] = function(p0, p1) {
    const $res = natives.setBlipAlpha(p0, p1);
    return $res;
}
hashes['0x970F608F0EE6C885'] = function(p0) {
    const $res = natives.getBlipAlpha(p0);
    return $res;
}
hashes['0x2AEE8F8390D2298C'] = function(p0, p1, p2) {
    const $res = natives.setBlipFade(p0, p1, p2);
    return $res;
}
hashes['0x2C173AE2BDB9385E'] = function(p0) {
    const $res = natives.getBlipFadeDirection(p0);
    return $res;
}
hashes['0xF87683CDF73C3F6E'] = function(p0, p1) {
    const $res = natives.setBlipRotation(p0, p1);
    return $res;
}
hashes['0xA8B6AFDAC320AC87'] = function(p0, p1) {
    const $res = natives.setBlipRotationWithFloat(p0, p1);
    return $res;
}
hashes['0x003E92BA477F9D7F'] = function(p0) {
    const $res = natives.getBlipRotation(p0);
    return $res;
}
hashes['0xD3CD6FD297AE87CC'] = function(p0, p1) {
    const $res = natives.setBlipFlashTimer(p0, p1);
    return $res;
}
hashes['0xAA51DB313C010A7E'] = function(p0, p1) {
    const $res = natives.setBlipFlashInterval(p0, p1);
    return $res;
}
hashes['0x03D7FB09E75D6B7E'] = function(p0, p1) {
    const $res = natives.setBlipColour(p0, p1);
    return $res;
}
hashes['0x14892474891E09EB'] = function(p0, p1, p2, p3) {
    const $res = natives.setBlipSecondaryColour(p0, p1, p2, p3);
    return $res;
}
hashes['0xDF729E8D20CF7327'] = function(p0) {
    const $res = natives.getBlipColour(p0);
    return $res;
}
hashes['0x729B5F1EFBC0AAEE'] = function(p0) {
    const $res = natives.getBlipHudColour(p0);
    return $res;
}
hashes['0xDA5F8727EB75B926'] = function(p0) {
    const $res = natives.isBlipShortRange(p0);
    return $res;
}
hashes['0xE41CA53051197A27'] = function(p0) {
    const $res = natives.isBlipOnMinimap(p0);
    return $res;
}
hashes['0xDD2238F57B977751'] = function(p0) {
    const $res = natives.doesBlipHaveGpsRoute(p0);
    return $res;
}
hashes['0x54318C915D27E4CE'] = function(p0, p1) {
    const $res = natives.setBlipHiddenOnLegend(p0, p1);
    return $res;
}
hashes['0xE2590BC29220CEBB'] = function(p0, p1) {
    const $res = natives.setBlipHighDetail(p0, p1);
    return $res;
}
hashes['0x24AC0137444F9FD5'] = function(p0, p1) {
    const $res = natives.setBlipAsMissionCreatorBlip(p0, p1);
    return $res;
}
hashes['0x26F49BF3381D933D'] = function(p0) {
    const $res = natives.isMissionCreatorBlip(p0);
    return $res;
}
hashes['0x5C90988E7C8E1AF4'] = function() {
    const $res = natives.getNewSelectedMissionCreatorBlip();
    return $res;
}
hashes['0x4167EFE0527D706E'] = function() {
    const $res = natives.isHoveringOverMissionCreatorBlip();
    return $res;
}
hashes['0xF1A6C18B35BCADE6'] = function(p0) {
    const $res = natives.showStartMissionInstructionalButton(p0);
    return $res;
}
hashes['0xC772A904CDE1186F'] = function(p0) {
    const $res = natives.showContactInstructionalButton(p0);
    return $res;
}
hashes['0x2916A928514C9827'] = function() {
    const $res = natives.reloadMapMenu();
    return $res;
}
hashes['0xB552929B85FC27EC'] = function(p0, p1) {
    const $res = natives.setBlipMarkerLongDistance(p0, p1);
    return $res;
}
hashes['0xB14552383D39CE3E'] = function(p0, p1) {
    const $res = natives.setBlipFlashes(p0, p1);
    return $res;
}
hashes['0x2E8D9498C56DD0D1'] = function(p0, p1) {
    const $res = natives.setBlipFlashesAlternate(p0, p1);
    return $res;
}
hashes['0xA5E41FD83AD6CEF0'] = function(p0) {
    const $res = natives.isBlipFlashing(p0);
    return $res;
}
hashes['0xBE8BE4FE60E27B72'] = function(p0, p1) {
    const $res = natives.setBlipAsShortRange(p0, p1);
    return $res;
}
hashes['0xD38744167B2FA257'] = function(p0, p1) {
    const $res = natives.setBlipScale(p0, p1);
    return $res;
}
hashes['0xCD6524439909C979'] = function(p0, p1, p2) {
    const $res = natives.setBlipScale2d(p0, p1, p2);
    return $res;
}
hashes['0xAE9FC9EF6A9FAC79'] = function(p0, p1) {
    const $res = natives.setBlipPriority(p0, p1);
    return $res;
}
hashes['0x9029B2F3DA924928'] = function(p0, p1) {
    const $res = natives.setBlipDisplay(p0, p1);
    return $res;
}
hashes['0x234CDD44D996FD9A'] = function(p0, p1) {
    const $res = natives.setBlipCategory(p0, p1);
    return $res;
}
hashes['0x86A652570E5F25DD'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument blip should be an array');
    const $res = natives.removeBlip();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x6F6F290102C02AB4'] = function(p0, p1) {
    const $res = natives.setBlipAsFriendly(p0, p1);
    return $res;
}
hashes['0x742D6FD43115AF73'] = function(p0) {
    const $res = natives.pulseBlip(p0);
    return $res;
}
hashes['0xA3C0B359DCB848B6'] = function(p0, p1) {
    const $res = natives.showNumberOnBlip(p0, p1);
    return $res;
}
hashes['0x532CFF637EF80148'] = function(p0) {
    const $res = natives.hideNumberOnBlip(p0);
    return $res;
}
hashes['0x75A16C3DA34F1245'] = function(p0, p1) {
    const $res = natives.showHeightOnBlip(p0, p1);
    return $res;
}
hashes['0x74513EA3E505181E'] = function(p0, p1) {
    const $res = natives.showTickOnBlip(p0, p1);
    return $res;
}
hashes['0xCAC2031EBF79B1A8'] = function(p0, p1) {
    const $res = natives.showGoldTickOnBlip(p0, p1);
    return $res;
}
hashes['0x19BD6E3C0E16A8FA'] = function(p0, p1) {
    const $res = natives.showForSaleIconOnBlip(p0, p1);
    return $res;
}
hashes['0x5FBCA48327B914DF'] = function(p0, p1) {
    const $res = natives.showHeadingIndicatorOnBlip(p0, p1);
    return $res;
}
hashes['0xB81656BC81FE24D1'] = function(p0, p1) {
    const $res = natives.showOutlineIndicatorOnBlip(p0, p1);
    return $res;
}
hashes['0x23C3EB807312F01A'] = function(p0, p1) {
    const $res = natives.showFriendIndicatorOnBlip(p0, p1);
    return $res;
}
hashes['0xDCFB5D4DB8BF367E'] = function(p0, p1) {
    const $res = natives.showCrewIndicatorOnBlip(p0, p1);
    return $res;
}
hashes['0xC4278F70131BAA6D'] = function(p0, p1) {
    const $res = natives.setBlipExtendedHeightThreshold(p0, p1);
    return $res;
}
hashes['0x4B5B620C9B59ED34'] = function(p0, p1) {
    const $res = natives.setBlipShortHeightThreshold(p0, p1);
    return $res;
}
hashes['0x2C9F302398E13141'] = function(p0, p1) {
    const $res = natives.setBlipUseHeightIndicatorOnEdge(p0, p1);
    return $res;
}
hashes['0x2B6D467DAB714E8D'] = function(p0, p1) {
    const $res = natives.setBlipAsMinimalOnEdge(p0, p1);
    return $res;
}
hashes['0x25615540D894B814'] = function(p0, p1) {
    const $res = natives.setRadiusBlipEdge(p0, p1);
    return $res;
}
hashes['0xA6DB27D19ECBB7DA'] = function(p0) {
    const $res = natives.doesBlipExist(p0);
    return $res;
}
hashes['0xA7E4E2D361C2627F'] = function() {
    const $res = natives.setWaypointOff();
    return $res;
}
hashes['0xD8E694757BCEA8E9'] = function() {
    const $res = natives.deleteWaypointsFromThisPlayer();
    return $res;
}
hashes['0x81FA173F170560D1'] = function() {
    const $res = natives.refreshWaypoint();
    return $res;
}
hashes['0x1DD1F58F493F1DA5'] = function() {
    const $res = natives.isWaypointActive();
    return $res;
}
hashes['0xFE43368D2AA4F2FC'] = function(p0, p1) {
    const $res = natives.setNewWaypoint(p0, p1);
    return $res;
}
hashes['0xB203913733F27884'] = function(p0, p1) {
    const $res = natives.setBlipBright(p0, p1);
    return $res;
}
hashes['0x13127EC3665E8EE1'] = function(p0, p1, p2) {
    const $res = natives.setBlipShowCone(p0, p1, p2);
    return $res;
}
hashes['0xC594B315EDF2D4AF'] = function(p0) {
    const $res = natives.removeCopBlipFromPed(p0);
    return $res;
}
hashes['0xF83D0FEBE75E62C9'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.setupFakeConeData(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x35A3CD97B2C0A6D2'] = function(p0) {
    const $res = natives.removeFakeConeData(p0);
    return $res;
}
hashes['0x8410C5E0CD847B9D'] = function() {
    const $res = natives.clearFakeConeArray();
    return $res;
}
hashes['0x75A9A10948D1DEA6'] = function(p0, p1, p2) {
    const $res = natives.setMinimapComponent(p0, p1, p2);
    return $res;
}
hashes['0x6B50FC8749632EC1'] = function(p0) {
    const $res = natives.setMinimapSonarSweep(p0);
    return $res;
}
hashes['0x60E892BA4F5BDCA4'] = function() {
    const $res = natives.showAccountPicker();
    return $res;
}
hashes['0xDCD4EC3F419D02FA'] = function() {
    const $res = natives.getMainPlayerBlipId();
    return $res;
}
hashes['0x41350B4FC28E3941'] = function(p0) {
    const $res = natives.setPmWarningscreenActive(p0);
    return $res;
}
hashes['0x4B0311D3CDC4648F'] = function() {
    const $res = natives.hideLoadingOnFadeThisFrame();
    return $res;
}
hashes['0x59E727A1C9D3E31A'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setRadarAsInteriorThisFrame(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x504DFE62A1692296'] = function(p0) {
    const $res = natives.setInsideVerySmallInterior(p0);
    return $res;
}
hashes['0x7EC8ABA5E74B3D7A'] = function(p0) {
    const $res = natives.setInsideVeryLargeInterior(p0);
    return $res;
}
hashes['0xE81B7D2A3DAB2D81'] = function() {
    const $res = natives.setRadarAsExteriorThisFrame();
    return $res;
}
hashes['0x77E2DD177910E1CF'] = function(p0, p1) {
    const $res = natives.setFakePausemapPlayerPositionThisFrame(p0, p1);
    return $res;
}
hashes['0xA17784FCA9548D15'] = function(p0, p1, p2) {
    const $res = natives.setFakeGpsPlayerPositionThisFrame(p0, p1, p2);
    return $res;
}
hashes['0x9049FE339D5F6F6F'] = function() {
    const $res = natives.isPausemapInInteriorMode();
    return $res;
}
hashes['0x5FBAE526203990C9'] = function() {
    const $res = natives.hideMinimapExteriorMapThisFrame();
    return $res;
}
hashes['0x20FE7FDFEEAD38C0'] = function() {
    const $res = natives.hideMinimapInteriorMapThisFrame();
    return $res;
}
hashes['0x5E1460624D194A38'] = function(p0) {
    const $res = natives.setUseIslandMap(p0);
    return $res;
}
hashes['0x6D14BFDC33B34F55'] = function() {
    const $res = natives.dontTiltMinimapThisFrame();
    return $res;
}
hashes['0x89DA85D949CE57A0'] = function() {
    const $res = natives.dontZoomMinimapWhenRunningThisFrame();
    return $res;
}
hashes['0x55F5A5F07134DE60'] = function() {
    const $res = natives.dontZoomMinimapWhenSnipingThisFrame();
    return $res;
}
hashes['0xC3B07BA00A83B0F1'] = function(p0) {
    const $res = natives.setWidescreenFormat(p0);
    return $res;
}
hashes['0x276B6CE369C33678'] = function(p0) {
    const $res = natives.displayAreaName(p0);
    return $res;
}
hashes['0x96DEC8D5430208B7'] = function(p0) {
    const $res = natives.displayCash(p0);
    return $res;
}
hashes['0x170F541E1CADD1DE'] = function(p0) {
    const $res = natives.useFakeMpCash(p0);
    return $res;
}
hashes['0x0772DF77852C2E30'] = function(p0, p1) {
    const $res = natives.changeFakeMpCash(p0, p1);
    return $res;
}
hashes['0xA5E78BA2B1331C55'] = function(p0) {
    const $res = natives.displayAmmoThisFrame(p0);
    return $res;
}
hashes['0x73115226F4814E62'] = function() {
    const $res = natives.displaySniperScopeThisFrame();
    return $res;
}
hashes['0x719FF505F097FD20'] = function() {
    const $res = natives.hideHudAndRadarThisFrame();
    return $res;
}
hashes['0xE67C6DFD386EA5E7'] = function(p0) {
    const $res = natives.allowDisplayOfMultiplayerCashText(p0);
    return $res;
}
hashes['0xC2D15BEF167E27BC'] = function() {
    const $res = natives.setMultiplayerWalletCash();
    return $res;
}
hashes['0x95CF81BD06EE1887'] = function() {
    const $res = natives.removeMultiplayerWalletCash();
    return $res;
}
hashes['0xDD21B55DF695CD0A'] = function() {
    const $res = natives.setMultiplayerBankCash();
    return $res;
}
hashes['0xC7C6789AA1CFEDD0'] = function() {
    const $res = natives.removeMultiplayerBankCash();
    return $res;
}
hashes['0xFD1D220394BCB824'] = function(p0, p1) {
    const $res = natives.setMultiplayerHudCash(p0, p1);
    return $res;
}
hashes['0x968F270E39141ECA'] = function() {
    const $res = natives.removeMultiplayerHudCash();
    return $res;
}
hashes['0xD46923FC481CA285'] = function() {
    const $res = natives.hideHelpTextThisFrame();
    return $res;
}
hashes['0x801879A9B4F4B2FB'] = function() {
    const $res = natives.isImeInProgress();
    return $res;
}
hashes['0x960C9FF8F616E41C'] = function(p0, p1) {
    const $res = natives.displayHelpTextThisFrame(p0, p1);
    return $res;
}
hashes['0xEB354E5376BC81A7'] = function(p0) {
    const $res = natives.hudForceWeaponWheel(p0);
    return $res;
}
hashes['0x488043841BBE156F'] = function() {
    const $res = natives.hudForceSpecialVehicleWeaponWheel();
    return $res;
}
hashes['0x0AFC4AF510774B47'] = function() {
    const $res = natives.blockWeaponWheelThisFrame();
    return $res;
}
hashes['0xA48931185F0536FE'] = function() {
    const $res = natives.hudGetWeaponWheelCurrentlyHighlighted();
    return $res;
}
hashes['0x72C1056D678BB7D8'] = function(p0) {
    const $res = natives.hudSetWeaponWheelTopSlot(p0);
    return $res;
}
hashes['0xA13E93403F26C812'] = function(p0) {
    const $res = natives.hudGetWeaponWheelTopSlot(p0);
    return $res;
}
hashes['0x14C9FDCC41F81F63'] = function(p0) {
    const $res = natives.hudShowingCharacterSwitchSelection(p0);
    return $res;
}
hashes['0x5B440763A4C8D15B'] = function(p0, p1) {
    const $res = natives.setGpsFlags(p0, p1);
    return $res;
}
hashes['0x21986729D6A3A830'] = function() {
    const $res = natives.clearGpsFlags();
    return $res;
}
hashes['0x1EAC5F91BCBC5073'] = function(p0) {
    const $res = natives.setRaceTrackRender(p0);
    return $res;
}
hashes['0x7AA5B4CE533C858B'] = function() {
    const $res = natives.clearGpsRaceTrack();
    return $res;
}
hashes['0xDB34E8D56FC13B08'] = function(p0, p1, p2) {
    const $res = natives.startGpsCustomRoute(p0, p1, p2);
    return $res;
}
hashes['0x311438A071DD9B1A'] = function(p0, p1, p2) {
    const $res = natives.addPointToGpsCustomRoute(p0, p1, p2);
    return $res;
}
hashes['0x900086F371220B6F'] = function(p0, p1, p2) {
    const $res = natives.setGpsCustomRouteRender(p0, p1, p2);
    return $res;
}
hashes['0xE6DE0561D9232A64'] = function() {
    const $res = natives.clearGpsCustomRoute();
    return $res;
}
hashes['0x3D3D15AF7BCAAF83'] = function(p0, p1, p2) {
    const $res = natives.startGpsMultiRoute(p0, p1, p2);
    return $res;
}
hashes['0xA905192A6781C41B'] = function(p0, p1, p2) {
    const $res = natives.addPointToGpsMultiRoute(p0, p1, p2);
    return $res;
}
hashes['0x3DDA37128DD1ACA8'] = function(p0) {
    const $res = natives.setGpsMultiRouteRender(p0);
    return $res;
}
hashes['0x67EEDEA1B9BAFD94'] = function() {
    const $res = natives.clearGpsMultiRoute();
    return $res;
}
hashes['0xFF4FB7C8CDFA3DA7'] = function() {
    const $res = natives.clearGpsPlayerWaypoint();
    return $res;
}
hashes['0x320D0E0D936A0E9B'] = function(p0) {
    const $res = natives.setGpsFlashes(p0);
    return $res;
}
hashes['0x7B21E0BB01E8224A'] = function(p0) {
    const $res = natives.setPlayerIconColour(p0);
    return $res;
}
hashes['0xF2DD778C22B15BDA'] = function() {
    const $res = natives.flashMinimapDisplay();
    return $res;
}
hashes['0x6B1DE27EE78E6A19'] = function(p0) {
    const $res = natives.flashMinimapDisplayWithColor(p0);
    return $res;
}
hashes['0x6AFDFB93754950C7'] = function(p0) {
    const $res = natives.toggleStealthRadar(p0);
    return $res;
}
hashes['0x1A5CD7752DD28CD3'] = function(p0, p1) {
    const $res = natives.setMinimapInSpectatorMode(p0, p1);
    return $res;
}
hashes['0x5F28ECF5FC84772F'] = function(p0, p1) {
    const $res = natives.setMissionName(p0, p1);
    return $res;
}
hashes['0xE45087D85F468BC2'] = function(p0, p1) {
    const $res = natives.setMissionNameForUgcMission(p0, p1);
    return $res;
}
hashes['0x817B86108EB94E51'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.setDescriptionForUgcMissionEightStrings(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x58FADDED207897DC'] = function(p0) {
    const $res = natives.setMinimapBlockWaypoint(p0);
    return $res;
}
hashes['0x9133955F1A2DA957'] = function(p0) {
    const $res = natives.setMinimapInPrologue(p0);
    return $res;
}
hashes['0xF8DEE0A5600CBB93'] = function(p0) {
    const $res = natives.setMinimapHideFow(p0);
    return $res;
}
hashes['0xE0130B41D3CF4574'] = function() {
    const $res = natives.getMinimapFowDiscoveryRatio();
    return $res;
}
hashes['0x6E31B91145873922'] = function(p0, p1, p2) {
    const $res = natives.getMinimapFowCoordinateIsRevealed(p0, p1, p2);
    return $res;
}
hashes['0x62E849B7EB28E770'] = function(p0) {
    const $res = natives.setMinimapFowDoNotUpdate(p0);
    return $res;
}
hashes['0x0923DBF87DFF735E'] = function(p0, p1, p2) {
    const $res = natives.setMinimapFowRevealCoordinate(p0, p1, p2);
    return $res;
}
hashes['0x71BDB63DBAF8DA59'] = function(p0) {
    const $res = natives.setMinimapGolfCourse(p0);
    return $res;
}
hashes['0x35EDD5B2E3FF01C0'] = function() {
    const $res = natives.setMinimapGolfCourseOff();
    return $res;
}
hashes['0x299FAEBB108AE05B'] = function(p0) {
    const $res = natives.lockMinimapAngle(p0);
    return $res;
}
hashes['0x8183455E16C42E3A'] = function() {
    const $res = natives.unlockMinimapAngle();
    return $res;
}
hashes['0x1279E861A329E73F'] = function(p0, p1) {
    const $res = natives.lockMinimapPosition(p0, p1);
    return $res;
}
hashes['0x3E93E06DB8EF1F30'] = function() {
    const $res = natives.unlockMinimapPosition();
    return $res;
}
hashes['0xD201F3FF917A506D'] = function(p0, p1, p2) {
    const $res = natives.setFakeMinimapMaxAltimeterHeight(p0, p1, p2);
    return $res;
}
hashes['0x3F5CC444DCAAA8F2'] = function(p0, p1, p2) {
    const $res = natives.setHealthHudDisplayValues(p0, p1, p2);
    return $res;
}
hashes['0x975D66A0BC17064C'] = function(p0) {
    const $res = natives.setMaxHealthHudDisplay(p0);
    return $res;
}
hashes['0x06A320535F5F0248'] = function(p0) {
    const $res = natives.setMaxArmourHudDisplay(p0);
    return $res;
}
hashes['0x231C8F89D0539D8F'] = function(p0, p1) {
    const $res = natives.setBigmapActive(p0, p1);
    return $res;
}
hashes['0xBC4C9EA5391ECC0D'] = function(p0) {
    const $res = natives.isHudComponentActive(p0);
    return $res;
}
hashes['0xDD100EB17A94FF65'] = function(p0) {
    const $res = natives.isScriptedHudComponentActive(p0);
    return $res;
}
hashes['0xE374C498D8BADC14'] = function(p0) {
    const $res = natives.hideScriptedHudComponentThisFrame(p0);
    return $res;
}
hashes['0x4F38DCA127DAAEA2'] = function(p0) {
    const $res = natives.showScriptedHudComponentThisFrame(p0);
    return $res;
}
hashes['0x09C0403ED9A751C2'] = function(p0) {
    const $res = natives.isScriptedHudComponentHiddenThisFrame(p0);
    return $res;
}
hashes['0x6806C51AD12B83B8'] = function(p0) {
    const $res = natives.hideHudComponentThisFrame(p0);
    return $res;
}
hashes['0x0B4DF1FA60C0E664'] = function(p0) {
    const $res = natives.showHudComponentThisFrame(p0);
    return $res;
}
hashes['0xA4DEDE28B1814289'] = function() {
    const $res = natives.hideStreetAndCarNamesThisFrame();
    return $res;
}
hashes['0x12782CE0A636E9F0'] = function() {
    const $res = natives.resetReticuleValues();
    return $res;
}
hashes['0x450930E616475D0D'] = function(p0) {
    const $res = natives.resetHudComponentValues(p0);
    return $res;
}
hashes['0xAABB1F56E2A17CED'] = function(p0, p1, p2) {
    const $res = natives.setHudComponentPosition(p0, p1, p2);
    return $res;
}
hashes['0x223CA69A8C4417FD'] = function(p0) {
    const $res = natives.getHudComponentPosition(p0);
    return new mp.Vector3($res);
}
hashes['0xB57D8DD645CFA2CF'] = function() {
    const $res = natives.clearReminderMessage();
    return $res;
}
hashes['0xF9904D11F1ACBEC3'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p3)) throw new Error('Argument screenX should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument screenY should be an array');
    const $res = natives.getScreenCoordFromWorldCoord2(p0, p1, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p3[0] = $res[1];
    p4[0] = $res[2];
    return $res[0];
}
hashes['0x523A590C1A3CC0D3'] = function() {
    const $res = natives.openReportugcMenu();
    return $res;
}
hashes['0xEE4C0E6DBC6F2C6F'] = function() {
    const $res = natives.forceCloseReportugcMenu();
    return $res;
}
hashes['0x9135584D09A3437E'] = function() {
    const $res = natives.isReportugcMenuOpen();
    return $res;
}
hashes['0x2432784ACA090DA4'] = function(p0) {
    const $res = natives.isFloatingHelpTextOnScreen(p0);
    return $res;
}
hashes['0x7679CC1BCEBE3D4C'] = function(p0, p1, p2) {
    const $res = natives.setFloatingHelpTextScreenPosition(p0, p1, p2);
    return $res;
}
hashes['0x784BA7E0ECEB4178'] = function(p0, p1, p2, p3) {
    const $res = natives.setFloatingHelpTextWorldPosition(p0, p1, p2, p3);
    return $res;
}
hashes['0xB094BC1DB4018240'] = function(p0, p1, p2, p3) {
    const $res = natives.setFloatingHelpTextToEntity(p0, p1, p2, p3);
    return $res;
}
hashes['0x788E7FD431BD67F1'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setFloatingHelpTextStyle(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x50085246ABD3FEFA'] = function(p0, p1) {
    const $res = natives.clearFloatingHelp(p0, p1);
    return $res;
}
hashes['0x6DD05E9D83EFA4C9'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.createMpGamerTagWithCrewColor(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x6E0EB3EB47C8D7AA'] = function() {
    const $res = natives.isMpGamerTagMovieActive();
    return $res;
}
hashes['0xBFEFE3321A3F5015'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.createFakeMpGamerTag(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x31698AA80E0223F8'] = function(p0) {
    const $res = natives.removeMpGamerTag(p0);
    return $res;
}
hashes['0x4E929E7A5796FD26'] = function(p0) {
    const $res = natives.isMpGamerTagActive(p0);
    return $res;
}
hashes['0x595B5178E412E199'] = function(p0) {
    const $res = natives.isMpGamerTagFree(p0);
    return $res;
}
hashes['0x63BB75ABEDC1F6A0'] = function(p0, p1, p2, p3) {
    const $res = natives.setMpGamerTagVisibility(p0, p1, p2, p3);
    return $res;
}
hashes['0xEE76FF7E6A0166B0'] = function(p0, p1) {
    const $res = natives.setAllMpGamerTagsVisibility(p0, p1);
    return $res;
}
hashes['0xA67F9C46D612B6F1'] = function(p0, p1) {
    const $res = natives.setMpGamerTagsShouldUseVehicleHealth(p0, p1);
    return $res;
}
hashes['0xD29EC58C2F6B5014'] = function(p0, p1) {
    const $res = natives.setMpGamerTagsShouldUsePointsHealth(p0, p1);
    return $res;
}
hashes['0x1563FE35E9928E67'] = function(p0, p1, p2) {
    const $res = natives.setMpGamerTagsPointHealth(p0, p1, p2);
    return $res;
}
hashes['0x613ED644950626AE'] = function(p0, p1, p2) {
    const $res = natives.setMpGamerTagColour(p0, p1, p2);
    return $res;
}
hashes['0x3158C77A7E888AB4'] = function(p0, p1) {
    const $res = natives.setMpGamerTagHealthBarColour(p0, p1);
    return $res;
}
hashes['0xD48FE545CD46F857'] = function(p0, p1, p2) {
    const $res = natives.setMpGamerTagAlpha(p0, p1, p2);
    return $res;
}
hashes['0xCF228E2AA03099C3'] = function(p0, p1) {
    const $res = natives.setMpGamerTagWantedLevel(p0, p1);
    return $res;
}
hashes['0x9C16459B2324B2CF'] = function(p0, p1) {
    const $res = natives.setMpGamerTagNumPackages(p0, p1);
    return $res;
}
hashes['0xDEA2B8283BAA3944'] = function(p0, p1) {
    const $res = natives.setMpGamerTagName(p0, p1);
    return $res;
}
hashes['0xEB709A36958ABE0D'] = function(p0) {
    const $res = natives.isUpdatingMpGamerTagNameAndCrewDetails(p0);
    return $res;
}
hashes['0x7B7723747CCB55B6'] = function(p0, p1) {
    const $res = natives.setMpGamerTagBigText(p0, p1);
    return $res;
}
hashes['0x01A358D9128B7A86'] = function() {
    const $res = natives.getCurrentWebpageId();
    return $res;
}
hashes['0x97D47996FC48CBAD'] = function() {
    const $res = natives.getCurrentWebsiteId();
    return $res;
}
hashes['0xE3B05614DCE1D014'] = function(p0) {
    const $res = natives.getGlobalActionscriptFlag(p0);
    return $res;
}
hashes['0xB99C4E4D9499DF29'] = function(p0) {
    const $res = natives.resetGlobalActionscriptFlag(p0);
    return $res;
}
hashes['0xAF42195A42C63BBA'] = function() {
    const $res = natives.isWarningMessageReadyForControl();
    return $res;
}
hashes['0x7B1776B3B53F8D74'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.setWarningMessage(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xDC38CC1E35B6A5D7'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.setWarningMessageWithHeader(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x701919482C74B5AB'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.setWarningMessageWithHeaderAndSubstringFlags(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x38B55259C2E078ED'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.setWarningMessageWithHeaderExtended(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x15803FEC3B9A872B'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.setWarningMessageWithHeaderAndSubstringFlagsExtended(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x81DF9ABA6C83DFF9'] = function() {
    const $res = natives.getWarningScreenMessageHash();
    return $res;
}
hashes['0x0C5A80A9E096D529'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setWarningMessageOptionItems(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xDAF87174BE7454FF'] = function(p0) {
    const $res = natives.setWarningMessageOptionHighlight(p0);
    return $res;
}
hashes['0x6EF54AB721DC6242'] = function() {
    const $res = natives.removeWarningMessageOptionItems();
    return $res;
}
hashes['0xE18B138FABC53103'] = function() {
    const $res = natives.isWarningMessageActive();
    return $res;
}
hashes['0x7792424AA0EAC32E'] = function() {
    const $res = natives.clearDynamicPauseMenuErrorMessage();
    return $res;
}
hashes['0x5354C5BA2EA868A4'] = function(p0) {
    const $res = natives.customMinimapSetActive(p0);
    return $res;
}
hashes['0x1EAE6DD17B7A5EFA'] = function(p0) {
    const $res = natives.customMinimapSetBlipObject(p0);
    return $res;
}
hashes['0x551DF99658DB6EE8'] = function(p0, p1, p2) {
    const $res = natives.customMinimapCreateBlip(p0, p1, p2);
    return $res;
}
hashes['0x2708FC083123F9FF'] = function() {
    const $res = natives.customMinimapClearBlips();
    return $res;
}
hashes['0x1121BFA1A1A522A8'] = function() {
    const $res = natives.forceSonarBlipsThisFrame();
    return $res;
}
hashes['0x3F0CF9CB7E589B88'] = function() {
    const $res = natives.getNorthBlidIndex();
    return $res;
}
hashes['0x82CEDC33687E1F50'] = function(p0) {
    const $res = natives.displayPlayerNameTagsOnBlips(p0);
    return $res;
}
hashes['0x211C4EF450086857'] = function() {
    const $res = natives.drawFrontendBackgroundThisFrame();
    return $res;
}
hashes['0xBF4F34A85CA2970C'] = function() {
    const $res = natives.drawHudOverFadeThisFrame();
    return $res;
}
hashes['0xEF01D36B9C9D0C7B'] = function(p0, p1, p2) {
    const $res = natives.activateFrontendMenu(p0, p1, p2);
    return $res;
}
hashes['0x10706DC6AD2D49C0'] = function(p0, p1) {
    const $res = natives.restartFrontendMenu(p0, p1);
    return $res;
}
hashes['0x2309595AD6145265'] = function() {
    const $res = natives.getCurrentFrontendMenuVersion();
    return $res;
}
hashes['0xDF47FC56C71569CF'] = function(p0) {
    const $res = natives.setPauseMenuActive(p0);
    return $res;
}
hashes['0x6D3465A73092F0E6'] = function() {
    const $res = natives.disableFrontendThisFrame();
    return $res;
}
hashes['0xBA751764F0821256'] = function() {
    const $res = natives.suppressFrontendRenderingThisFrame();
    return $res;
}
hashes['0xCC3FDDED67BCFC63'] = function() {
    const $res = natives.allowPauseWhenNotInStateOfPlayThisFrame();
    return $res;
}
hashes['0x745711A75AB09277'] = function(p0) {
    const $res = natives.setFrontendActive(p0);
    return $res;
}
hashes['0xB0034A223497FFCB'] = function() {
    const $res = natives.isPauseMenuActive();
    return $res;
}
hashes['0x2F057596F2BD0061'] = function() {
    const $res = natives.isStorePendingNetworkShutdownToOpen();
    return $res;
}
hashes['0x272ACD84970869C5'] = function() {
    const $res = natives.getPauseMenuState();
    return $res;
}
hashes['0x5BFF36D6ED83E0AE'] = function() {
    const $res = natives.getPauseMenuPosition();
    return new mp.Vector3($res);
}
hashes['0x1C491717107431C7'] = function() {
    const $res = natives.isPauseMenuRestarting();
    return $res;
}
hashes['0x2162C446DFDF38FD'] = function(p0) {
    const $res = natives.forceScriptedGfxWhenFrontendActive(p0);
    return $res;
}
hashes['0x77F16B447824DA6C'] = function(p0) {
    const $res = natives.pauseMenuceptionGoDeeper(p0);
    return $res;
}
hashes['0xCDCA26E80FAECB8F'] = function() {
    const $res = natives.pauseMenuceptionTheKick();
    return $res;
}
hashes['0x2DE6C5E2E996F178'] = function(p0) {
    const $res = natives.pauseToggleFullscreenMap(p0);
    return $res;
}
hashes['0xDD564BDD0472C936'] = function(p0) {
    const $res = natives.pauseMenuActivateContext(p0);
    return $res;
}
hashes['0x444D8CF241EC25C5'] = function(p0) {
    const $res = natives.pauseMenuDeactivateContext(p0);
    return $res;
}
hashes['0x84698AB38D0C6636'] = function(p0) {
    const $res = natives.pauseMenuIsContextActive(p0);
    return $res;
}
hashes['0x2A25ADC48F87841F'] = function() {
    const $res = natives.pauseMenuIsContextMenuActive();
    return $res;
}
hashes['0xDE03620F8703A9DF'] = function() {
    const $res = natives.pauseMenuGetHairColourIndex();
    return $res;
}
hashes['0x359AF31A4B52F5ED'] = function() {
    const $res = natives.pauseMenuGetMouseHoverIndex();
    return $res;
}
hashes['0x13C4B962653A5280'] = function() {
    const $res = natives.pauseMenuGetMouseHoverUniqueId();
    return $res;
}
hashes['0xC8E1071177A23BE5'] = function(p0, p1, p2) {
    const $res = natives.pauseMenuGetMouseClickEvent(p0, p1, p2);
    return $res;
}
hashes['0x4895BDEA16E7C080'] = function(p0) {
    const $res = natives.pauseMenuRedrawInstructionalButtons(p0);
    return $res;
}
hashes['0xC78E239AC5B2DDB9'] = function(p0, p1, p2) {
    const $res = natives.pauseMenuSetBusySpinner(p0, p1, p2);
    return $res;
}
hashes['0xF06EBB91A81E09E3'] = function(p0) {
    const $res = natives.pauseMenuSetWarnOnTabChange(p0);
    return $res;
}
hashes['0x3BAB9A4E4F2FF5C7'] = function() {
    const $res = natives.isFrontendReadyForControl();
    return $res;
}
hashes['0xEC9264727EEC0F28'] = function() {
    const $res = natives.takeControlOfFrontend();
    return $res;
}
hashes['0x14621BB1DF14E2B2'] = function() {
    const $res = natives.releaseControlOfFrontend();
    return $res;
}
hashes['0x66E7CB63C97B7D20'] = function() {
    const $res = natives.codeWantsScriptToTakeControl();
    return $res;
}
hashes['0x593FEAE1F73392D4'] = function() {
    const $res = natives.getScreenCodeWantsScriptToControl();
    return $res;
}
hashes['0x4E3CD0EF8A489541'] = function() {
    const $res = natives.isNavigatingMenuContent();
    return $res;
}
hashes['0xF284AC67940C6812'] = function() {
    const $res = natives.hasMenuTriggerEventOccurred();
    return $res;
}
hashes['0x2E22FEFA0100275E'] = function() {
    const $res = natives.hasMenuLayoutChangedEventOccurred();
    return $res;
}
hashes['0x0CF54F20DE43879C'] = function(p0) {
    const $res = natives.setSavegameListUniqueId(p0);
    return $res;
}
hashes['0x36C1451A88A09630'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument lastItemMenuId should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument selectedItemUniqueId should be an array');
    const $res = natives.getMenuTriggerEventDetails();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    return $res[0];
}
hashes['0x7E17BE53E1AAABAF'] = function(p0, p1, p2) {
    if (!Array.isArray(p0)) throw new Error('Argument lastItemMenuId should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument selectedItemMenuId should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument selectedItemUniqueId should be an array');
    const $res = natives.getMenuLayoutChangedEventDetails();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    p2[0] = $res[3];
    return $res[0];
}
hashes['0xA238192F33110615'] = function(p0, p1, p2) {
    if (!Array.isArray(p0)) throw new Error('Argument r should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument g should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument b should be an array');
    const $res = natives.getPmPlayerCrewColor();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    p2[0] = $res[3];
    return $res[0];
}
hashes['0xEF4CED81CEBEDC6D'] = function(p0, p1) {
    const $res = natives.getMenuPedIntStat(p0, p1);
    return $res;
}
hashes['0xCA6B2F7CE32AB653'] = function(p0, p1, p2) {
    const $res = natives.getCharacterMenuPedIntStat(p0, p1, p2);
    return $res;
}
hashes['0x90A6526CF0381030'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument outValue should be an array');
    const $res = natives.getMenuPedMaskedIntStat(p0, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x24A49BEAF468DC90'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.getCharacterMenuPedMaskedIntStat(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x5FBD7095FE7AE57F'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument outValue should be an array');
    const $res = natives.getMenuPedFloatStat(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x8F08017F9D7C47BD'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument outValue should be an array');
    const $res = natives.getCharacterMenuPedFloatStat(p0, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x052991E59076E4E4'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument outValue should be an array');
    const $res = natives.getMenuPedBoolStat(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x5E62BE5DC58E9E06'] = function() {
    const $res = natives.clearPedInPauseMenu();
    return $res;
}
hashes['0xAC0BFBDC3BE00E14'] = function(p0, p1) {
    const $res = natives.givePedToPauseMenu(p0, p1);
    return $res;
}
hashes['0x3CA6050692BC61B0'] = function(p0) {
    const $res = natives.setPauseMenuPedLighting(p0);
    return $res;
}
hashes['0xECF128344E9FF9F1'] = function(p0) {
    const $res = natives.setPauseMenuPedSleepState(p0);
    return $res;
}
hashes['0x805D7CBB36FD6C4C'] = function() {
    const $res = natives.openOnlinePoliciesMenu();
    return $res;
}
hashes['0xF13FE2A80C05C561'] = function() {
    const $res = natives.areOnlinePoliciesUpToDate();
    return $res;
}
hashes['0x6F72CD94F7B5B68C'] = function() {
    const $res = natives.isOnlinePoliciesMenuActive();
    return $res;
}
hashes['0x75D3691713C3B05A'] = function() {
    const $res = natives.openSocialClubMenu();
    return $res;
}
hashes['0xD2B32BE3FC1626C6'] = function() {
    const $res = natives.closeSocialClubMenu();
    return $res;
}
hashes['0x9E778248D6685FE0'] = function(p0) {
    const $res = natives.setSocialClubTour(p0);
    return $res;
}
hashes['0xC406BE343FC4B9AF'] = function() {
    const $res = natives.isSocialClubActive();
    return $res;
}
hashes['0x1185A8087587322C'] = function(p0) {
    const $res = natives.setTextInputBoxEnabled(p0);
    return $res;
}
hashes['0x8817605C2BA76200'] = function() {
    const $res = natives.forceCloseTextInputBox();
    return $res;
}
hashes['0x577599CCED639CA2'] = function(p0) {
    const $res = natives.setAllowCommaOnTextInput(p0);
    return $res;
}
hashes['0x6A1738B4323FE2D9'] = function(p0) {
    const $res = natives.overrideMpTextChatTeamString(p0);
    return $res;
}
hashes['0xB118AF58B5F332A1'] = function() {
    const $res = natives.isMpTextChatTyping();
    return $res;
}
hashes['0x1AC8F4AD40E22127'] = function() {
    const $res = natives.closeMpTextChat();
    return $res;
}
hashes['0x7C226D5346D4D10A'] = function(p0) {
    const $res = natives.mpTextChatIsTeamJob(p0);
    return $res;
}
hashes['0xF47E567B3630DD12'] = function(p0, p1) {
    const $res = natives.overrideMpTextChatColor(p0, p1);
    return $res;
}
hashes['0x1DB21A44B09E8BA3'] = function(p0) {
    const $res = natives.mpTextChatDisable(p0);
    return $res;
}
hashes['0xCEF214315D276FD1'] = function(p0) {
    const $res = natives.flagPlayerContextInTournament(p0);
    return $res;
}
hashes['0xD30C50DF888D58B5'] = function(p0, p1) {
    const $res = natives.setPedHasAiBlip(p0, p1);
    return $res;
}
hashes['0xB13DCB4C6FAAD238'] = function(p0, p1, p2) {
    const $res = natives.setPedHasAiBlipWithColour(p0, p1, p2);
    return $res;
}
hashes['0x15B8ECF844EE67ED'] = function(p0) {
    const $res = natives.doesPedHaveAiBlip(p0);
    return $res;
}
hashes['0xE52B8E7F85D39A08'] = function(p0, p1) {
    const $res = natives.setPedAiBlipGangId(p0, p1);
    return $res;
}
hashes['0x3EED80DFF7325CAA'] = function(p0, p1) {
    const $res = natives.setPedAiBlipHasCone(p0, p1);
    return $res;
}
hashes['0x0C4BBF625CA98C4E'] = function(p0, p1) {
    const $res = natives.setPedAiBlipForcedOn(p0, p1);
    return $res;
}
hashes['0x97C65887D4B37FA9'] = function(p0, p1) {
    const $res = natives.setPedAiBlipNoticeRange(p0, p1);
    return $res;
}
hashes['0xFCFACD0DB9D7A57D'] = function(p0, p1) {
    const $res = natives.setPedAiBlipSprite(p0, p1);
    return $res;
}
hashes['0x7CD934010E115C2C'] = function(p0) {
    const $res = natives.getAiPedPedBlipIndex(p0);
    return $res;
}
hashes['0x56176892826A4FE8'] = function(p0) {
    const $res = natives.getAiPedVehicleBlipIndex(p0);
    return $res;
}
hashes['0xA277800A9EAE340E'] = function() {
    const $res = natives.hasDirectorModeBeenLaunchedByCode();
    return $res;
}
hashes['0x2632482FD6B9AB87'] = function() {
    const $res = natives.setDirectorModeLaunchedByScript();
    return $res;
}
hashes['0x808519373FD336A3'] = function(p0) {
    const $res = natives.setPlayerIsInDirectorMode(p0);
    return $res;
}
hashes['0x04655F9D075D0AE5'] = function(p0) {
    const $res = natives.setDirectorModeAvailable(p0);
    return $res;
}
hashes['0x243296A510B562B6'] = function() {
    const $res = natives.hideHudmarkersThisFrame();
    return $res;
}
hashes['0xF49B58631D9E22D9'] = function(p0) {
    const $res = natives.getInteriorHeading(p0);
    return $res;
}
hashes['0x252BDC06B73FA6EA'] = function(p0, p1, p2) {
    if (typeof p1 != 'object') throw new Error('Argument position should be a Vector3 or an array');
    if (!Array.isArray(p2)) throw new Error('Argument nameHash should be an array');
    const $res = natives.getInteriorLocationAndNamehash(p0, Array.isArray(p1[0]) ? new alt.Vector3(p1[0][0], p1[0][1], p1[0][2]) : new alt.Vector3(p1[0].x, p1[0].y, p1[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p1[0])) { p1[0][0] = $res[1].x; p1[0][1] = $res[1].y; p1[0][2] = $res[1].z }
    else { p1[0].x = $res[1].x; p1[0].y = $res[1].y; p1[0].z = $res[1].z; }
    p2[0] = $res[2];
    return $res[0];
}
hashes['0xE4A84ABF135EF91A'] = function(p0) {
    const $res = natives.getInteriorGroupId(p0);
    return $res;
}
hashes['0x9E3B3E6D66F6E22F'] = function(p0, p1, p2, p3) {
    const $res = natives.getOffsetFromInteriorInWorldCoords(p0, p1, p2, p3);
    return new mp.Vector3($res);
}
hashes['0xBC72B5D7A1CBD54D'] = function() {
    const $res = natives.isInteriorScene();
    return $res;
}
hashes['0x26B0E73D7EAAF4D3'] = function(p0) {
    const $res = natives.isValidInterior(p0);
    return $res;
}
hashes['0xB365FC0C4E27FFA7'] = function(p0) {
    const $res = natives.clearRoomForEntity(p0);
    return $res;
}
hashes['0x52923C4710DD9907'] = function(p0, p1, p2) {
    const $res = natives.forceRoomForEntity(p0, p1, p2);
    return $res;
}
hashes['0x47C2A06D4F5F424B'] = function(p0) {
    const $res = natives.getRoomKeyFromEntity(p0);
    return $res;
}
hashes['0x399685DB942336BC'] = function(p0) {
    const $res = natives.getKeyForEntityInRoom(p0);
    return $res;
}
hashes['0x2107BA504071A6BB'] = function(p0) {
    const $res = natives.getInteriorFromEntity(p0);
    return $res;
}
hashes['0x82EBB79E258FA2B7'] = function(p0, p1) {
    const $res = natives.retainEntityInInterior(p0, p1);
    return $res;
}
hashes['0x85D5422B2039A70D'] = function(p0) {
    const $res = natives.clearInteriorStateOfEntity(p0);
    return $res;
}
hashes['0x38C1CB1CB119A016'] = function(p0, p1) {
    const $res = natives.forceActivatingTrackingOnEntity(p0, p1);
    return $res;
}
hashes['0x920D853F3E17F1DA'] = function(p0, p1) {
    const $res = natives.forceRoomForGameViewport(p0, p1);
    return $res;
}
hashes['0xAF348AFCB575A441'] = function(p0) {
    const $res = natives.setRoomForGameViewportByName(p0);
    return $res;
}
hashes['0x405DC2AEF6AF95B9'] = function(p0) {
    const $res = natives.setRoomForGameViewportByKey(p0);
    return $res;
}
hashes['0xA6575914D2A0B450'] = function() {
    const $res = natives.getRoomKeyForGameViewport();
    return $res;
}
hashes['0x23B59D8912F94246'] = function() {
    const $res = natives.clearRoomForGameViewport();
    return $res;
}
hashes['0xE7D267EC6CA966C3'] = function() {
    const $res = natives.getInteriorFromPrimaryView();
    return $res;
}
hashes['0xB0F7F8663821D9C3'] = function(p0, p1, p2) {
    const $res = natives.getInteriorAtCoords(p0, p1, p2);
    return $res;
}
hashes['0x3F6167F351168730'] = function(p0, p1) {
    const $res = natives.addPickupToInteriorRoomByName(p0, p1);
    return $res;
}
hashes['0x2CA429C029CCF247'] = function(p0) {
    const $res = natives.pinInteriorInMemory(p0);
    return $res;
}
hashes['0x261CCE7EED010641'] = function(p0) {
    const $res = natives.unpinInterior(p0);
    return $res;
}
hashes['0x6726BDCCC1932F0E'] = function(p0) {
    const $res = natives.isInteriorReady(p0);
    return $res;
}
hashes['0x4C2330E61D3DEB56'] = function(p0) {
    const $res = natives.setInteriorInUse(p0);
    return $res;
}
hashes['0x05B7A89BD78797FC'] = function(p0, p1, p2, p3) {
    const $res = natives.getInteriorAtCoordsWithType(p0, p1, p2, p3);
    return $res;
}
hashes['0xF0F77ADB9F67E79D'] = function(p0, p1, p2, p3) {
    const $res = natives.getInteriorAtCoordsWithTypehash(p0, p1, p2, p3);
    return $res;
}
hashes['0x483ACA1176CA93F1'] = function() {
    const $res = natives.activateInteriorGroupsUsingCamera();
    return $res;
}
hashes['0xEEA5AC2EDA7C33E8'] = function(p0, p1, p2) {
    const $res = natives.isCollisionMarkedOutside(p0, p1, p2);
    return $res;
}
hashes['0xEC4CF9FCB29A4424'] = function(p0, p1, p2) {
    const $res = natives.getInteriorFromCollision(p0, p1, p2);
    return $res;
}
hashes['0x7ECDF98587E92DEC'] = function(p0) {
    const $res = natives.enableStadiumProbesThisFrame(p0);
    return $res;
}
hashes['0x55E86AF2712B36A1'] = function(p0, p1) {
    const $res = natives.activateInteriorEntitySet(p0, p1);
    return $res;
}
hashes['0x420BD37289EEE162'] = function(p0, p1) {
    const $res = natives.deactivateInteriorEntitySet(p0, p1);
    return $res;
}
hashes['0x35F7DD45E8C0A16D'] = function(p0, p1) {
    const $res = natives.isInteriorEntitySetActive(p0, p1);
    return $res;
}
hashes['0xC1F1920BAF281317'] = function(p0, p1, p2) {
    const $res = natives.setInteriorEntitySetTintIndex(p0, p1, p2);
    return $res;
}
hashes['0x41F37C3427C75AE0'] = function(p0) {
    const $res = natives.refreshInterior(p0);
    return $res;
}
hashes['0xA97F257D0151A6AB'] = function(p0) {
    const $res = natives.enableExteriorCullModelThisFrame(p0);
    return $res;
}
hashes['0x50C375537449F369'] = function(p0) {
    const $res = natives.enableShadowCullModelThisFrame(p0);
    return $res;
}
hashes['0x6170941419D7D8EC'] = function(p0, p1) {
    const $res = natives.disableInterior(p0, p1);
    return $res;
}
hashes['0xBC5115A5A939DD15'] = function(p0) {
    const $res = natives.isInteriorDisabled(p0);
    return $res;
}
hashes['0xD9175F941610DB54'] = function(p0, p1) {
    const $res = natives.capInterior(p0, p1);
    return $res;
}
hashes['0x92BAC8ACF88CEC26'] = function(p0) {
    const $res = natives.isInteriorCapped(p0);
    return $res;
}
hashes['0x9E6542F0CE8E70A3'] = function(p0) {
    const $res = natives.disableMetroSystem(p0);
    return $res;
}
hashes['0x7241CCB7D020DB69'] = function(p0, p1) {
    const $res = natives.setIsExteriorOnly(p0, p1);
    return $res;
}
hashes['0x35AD299F50D91B24'] = function(p0) {
    const $res = natives.createItemset(p0);
    return $res;
}
hashes['0xDE18220B1C183EDA'] = function(p0) {
    const $res = natives.destroyItemset(p0);
    return $res;
}
hashes['0xB1B1EA596344DFAB'] = function(p0) {
    const $res = natives.isItemsetValid(p0);
    return $res;
}
hashes['0xE3945201F14637DD'] = function(p0, p1) {
    const $res = natives.addToItemset(p0, p1);
    return $res;
}
hashes['0x25E68244B0177686'] = function(p0, p1) {
    const $res = natives.removeFromItemset(p0, p1);
    return $res;
}
hashes['0xD9127E83ABF7C631'] = function(p0) {
    const $res = natives.getItemsetSize(p0);
    return $res;
}
hashes['0x7A197E2521EE2BAB'] = function(p0, p1) {
    const $res = natives.getIndexedItemInItemset(p0, p1);
    return $res;
}
hashes['0x2D0FC594D1E9C107'] = function(p0, p1) {
    const $res = natives.isInItemset(p0, p1);
    return $res;
}
hashes['0x41BC0D722FC04221'] = function(p0) {
    const $res = natives.cleanItemset(p0);
    return $res;
}
hashes['0xF2CA003F167E21D2'] = function() {
    const $res = natives.lobbyAutoMultiplayerMenu();
    return $res;
}
hashes['0xEF7D17BC6C85264C'] = function() {
    const $res = natives.lobbyAutoMultiplayerFreemode();
    return $res;
}
hashes['0xB0C56BD3D808D863'] = function(p0) {
    const $res = natives.lobbySetAutoMultiplayer(p0);
    return $res;
}
hashes['0x8AA464D4E0F6ACCD'] = function() {
    const $res = natives.lobbyAutoMultiplayerEvent();
    return $res;
}
hashes['0xFC309E94546FCDB5'] = function(p0) {
    const $res = natives.lobbySetAutoMultiplayerEvent(p0);
    return $res;
}
hashes['0xC6DC823253FBB366'] = function() {
    const $res = natives.lobbyAutoMultiplayerRandomJob();
    return $res;
}
hashes['0xC7E7181C09F33B69'] = function(p0) {
    const $res = natives.lobbySetAutoMpRandomJob(p0);
    return $res;
}
hashes['0xFA1E0E893D915215'] = function(p0) {
    const $res = natives.shutdownSessionClearsAutoMultiplayer(p0);
    return $res;
}
hashes['0x497420E022796B3F'] = function() {
    const $res = natives.localizationGetSystemLanguage();
    return $res;
}
hashes['0x2BDD44CC428A7EAE'] = function() {
    const $res = natives.getCurrentLanguage();
    return $res;
}
hashes['0xA8AE43AEC1A61314'] = function() {
    const $res = natives.localizationGetSystemDateType();
    return $res;
}
hashes['0x8B3CA62B1EF19B62'] = function() {
    const $res = natives.getAllocatedStackSize();
    return $res;
}
hashes['0xFEAD16FC8F9DFC0F'] = function(p0) {
    const $res = natives.getNumberOfFreeStacksOfThisSize(p0);
    return $res;
}
hashes['0x444D98F98C11F3EC'] = function(p0) {
    const $res = natives.setRandomSeed(p0);
    return $res;
}
hashes['0x1D408577D440E81E'] = function(p0) {
    const $res = natives.setTimeScale(p0);
    return $res;
}
hashes['0xC4301E5121A0ED73'] = function(p0) {
    const $res = natives.setMissionFlag(p0);
    return $res;
}
hashes['0xA33CDCCDA663159E'] = function() {
    const $res = natives.getMissionFlag();
    return $res;
}
hashes['0x971927086CFD2158'] = function(p0) {
    const $res = natives.setRandomEventFlag(p0);
    return $res;
}
hashes['0xD2D57F1D764117B1'] = function() {
    const $res = natives.getRandomEventFlag();
    return $res;
}
hashes['0x24DA7D7667FD7B09'] = function() {
    const $res = natives.getContentToLoad();
    return $res;
}
hashes['0x4DCDF92BF64236CD'] = function(p0, p1) {
    const $res = natives.activityFeedCreate(p0, p1);
    return $res;
}
hashes['0x31125FD509D9043F'] = function(p0) {
    const $res = natives.activityFeedAddSubstringToCaption(p0);
    return $res;
}
hashes['0xEBD3205A207939ED'] = function(p0) {
    const $res = natives.activityFeedAddLiteralSubstringToCaption(p0);
    return $res;
}
hashes['0x97E7E2C04245115B'] = function(p0) {
    const $res = natives.activityFeedAddIntToCaption(p0);
    return $res;
}
hashes['0x916CA67D26FD1E37'] = function(p0) {
    const $res = natives.activityFeedLargeImageUrl(p0);
    return $res;
}
hashes['0xEB078CA2B5E82ADD'] = function(p0, p1) {
    const $res = natives.activityFeedActionStartWithCommandLine(p0, p1);
    return $res;
}
hashes['0x703CC7F60CBB2B57'] = function(p0) {
    const $res = natives.activityFeedActionStartWithCommandLineAdd(p0);
    return $res;
}
hashes['0x8951EB9C6906D3C8'] = function() {
    const $res = natives.activityFeedPost();
    return $res;
}
hashes['0xBA4B8D83BDC75551'] = function(p0) {
    const $res = natives.activityFeedOnlinePlayedWithPost(p0);
    return $res;
}
hashes['0xE8B9C0EC9E183F35'] = function() {
    const $res = natives.hasResumedFromSuspend();
    return $res;
}
hashes['0x65D2EBB47E1CEC21'] = function(p0) {
    const $res = natives.setScriptHighPrio(p0);
    return $res;
}
hashes['0x6F2135B6129620C1'] = function(p0) {
    const $res = natives.setThisIsATriggerScript(p0);
    return $res;
}
hashes['0x8D74E26F54B4E5C3'] = function(p0) {
    const $res = natives.informCodeOfContentIdOfCurrentUgcMission(p0);
    return $res;
}
hashes['0xB335F761606DB47C'] = function(p0, p1, p2, p3) {
    const $res = natives.getBaseElementLocationFromMetadataBlock(p0, p1, p2, p3);
    return $res;
}
hashes['0x564B884A05EC45A3'] = function() {
    const $res = natives.getPrevWeatherTypeHashName();
    return $res;
}
hashes['0x711327CD09C8F162'] = function() {
    const $res = natives.getNextWeatherTypeHashName();
    return $res;
}
hashes['0x44F28F86433B10A9'] = function(p0) {
    const $res = natives.isPrevWeatherType(p0);
    return $res;
}
hashes['0x2FAA3A30BEC0F25D'] = function(p0) {
    const $res = natives.isNextWeatherType(p0);
    return $res;
}
hashes['0x704983DF373B198F'] = function(p0) {
    const $res = natives.setWeatherTypePersist(p0);
    return $res;
}
hashes['0xED712CA327900C8A'] = function(p0) {
    const $res = natives.setWeatherTypeNowPersist(p0);
    return $res;
}
hashes['0x29B487C359E19889'] = function(p0) {
    const $res = natives.setWeatherTypeNow(p0);
    return $res;
}
hashes['0xFB5045B7C42B75BF'] = function(p0, p1) {
    const $res = natives.setWeatherTypeOvertimePersist(p0, p1);
    return $res;
}
hashes['0x8B05F884CF7E8020'] = function() {
    const $res = natives.setRandomWeatherType();
    return $res;
}
hashes['0xCCC39339BEF76CF5'] = function() {
    const $res = natives.clearWeatherTypePersist();
    return $res;
}
hashes['0x0CF97F497FE7D048'] = function(p0) {
    const $res = natives.clearWeatherTypeNowPersistNetwork(p0);
    return $res;
}
hashes['0xF3BBE884A14BB413'] = function(p0, p1, p2) {
    if (!Array.isArray(p0)) throw new Error('Argument weatherType1 should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument weatherType2 should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument percentWeather2 should be an array');
    const $res = natives.getCurrWeatherState();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    p2[0] = $res[3];
    return $res[0];
}
hashes['0x578C752848ECFA0C'] = function(p0, p1, p2) {
    const $res = natives.setCurrWeatherState(p0, p1, p2);
    return $res;
}
hashes['0xA43D5C6FE51ADBEF'] = function(p0) {
    const $res = natives.setOverrideWeather(p0);
    return $res;
}
hashes['0x1178E104409FE58C'] = function(p0, p1) {
    const $res = natives.setOverrideWeatherex(p0, p1);
    return $res;
}
hashes['0x338D2E3477711050'] = function() {
    const $res = natives.clearOverrideWeather();
    return $res;
}
hashes['0xB8F87EAD7533B176'] = function(p0) {
    const $res = natives.waterOverrideSetShorewaveamplitude(p0);
    return $res;
}
hashes['0xC3EAD29AB273ECE8'] = function(p0) {
    const $res = natives.waterOverrideSetShorewaveminamplitude(p0);
    return $res;
}
hashes['0xA7A1127490312C36'] = function(p0) {
    const $res = natives.waterOverrideSetShorewavemaxamplitude(p0);
    return $res;
}
hashes['0x31727907B2C43C55'] = function(p0) {
    const $res = natives.waterOverrideSetOceannoiseminamplitude(p0);
    return $res;
}
hashes['0x405591EC8FD9096D'] = function(p0) {
    const $res = natives.waterOverrideSetOceanwaveamplitude(p0);
    return $res;
}
hashes['0xF751B16FB32ABC1D'] = function(p0) {
    const $res = natives.waterOverrideSetOceanwaveminamplitude(p0);
    return $res;
}
hashes['0xB3E6360DDE733E82'] = function(p0) {
    const $res = natives.waterOverrideSetOceanwavemaxamplitude(p0);
    return $res;
}
hashes['0x7C9C0B1EEB1F9072'] = function(p0) {
    const $res = natives.waterOverrideSetRipplebumpiness(p0);
    return $res;
}
hashes['0x6216B116083A7CB4'] = function(p0) {
    const $res = natives.waterOverrideSetRippleminbumpiness(p0);
    return $res;
}
hashes['0x9F5E6BB6B34540DA'] = function(p0) {
    const $res = natives.waterOverrideSetRipplemaxbumpiness(p0);
    return $res;
}
hashes['0xB9854DFDE0D833D6'] = function(p0) {
    const $res = natives.waterOverrideSetRippledisturb(p0);
    return $res;
}
hashes['0xC54A08C85AE4D410'] = function(p0) {
    const $res = natives.waterOverrideSetStrength(p0);
    return $res;
}
hashes['0xA8434F1DFF41D6E7'] = function(p0) {
    const $res = natives.waterOverrideFadeIn(p0);
    return $res;
}
hashes['0xC3C221ADDDE31A11'] = function(p0) {
    const $res = natives.waterOverrideFadeOut(p0);
    return $res;
}
hashes['0xAC3A74E8384A9919'] = function(p0) {
    const $res = natives.setWind(p0);
    return $res;
}
hashes['0xEE09ECEDBABE47FC'] = function(p0) {
    const $res = natives.setWindSpeed(p0);
    return $res;
}
hashes['0xA8CF1CC0AFCD3F12'] = function() {
    const $res = natives.getWindSpeed();
    return $res;
}
hashes['0xEB0F4468467B4528'] = function(p0) {
    const $res = natives.setWindDirection(p0);
    return $res;
}
hashes['0x1F400FEF721170DA'] = function() {
    const $res = natives.getWindDirection();
    return new mp.Vector3($res);
}
hashes['0x643E26EA6E024D92'] = function(p0) {
    const $res = natives.setRain(p0);
    return $res;
}
hashes['0x96695E368AD855F3'] = function() {
    const $res = natives.getRainLevel();
    return $res;
}
hashes['0x7F06937B0CDCBC1A'] = function(p0) {
    const $res = natives.setSnow(p0);
    return $res;
}
hashes['0xC5868A966E5BE3AE'] = function() {
    const $res = natives.getSnowLevel();
    return $res;
}
hashes['0xF6062E089251C898'] = function() {
    const $res = natives.forceLightningFlash();
    return $res;
}
hashes['0x02DEAAC8F8EA7FE7'] = function(p0) {
    const $res = natives.setCloudSettingsOverride(p0);
    return $res;
}
hashes['0x11B56FBBF7224868'] = function(p0) {
    const $res = natives.preloadCloudHat(p0);
    return $res;
}
hashes['0xFC4842A34657BFCB'] = function(p0, p1) {
    const $res = natives.loadCloudHat(p0, p1);
    return $res;
}
hashes['0xA74802FB8D0B7814'] = function(p0, p1) {
    const $res = natives.unloadCloudHat(p0, p1);
    return $res;
}
hashes['0x957E790EA1727B64'] = function() {
    const $res = natives.unloadAllCloudHats();
    return $res;
}
hashes['0xF36199225D6D8C86'] = function(p0) {
    const $res = natives.setCloudsAlpha(p0);
    return $res;
}
hashes['0x20AC25E781AE4A84'] = function() {
    const $res = natives.getCloudsAlpha();
    return $res;
}
hashes['0x9CD27B0045628463'] = function() {
    const $res = natives.getGameTimer();
    return $res;
}
hashes['0x15C40837039FFAF7'] = function() {
    const $res = natives.getFrameTime();
    return $res;
}
hashes['0xE599A503B3837E1B'] = function() {
    const $res = natives.getSystemTimeStep();
    return $res;
}
hashes['0xFC8202EFC642E6F2'] = function() {
    const $res = natives.getFrameCount();
    return $res;
}
hashes['0x313CE5879CEB6FCD'] = function(p0, p1) {
    const $res = natives.getRandomFloatInRange(p0, p1);
    return $res;
}
hashes['0xD53343AA4FB7DD28'] = function(p0, p1) {
    const $res = natives.getRandomIntInRange(p0, p1);
    return $res;
}
hashes['0xF2D49816A804D134'] = function(p0, p1) {
    const $res = natives.getRandomMwcIntInRange(p0, p1);
    return $res;
}
hashes['0xC906A7DAB05C8D2B'] = function(p0, p1, p2, p3, p4, p5) {
    if (!Array.isArray(p3)) throw new Error('Argument groundZ should be an array');
    const $res = natives.getGroundZFor3dCoord(p0, p1, p2, p4, p5);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p3[0] = $res[1];
    return $res[0];
}
hashes['0x8BDC7BFC57A81E76'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p3)) throw new Error('Argument groundZ should be an array');
    if (typeof p4 != 'object') throw new Error('Argument normal should be a Vector3 or an array');
    const $res = natives.getGroundZAndNormalFor3dCoord(p0, p1, p2, Array.isArray(p4[0]) ? new alt.Vector3(p4[0][0], p4[0][1], p4[0][2]) : new alt.Vector3(p4[0].x, p4[0].y, p4[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p3[0] = $res[1];
    if (Array.isArray(p4[0])) { p4[0][0] = $res[2].x; p4[0][1] = $res[2].y; p4[0][2] = $res[2].z }
    else { p4[0].x = $res[2].x; p4[0].y = $res[2].y; p4[0].z = $res[2].z; }
    return $res[0];
}
hashes['0x9E82F0F362881B29'] = function(p0, p1, p2, p3, p4, p5) {
    if (!Array.isArray(p3)) throw new Error('Argument groundZ should be an array');
    const $res = natives.getGroundZExcludingObjectsFor3dCoord(p0, p1, p2, p4, p5);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p3[0] = $res[1];
    return $res[0];
}
hashes['0xC843060B5765DCE7'] = function(p0) {
    const $res = natives.asin(p0);
    return $res;
}
hashes['0x1D08B970013C34B6'] = function(p0) {
    const $res = natives.acos(p0);
    return $res;
}
hashes['0x632106CC96E82E91'] = function(p0) {
    const $res = natives.tan(p0);
    return $res;
}
hashes['0xA9D1795CD5043663'] = function(p0) {
    const $res = natives.atan(p0);
    return $res;
}
hashes['0x8927CBF9D22261A4'] = function(p0, p1) {
    const $res = natives.atan2(p0, p1);
    return $res;
}
hashes['0xF1B760881820C952'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.getDistanceBetweenCoords(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x186FC4BE848E1C92'] = function(p0, p1, p2, p3) {
    const $res = natives.getAngleBetween2dVectors(p0, p1, p2, p3);
    return $res;
}
hashes['0x2FFB6B224F4B2926'] = function(p0, p1) {
    const $res = natives.getHeadingFromVector2d(p0, p1);
    return $res;
}
hashes['0x7F8F6405F4777AF6'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.getRatioOfClosestPointOnLine(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x21C235BC64831E5A'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.getClosestPointOnLine(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return new mp.Vector3($res);
}
hashes['0xF56DFB7B61BE7276'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    if (!Array.isArray(p12)) throw new Error('Argument p12 should be an array');
    const $res = natives.getLinePlaneIntersection(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p12[0] = $res[1];
    return $res[0];
}
hashes['0xA0AD167E4B39D9A2'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.getPointAreaOverlap(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0x933D6A9EEC1BACD0'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument address should be an array');
    const $res = natives.setBit(p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xE80492A9AC099A93'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument address should be an array');
    const $res = natives.clearBit(p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xD24D37CC275948CC'] = function(p0) {
    const $res = natives.getHashKey(p0);
    return $res;
}
hashes['0xF2F6A2FA49278625'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    if (!Array.isArray(p9)) throw new Error('Argument outX should be an array');
    if (!Array.isArray(p10)) throw new Error('Argument outY should be an array');
    if (!Array.isArray(p11)) throw new Error('Argument outZ should be an array');
    if (!Array.isArray(p12)) throw new Error('Argument outW should be an array');
    const $res = natives.slerpNearQuaternion(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p9[0] = $res[1];
    p10[0] = $res[2];
    p11[0] = $res[3];
    p12[0] = $res[4];
    return $res[0];
}
hashes['0xA61B4DF533DCB56E'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.isAreaOccupied(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x39455BF4F4F55186'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.isAreaOccupiedSlow(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0xADCDE75E1C60F32D'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.isPositionOccupied(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0xE54E209C35FFA18D'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.isPointObscuredByAMissionEntity(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xA56F01F3765B93A0'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.clearArea(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x957838AAF91BD12D'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.clearAreaLeaveVehicleHealth(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x01C7B9B38428AEB6'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.clearAreaOfVehicles(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x11DB3500F042A8AA'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.clearAngledAreaOfVehicles(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0xDD9B9B385AAC7F5B'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.clearAreaOfObjects(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xBE31FD6CE464AC59'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.clearAreaOfPeds(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x04F8FC8FCF58F88D'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.clearAreaOfCops(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x0A1CB9094635D1A6'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.clearAreaOfProjectiles(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x7EC6F9A478A6A512'] = function() {
    const $res = natives.clearScenarioSpawnHistory();
    return $res;
}
hashes['0xC9BF75D28165FF77'] = function(p0) {
    const $res = natives.setSaveMenuActive(p0);
    return $res;
}
hashes['0x397BAA01068BAA96'] = function() {
    const $res = natives.getStatusOfManualSave();
    return $res;
}
hashes['0xB938B7E6D3C0620C'] = function(p0) {
    const $res = natives.setCreditsActive(p0);
    return $res;
}
hashes['0xB51B9AB9EF81868C'] = function(p0) {
    const $res = natives.setCreditsFadeOutWithScreen(p0);
    return $res;
}
hashes['0x075F1D57402C93BA'] = function() {
    const $res = natives.haveCreditsReachedEnd();
    return $res;
}
hashes['0xD19C0826DC20CF1C'] = function() {
    const $res = natives.areCreditsRunning();
    return $res;
}
hashes['0x9DC711BC69C548DF'] = function(p0) {
    const $res = natives.terminateAllScriptsWithThisName(p0);
    return $res;
}
hashes['0x9243BAC96D64C050'] = function() {
    const $res = natives.networkSetScriptIsSafeForNetworkGame();
    return $res;
}
hashes['0x1F464EF988465A81'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.addHospitalRestart(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC8535819C450EBA8'] = function(p0, p1) {
    const $res = natives.disableHospitalRestart(p0, p1);
    return $res;
}
hashes['0x452736765B31FC4B'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.addPoliceRestart(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x23285DED6EBD7EA3'] = function(p0, p1) {
    const $res = natives.disablePoliceRestart(p0, p1);
    return $res;
}
hashes['0x706B5EDCAA7FA663'] = function(p0, p1, p2, p3) {
    const $res = natives.setRestartCoordOverride(p0, p1, p2, p3);
    return $res;
}
hashes['0xA2716D40842EAF79'] = function() {
    const $res = natives.clearRestartCoordOverride();
    return $res;
}
hashes['0x2C2B3493FBF51C71'] = function(p0) {
    const $res = natives.pauseDeathArrestRestart(p0);
    return $res;
}
hashes['0x21FFB63D8C615361'] = function(p0) {
    const $res = natives.ignoreNextRestart(p0);
    return $res;
}
hashes['0x4A18E01DF2C87B86'] = function(p0) {
    const $res = natives.setFadeOutAfterDeath(p0);
    return $res;
}
hashes['0x1E0B4DC0D990A4E7'] = function(p0) {
    const $res = natives.setFadeOutAfterArrest(p0);
    return $res;
}
hashes['0xDA66D2796BA33F12'] = function(p0) {
    const $res = natives.setFadeInAfterDeathArrest(p0);
    return $res;
}
hashes['0xF3D78F59DFE18D79'] = function(p0) {
    const $res = natives.setFadeInAfterLoad(p0);
    return $res;
}
hashes['0xC0714D0A7EEECA54'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.registerSaveHouse(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x4F548CABEAE553BC'] = function(p0, p1, p2) {
    const $res = natives.setSaveHouse(p0, p1, p2);
    return $res;
}
hashes['0x1162EA8AE9D24EEA'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.overrideSaveHouse(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xA4A0065E39C9F25C'] = function(p0, p1, p2, p3) {
    if (typeof p0 != 'object') throw new Error('Argument p0 should be a Vector3 or an array');
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument fadeInAfterLoad should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument p3 should be an array');
    const $res = natives.getSaveHouseDetailsAfterSuccessfulLoad(Array.isArray(p0[0]) ? new alt.Vector3(p0[0][0], p0[0][1], p0[0][2]) : new alt.Vector3(p0[0].x, p0[0].y, p0[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p0[0])) { p0[0][0] = $res[1].x; p0[0][1] = $res[1].y; p0[0][2] = $res[1].z }
    else { p0[0].x = $res[1].x; p0[0].y = $res[1].y; p0[0].z = $res[1].z; }
    p1[0] = $res[2];
    p2[0] = $res[3];
    p3[0] = $res[4];
    return $res[0];
}
hashes['0x50EEAAD86232EE55'] = function() {
    const $res = natives.doAutoSave();
    return $res;
}
hashes['0x6E04F06094C87047'] = function() {
    const $res = natives.getIsAutoSaveOff();
    return $res;
}
hashes['0x69240733738C19A0'] = function() {
    const $res = natives.isAutoSaveInProgress();
    return $res;
}
hashes['0x2107A3773771186D'] = function() {
    const $res = natives.hasCodeRequestedAutosave();
    return $res;
}
hashes['0x06462A961E94B67C'] = function() {
    const $res = natives.clearCodeRequestedAutosave();
    return $res;
}
hashes['0xE0E500246FF73D66'] = function(p0, p1) {
    const $res = natives.beginReplayStats(p0, p1);
    return $res;
}
hashes['0x69FE6DC87BD2A5E9'] = function(p0) {
    const $res = natives.addReplayStatValue(p0);
    return $res;
}
hashes['0xA23E821FBDF8A5F2'] = function() {
    const $res = natives.endReplayStats();
    return $res;
}
hashes['0xD642319C54AADEB6'] = function() {
    const $res = natives.haveReplayStatsBeenStored();
    return $res;
}
hashes['0x5B1F2E327B6B6FE1'] = function() {
    const $res = natives.getReplayStatMissionId();
    return $res;
}
hashes['0x2B626A0150E4D449'] = function() {
    const $res = natives.getReplayStatMissionType();
    return $res;
}
hashes['0xDC9274A7EF6B2867'] = function() {
    const $res = natives.getReplayStatCount();
    return $res;
}
hashes['0x8098C8D6597AAE18'] = function(p0) {
    const $res = natives.getReplayStatAtIndex(p0);
    return $res;
}
hashes['0x1B1AB132A16FDA55'] = function() {
    const $res = natives.clearReplayStats();
    return $res;
}
hashes['0x72DE52178C291CB5'] = function() {
    const $res = natives.queueMissionRepeatLoad();
    return $res;
}
hashes['0x44A0BDC559B35F6E'] = function() {
    const $res = natives.queueMissionRepeatSave();
    return $res;
}
hashes['0xEB2104E905C6F2E9'] = function() {
    const $res = natives.queueMissionRepeatSaveForBenchmarkTest();
    return $res;
}
hashes['0x2B5E102E4A42F2BF'] = function() {
    const $res = natives.getStatusOfMissionRepeatSave();
    return $res;
}
hashes['0x8A75CE2956274ADD'] = function() {
    const $res = natives.isMemoryCardInUse();
    return $res;
}
hashes['0x867654CBC7606F2C'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.shootSingleBulletBetweenCoords(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0xE3A7742E0B7A2F8B'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
    const $res = natives.shootSingleBulletBetweenCoordsIgnoreEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
    return $res;
}
hashes['0xBFE5756E7407064A'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20) {
    const $res = natives.shootSingleBulletBetweenCoordsIgnoreEntityNew(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20);
    return $res;
}
hashes['0x03E8D3D5F549087A'] = function(p0, p1, p2) {
    if (typeof p1 != 'object') throw new Error('Argument minimum should be a Vector3 or an array');
    if (typeof p2 != 'object') throw new Error('Argument maximum should be a Vector3 or an array');
    const $res = natives.getModelDimensions(p0, Array.isArray(p1[0]) ? new alt.Vector3(p1[0][0], p1[0][1], p1[0][2]) : new alt.Vector3(p1[0].x, p1[0].y, p1[0].z), Array.isArray(p2[0]) ? new alt.Vector3(p2[0][0], p2[0][1], p2[0][2]) : new alt.Vector3(p2[0].x, p2[0].y, p2[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p1[0])) { p1[0][0] = $res[1].x; p1[0][1] = $res[1].y; p1[0][2] = $res[1].z }
    else { p1[0].x = $res[1].x; p1[0].y = $res[1].y; p1[0].z = $res[1].z; }
    if (Array.isArray(p2[0])) { p2[0][0] = $res[2].x; p2[0][1] = $res[2].y; p2[0][2] = $res[2].z }
    else { p2[0].x = $res[2].x; p2[0].y = $res[2].y; p2[0].z = $res[2].z; }
    return $res[0];
}
hashes['0x1454F2448DE30163'] = function(p0) {
    const $res = natives.setFakeWantedLevel(p0);
    return $res;
}
hashes['0x4C9296CBCD1B971E'] = function() {
    const $res = natives.getFakeWantedLevel();
    return $res;
}
hashes['0xF14878FC50BEC6EE'] = function(p0) {
    const $res = natives.usingMissionCreator(p0);
    return $res;
}
hashes['0xDEA36202FC3382DF'] = function(p0) {
    const $res = natives.allowMissionCreatorWarp(p0);
    return $res;
}
hashes['0x19E00D7322C6F85B'] = function(p0) {
    const $res = natives.setMinigameInProgress(p0);
    return $res;
}
hashes['0x2B4A15E44DE0F478'] = function() {
    const $res = natives.isMinigameInProgress();
    return $res;
}
hashes['0x7B30F65D7B710098'] = function() {
    const $res = natives.isThisAMinigameScript();
    return $res;
}
hashes['0x61A23B7EDA9BDA24'] = function() {
    const $res = natives.isSniperInverted();
    return $res;
}
hashes['0xD3D15555431AB793'] = function() {
    const $res = natives.shouldUseMetricMeasurements();
    return $res;
}
hashes['0xC488FF2356EA7791'] = function(p0) {
    const $res = natives.getProfileSetting(p0);
    return $res;
}
hashes['0x0C515FAB3FF9EA92'] = function(p0, p1) {
    const $res = natives.areStringsEqual(p0, p1);
    return $res;
}
hashes['0x1E34710ECD4AB0EB'] = function(p0, p1, p2, p3) {
    const $res = natives.compareStrings(p0, p1, p2, p3);
    return $res;
}
hashes['0xF0D31AD191A74F87'] = function(p0) {
    const $res = natives.absi(p0);
    return $res;
}
hashes['0x73D57CFFDD12C355'] = function(p0) {
    const $res = natives.absf(p0);
    return $res;
}
hashes['0xFEFCF11B01287125'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.isSniperBulletInArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x5270A8FBC098C3F8'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.isProjectileInArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x2E0DC353342C4A6D'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.isProjectileTypeInArea(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xF0BC12401061DEA0'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.isProjectileTypeInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x34318593248C8FB2'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.isProjectileTypeWithinDistance(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x8D7A43EC6A5FEA45'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    if (typeof p7 != 'object') throw new Error('Argument projectilePos should be a Vector3 or an array');
    const $res = natives.getCoordsOfProjectileTypeInArea(p0, p1, p2, p3, p4, p5, p6, Array.isArray(p7[0]) ? new alt.Vector3(p7[0][0], p7[0][1], p7[0][2]) : new alt.Vector3(p7[0].x, p7[0].y, p7[0].z), p8);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p7[0])) { p7[0][0] = $res[1].x; p7[0][1] = $res[1].y; p7[0][2] = $res[1].z }
    else { p7[0].x = $res[1].x; p7[0].y = $res[1].y; p7[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x3DA8C28346B62CED'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    if (typeof p8 != 'object') throw new Error('Argument positionOut should be a Vector3 or an array');
    const $res = natives.getCoordsOfProjectileTypeInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, Array.isArray(p8[0]) ? new alt.Vector3(p8[0][0], p8[0][1], p8[0][2]) : new alt.Vector3(p8[0].x, p8[0].y, p8[0].z), p9);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p8[0])) { p8[0][0] = $res[1].x; p8[0][1] = $res[1].y; p8[0][2] = $res[1].z }
    else { p8[0].x = $res[1].x; p8[0].y = $res[1].y; p8[0].z = $res[1].z; }
    return $res[0];
}
hashes['0xDFB4138EEFED7B81'] = function(p0, p1, p2, p3, p4) {
    if (typeof p3 != 'object') throw new Error('Argument outCoords should be a Vector3 or an array');
    const $res = natives.getCoordsOfProjectileTypeWithinDistance(p0, p1, p2, Array.isArray(p3[0]) ? new alt.Vector3(p3[0][0], p3[0][1], p3[0][2]) : new alt.Vector3(p3[0].x, p3[0].y, p3[0].z), p4);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p3[0])) { p3[0][0] = $res[1].x; p3[0][1] = $res[1].y; p3[0][2] = $res[1].z }
    else { p3[0].x = $res[1].x; p3[0].y = $res[1].y; p3[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x82FDE6A57EE4EE44'] = function(p0, p1, p2, p3, p4, p5) {
    if (typeof p3 != 'object') throw new Error('Argument outCoords should be a Vector3 or an array');
    if (!Array.isArray(p4)) throw new Error('Argument outProjectile should be an array');
    const $res = natives.getProjectileOfProjectileTypeWithinDistance(p0, p1, p2, Array.isArray(p3[0]) ? new alt.Vector3(p3[0][0], p3[0][1], p3[0][2]) : new alt.Vector3(p3[0].x, p3[0].y, p3[0].z), p5);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p3[0])) { p3[0][0] = $res[1].x; p3[0][1] = $res[1].y; p3[0][2] = $res[1].z }
    else { p3[0].x = $res[1].x; p3[0].y = $res[1].y; p3[0].z = $res[1].z; }
    p4[0] = $res[2];
    return $res[0];
}
hashes['0x1A8B5F3C01E2B477'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.isBulletInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x3F2023999AD51C1F'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isBulletInArea(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xDE0F6D7450D37351'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.isBulletInBox(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x9870ACFB89A90995'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.hasBulletImpactedInArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xDC8C5D7CFEAB8394'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.hasBulletImpactedInBox(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xA72BC0B675B1519E'] = function() {
    const $res = natives.isOrbisVersion();
    return $res;
}
hashes['0x4D982ADB1978442D'] = function() {
    const $res = natives.isDurangoVersion();
    return $res;
}
hashes['0xF6201B4DAF662A9D'] = function() {
    const $res = natives.isXbox360Version();
    return $res;
}
hashes['0xCCA1072C29D096C2'] = function() {
    const $res = natives.isPs3Version();
    return $res;
}
hashes['0x48AF36444B965238'] = function() {
    const $res = natives.isPcVersion();
    return $res;
}
hashes['0x0A27B2B6282F7169'] = function() {
    const $res = natives.isSteamVersion();
    return $res;
}
hashes['0x9F1935CA1F724008'] = function() {
    const $res = natives.isAussieVersion();
    return $res;
}
hashes['0xB8C0BB75D8A77DB3'] = function() {
    const $res = natives.isJapaneseVersion();
    return $res;
}
hashes['0x138679CA01E21F53'] = function() {
    const $res = natives.isXboxPlatform();
    return $res;
}
hashes['0xC545AB1CF97ABB34'] = function() {
    const $res = natives.isScarlettVersion();
    return $res;
}
hashes['0xF911E695C1EB8518'] = function() {
    const $res = natives.isScePlatform();
    return $res;
}
hashes['0x807ABE1AB65C24D2'] = function() {
    const $res = natives.isProsperoVersion();
    return $res;
}
hashes['0xF22B6C47C6EAB066'] = function(p0) {
    const $res = natives.isStringNull(p0);
    return $res;
}
hashes['0xCA042B6957743895'] = function(p0) {
    const $res = natives.isStringNullOrEmpty(p0);
    return $res;
}
hashes['0x5A5F40FE637EB584'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument outInteger should be an array');
    const $res = natives.stringToInt(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x8EF07E15701D61ED'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p0)) throw new Error('Argument unkVar should be an array');
    const $res = natives.setBitsInRange(p1, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x53158863FCC0893A'] = function(p0, p1, p2) {
    const $res = natives.getBitsInRange(p0, p1, p2);
    return $res;
}
hashes['0x1A992DA297A4630C'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17) {
    const $res = natives.addStuntJump(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17);
    return $res;
}
hashes['0xBBE5D803A5360CBF'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19) {
    const $res = natives.addStuntJumpAngled(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19);
    return $res;
}
hashes['0xFB80AB299D2EE1BD'] = function(p0) {
    const $res = natives.toggleShowOptionalStuntJumpCamera(p0);
    return $res;
}
hashes['0xDC518000E39DAE1F'] = function(p0) {
    const $res = natives.deleteStuntJump(p0);
    return $res;
}
hashes['0xE369A5783B866016'] = function(p0) {
    const $res = natives.enableStuntJumpSet(p0);
    return $res;
}
hashes['0xA5272EBEDD4747F6'] = function(p0) {
    const $res = natives.disableStuntJumpSet(p0);
    return $res;
}
hashes['0xD79185689F8FD5DF'] = function(p0) {
    const $res = natives.setStuntJumpsCanTrigger(p0);
    return $res;
}
hashes['0x7A3F19700A4D0525'] = function() {
    const $res = natives.isStuntJumpInProgress();
    return $res;
}
hashes['0x2272B0A1343129F4'] = function() {
    const $res = natives.isStuntJumpMessageShowing();
    return $res;
}
hashes['0x996DD1E1E02F1008'] = function() {
    const $res = natives.getNumSuccessfulStuntJumps();
    return $res;
}
hashes['0x6856EC3D35C81EA4'] = function() {
    const $res = natives.getTotalSuccessfulStuntJumps();
    return $res;
}
hashes['0xE6B7B0ACD4E4B75E'] = function() {
    const $res = natives.cancelStuntJump();
    return $res;
}
hashes['0x577D1284D6873711'] = function(p0) {
    const $res = natives.setGamePaused(p0);
    return $res;
}
hashes['0xAA391C728106F7AF'] = function(p0) {
    const $res = natives.setThisScriptCanBePaused(p0);
    return $res;
}
hashes['0xB98236CAAECEF897'] = function(p0) {
    const $res = natives.setThisScriptCanRemoveBlipsCreatedByAnyScript(p0);
    return $res;
}
hashes['0x071E2A839DE82D90'] = function(p0, p1) {
    const $res = natives.hasCheatWithHashBeenActivated(p0, p1);
    return $res;
}
hashes['0x557E43C447E700A8'] = function(p0) {
    const $res = natives.hasPcCheatWithHashBeenActivated(p0);
    return $res;
}
hashes['0xFA3FFB0EEBC288A3'] = function(p0) {
    const $res = natives.overrideFreezeFlags(p0);
    return $res;
}
hashes['0x9BAE5AD2508DF078'] = function(p0) {
    const $res = natives.setInstancePriorityMode(p0);
    return $res;
}
hashes['0xC5F0A8EBD3F361CE'] = function(p0) {
    const $res = natives.setInstancePriorityHint(p0);
    return $res;
}
hashes['0x7EA2B6AF97ECA6ED'] = function() {
    const $res = natives.isFrontendFading();
    return $res;
}
hashes['0x7472BB270D7B4F3E'] = function() {
    const $res = natives.populateNow();
    return $res;
}
hashes['0xCBAD6729F7B1F4FC'] = function() {
    const $res = natives.getIndexOfCurrentLevel();
    return $res;
}
hashes['0x740E14FAD5842351'] = function(p0) {
    const $res = natives.setGravityLevel(p0);
    return $res;
}
hashes['0xA9575F812C6A7997'] = function(p0, p1, p2) {
    const $res = natives.startSaveData(p0, p1, p2);
    return $res;
}
hashes['0x74E20C9145FB66FD'] = function() {
    const $res = natives.stopSaveData();
    return $res;
}
hashes['0xA09F896CE912481F'] = function(p0) {
    const $res = natives.getSizeOfSaveData(p0);
    return $res;
}
hashes['0x34C9EE5986258415'] = function(p0, p1) {
    const $res = natives.registerIntToSave(p0, p1);
    return $res;
}
hashes['0xA735353C77334EA0'] = function(p0, p1) {
    const $res = natives.registerInt64ToSave(p0, p1);
    return $res;
}
hashes['0x10C2FA78D0E128A1'] = function(p0, p1) {
    const $res = natives.registerEnumToSave(p0, p1);
    return $res;
}
hashes['0x7CAEC29ECB5DFEBB'] = function(p0, p1) {
    const $res = natives.registerFloatToSave(p0, p1);
    return $res;
}
hashes['0xC8F4131414C835A1'] = function(p0, p1) {
    const $res = natives.registerBoolToSave(p0, p1);
    return $res;
}
hashes['0xEDB1232C5BEAE62F'] = function(p0, p1) {
    const $res = natives.registerTextLabelToSave(p0, p1);
    return $res;
}
hashes['0x6F7794F28C6B2535'] = function(p0, p1) {
    const $res = natives.registerTextLabel15ToSave(p0, p1);
    return $res;
}
hashes['0x48F069265A0E4BEC'] = function(p0, p1) {
    const $res = natives.registerTextLabel23ToSave(p0, p1);
    return $res;
}
hashes['0x8269816F6CFD40F8'] = function(p0, p1) {
    const $res = natives.registerTextLabel31ToSave(p0, p1);
    return $res;
}
hashes['0xFAA457EF263E8763'] = function(p0, p1) {
    const $res = natives.registerTextLabel63ToSave(p0, p1);
    return $res;
}
hashes['0xBF737600CDDBEADD'] = function(p0, p1, p2) {
    const $res = natives.startSaveStructWithSize(p0, p1, p2);
    return $res;
}
hashes['0xEB1774DF12BB9F12'] = function() {
    const $res = natives.stopSaveStruct();
    return $res;
}
hashes['0x60FE567DF1B1AF9D'] = function(p0, p1, p2) {
    const $res = natives.startSaveArrayWithSize(p0, p1, p2);
    return $res;
}
hashes['0x04456F95153C6BE4'] = function() {
    const $res = natives.stopSaveArray();
    return $res;
}
hashes['0x213AEB2B90CBA7AC'] = function(p0, p1, p2) {
    const $res = natives.copyScriptStruct(p0, p1, p2);
    return $res;
}
hashes['0xDC0F817884CDD856'] = function(p0, p1) {
    const $res = natives.enableDispatchService(p0, p1);
    return $res;
}
hashes['0x9B2BD3773123EA2F'] = function(p0, p1) {
    const $res = natives.blockDispatchServiceResourceCreation(p0, p1);
    return $res;
}
hashes['0xEB4A0C2D56441717'] = function(p0) {
    const $res = natives.getNumberResourcesAllocatedToWantedLevel(p0);
    return $res;
}
hashes['0x3F892CAF67444AE7'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    if (!Array.isArray(p6)) throw new Error('Argument outIncidentID should be an array');
    const $res = natives.createIncident(p0, p1, p2, p3, p4, p5, p7, p8);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p6[0] = $res[1];
    return $res[0];
}
hashes['0x05983472F0494E60'] = function(p0, p1, p2, p3, p4, p5, p6) {
    if (!Array.isArray(p4)) throw new Error('Argument outIncidentID should be an array');
    const $res = natives.createIncidentWithEntity(p0, p1, p2, p3, p5, p6);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p4[0] = $res[1];
    return $res[0];
}
hashes['0x556C1AA270D5A207'] = function(p0) {
    const $res = natives.deleteIncident(p0);
    return $res;
}
hashes['0xC8BC6461E629BEAA'] = function(p0) {
    const $res = natives.isIncidentValid(p0);
    return $res;
}
hashes['0xB08B85D860E7BA3C'] = function(p0, p1, p2) {
    const $res = natives.setIncidentRequestedUnits(p0, p1, p2);
    return $res;
}
hashes['0xD261BA3E7E998072'] = function(p0, p1) {
    const $res = natives.setIdealSpawnDistanceForIncident(p0, p1);
    return $res;
}
hashes['0x6874E2190B0C1972'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    if (typeof p7 != 'object') throw new Error('Argument spawnPoint should be a Vector3 or an array');
    const $res = natives.findSpawnPointInDirection(p0, p1, p2, p3, p4, p5, p6, Array.isArray(p7[0]) ? new alt.Vector3(p7[0][0], p7[0][1], p7[0][2]) : new alt.Vector3(p7[0].x, p7[0].y, p7[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p7[0])) { p7[0][0] = $res[1].x; p7[0][1] = $res[1].y; p7[0][2] = $res[1].z }
    else { p7[0].x = $res[1].x; p7[0].y = $res[1].y; p7[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x67F6413D3220E18D'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.addPopMultiplierArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x1327E2FE9746BAEE'] = function(p0) {
    const $res = natives.doesPopMultiplierAreaExist(p0);
    return $res;
}
hashes['0xB129E447A2EDA4BF'] = function(p0, p1) {
    const $res = natives.removePopMultiplierArea(p0, p1);
    return $res;
}
hashes['0x1312F4B242609CE3'] = function(p0) {
    const $res = natives.isPopMultiplierAreaNetworked(p0);
    return $res;
}
hashes['0x32C7A7E8C43A1F80'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.addPopMultiplierSphere(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x171BAFB3C60389F4'] = function(p0) {
    const $res = natives.doesPopMultiplierSphereExist(p0);
    return $res;
}
hashes['0xE6869BECDD8F2403'] = function(p0, p1) {
    const $res = natives.removePopMultiplierSphere(p0, p1);
    return $res;
}
hashes['0x28A04B411933F8A6'] = function(p0, p1, p2) {
    const $res = natives.enableTennisMode(p0, p1, p2);
    return $res;
}
hashes['0x5D5479D115290C3F'] = function(p0) {
    const $res = natives.isTennisMode(p0);
    return $res;
}
hashes['0xE266ED23311F24D4'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.playTennisSwingAnim(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x17DF68D720AA77F8'] = function(p0) {
    const $res = natives.getTennisSwingAnimComplete(p0);
    return $res;
}
hashes['0x19BFED045C647C49'] = function(p0) {
    const $res = natives.getTennisSwingAnimCanBeInterrupted(p0);
    return $res;
}
hashes['0xE95B0C7D5BA3B96B'] = function(p0) {
    const $res = natives.getTennisSwingAnimSwung(p0);
    return $res;
}
hashes['0x8FA9C42FC5D7C64B'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.playTennisDiveAnim(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x54F157E0336A3822'] = function(p0, p1, p2) {
    const $res = natives.setTennisMoveNetworkSignalFloat(p0, p1, p2);
    return $res;
}
hashes['0x5896F2BD5683A4E1'] = function() {
    const $res = natives.resetDispatchSpawnLocation();
    return $res;
}
hashes['0xD10F442036302D50'] = function(p0, p1, p2) {
    const $res = natives.setDispatchSpawnLocation(p0, p1, p2);
    return $res;
}
hashes['0x77A84429DD9F0A15'] = function() {
    const $res = natives.resetDispatchIdealSpawnDistance();
    return $res;
}
hashes['0x6FE601A64180D423'] = function(p0) {
    const $res = natives.setDispatchIdealSpawnDistance(p0);
    return $res;
}
hashes['0xEB2DB0CAD13154B3'] = function(p0) {
    const $res = natives.resetDispatchTimeBetweenSpawnAttempts(p0);
    return $res;
}
hashes['0x44F7CBC1BEB3327D'] = function(p0, p1) {
    const $res = natives.setDispatchTimeBetweenSpawnAttempts(p0, p1);
    return $res;
}
hashes['0x48838ED9937A15D1'] = function(p0, p1) {
    const $res = natives.setDispatchTimeBetweenSpawnAttemptsMultiplier(p0, p1);
    return $res;
}
hashes['0x918C7B2D2FF3928B'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.addDispatchSpawnAngledBlockingArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x2D4259F1FEB81DA9'] = function(p0, p1, p2, p3) {
    const $res = natives.addDispatchSpawnSphereBlockingArea(p0, p1, p2, p3);
    return $res;
}
hashes['0x264AC28B01B353A5'] = function(p0) {
    const $res = natives.removeDispatchSpawnBlockingArea(p0);
    return $res;
}
hashes['0xAC7BFD5C1D83EA75'] = function() {
    const $res = natives.resetDispatchSpawnBlockingAreas();
    return $res;
}
hashes['0xD9F692D349249528'] = function() {
    const $res = natives.resetWantedResponseNumPedsToSpawn();
    return $res;
}
hashes['0xE532EC1A63231B4F'] = function(p0, p1) {
    const $res = natives.setWantedResponseNumPedsToSpawn(p0, p1);
    return $res;
}
hashes['0xB8721407EE9C3FF6'] = function(p0, p1, p2) {
    const $res = natives.addTacticalNavMeshPoint(p0, p1, p2);
    return $res;
}
hashes['0xB3CD58CCA6CDA852'] = function() {
    const $res = natives.clearTacticalNavMeshPoints();
    return $res;
}
hashes['0x2587A48BC88DFADF'] = function(p0) {
    const $res = natives.setRiotModeEnabled(p0);
    return $res;
}
hashes['0xCA78CFA0366592FE'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.displayOnscreenKeyboardWithLongerInitialString(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x00DC833F2568DBF6'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.displayOnscreenKeyboard(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x0CF2B696BBF945AE'] = function() {
    const $res = natives.updateOnscreenKeyboard();
    return $res;
}
hashes['0x8362B09B91893647'] = function() {
    const $res = natives.getOnscreenKeyboardResult();
    return $res;
}
hashes['0x58A39BE597CE99CD'] = function() {
    const $res = natives.cancelOnscreenKeyboard();
    return $res;
}
hashes['0x3ED1438C1F5C6612'] = function(p0) {
    const $res = natives.nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(p0);
    return $res;
}
hashes['0xA6A12939F16D85BE'] = function(p0, p1) {
    const $res = natives.actionManagerEnableAction(p0, p1);
    return $res;
}
hashes['0x3F60413F5DF65748'] = function() {
    const $res = natives.getRealWorldTime();
    return $res;
}
hashes['0x1EAE0A6E978894A2'] = function(p0, p1) {
    const $res = natives.supressRandomEventThisFrame(p0, p1);
    return $res;
}
hashes['0xA66C71C98D5F2CFB'] = function(p0) {
    const $res = natives.setExplosiveAmmoThisFrame(p0);
    return $res;
}
hashes['0x11879CDD803D30F4'] = function(p0) {
    const $res = natives.setFireAmmoThisFrame(p0);
    return $res;
}
hashes['0xFF1BED81BFDC0FE0'] = function(p0) {
    const $res = natives.setExplosiveMeleeThisFrame(p0);
    return $res;
}
hashes['0x57FFF03E423A4C0B'] = function(p0) {
    const $res = natives.setSuperJumpThisFrame(p0);
    return $res;
}
hashes['0x438822C279B73B93'] = function(p0) {
    const $res = natives.setBeastJumpThisFrame(p0);
    return $res;
}
hashes['0xA1183BCFEE0F93D1'] = function(p0) {
    const $res = natives.setForcedJumpThisFrame(p0);
    return $res;
}
hashes['0x6FDDF453C0C756EC'] = function() {
    const $res = natives.hasGameInstalledThisSession();
    return $res;
}
hashes['0xFB00CA71DA386228'] = function() {
    const $res = natives.setTickerJohnmarstonIsDone();
    return $res;
}
hashes['0x5AA3BEFA29F03AD4'] = function() {
    const $res = natives.areProfileSettingsValid();
    return $res;
}
hashes['0xE3D969D2785FFB5E'] = function() {
    const $res = natives.preventArrestStateThisFrame();
    return $res;
}
hashes['0xC0AA53F866B3134D'] = function() {
    const $res = natives.forceGameStatePlaying();
    return $res;
}
hashes['0x0A60017F841A54F2'] = function(p0, p1, p2, p3) {
    const $res = natives.scriptRaceInit(p0, p1, p2, p3);
    return $res;
}
hashes['0x1FF6BF9A63E5757F'] = function() {
    const $res = natives.scriptRaceShutdown();
    return $res;
}
hashes['0x1BB299305C3E8C13'] = function(p0, p1, p2, p3) {
    const $res = natives.scriptRacePlayerHitCheckpoint(p0, p1, p2, p3);
    return $res;
}
hashes['0x8EF5573A1F801A5C'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument p2 should be an array');
    const $res = natives.scriptRaceGetPlayerSplitTime(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    return $res[0];
}
hashes['0x92790862E36C2ADA'] = function() {
    const $res = natives.startEndUserBenchmark();
    return $res;
}
hashes['0xC7DB36C24634F52B'] = function() {
    const $res = natives.stopEndUserBenchmark();
    return $res;
}
hashes['0x437138B6A830166A'] = function() {
    const $res = natives.resetEndUserBenchmark();
    return $res;
}
hashes['0x37DEB0AA183FB6D8'] = function() {
    const $res = natives.saveEndUserBenchmark();
    return $res;
}
hashes['0xEA2F2061875EED90'] = function() {
    const $res = natives.uiStartedEndUserBenchmark();
    return $res;
}
hashes['0x3BBBD13E5041A79E'] = function() {
    const $res = natives.landingScreenStartedEndUserBenchmark();
    return $res;
}
hashes['0xA049A5BE0F04F2F8'] = function() {
    const $res = natives.isCommandlineEndUserBenchmark();
    return $res;
}
hashes['0x4750FC27570311EC'] = function() {
    const $res = natives.getBenchmarkIterations();
    return $res;
}
hashes['0x1B2366C3F2A5C8DF'] = function() {
    const $res = natives.getBenchmarkPass();
    return $res;
}
hashes['0xE574A662ACAEFBB1'] = function() {
    const $res = natives.restartGame();
    return $res;
}
hashes['0xEB6891F03362FB12'] = function() {
    const $res = natives.quitGame();
    return $res;
}
hashes['0x14832BF2ABA53FC5'] = function() {
    const $res = natives.hasAsyncInstallFinished();
    return $res;
}
hashes['0xC79AE21974B01FB2'] = function() {
    const $res = natives.cleanupAsyncInstall();
    return $res;
}
hashes['0x684A41975F077262'] = function() {
    const $res = natives.plmIsInConstrainedMode();
    return $res;
}
hashes['0xABB2FA71C83A1B72'] = function() {
    const $res = natives.plmGetConstrainedDurationMs();
    return $res;
}
hashes['0x4EBB7E87AA0DBED4'] = function(p0) {
    const $res = natives.setPlayerIsInAnimalForm(p0);
    return $res;
}
hashes['0x9689123E3F213AA5'] = function() {
    const $res = natives.getIsPlayerInAnimalForm();
    return $res;
}
hashes['0x9D8D44ADBBA61EF2'] = function(p0) {
    const $res = natives.setPlayerIsRepeatingAMission(p0);
    return $res;
}
hashes['0x23227DF0B2115469'] = function() {
    const $res = natives.disableScreenDimmingThisFrame();
    return $res;
}
hashes['0xD10282B6E3751BA0'] = function() {
    const $res = natives.getCityDensity();
    return $res;
}
hashes['0x693478ACBD7F18E7'] = function() {
    const $res = natives.useActiveCameraForTimeslicingCentre();
    return $res;
}
hashes['0x4B82FA6F2D624634'] = function(p0, p1) {
    const $res = natives.setContentIdIndex(p0, p1);
    return $res;
}
hashes['0xECF041186C5A94DC'] = function(p0) {
    const $res = natives.getContentIdIndex(p0);
    return $res;
}
hashes['0xA4E8E696C532FBC7'] = function(p0) {
    const $res = natives.createMobilePhone(p0);
    return $res;
}
hashes['0x3BC861DF703E5097'] = function() {
    const $res = natives.destroyMobilePhone();
    return $res;
}
hashes['0xCBDD322A73D6D932'] = function(p0) {
    const $res = natives.setMobilePhoneScale(p0);
    return $res;
}
hashes['0xBB779C0CA917E865'] = function(p0, p1, p2, p3) {
    const $res = natives.setMobilePhoneRotation(p0, p1, p2, p3);
    return $res;
}
hashes['0x1CEFB61F193070AE'] = function(p0, p1) {
    if (typeof p0 != 'object') throw new Error('Argument rotation should be a Vector3 or an array');
    const $res = natives.getMobilePhoneRotation(Array.isArray(p0[0]) ? new alt.Vector3(p0[0][0], p0[0][1], p0[0][2]) : new alt.Vector3(p0[0].x, p0[0].y, p0[0].z), p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p0[0])) { p0[0][0] = $res[1].x; p0[0][1] = $res[1].y; p0[0][2] = $res[1].z }
    else { p0[0].x = $res[1].x; p0[0].y = $res[1].y; p0[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x693A5C6D6734085B'] = function(p0, p1, p2) {
    const $res = natives.setMobilePhonePosition(p0, p1, p2);
    return $res;
}
hashes['0x584FDFDA48805B86'] = function(p0) {
    if (typeof p0 != 'object') throw new Error('Argument position should be a Vector3 or an array');
    const $res = natives.getMobilePhonePosition(Array.isArray(p0[0]) ? new alt.Vector3(p0[0][0], p0[0][1], p0[0][2]) : new alt.Vector3(p0[0].x, p0[0].y, p0[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p0[0])) { p0[0][0] = $res[1].x; p0[0][1] = $res[1].y; p0[0][2] = $res[1].z }
    else { p0[0].x = $res[1].x; p0[0].y = $res[1].y; p0[0].z = $res[1].z; }
    return $res[0];
}
hashes['0xF511F759238A5122'] = function(p0) {
    const $res = natives.scriptIsMovingMobilePhoneOffscreen(p0);
    return $res;
}
hashes['0xC4E2813898C97A4B'] = function() {
    const $res = natives.canPhoneBeSeenOnScreen();
    return $res;
}
hashes['0x375A706A5C2FD084'] = function(p0) {
    const $res = natives.setMobilePhoneDofState(p0);
    return $res;
}
hashes['0x95C9E72F3D7DEC9B'] = function(p0) {
    const $res = natives.cellSetInput(p0);
    return $res;
}
hashes['0x44E44169EF70138E'] = function(p0) {
    const $res = natives.cellHorizontalModeToggle(p0);
    return $res;
}
hashes['0xFDE8F069C542D126'] = function(p0, p1) {
    const $res = natives.cellCamActivate(p0, p1);
    return $res;
}
hashes['0x015C49A93E3E086E'] = function(p0) {
    const $res = natives.cellCamActivateSelfieMode(p0);
    return $res;
}
hashes['0xA2CCBE62CD4C91A4'] = function(p0) {
    const $res = natives.cellCamActivateShallowDofMode(p0);
    return $res;
}
hashes['0x1B0B4AEED5B9B41C'] = function(p0) {
    const $res = natives.cellCamSetSelfieModeSideOffsetScaling(p0);
    return $res;
}
hashes['0x53F4892D18EC90A4'] = function(p0) {
    const $res = natives.cellCamSetSelfieModeHorzPanOffset(p0);
    return $res;
}
hashes['0x3117D84EFA60F77B'] = function(p0) {
    const $res = natives.cellCamSetSelfieModeVertPanOffset(p0);
    return $res;
}
hashes['0x15E69E2802C24B8D'] = function(p0) {
    const $res = natives.cellCamSetSelfieModeRollOffset(p0);
    return $res;
}
hashes['0xAC2890471901861C'] = function(p0) {
    const $res = natives.cellCamSetSelfieModeDistanceScaling(p0);
    return $res;
}
hashes['0xD6ADE981781FCA09'] = function(p0) {
    const $res = natives.cellCamSetSelfieModeHeadYawOffset(p0);
    return $res;
}
hashes['0xF1E22DC13F5EEBAD'] = function(p0) {
    const $res = natives.cellCamSetSelfieModeHeadRollOffset(p0);
    return $res;
}
hashes['0x466DA42C89865553'] = function(p0) {
    const $res = natives.cellCamSetSelfieModeHeadPitchOffset(p0);
    return $res;
}
hashes['0x439E9BC95B7E7FBE'] = function(p0) {
    const $res = natives.cellCamIsCharVisibleNoFaceCheck(p0);
    return $res;
}
hashes['0xB4A53E05F68B6FA1'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument renderId should be an array');
    const $res = natives.getMobilePhoneRenderId();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x3DA5ECD1A56CBA6D'] = function(p0, p1) {
    const $res = natives.networkInitializeCash(p0, p1);
    return $res;
}
hashes['0x05A50AF38947EB8D'] = function(p0, p1, p2) {
    const $res = natives.networkDeleteCharacter(p0, p1, p2);
    return $res;
}
hashes['0x821418C727FCACD7'] = function(p0) {
    const $res = natives.networkManualDeleteCharacter(p0);
    return $res;
}
hashes['0xFB2456B2040A6A67'] = function() {
    const $res = natives.networkGetPlayerIsHighEarner();
    return $res;
}
hashes['0xA921DED15FDF28F5'] = function(p0) {
    const $res = natives.networkClearCharacterWallet(p0);
    return $res;
}
hashes['0xFB18DF9CB95E0105'] = function(p0, p1) {
    const $res = natives.networkGivePlayerJobshareCash(p0, p1);
    return $res;
}
hashes['0x56A3B51944C50598'] = function(p0, p1) {
    const $res = natives.networkReceivePlayerJobshareCash(p0, p1);
    return $res;
}
hashes['0x1C2473301B1C66BA'] = function() {
    const $res = natives.networkCanShareJobCash();
    return $res;
}
hashes['0xF9C812CD7C46E817'] = function(p0, p1, p2, p3) {
    const $res = natives.networkRefundCash(p0, p1, p2, p3);
    return $res;
}
hashes['0x18B7AE224B087E26'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkDeductCash(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x81404F3DC124FE5B'] = function(p0, p1, p2) {
    const $res = natives.networkMoneyCanBet(p0, p1, p2);
    return $res;
}
hashes['0x3A54E33660DED67F'] = function(p0) {
    const $res = natives.networkCanBet(p0);
    return $res;
}
hashes['0x158C16F5E4CF41F8'] = function(p0) {
    const $res = natives.networkCasinoCanBet(p0);
    return $res;
}
hashes['0x394DCDB9E836B7A9'] = function() {
    const $res = natives.networkCasinoCanBetPvc();
    return $res;
}
hashes['0xF62F6D9528358FE4'] = function(p0) {
    const $res = natives.networkCasinoCanBetAmount(p0);
    return $res;
}
hashes['0x8968D4D8C6C40C11'] = function() {
    const $res = natives.networkCasinoCanBuyChipsPvc();
    return $res;
}
hashes['0x3BD101471C7F9EEC'] = function(p0, p1) {
    const $res = natives.networkCasinoBuyChips(p0, p1);
    return $res;
}
hashes['0xED44897CB336F480'] = function(p0, p1) {
    const $res = natives.networkCasinoSellChips(p0, p1);
    return $res;
}
hashes['0xCD0F5B5D932AE473'] = function() {
    const $res = natives.networkDeferCashTransactionsUntilShopSave();
    return $res;
}
hashes['0x9777734DAD16992F'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p3)) throw new Error('Argument p3 should be an array');
    const $res = natives.canPayAmountToBoss(p0, p1, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p3[0] = $res[1];
    return $res[0];
}
hashes['0xED1517D3AF17C698'] = function(p0) {
    const $res = natives.networkEarnFromPickup(p0);
    return $res;
}
hashes['0x718FBBF67414FA36'] = function(p0) {
    const $res = natives.networkEarnFromCashingOut(p0);
    return $res;
}
hashes['0xA03D4ACE0A3284CE'] = function(p0) {
    const $res = natives.networkEarnFromGangattackPickup(p0);
    return $res;
}
hashes['0xFA700D8A9905F78A'] = function(p0) {
    const $res = natives.networkEarnAssassinateTargetKilled(p0);
    return $res;
}
hashes['0xF514621E8EA463D0'] = function(p0) {
    const $res = natives.networkEarnFromRobArmoredCars(p0);
    return $res;
}
hashes['0xB1CC1B9EC3007A2A'] = function(p0) {
    const $res = natives.networkEarnFromCrateDrop(p0);
    return $res;
}
hashes['0x827A5BA1A44ACA6D'] = function(p0, p1) {
    const $res = natives.networkEarnFromBetting(p0, p1);
    return $res;
}
hashes['0xB2CC4836834E8A98'] = function(p0, p1) {
    const $res = natives.networkEarnFromJob(p0, p1);
    return $res;
}
hashes['0xDEBBF584665411D0'] = function(p0, p1) {
    const $res = natives.networkEarnFromJobx2(p0, p1);
    return $res;
}
hashes['0xC8407624CEF2354B'] = function(p0, p1) {
    const $res = natives.networkEarnFromPremiumJob(p0, p1);
    return $res;
}
hashes['0x61326EE6DF15B0CA'] = function(p0, p1) {
    const $res = natives.networkEarnFromBendJob(p0, p1);
    return $res;
}
hashes['0x2B171E6B2F64D8DF'] = function(p0, p1, p2) {
    const $res = natives.networkEarnFromChallengeWin(p0, p1, p2);
    return $res;
}
hashes['0x131BB5DA15453ACF'] = function(p0, p1, p2, p3) {
    const $res = natives.networkEarnFromBounty(p0, p1, p2, p3);
    return $res;
}
hashes['0xF92A014A634442D6'] = function(p0, p1) {
    const $res = natives.networkEarnFromImportExport(p0, p1);
    return $res;
}
hashes['0x45B8154E077D9E4D'] = function(p0) {
    const $res = natives.networkEarnFromHoldups(p0);
    return $res;
}
hashes['0x849648349D77F5C5'] = function(p0, p1) {
    const $res = natives.networkEarnFromProperty(p0, p1);
    return $res;
}
hashes['0x515B4A22E4D3C6D7'] = function(p0, p1) {
    const $res = natives.networkEarnFromAiTargetKill(p0, p1);
    return $res;
}
hashes['0x4337511FA8221D36'] = function(p0) {
    const $res = natives.networkEarnFromNotBadsport(p0);
    return $res;
}
hashes['0x02CE1D6AC0FC73EA'] = function(p0) {
    const $res = natives.networkEarnFromRockstar(p0);
    return $res;
}
hashes['0xB539BD8A4C1EECF8'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.networkEarnFromVehicle(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x3F4D00167E41E0AD'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.networkEarnFromPersonalVehicle(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x6EA318C91C1A8786'] = function(p0, p1, p2) {
    const $res = natives.networkEarnFromDailyObjectives(p0, p1, p2);
    return $res;
}
hashes['0xFB6DB092FBAE29E6'] = function(p0, p1, p2) {
    const $res = natives.networkEarnFromAmbientJob(p0, p1, p2);
    return $res;
}
hashes['0x6816FB4416760775'] = function(p0, p1, p2) {
    const $res = natives.networkEarnFromJobBonus(p0, p1, p2);
    return $res;
}
hashes['0xFA009A62990671D4'] = function(p0, p1, p2) {
    const $res = natives.networkEarnFromCriminalMastermind(p0, p1, p2);
    return $res;
}
hashes['0x9D4FDBB035229669'] = function(p0, p1, p2) {
    const $res = natives.networkEarnHeistAward(p0, p1, p2);
    return $res;
}
hashes['0x11B0A20C493F7E36'] = function(p0, p1, p2) {
    const $res = natives.networkEarnFirstTimeBonus(p0, p1, p2);
    return $res;
}
hashes['0xCDA1C62BE2777802'] = function(p0, p1, p2) {
    const $res = natives.networkEarnGoon(p0, p1, p2);
    return $res;
}
hashes['0x08B0CA7A6AB3AC32'] = function(p0, p1, p2) {
    const $res = natives.networkEarnBoss(p0, p1, p2);
    return $res;
}
hashes['0x0CB1BE0633C024A8'] = function(p0, p1, p2, p3) {
    const $res = natives.networkEarnAgency(p0, p1, p2, p3);
    return $res;
}
hashes['0x3E4ADAFF1830F146'] = function(p0, p1) {
    const $res = natives.networkEarnFromWarehouse(p0, p1);
    return $res;
}
hashes['0xECA658CE2A4E5A72'] = function(p0, p1) {
    const $res = natives.networkEarnFromContraband(p0, p1);
    return $res;
}
hashes['0x84C0116D012E8FC2'] = function(p0) {
    const $res = natives.networkEarnFromDestroyingContraband(p0);
    return $res;
}
hashes['0x6B7E4FB50D5F3D65'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkEarnFromSmugglerWork(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x31BA138F6304FB9F'] = function(p0, p1) {
    const $res = natives.networkEarnFromHangarTrade(p0, p1);
    return $res;
}
hashes['0x55A1E095DB052FA5'] = function(p0, p1) {
    const $res = natives.networkEarnPurchaseClubHouse(p0, p1);
    return $res;
}
hashes['0x8586789730B10CAF'] = function(p0, p1, p2, p3) {
    const $res = natives.networkEarnFromBusinessProduct(p0, p1, p2, p3);
    return $res;
}
hashes['0xEDEAD9A91EC768B3'] = function(p0, p1, p2) {
    const $res = natives.networkEarnFromVehicleExport(p0, p1, p2);
    return $res;
}
hashes['0xDEE612F2D71B0308'] = function(p0, p1, p2, p3) {
    const $res = natives.networkEarnSmugglerAgency(p0, p1, p2, p3);
    return $res;
}
hashes['0xF6B170F9A02E9E87'] = function(p0) {
    const $res = natives.networkEarnBountyHunterReward(p0);
    return $res;
}
hashes['0x42FCE14F50F27291'] = function(p0) {
    const $res = natives.networkEarnFromBusinessBattle(p0);
    return $res;
}
hashes['0xA75EAC69F59E96E7'] = function(p0, p1) {
    const $res = natives.networkEarnFromClubManagementParticipation(p0, p1);
    return $res;
}
hashes['0xC5156361F26E2212'] = function(p0) {
    const $res = natives.networkEarnFromFmbbPhonecallMission(p0);
    return $res;
}
hashes['0x0B39CF0D53F1C883'] = function(p0, p1, p2) {
    const $res = natives.networkEarnFromBusinessHubSell(p0, p1, p2);
    return $res;
}
hashes['0x1FDA0AA679C9919B'] = function(p0) {
    const $res = natives.networkEarnFromFmbbBossWork(p0);
    return $res;
}
hashes['0xFFFBA1B1F7C0B6F4'] = function(p0) {
    const $res = natives.networkEarnFmbbWageBonus(p0);
    return $res;
}
hashes['0xAB3CAA6B422164DA'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkCanSpendMoney(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x7303E27CC6532080'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.networkCanSpendMoney2(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xF0077C797F66A355'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.networkBuyItem(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x17C3A7D31EAE39F9'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpentTaxi(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x5FD5ED82CBBE9989'] = function(p0, p1, p2) {
    const $res = natives.networkPayEmployeeWage(p0, p1, p2);
    return $res;
}
hashes['0x9346E14F2AF74D46'] = function(p0, p1, p2, p3) {
    const $res = natives.networkPayMatchEntryFee(p0, p1, p2, p3);
    return $res;
}
hashes['0x1C436FD11FFA692F'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpentBetting(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xD99DB210089617FE'] = function(p0, p1, p2) {
    const $res = natives.networkSpentWager(p0, p1, p2);
    return $res;
}
hashes['0xEE99784E4467689C'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentInStripclub(p0, p1, p2, p3);
    return $res;
}
hashes['0xD9B067E55253E3DD'] = function(p0, p1, p2) {
    const $res = natives.networkBuyHealthcare(p0, p1, p2);
    return $res;
}
hashes['0x763B4BD305338F19'] = function(p0, p1, p2, p3) {
    const $res = natives.networkBuyAirstrike(p0, p1, p2, p3);
    return $res;
}
hashes['0xA3EDDAA42411D3B9'] = function(p0, p1, p2, p3) {
    const $res = natives.networkBuyBackupGang(p0, p1, p2, p3);
    return $res;
}
hashes['0x81AA4610E3FD3A69'] = function(p0, p1, p2, p3) {
    const $res = natives.networkBuyHeliStrike(p0, p1, p2, p3);
    return $res;
}
hashes['0xB162DC95C0A3317B'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentAmmoDrop(p0, p1, p2, p3);
    return $res;
}
hashes['0x7B718E197453F2D9'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkBuyBounty(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x650A08A280870AF6'] = function(p0, p1, p2, p3) {
    const $res = natives.networkBuyProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0x75AF80E61248EEBD'] = function(p0, p1, p2) {
    const $res = natives.networkBuySmokes(p0, p1, p2);
    return $res;
}
hashes['0x7BF1D73DB2ECA492'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentHeliPickup(p0, p1, p2, p3);
    return $res;
}
hashes['0x524EE43A37232C00'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentBoatPickup(p0, p1, p2, p3);
    return $res;
}
hashes['0xA6DD8458CE24012C'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentBullShark(p0, p1, p2, p3);
    return $res;
}
hashes['0x289016EC778D60E0'] = function(p0, p1, p2) {
    const $res = natives.networkSpentCashDrop(p0, p1, p2);
    return $res;
}
hashes['0xE404BFB981665BF0'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentHireMugger(p0, p1, p2, p3);
    return $res;
}
hashes['0x995A65F15F581359'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentRobbedByMugger(p0, p1, p2, p3);
    return $res;
}
hashes['0xE7B80E2BF9D80BD6'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentHireMercenary(p0, p1, p2, p3);
    return $res;
}
hashes['0xE1B13771A843C4F6'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpentBuyWantedlevel(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xA628A745E2275C5D'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentBuyOfftheradar(p0, p1, p2, p3);
    return $res;
}
hashes['0x6E176F1B18BC0637'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentBuyRevealPlayers(p0, p1, p2, p3);
    return $res;
}
hashes['0xEC03C719DB2F4306'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpentCarwash(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x6B38ECB05A63A685'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentCinema(p0, p1, p2, p3);
    return $res;
}
hashes['0x7FE61782AD94CC09'] = function(p0, p1, p2) {
    const $res = natives.networkSpentTelescope(p0, p1, p2);
    return $res;
}
hashes['0xD9B86B9872039763'] = function(p0, p1, p2) {
    const $res = natives.networkSpentHoldups(p0, p1, p2);
    return $res;
}
hashes['0x6D3A430D1A809179'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentBuyPassiveMode(p0, p1, p2, p3);
    return $res;
}
hashes['0xCA230C9682556CF1'] = function(p0, p1, p2) {
    const $res = natives.networkSpentBankInterest(p0, p1, p2);
    return $res;
}
hashes['0xB21B89501CFAC79E'] = function(p0, p1, p2) {
    const $res = natives.networkSpentProstitutes(p0, p1, p2);
    return $res;
}
hashes['0x812F5488B1B2A299'] = function(p0, p1, p2) {
    const $res = natives.networkSpentArrestBail(p0, p1, p2);
    return $res;
}
hashes['0x9FF28D88C766E3E8'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpentPayVehicleInsurancePremium(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xACDE7185B374177C'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentCallPlayer(p0, p1, p2, p3);
    return $res;
}
hashes['0x29B260B84947DFCC'] = function(p0, p1, p2) {
    const $res = natives.networkSpentBounty(p0, p1, p2);
    return $res;
}
hashes['0x6A445B64ED7ABEB5'] = function(p0, p1, p2) {
    const $res = natives.networkSpentFromRockstar(p0, p1, p2);
    return $res;
}
hashes['0x9B5016A6433A68C5'] = function(p0) {
    const $res = natives.networkSpendEarnedFromBankAndWallets(p0);
    return $res;
}
hashes['0x20194D48EAEC9A41'] = function(p0, p1, p2) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.processCashGift(p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    return $res[0];
}
hashes['0xCD4D66B43B1DD28D'] = function(p0, p1, p2) {
    const $res = natives.networkSpentMoveSubmarine(p0, p1, p2);
    return $res;
}
hashes['0x7C99101F7FCE2EE5'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPlayerHealthcare(p0, p1, p2, p3);
    return $res;
}
hashes['0xD5BB406F4E04019F'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentNoCops(p0, p1, p2, p3);
    return $res;
}
hashes['0x948705F6F9C50824'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkSpentCargoSourcing(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x8204DA7934DF3155'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentRequestJob(p0, p1, p2, p3);
    return $res;
}
hashes['0x9D26502BB97BFE62'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentRequestHeist(p0, p1, p2, p3);
    return $res;
}
hashes['0x8A7B3952DD64D2B5'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkBuyFairgroundRide(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x7C4FCCD2E4DEB394'] = function() {
    const $res = natives.networkEconomyHasFixedCrazyNumbers();
    return $res;
}
hashes['0x28F174A67B8D0C2F'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentJobSkip(p0, p1, p2, p3);
    return $res;
}
hashes['0xFFBE02CD385356BD'] = function(p0, p1, p2) {
    const $res = natives.networkSpentBossGoon(p0, p1, p2);
    return $res;
}
hashes['0x08A1B82B91900682'] = function(p0, p1, p2) {
    const $res = natives.networkSpendGoon(p0, p1, p2);
    return $res;
}
hashes['0xDBC966A01C02BCA7'] = function(p0, p1, p2) {
    const $res = natives.networkSpendBoss(p0, p1, p2);
    return $res;
}
hashes['0xE7DF4E0545DFB56E'] = function(p0, p1, p2) {
    const $res = natives.networkSpentMoveYacht(p0, p1, p2);
    return $res;
}
hashes['0xFC4EE00A7B3BFB76'] = function(p0, p1, p2) {
    const $res = natives.networkSpentRenameOrganization(p0, p1, p2);
    return $res;
}
hashes['0x30FD873ECE50E9F6'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkBuyContrabandMission(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x112209CE0290C03A'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPaServiceHeli(p0, p1, p2, p3);
    return $res;
}
hashes['0xED5FD7AF10F5E262'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPaServiceVehicle(p0, p1, p2, p3);
    return $res;
}
hashes['0x0D30EB83668E63C5'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPaServiceSnack(p0, p1, p2, p3);
    return $res;
}
hashes['0xB49ECA122467D05F'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPaServiceDancer(p0, p1, p2, p3);
    return $res;
}
hashes['0xE23ADC6FCB1F29AE'] = function(p0, p1, p2) {
    const $res = natives.networkSpentPaServiceImpound(p0, p1, p2);
    return $res;
}
hashes['0x0FE8E1FCD2B86B33'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPaHeliPickup(p0, p1, p2, p3);
    return $res;
}
hashes['0x69EF772B192614C1'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPurchaseOfficeProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0x8E243837643D9583'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeOfficeProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0xBD0EFB25CCA8F97A'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPurchaseWarehouseProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0xA95F667A755725DA'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeWarehouseProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0x33981D6804E62F49'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPurchaseImpexpWarehouseProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0x4128464231E3CA0B'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeImpexpWarehouseProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0x2FAB6614CE22E196'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentTradeImpexpWarehouseProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0x05F04155A226FBBF'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentOrderWarehouseVehicle(p0, p1, p2, p3);
    return $res;
}
hashes['0xE8B0B270B6E7C76E'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentOrderBodyguardVehicle(p0, p1, p2, p3);
    return $res;
}
hashes['0x5BCDE0F640C773D2'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentJukebox(p0, p1, p2, p3);
    return $res;
}
hashes['0x998E18CEB44487FC'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPurchaseClubHouse(p0, p1, p2, p3);
    return $res;
}
hashes['0xFA07759E6FDDD7CF'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeClubHouse(p0, p1, p2, p3);
    return $res;
}
hashes['0x6FD97159FE3C971A'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPurchaseBusinessProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0x675D19C6067CAE08'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeBusinessProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0xA51B086B0B2C0F7A'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentTradeBusinessProperty(p0, p1, p2, p3);
    return $res;
}
hashes['0xD7CCCBA28C4ECAF0'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpentMcAbility(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x0035BB914316F1E3'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPayBusinessSupplies(p0, p1, p2, p3);
    return $res;
}
hashes['0x5F456788B05FAEAC'] = function(p0, p1, p2) {
    const $res = natives.networkSpentChangeAppearance(p0, p1, p2);
    return $res;
}
hashes['0xA75CCF58A60A5FD1'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.networkSpentVehicleExportMods(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xB4C2EC463672474E'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPurchaseOfficeGarage(p0, p1, p2, p3);
    return $res;
}
hashes['0x2AFC2D19B50797F2'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeOfficeGarage(p0, p1, p2, p3);
    return $res;
}
hashes['0xC1952F3773BA18FE'] = function(p0, p1, p2) {
    const $res = natives.networkSpentImportExportRepair(p0, p1, p2);
    return $res;
}
hashes['0xCCB339CC970452DA'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPurchaseHangar(p0, p1, p2, p3);
    return $res;
}
hashes['0x615EB504B0788DAF'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeHangar(p0, p1, p2, p3);
    return $res;
}
hashes['0xB18AC2ECBB15CB6A'] = function(p0, p1, p2) {
    const $res = natives.networkSpentHangarUtilityCharges(p0, p1, p2);
    return $res;
}
hashes['0xB1F1346FD57685D7'] = function(p0, p1, p2) {
    const $res = natives.networkSpentHangarStaffCharges(p0, p1, p2);
    return $res;
}
hashes['0xAC272C0AE01B4BD8'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentBuyTruck(p0, p1, p2, p3);
    return $res;
}
hashes['0x365E877C61D6988B'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeTruck(p0, p1, p2, p3);
    return $res;
}
hashes['0x12D148D26538D0F9'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentBuyBunker(p0, p1, p2, p3);
    return $res;
}
hashes['0x0C82D21A77C22D49'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpradeBunker(p0, p1, p2, p3);
    return $res;
}
hashes['0x9251B6ABF2D0A5B4'] = function(p0, p1) {
    const $res = natives.networkEarnFromSellBunker(p0, p1);
    return $res;
}
hashes['0x5D97630A8A0EF123'] = function(p0, p1, p2) {
    const $res = natives.networkSpentBallisticEquipment(p0, p1, p2);
    return $res;
}
hashes['0x7A5349B773584675'] = function(p0, p1) {
    const $res = natives.networkEarnRdrBonus(p0, p1);
    return $res;
}
hashes['0x35F8DA0E8A31EF1B'] = function(p0, p1) {
    const $res = natives.networkEarnWagePayment(p0, p1);
    return $res;
}
hashes['0x005ACA7100BD101D'] = function(p0) {
    const $res = natives.networkEarnWagePaymentBonus(p0);
    return $res;
}
hashes['0x4EA3F425C7744D21'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentBuyBase(p0, p1, p2, p3);
    return $res;
}
hashes['0x3DD3F33A5D55EA6F'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeBase(p0, p1, p2, p3);
    return $res;
}
hashes['0x0CCE73BC7A11E885'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentBuyTiltrotor(p0, p1, p2, p3);
    return $res;
}
hashes['0x165E135D6DFA2907'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeTiltrotor(p0, p1, p2, p3);
    return $res;
}
hashes['0x5BBBD92186E1F1C5'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentEmployAssassins(p0, p1, p2, p3);
    return $res;
}
hashes['0x771ADB0E7635B7BF'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendGangopsCannon(p0, p1, p2, p3);
    return $res;
}
hashes['0xDA947AE8880D5C18'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendGangopsSkipMission(p0, p1, p2, p3);
    return $res;
}
hashes['0x487009DD91D93429'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendCasinoHeistSkipMission(p0, p1, p2, p3);
    return $res;
}
hashes['0x0E1E2FF3F4EC11AA'] = function(p0, p1) {
    const $res = natives.networkEarnSellBase(p0, p1);
    return $res;
}
hashes['0x5B669CF2299A271F'] = function(p0, p1) {
    const $res = natives.networkEarnTargetRefund(p0, p1);
    return $res;
}
hashes['0x2DCB19ABAB0380A8'] = function(p0, p1) {
    const $res = natives.networkEarnGangopsWages(p0, p1);
    return $res;
}
hashes['0x15BB2A5C757EB91F'] = function(p0, p1) {
    const $res = natives.networkEarnGangopsWagesBonus(p0, p1);
    return $res;
}
hashes['0xCAC672087B4A24AB'] = function(p0, p1) {
    const $res = natives.networkEarnDarChallenge(p0, p1);
    return $res;
}
hashes['0x128A747F4A230952'] = function(p0, p1) {
    const $res = natives.networkEarnDoomsdayFinaleBonus(p0, p1);
    return $res;
}
hashes['0xA9A31475F530DFDA'] = function(p0, p1, p2) {
    const $res = natives.networkEarnGangopsAward(p0, p1, p2);
    return $res;
}
hashes['0x2597A0D4A4FC2C77'] = function(p0, p1, p2) {
    const $res = natives.networkEarnGangopsElite(p0, p1, p2);
    return $res;
}
hashes['0x1B882107C23A9022'] = function(p0) {
    const $res = natives.networkServiceEarnGangopsRivalDelivery(p0);
    return $res;
}
hashes['0xA19EC0786E326E06'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendGangopsStartStrand(p0, p1, p2, p3);
    return $res;
}
hashes['0x5ECE6FD7B4EC8D6A'] = function(p0, p1, p2) {
    const $res = natives.networkSpendGangopsTripSkip(p0, p1, p2);
    return $res;
}
hashes['0xED26584F6BDCBBFD'] = function(p0) {
    const $res = natives.networkEarnGangopsPrepParticipation(p0);
    return $res;
}
hashes['0xA9160796D47A2CF8'] = function(p0, p1) {
    const $res = natives.networkEarnGangopsSetup(p0, p1);
    return $res;
}
hashes['0x1C121FC9545E0D52'] = function(p0, p1) {
    const $res = natives.networkEarnGangopsFinale(p0, p1);
    return $res;
}
hashes['0x2A7CEC72C3443BCC'] = function(p0, p1, p2) {
    const $res = natives.networkSpendGangopsRepairCost(p0, p1, p2);
    return $res;
}
hashes['0xE0F82D68C7039158'] = function(p0) {
    const $res = natives.networkEarnNightclub(p0);
    return $res;
}
hashes['0xB4DEAE67F35E2ACD'] = function(p0) {
    const $res = natives.networkEarnNightclubDancing(p0);
    return $res;
}
hashes['0xFDD8D2440DAF1590'] = function(p0) {
    const $res = natives.networkEarnBbEventBonus(p0);
    return $res;
}
hashes['0x2A93C46AAB1EACC9'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPurchaseHackerTruck(p0, p1, p2, p3);
    return $res;
}
hashes['0x226C284C830D0CA8'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeHackerTruck(p0, p1, p2, p3);
    return $res;
}
hashes['0xE8815FE993896AD3'] = function(p0, p1, p2, p3) {
    const $res = natives.networkEarnHackerTruck(p0, p1, p2, p3);
    return $res;
}
hashes['0xED76D195E6E3BF7F'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentPurchaseNightclubAndWarehouse(p0, p1, p2, p3);
    return $res;
}
hashes['0x1DC9B749E7AE282B'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentUpgradeNightclubAndWarehouse(p0, p1, p2, p3);
    return $res;
}
hashes['0xC6E74CF8C884C880'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.networkEarnNightclubAndWarehouse(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x65482BFD0923C8A1'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendNightclubAndWarehouse(p0, p1, p2, p3);
    return $res;
}
hashes['0xE284D46FFDB82E36'] = function(p0, p1, p2) {
    const $res = natives.networkSpentRdrHatchetBonus(p0, p1, p2);
    return $res;
}
hashes['0x876056684281655D'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpentNightclubEntryFee(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xDD21B016E4289465'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendNightclubBarDrink(p0, p1, p2, p3);
    return $res;
}
hashes['0x1BEA0CD93470BB1F'] = function(p0, p1, p2) {
    const $res = natives.networkSpendBountyHunterMission(p0, p1, p2);
    return $res;
}
hashes['0xF6C8A544E4CF14FC'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentRehireDj(p0, p1, p2, p3);
    return $res;
}
hashes['0x14EAEA58F93B55AF'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpentArenaJoinSpectator(p0, p1, p2, p3);
    return $res;
}
hashes['0xE08256F972C7BB2C'] = function(p0, p1) {
    const $res = natives.networkEarnArenaSkillLevelProgression(p0, p1);
    return $res;
}
hashes['0x0F99F70C61F14619'] = function(p0, p1) {
    const $res = natives.networkEarnArenaCareerProgression(p0, p1);
    return $res;
}
hashes['0xE5F5A060439C2F5D'] = function(p0, p1, p2) {
    const $res = natives.networkSpendMakeItRain(p0, p1, p2);
    return $res;
}
hashes['0x40D5DA9550B7CB46'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBuyArena(p0, p1, p2, p3);
    return $res;
}
hashes['0x037ABB06825D7AB1'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeArena(p0, p1, p2, p3);
    return $res;
}
hashes['0x7049BF858601DC0F'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendArenaSpectatorBox(p0, p1, p2, p3);
    return $res;
}
hashes['0x9A5BD1D0000B339C'] = function(p0, p1, p2) {
    const $res = natives.networkSpendSpinTheWheelPayment(p0, p1, p2);
    return $res;
}
hashes['0x676C48776CACBB5A'] = function(p0) {
    const $res = natives.networkEarnSpinTheWheelCash(p0);
    return $res;
}
hashes['0x619496D837EFD920'] = function(p0, p1, p2) {
    const $res = natives.networkSpendArenaPremium(p0, p1, p2);
    return $res;
}
hashes['0x631F1CB8FB4130AA'] = function(p0, p1, p2, p3) {
    const $res = natives.networkEarnArenaWar(p0, p1, p2, p3);
    return $res;
}
hashes['0x5E7AE8AABE8B7C0D'] = function(p0) {
    const $res = natives.networkEarnArenaWarAssassinateTarget(p0);
    return $res;
}
hashes['0xA82959062361B259'] = function(p0) {
    const $res = natives.networkEarnArenaWarEventCargo(p0);
    return $res;
}
hashes['0xDFF49EE984E7AAE8'] = function(p0) {
    const $res = natives.networkEarnRcTimeTrial(p0);
    return $res;
}
hashes['0x5128DF14A5BB86FC'] = function(p0) {
    const $res = natives.networkEarnDailyObjectiveEvent(p0);
    return $res;
}
hashes['0xFBBE0570EDF39D46'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendCasinoMembership(p0, p1, p2, p3);
    return $res;
}
hashes['0x34A6FC4D06C4DA0F'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBuyCasino(p0, p1, p2, p3);
    return $res;
}
hashes['0x4740D62BC1B4EBEA'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeCasino(p0, p1, p2, p3);
    return $res;
}
hashes['0x88BF9B612B84D3C3'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpendCasinoGeneric(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x0819DB99FD2FBBD8'] = function(p0) {
    const $res = natives.networkEarnCasinoTimeTrialWin(p0);
    return $res;
}
hashes['0x5517F90043466049'] = function(p0) {
    const $res = natives.networkEarnCollectablesActionFigures(p0);
    return $res;
}
hashes['0x83AD64F53F4E9483'] = function(p0) {
    const $res = natives.networkEarnCasinoCollectableCompletedCollection(p0);
    return $res;
}
hashes['0x8BCB27A057DF7B7F'] = function(p0, p1, p2) {
    const $res = natives.networkEarnSellPrizeVehicle(p0, p1, p2);
    return $res;
}
hashes['0x566FD402B25787DE'] = function(p0) {
    const $res = natives.networkEarnCasinoMissionReward(p0);
    return $res;
}
hashes['0xAC95ED552157E092'] = function(p0) {
    const $res = natives.networkEarnCasinoStoryMissionReward(p0);
    return $res;
}
hashes['0x09E8F18641BE2575'] = function(p0) {
    const $res = natives.networkEarnCasinoMissionParticipation(p0);
    return $res;
}
hashes['0x973A9781A34F8DEB'] = function(p0, p1) {
    const $res = natives.networkEarnCasinoAward(p0, p1);
    return $res;
}
hashes['0x870289A558348378'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBuyArcade(p0, p1, p2, p3);
    return $res;
}
hashes['0x5574637681911FDA'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeArcade(p0, p1, p2, p3);
    return $res;
}
hashes['0xD30E8392F407C328'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.networkSpendCasinoHeist(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0xB5B58E24868CB09E'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpendArcadeMgmt(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xEAD3D81F2C3A1458'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpendPlayArcade(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x43AA7FAC4E6D6687'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpendArcade(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x72E7C7B9615FA3C3'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.networkEarnCasinoHeist(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x4C3B75694F7E0D9C'] = function(p0, p1, p2) {
    const $res = natives.networkEarnUpgradeArcade(p0, p1, p2);
    return $res;
}
hashes['0xD29334ED1A256DBF'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkEarnArcade(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xA95CFB4E02390842'] = function(p0, p1, p2) {
    const $res = natives.networkEarnCollectables(p0, p1, p2);
    return $res;
}
hashes['0x0DD362F14F18942A'] = function(p0, p1, p2) {
    const $res = natives.networkEarnChallenge(p0, p1, p2);
    return $res;
}
hashes['0x3EC7471E6909798A'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkEarnCasinoHeistAwards(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x84FF63BD4966F33D'] = function(p0, p1) {
    const $res = natives.networkEarnCollectableItem(p0, p1);
    return $res;
}
hashes['0x5C9B198AF5A54FA6'] = function(p0, p1) {
    const $res = natives.networkEarnCollectableCompletedCollection(p0, p1);
    return $res;
}
hashes['0xDE68E30D89F97132'] = function(p0, p1) {
    const $res = natives.networkEarnYatchMission(p0, p1);
    return $res;
}
hashes['0xE2E244AB823B4483'] = function(p0, p1) {
    const $res = natives.networkEarnDispatchCall(p0, p1);
    return $res;
}
hashes['0x54ABA22FA6371249'] = function(p0) {
    const $res = natives.networkSpendBeachParty(p0);
    return $res;
}
hashes['0x6C8BC1488527AAAB'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkSpendSubmarine(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xC991C255AA6D90B2'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.networkSpendCasinoClub(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x90CD7C6871FBF1B4'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBuySub(p0, p1, p2, p3);
    return $res;
}
hashes['0x89049A84065CE68E'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeSub(p0, p1, p2, p3);
    return $res;
}
hashes['0xE86689E5F82DE429'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendIslandHeist(p0, p1, p2, p3);
    return $res;
}
hashes['0xD21D111C46BA9F15'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkEarnIslandHeist(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xA51338E0DCCD4065'] = function(p0, p1, p2) {
    const $res = natives.networkEarnBeachPartyLostFound(p0, p1, p2);
    return $res;
}
hashes['0xE2BB399D90942091'] = function(p0, p1) {
    const $res = natives.networkEarnFromIslandHeistDjMission(p0, p1);
    return $res;
}
hashes['0x1464E17207CD36E2'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpendCarClubMembership(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x925227803A0EAA1B'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendCarClubBar(p0, p1, p2, p3);
    return $res;
}
hashes['0x9BEA350D7C48061B'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpendAutoshopModify(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xD1E46824E6FB92B5'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendCarClubTakeover(p0, p1, p2, p3);
    return $res;
}
hashes['0xEEB7E5D1FEB20869'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBuyAutoshop(p0, p1, p2, p3);
    return $res;
}
hashes['0xDD829AA198FDC46C'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeAutoshop(p0, p1, p2, p3);
    return $res;
}
hashes['0x36A7FD5A7194B03E'] = function(p0, p1, p2) {
    const $res = natives.networkEarnAutoshopBusiness(p0, p1, p2);
    return $res;
}
hashes['0xC66D1CF99ED7FE25'] = function(p0, p1) {
    const $res = natives.networkEarnAutoshopIncome(p0, p1);
    return $res;
}
hashes['0xBC6227792A188E2E'] = function(p0) {
    const $res = natives.networkEarnCarclubMembership(p0);
    return $res;
}
hashes['0x533073E8A596008C'] = function(p0, p1) {
    const $res = natives.networkEarnDailyVehicle(p0, p1);
    return $res;
}
hashes['0xFE65AFE7308E32B2'] = function(p0) {
    const $res = natives.networkEarnDailyVehicleBonus(p0);
    return $res;
}
hashes['0xB846F547D3792DF6'] = function(p0, p1, p2) {
    const $res = natives.networkEarnTunerAward(p0, p1, p2);
    return $res;
}
hashes['0xBCB266247193AC61'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkEarnTunerRobbery(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC10322A8D3E061EE'] = function(p0, p1) {
    const $res = natives.networkEarnUpgradeAutoshop(p0, p1);
    return $res;
}
hashes['0x93AA4165CB67E925'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendInteractionMenuAbility(p0, p1, p2, p3);
    return $res;
}
hashes['0xB9F7A469460E7A4A'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendSetCommonFields(p0, p1, p2, p3);
    return $res;
}
hashes['0x7E2F4E8F44CAF4E0'] = function(p0) {
    const $res = natives.networkSpendSetDiscount(p0);
    return $res;
}
hashes['0xEA8CD3C9B3C35884'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBuyAgency(p0, p1, p2, p3);
    return $res;
}
hashes['0x6CCA64840589A3B6'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeAgency(p0, p1, p2, p3);
    return $res;
}
hashes['0x1B2120405080125C'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpendAgency(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xBF8793B91EA094A7'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendHidden(p0, p1, p2, p3);
    return $res;
}
hashes['0xD9DF467CBE4398C8'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendSourceBike(p0, p1, p2, p3);
    return $res;
}
hashes['0xD86581F9E7CDA383'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendCompSuv(p0, p1, p2, p3);
    return $res;
}
hashes['0x61A2DF64ED2D396E'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendSuvFstTrvl(p0, p1, p2, p3);
    return $res;
}
hashes['0xEBD482B82ACB8BAD'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendSupply(p0, p1, p2, p3);
    return $res;
}
hashes['0x923AEA8E78F8DF0B'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBikeShop(p0, p1, p2, p3);
    return $res;
}
hashes['0x02D24A35A9CC3503'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSpendVehicleRequested(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x2CEB0E0BC2A77C05'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendGunrunning(p0, p1, p2, p3);
    return $res;
}
hashes['0x663B4B9D11742A12'] = function(p0) {
    const $res = natives.networkEarnAgencySafe(p0);
    return $res;
}
hashes['0x146D4EB6D22A403F'] = function(p0, p1) {
    const $res = natives.networkEarnAwardContract(p0, p1);
    return $res;
}
hashes['0x38482AD49CB905C7'] = function(p0, p1) {
    const $res = natives.networkEarnAgencyContract(p0, p1);
    return $res;
}
hashes['0x7397A115030F1BE3'] = function(p0, p1) {
    const $res = natives.networkEarnAwardPhone(p0, p1);
    return $res;
}
hashes['0xE29F3D5FA63B1B82'] = function(p0, p1, p2) {
    const $res = natives.networkEarnAgencyPhone(p0, p1, p2);
    return $res;
}
hashes['0x88D6C327D6C57C45'] = function(p0, p1) {
    const $res = natives.networkEarnAwardFixerMission(p0, p1);
    return $res;
}
hashes['0x6283E5DE4C4460C6'] = function(p0, p1) {
    const $res = natives.networkEarnFixerPrep(p0, p1);
    return $res;
}
hashes['0xBA154373C5FE51E8'] = function(p0, p1) {
    const $res = natives.networkEarnFixerFinale(p0, p1);
    return $res;
}
hashes['0xF4A8E57460BF2037'] = function(p0, p1) {
    const $res = natives.networkEarnFixerAgencyShortTrip(p0, p1);
    return $res;
}
hashes['0x5B4DBDED84D6A420'] = function(p0, p1) {
    const $res = natives.networkEarnAwardShortTrip(p0, p1);
    return $res;
}
hashes['0x235D41210B3A1A5E'] = function(p0, p1) {
    const $res = natives.networkEarnFixerRivalDelivery(p0, p1);
    return $res;
}
hashes['0xD07C7C3F1995108C'] = function(p0, p1) {
    const $res = natives.networkEarnUpgradeAgency(p0, p1);
    return $res;
}
hashes['0x1254B5B3925EFD3D'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendApartmentUtilities(p0, p1, p2, p3);
    return $res;
}
hashes['0x92D1CFDA1227FF1C'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBusinessPropertyFees(p0, p1, p2, p3);
    return $res;
}
hashes['0x45087AE480B233AC'] = function(p0, p1, p2, p3) {
    const $res = natives.networkEarnSightseeingReward(p0, p1, p2, p3);
    return $res;
}
hashes['0x2C5809EB9DF57257'] = function(p0, p1) {
    const $res = natives.networkEarnBikerShop(p0, p1);
    return $res;
}
hashes['0x71BEC32FA466E105'] = function(p0) {
    const $res = natives.networkEarnBiker(p0);
    return $res;
}
hashes['0x59498BC8B1C8B15C'] = function(p0, p1, p2, p3) {
    const $res = natives.networkYohanSourceGoods(p0, p1, p2, p3);
    return $res;
}
hashes['0xA2ED36DCF0FCA413'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBuyMfgarage(p0, p1, p2, p3);
    return $res;
}
hashes['0xCF8F346DDDC66643'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeMfgarage(p0, p1, p2, p3);
    return $res;
}
hashes['0xB48185C0CA67B16B'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBuySupplies(p0, p1, p2, p3);
    return $res;
}
hashes['0xF1E26A7924327152'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendBuyAcidLab(p0, p1, p2, p3);
    return $res;
}
hashes['0x110EE9D486C23126'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeAcidLabEquipment(p0, p1, p2, p3);
    return $res;
}
hashes['0xA7D541C9ACD63133'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeAcidLabArmor(p0, p1, p2, p3);
    return $res;
}
hashes['0x2940558E05BCC2EC'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeAcidLabScoop(p0, p1, p2, p3);
    return $res;
}
hashes['0x4B99AB08C92C54E4'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendUpgradeAcidLabMines(p0, p1, p2, p3);
    return $res;
}
hashes['0x842B1C5AF61ACDE9'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendRenameAcidLab(p0, p1, p2, p3);
    return $res;
}
hashes['0x446798F7495DD7D8'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSpendRenameAcidProduct(p0, p1, p2, p3);
    return $res;
}
hashes['0xDDF047577F1A02A7'] = function(p0, p1) {
    const $res = natives.networkEarnAwardJuggaloMission(p0, p1);
    return $res;
}
hashes['0xD1A8165767AD2D23'] = function(p0, p1) {
    const $res = natives.networkEarnAwardAcidLab(p0, p1);
    return $res;
}
hashes['0xC30650FA74A19D02'] = function(p0, p1) {
    const $res = natives.networkEarnAwardDailyStash(p0, p1);
    return $res;
}
hashes['0xD01EBAEA1F905EF6'] = function(p0, p1) {
    const $res = natives.networkEarnAwardDeadDrop(p0, p1);
    return $res;
}
hashes['0xBEAFBB1B98B7EF55'] = function(p0, p1) {
    const $res = natives.networkEarnAwardRandomEvent(p0, p1);
    return $res;
}
hashes['0xA914768AD35CD3A5'] = function(p0, p1) {
    const $res = natives.networkEarnAwardTaxi(p0, p1);
    return $res;
}
hashes['0xA81017EE1324FDFE'] = function(p0, p1) {
    const $res = natives.networkEarnStreetDealer(p0, p1);
    return $res;
}
hashes['0x79B656937DF6DF5D'] = function(p0, p1) {
    const $res = natives.networkEarnSellAcid(p0, p1);
    return $res;
}
hashes['0xE3942D59E8A7F70D'] = function(p0, p1) {
    const $res = natives.networkEarnSetupParticipationAcidLab(p0, p1);
    return $res;
}
hashes['0x136F11B5DF1B304D'] = function(p0, p1) {
    const $res = natives.networkEarnSourceParticipationAcidLab(p0, p1);
    return $res;
}
hashes['0xCA3EF9B09A8D76B4'] = function(p0, p1) {
    const $res = natives.networkEarnSellParticipationAcidLab(p0, p1);
    return $res;
}
hashes['0xE01D10BA8CD53621'] = function(p0, p1) {
    const $res = natives.networkEarnJuggaloStoryMission(p0, p1);
    return $res;
}
hashes['0x40FF6CCCC476185C'] = function(p0, p1) {
    const $res = natives.networkEarnJuggaloStoryMissionParticipation(p0, p1);
    return $res;
}
hashes['0xCE4452AE85F5E252'] = function(p0, p1) {
    const $res = natives.networkEarnFooliganJob(p0, p1);
    return $res;
}
hashes['0xC376B92D0E060970'] = function(p0, p1) {
    const $res = natives.networkEarnFooliganJobParticipation(p0, p1);
    return $res;
}
hashes['0x991E1588FAD9019D'] = function(p0, p1) {
    const $res = natives.networkEarnTaxiJob(p0, p1);
    return $res;
}
hashes['0xCABC9874AFA70D6D'] = function(p0, p1) {
    const $res = natives.networkEarnDailyStashHouseCompleted(p0, p1);
    return $res;
}
hashes['0x9C0C6BD0F94CE391'] = function(p0, p1) {
    const $res = natives.networkEarnDailyStashHouseParticipation(p0, p1);
    return $res;
}
hashes['0x76EF28DA05EA395A'] = function() {
    const $res = natives.networkGetVcBankBalance();
    return $res;
}
hashes['0xA40F9C2623F6A8B5'] = function(p0) {
    const $res = natives.networkGetVcWalletBalance(p0);
    return $res;
}
hashes['0x5CBAD97E059E1B94'] = function() {
    const $res = natives.networkGetVcBalance();
    return $res;
}
hashes['0x5D1E75F91C07DEE5'] = function() {
    const $res = natives.networkGetEvcBalance();
    return $res;
}
hashes['0x4F54F3B6C202FB4E'] = function() {
    const $res = natives.networkGetPvcBalance();
    return $res;
}
hashes['0xF9B10B529DCFB33B'] = function(p0) {
    const $res = natives.networkGetStringWalletBalance(p0);
    return $res;
}
hashes['0xA6FA3979BED01B81'] = function() {
    const $res = natives.networkGetStringBankBalance();
    return $res;
}
hashes['0x700AF71AE615E6DD'] = function() {
    const $res = natives.networkGetStringBankWalletBalance();
    return $res;
}
hashes['0xED5AB8860415BABA'] = function(p0, p1) {
    const $res = natives.networkGetCanSpendFromWallet(p0, p1);
    return $res;
}
hashes['0xA31FD6A0865B6D14'] = function(p0) {
    const $res = natives.networkGetCanSpendFromBank(p0);
    return $res;
}
hashes['0xDC18531D7019A535'] = function(p0, p1) {
    const $res = natives.networkGetCanSpendFromBankAndWallet(p0, p1);
    return $res;
}
hashes['0x13A8DE2FD77D04F3'] = function() {
    const $res = natives.networkGetPvcTransferBalance();
    return $res;
}
hashes['0x08E8EEADFD0DC4A0'] = function(p0) {
    const $res = natives.networkGetCanTransferCash(p0);
    return $res;
}
hashes['0x5D17BE59D2123284'] = function(p0, p1, p2, p3) {
    const $res = natives.networkCanReceivePlayerCash(p0, p1, p2, p3);
    return $res;
}
hashes['0xEA560AC9EEB1E19B'] = function() {
    const $res = natives.networkGetRemainingTransferBalance();
    return $res;
}
hashes['0xF70EFA14FE091429'] = function(p0) {
    const $res = natives.withdrawVc(p0);
    return $res;
}
hashes['0xE260E0BB9CD995AC'] = function(p0) {
    const $res = natives.depositVc(p0);
    return $res;
}
hashes['0xE154B48B68EF72BC'] = function(p0) {
    const $res = natives.hasVcWithdrawalCompleted(p0);
    return $res;
}
hashes['0x6FCF8DDEA146C45B'] = function(p0) {
    const $res = natives.wasVcWithdrawalSuccessful(p0);
    return $res;
}
hashes['0x7D2708796355B20B'] = function() {
    const $res = natives.netGameserverUseServerTransactions();
    return $res;
}
hashes['0xBD4D7EAF8A30F637'] = function(p0) {
    const $res = natives.netGameserverCatalogItemIsValid(p0);
    return $res;
}
hashes['0x247F0F73A182EA0B'] = function(p0) {
    const $res = natives.netGameserverCatalogItemKeyIsValid(p0);
    return $res;
}
hashes['0xC27009422FCCA88D'] = function(p0, p1, p2) {
    const $res = natives.netGameserverGetPrice(p0, p1, p2);
    return $res;
}
hashes['0x3C4487461E9B0DCB'] = function() {
    const $res = natives.netGameserverCatalogIsValid();
    return $res;
}
hashes['0x2B949A1E6AEC8F6A'] = function() {
    const $res = natives.netGameserverIsCatalogCurrent();
    return $res;
}
hashes['0x85F6C9ABA1DE2BCF'] = function() {
    const $res = natives.netGameserverGetCatalogCloudCrc();
    return $res;
}
hashes['0x357B152EF96C30B6'] = function() {
    const $res = natives.netGameserverRefreshServerCatalog();
    return $res;
}
hashes['0xCF38DAFBB49EDE5E'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument state should be an array');
    const $res = natives.netGameserverRetrieveCatalogRefreshStatus();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xE3E5A7C64CA2C6ED'] = function() {
    const $res = natives.netGameserverInitSession();
    return $res;
}
hashes['0x0395CB47B022E62C'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.netGameserverRetrieveInitSessionStatus();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xA135AC892A58FC07'] = function(p0) {
    const $res = natives.netGameserverStartSession(p0);
    return $res;
}
hashes['0x72EB7BA9B69BF6AB'] = function() {
    const $res = natives.netGameserverStartSessionPending();
    return $res;
}
hashes['0x170910093218C8B9'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.netGameserverRetrieveStartSessionStatus();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xC13C38E47EA5DF31'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.netGameserverRetrieveSessionErrorCode();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xB24F0944DA203D9E'] = function(p0) {
    const $res = natives.netGameserverIsSessionValid(p0);
    return $res;
}
hashes['0x74A0FD0688F1EE45'] = function(p0) {
    const $res = natives.netGameserverClearSession(p0);
    return $res;
}
hashes['0x2F41D51BA3BCD1F1'] = function(p0) {
    const $res = natives.netGameserverSessionApplyReceivedData(p0);
    return $res;
}
hashes['0x810E8431C0614BF9'] = function() {
    const $res = natives.netGameserverIsSessionRefreshPending();
    return $res;
}
hashes['0x35A1B3E1D1315CFA'] = function(p0, p1) {
    const $res = natives.netGameserverStartSessionRestart(p0, p1);
    return $res;
}
hashes['0x613F125BA3BD2EB9'] = function() {
    const $res = natives.netGameserverTransactionInProgress();
    return $res;
}
hashes['0x897433D292B44130'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.netGameserverGetSessionStateAndStatus();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    return $res[0];
}
hashes['0x279F08B1A4B29B7E'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p0)) throw new Error('Argument transactionId should be an array');
    const $res = natives.netGameserverBasketStart(p1, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xFA336E7F40C0A0D0'] = function() {
    const $res = natives.netGameserverBasketEnd();
    return $res;
}
hashes['0xA65568121DF2EA26'] = function() {
    const $res = natives.netGameserverBasketIsActive();
    return $res;
}
hashes['0xF30980718C8ED876'] = function(p0, p1) {
    const $res = natives.netGameserverBasketAddItem(p0, p1);
    return $res;
}
hashes['0x27F76CC6C55AD30E'] = function() {
    const $res = natives.netGameserverBasketIsFull();
    return $res;
}
hashes['0xE1A0450ED46A7812'] = function(p0, p1) {
    const $res = natives.netGameserverBasketApplyServerData(p0, p1);
    return $res;
}
hashes['0x39BE7CEA8D9CC8E6'] = function(p0) {
    const $res = natives.netGameserverCheckoutStart(p0);
    return $res;
}
hashes['0x3C5FD37B5499582E'] = function(p0, p1, p2, p3, p4, p5) {
    if (!Array.isArray(p0)) throw new Error('Argument transactionId should be an array');
    const $res = natives.netGameserverBeginService(p1, p2, p3, p4, p5);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xE2A99A9B524BEFFF'] = function(p0) {
    const $res = natives.netGameserverEndService(p0);
    return $res;
}
hashes['0x51F1A8E48C3D2F6D'] = function(p0, p1, p2) {
    const $res = natives.netGameserverDeleteCharacter(p0, p1, p2);
    return $res;
}
hashes['0x0A6D923DFFC9BD89'] = function() {
    const $res = natives.netGameserverDeleteCharacterGetStatus();
    return $res;
}
hashes['0x112CEF1615A1139F'] = function() {
    const $res = natives.netGameserverDeleteSetTelemetryNonceSeed();
    return $res;
}
hashes['0xD47A2C1BA117471D'] = function(p0, p1) {
    const $res = natives.netGameserverTransferBankToWallet(p0, p1);
    return $res;
}
hashes['0xC2F7FE5309181C7D'] = function(p0, p1) {
    const $res = natives.netGameserverTransferWalletToBank(p0, p1);
    return $res;
}
hashes['0x23789E777D14CE44'] = function() {
    const $res = natives.netGameserverTransferBankToWalletGetStatus();
    return $res;
}
hashes['0x350AA5EBC03D3BD2'] = function() {
    const $res = natives.netGameserverTransferWalletToBankGetStatus();
    return $res;
}
hashes['0x498C1E05CE5F7877'] = function() {
    const $res = natives.netGameserverTransferCashSetTelemetryNonceSeed();
    return $res;
}
hashes['0x9507D4271988E1AE'] = function(p0) {
    const $res = natives.netGameserverSetTelemetryNonceSeed(p0);
    return $res;
}
hashes['0xFCA9373EF340AC0A'] = function() {
    const $res = natives.getOnlineVersion();
    return $res;
}
hashes['0x054354A99211EB96'] = function() {
    const $res = natives.networkIsSignedIn();
    return $res;
}
hashes['0x1077788E268557C2'] = function() {
    const $res = natives.networkIsSignedOnline();
    return $res;
}
hashes['0xBD545D44CCE70597'] = function() {
    const $res = natives.networkIsNpAvailable();
    return $res;
}
hashes['0xEBCAB9E5048434F4'] = function() {
    const $res = natives.networkIsNpPending();
    return $res;
}
hashes['0x74FB3E29E6D10FA9'] = function() {
    const $res = natives.networkGetNpUnavailableReason();
    return $res;
}
hashes['0x7808619F31FF22DB'] = function() {
    const $res = natives.networkIsConnetedToNpPresence();
    return $res;
}
hashes['0xA0FA4EC6A05DA44E'] = function() {
    const $res = natives.networkIsLoggedInToPsn();
    return $res;
}
hashes['0x85443FF4C328F53B'] = function() {
    const $res = natives.networkHasValidRosCredentials();
    return $res;
}
hashes['0x8D11E61A4ABF49CC'] = function() {
    const $res = natives.networkIsRefreshingRosCredentials();
    return $res;
}
hashes['0x9A4CF4F48AD77302'] = function() {
    const $res = natives.networkIsCloudAvailable();
    return $res;
}
hashes['0x67A5589628E0CFF6'] = function() {
    const $res = natives.networkHasSocialClubAccount();
    return $res;
}
hashes['0xBA9775570DB788CF'] = function() {
    const $res = natives.networkAreSocialClubPoliciesCurrent();
    return $res;
}
hashes['0x8DB296B814EDDA07'] = function() {
    const $res = natives.networkIsHost();
    return $res;
}
hashes['0x8251FB94DC4FDFC8'] = function() {
    const $res = natives.networkGetHostPlayerIndex();
    return $res;
}
hashes['0x4237E822315D8BA9'] = function() {
    const $res = natives.networkWasGameSuspended();
    return $res;
}
hashes['0x25CB5A9F37BFD063'] = function() {
    const $res = natives.networkHaveOnlinePrivileges();
    return $res;
}
hashes['0x1353F87E89946207'] = function() {
    const $res = natives.networkHasAgeRestrictions();
    return $res;
}
hashes['0x72D918C99BCACC54'] = function(p0) {
    const $res = natives.networkHaveUserContentPrivileges(p0);
    return $res;
}
hashes['0xAEEF48CDF5B6CE7C'] = function(p0, p1) {
    const $res = natives.networkHaveCommunicationPrivileges(p0, p1);
    return $res;
}
hashes['0x78321BEA235FD8CD'] = function(p0, p1) {
    const $res = natives.networkCheckOnlinePrivileges(p0, p1);
    return $res;
}
hashes['0x595F028698072DD9'] = function(p0, p1, p2) {
    const $res = natives.networkCheckUserContentPrivileges(p0, p1, p2);
    return $res;
}
hashes['0x83F28CE49FBBFFBA'] = function(p0, p1, p2) {
    const $res = natives.networkCheckCommunicationPrivileges(p0, p1, p2);
    return $res;
}
hashes['0x07EAB372C8841D99'] = function(p0, p1, p2) {
    const $res = natives.networkCheckTextCommunicationPrivileges(p0, p1, p2);
    return $res;
}
hashes['0x906CA41A4B74ECA4'] = function() {
    const $res = natives.networkIsUsingOnlinePromotion();
    return $res;
}
hashes['0x023ACAB2DC9DC4A4'] = function() {
    const $res = natives.networkShouldShowPromotionAlertScreen();
    return $res;
}
hashes['0x76BF03FADBF154F5'] = function() {
    const $res = natives.networkHasSocialNetworkingSharingPriv();
    return $res;
}
hashes['0x9614B71F8ADB982B'] = function() {
    const $res = natives.networkGetAgeGroup();
    return $res;
}
hashes['0x0CF6CC51AA18F0F8'] = function(p0, p1, p2) {
    const $res = natives.networkCheckPrivileges(p0, p1, p2);
    return $res;
}
hashes['0x64E5C4CC82847B73'] = function() {
    const $res = natives.networkIsPrivilegeCheckInProgress();
    return $res;
}
hashes['0x1F7BC3539F9E0224'] = function() {
    const $res = natives.networkSetPrivilegeCheckResultNotNeeded();
    return $res;
}
hashes['0xDE9225854F37BF72'] = function() {
    const $res = natives.networkResolvePrivilegeUserContent();
    return $res;
}
hashes['0x5EA784D197556507'] = function() {
    const $res = natives.networkHavePlatformSubscription();
    return $res;
}
hashes['0xA8ACB6459542A8C8'] = function() {
    const $res = natives.networkIsPlatformSubscriptionCheckPending();
    return $res;
}
hashes['0x83FE8D7229593017'] = function() {
    const $res = natives.networkShowAccountUpgradeUi();
    return $res;
}
hashes['0x7788DFE15016A182'] = function() {
    const $res = natives.networkIsShowingSystemUiOrRecentlyRequestedUpsell();
    return $res;
}
hashes['0x53C10C8BD774F2C9'] = function() {
    const $res = natives.networkNeedToStartNewGameButBlocked();
    return $res;
}
hashes['0x580CE4438479CC61'] = function() {
    const $res = natives.networkCanBail();
    return $res;
}
hashes['0x95914459A87EBA28'] = function(p0, p1, p2) {
    const $res = natives.networkBail(p0, p1, p2);
    return $res;
}
hashes['0x283B6062A2C01E9B'] = function() {
    const $res = natives.networkOnReturnToSinglePlayer();
    return $res;
}
hashes['0x8B4FFC790CA131EF'] = function(p0, p1, p2, p3) {
    const $res = natives.networkTransitionStart(p0, p1, p2, p3);
    return $res;
}
hashes['0xC3BFED92026A2AAD'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkTransitionAddStage(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x04918A41BC9B8157'] = function(p0, p1, p2) {
    const $res = natives.networkTransitionFinish(p0, p1, p2);
    return $res;
}
hashes['0xAF50DA1A3F8B1BA4'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument loadingState should be an array');
    const $res = natives.networkCanAccessMultiplayer();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x9747292807126EDA'] = function() {
    const $res = natives.networkIsMultiplayerDisabled();
    return $res;
}
hashes['0x7E782A910C362C25'] = function() {
    const $res = natives.networkCanEnterMultiplayer();
    return $res;
}
hashes['0x330ED4D05491934F'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSessionDoFreeroamQuickmatch(p0, p1, p2, p3);
    return $res;
}
hashes['0x2CFC76E0D087C994'] = function(p0, p1, p2) {
    const $res = natives.networkSessionDoFriendMatchmaking(p0, p1, p2);
    return $res;
}
hashes['0x94BC51E9449D917F'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSessionDoCrewMatchmaking(p0, p1, p2, p3);
    return $res;
}
hashes['0xBE3E347A87ACEB82'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSessionDoActivityQuickmatch(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x6F3D4ED9BEE4E61D'] = function(p0, p1, p2) {
    const $res = natives.networkSessionHost(p0, p1, p2);
    return $res;
}
hashes['0xED34C0C02C098BB7'] = function(p0, p1) {
    const $res = natives.networkSessionHostClosed(p0, p1);
    return $res;
}
hashes['0xB9CFD27A5D578D83'] = function(p0, p1) {
    const $res = natives.networkSessionHostFriendsOnly(p0, p1);
    return $res;
}
hashes['0xFBCFA2EA2E206890'] = function() {
    const $res = natives.networkSessionIsClosedFriends();
    return $res;
}
hashes['0x74732C6CA90DA2B4'] = function() {
    const $res = natives.networkSessionIsClosedCrew();
    return $res;
}
hashes['0xF3929C2379B60CCE'] = function() {
    const $res = natives.networkSessionIsSolo();
    return $res;
}
hashes['0xCEF70AA5B3F89BA1'] = function() {
    const $res = natives.networkSessionIsPrivate();
    return $res;
}
hashes['0xA02E59562D711006'] = function(p0, p1) {
    const $res = natives.networkSessionEnd(p0, p1);
    return $res;
}
hashes['0xB9351A07A0D458B1'] = function(p0) {
    const $res = natives.networkSessionLeave(p0);
    return $res;
}
hashes['0xFA8904DC5F304220'] = function(p0) {
    const $res = natives.networkSessionKickPlayer(p0);
    return $res;
}
hashes['0xD6D09A6F32F49EF1'] = function(p0) {
    const $res = natives.networkSessionGetKickVote(p0);
    return $res;
}
hashes['0x041C7F2A6C9894E6'] = function(p0, p1, p2) {
    const $res = natives.networkSessionReserveSlotsTransition(p0, p1, p2);
    return $res;
}
hashes['0x59DF79317F85A7E0'] = function() {
    const $res = natives.networkJoinPreviouslyFailedSession();
    return $res;
}
hashes['0xFFE1E5B792D92B34'] = function() {
    const $res = natives.networkJoinPreviouslyFailedTransition();
    return $res;
}
hashes['0x49EC8030F5015F8B'] = function(p0) {
    const $res = natives.networkSessionSetMatchmakingGroup(p0);
    return $res;
}
hashes['0x8B6A4DD0AF9CE215'] = function(p0, p1) {
    const $res = natives.networkSessionSetMatchmakingGroupMax(p0, p1);
    return $res;
}
hashes['0x56CE820830EF040B'] = function(p0) {
    const $res = natives.networkSessionGetMatchmakingGroupFree(p0);
    return $res;
}
hashes['0xCAE55F48D3D7875C'] = function(p0) {
    const $res = natives.networkSessionAddActiveMatchmakingGroup(p0);
    return $res;
}
hashes['0xF49ABC20D8552257'] = function(p0) {
    const $res = natives.networkSessionSetUniqueCrewLimit(p0);
    return $res;
}
hashes['0x4811BBAC21C5FCD5'] = function(p0) {
    const $res = natives.networkSessionSetUniqueCrewLimitTransition(p0);
    return $res;
}
hashes['0x5539C3EBF104A53A'] = function(p0) {
    const $res = natives.networkSessionSetUniqueCrewOnlyCrewsTransition(p0);
    return $res;
}
hashes['0x702BC4D605522539'] = function(p0) {
    const $res = natives.networkSessionSetCrewLimitMaxMembersTransition(p0);
    return $res;
}
hashes['0x3F52E880AAF6C8CA'] = function(p0) {
    const $res = natives.networkSessionSetMatchmakingPropertyId(p0);
    return $res;
}
hashes['0xF1EEA2DDA9FFA69D'] = function(p0) {
    const $res = natives.networkSessionSetMatchmakingMentalState(p0);
    return $res;
}
hashes['0x59D421683D31835A'] = function(p0) {
    const $res = natives.networkSessionSetNumBosses(p0);
    return $res;
}
hashes['0x1153FA02A659051C'] = function() {
    const $res = natives.networkSessionSetScriptValidateJoin();
    return $res;
}
hashes['0xC19F6C8E7865A6FF'] = function(p0) {
    const $res = natives.networkSessionValidateJoin(p0);
    return $res;
}
hashes['0x236406F60CF216D6'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.networkAddFollowers(p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x058F43EC59A8631A'] = function() {
    const $res = natives.networkClearFollowers();
    return $res;
}
hashes['0x6D03BFBD643B2A02'] = function(p0, p1, p2) {
    if (!Array.isArray(p0)) throw new Error('Argument hours should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument minutes should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument seconds should be an array');
    const $res = natives.networkGetGlobalMultiplayerClock();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    p2[0] = $res[3];
    return $res[0];
}
hashes['0x600F8CB31C7AAB6E'] = function(p0) {
    const $res = natives.networkSessionSetGamemode(p0);
    return $res;
}
hashes['0xDFFA5BE8381C3314'] = function() {
    const $res = natives.networkSessionGetHostAimPreference();
    return $res;
}
hashes['0xE532D6811B3A4D2A'] = function(p0) {
    const $res = natives.networkFindGamersInCrew(p0);
    return $res;
}
hashes['0xF7B2CFDE5C9F700D'] = function(p0, p1, p2, p3) {
    const $res = natives.networkFindMatchedGamers(p0, p1, p2, p3);
    return $res;
}
hashes['0xDDDF64C91BFCF0AA'] = function() {
    const $res = natives.networkIsFindingGamers();
    return $res;
}
hashes['0xF9B83B77929D8863'] = function() {
    const $res = natives.networkDidFindGamersSucceed();
    return $res;
}
hashes['0xA1B043EE79A916FB'] = function() {
    const $res = natives.networkGetNumFoundGamers();
    return $res;
}
hashes['0x9DCFF2AFB68B3476'] = function(p0, p1) {
    const $res = natives.networkGetFoundGamer(p0, p1);
    return $res;
}
hashes['0x6D14CCEE1B40381A'] = function() {
    const $res = natives.networkClearFoundGamers();
    return $res;
}
hashes['0x85A0EF54A500882C'] = function(p0) {
    const $res = natives.networkQueueGamerForStatus(p0);
    return $res;
}
hashes['0x2CC848A861D01493'] = function() {
    const $res = natives.networkGetGamerStatusFromQueue();
    return $res;
}
hashes['0x94A8394D150B013A'] = function() {
    const $res = natives.networkIsGettingGamerStatus();
    return $res;
}
hashes['0x5AE17C6B0134B7F1'] = function() {
    const $res = natives.networkDidGetGamerStatusSucceed();
    return $res;
}
hashes['0x02A8BEC6FD9AF660'] = function(p0, p1) {
    const $res = natives.networkGetGamerStatusResult(p0, p1);
    return $res;
}
hashes['0x86E0660E4F5C956D'] = function() {
    const $res = natives.networkClearGetGamerStatus();
    return $res;
}
hashes['0xC6F8AB8A4189CF3A'] = function() {
    const $res = natives.networkSessionJoinInvite();
    return $res;
}
hashes['0x2FBF47B1B36D36F9'] = function() {
    const $res = natives.networkSessionCancelInvite();
    return $res;
}
hashes['0xA29177F7703B5644'] = function() {
    const $res = natives.networkSessionForceCancelInvite();
    return $res;
}
hashes['0xAC8C7B9B88C4A668'] = function() {
    const $res = natives.networkHasPendingInvite();
    return $res;
}
hashes['0xC42DD763159F3461'] = function() {
    const $res = natives.networkHasConfirmedInvite();
    return $res;
}
hashes['0x62A0296C1BB1CEB3'] = function() {
    const $res = natives.networkRequestInviteConfirmedEvent();
    return $res;
}
hashes['0x23DFB504655D0CE4'] = function() {
    const $res = natives.networkSessionWasInvited();
    return $res;
}
hashes['0xE57397B4A3429DD0'] = function(p0) {
    const $res = natives.networkSessionGetInviter(p0);
    return $res;
}
hashes['0xD313DE83394AF134'] = function() {
    const $res = natives.networkSessionIsAwaitingInviteResponse();
    return $res;
}
hashes['0xBDB6F89C729CF388'] = function() {
    const $res = natives.networkSessionIsDisplayingInviteConfirmation();
    return $res;
}
hashes['0xA0682D67EF1FBA3D'] = function(p0) {
    const $res = natives.networkSuppressInvite(p0);
    return $res;
}
hashes['0x34F9E9049454A7A0'] = function(p0) {
    const $res = natives.networkBlockInvites(p0);
    return $res;
}
hashes['0xCFEB8AF24FC1D0BB'] = function(p0) {
    const $res = natives.networkBlockJoinQueueInvites(p0);
    return $res;
}
hashes['0x68980414688F7F9D'] = function(p0) {
    const $res = natives.networkSetCanReceiveRsInvites(p0);
    return $res;
}
hashes['0xF814FEC6A19FD6E0'] = function() {
    const $res = natives.networkStoreInviteThroughRestart();
    return $res;
}
hashes['0x6B07B9CE4D390375'] = function(p0) {
    const $res = natives.networkAllowInviteProcessInPlayerSwitch(p0);
    return $res;
}
hashes['0x7AC752103856FB20'] = function(p0) {
    const $res = natives.networkSetScriptReadyForEvents(p0);
    return $res;
}
hashes['0x74698374C45701D2'] = function() {
    const $res = natives.networkIsOfflineInvitePending();
    return $res;
}
hashes['0x140E6A44870A11CE'] = function() {
    const $res = natives.networkClearOfflineInvitePending();
    return $res;
}
hashes['0xC74C33FCA52856D5'] = function(p0) {
    const $res = natives.networkSessionHostSinglePlayer(p0);
    return $res;
}
hashes['0x3442775428FD2DAA'] = function() {
    const $res = natives.networkSessionLeaveSinglePlayer();
    return $res;
}
hashes['0x10FAB35428CCC9D7'] = function() {
    const $res = natives.networkIsGameInProgress();
    return $res;
}
hashes['0xD83C2B94E7508980'] = function() {
    const $res = natives.networkIsSessionActive();
    return $res;
}
hashes['0xCA97246103B63917'] = function() {
    const $res = natives.networkIsInSession();
    return $res;
}
hashes['0x9DE624D2FC4B603F'] = function() {
    const $res = natives.networkIsSessionStarted();
    return $res;
}
hashes['0xF4435D66A8E2905E'] = function() {
    const $res = natives.networkIsSessionBusy();
    return $res;
}
hashes['0x4EEBC3694E49C572'] = function() {
    const $res = natives.networkCanSessionEnd();
    return $res;
}
hashes['0x4C9034162368E206'] = function() {
    const $res = natives.networkGetGameMode();
    return $res;
}
hashes['0x271CC6AB59EBF9A5'] = function(p0) {
    const $res = natives.networkSessionMarkVisible(p0);
    return $res;
}
hashes['0xBA416D68C631496A'] = function() {
    const $res = natives.networkSessionIsVisible();
    return $res;
}
hashes['0xA73667484D7037C3'] = function(p0) {
    const $res = natives.networkSessionBlockJoinRequests(p0);
    return $res;
}
hashes['0xB4AB419E0D86ACAE'] = function(p0, p1) {
    const $res = natives.networkSessionChangeSlots(p0, p1);
    return $res;
}
hashes['0x53AFD64C6758F2F9'] = function() {
    const $res = natives.networkSessionGetPrivateSlots();
    return $res;
}
hashes['0x9C1556705F864230'] = function() {
    const $res = natives.networkSessionVoiceHost();
    return $res;
}
hashes['0x6793E42BE02B575D'] = function() {
    const $res = natives.networkSessionVoiceLeave();
    return $res;
}
hashes['0xABD5E88B8A2D3DB2'] = function(p0) {
    const $res = natives.networkSessionVoiceConnectToPlayer(p0);
    return $res;
}
hashes['0x7F8413B7FC2AA6B9'] = function(p0, p1) {
    const $res = natives.networkSessionVoiceRespondToRequest(p0, p1);
    return $res;
}
hashes['0x5B8ED3DB018927B1'] = function(p0) {
    const $res = natives.networkSessionVoiceSetTimeout(p0);
    return $res;
}
hashes['0x855BC38818F6F684'] = function() {
    const $res = natives.networkSessionIsInVoiceSession();
    return $res;
}
hashes['0xB5D3453C98456528'] = function() {
    const $res = natives.networkSessionIsVoiceSessionActive();
    return $res;
}
hashes['0xEF0912DDF7C4CB4B'] = function() {
    const $res = natives.networkSessionIsVoiceSessionBusy();
    return $res;
}
hashes['0x3A214F2EC889B100'] = function(p0, p1) {
    const $res = natives.networkSendTextMessage(p0, p1);
    return $res;
}
hashes['0x75138790B4359A74'] = function(p0) {
    const $res = natives.networkSetActivitySpectator(p0);
    return $res;
}
hashes['0x12103B9E0C9F92FB'] = function() {
    const $res = natives.networkIsActivitySpectator();
    return $res;
}
hashes['0x0E4F77F7B9D74D84'] = function(p0) {
    const $res = natives.networkSetActivityPlayerMax(p0);
    return $res;
}
hashes['0x9D277B76D1D12222'] = function(p0) {
    const $res = natives.networkSetActivitySpectatorMax(p0);
    return $res;
}
hashes['0x73E2B500410DA5A2'] = function(p0) {
    const $res = natives.networkGetActivityPlayerNum(p0);
    return $res;
}
hashes['0x2763BBAA72A7BCB9'] = function(p0) {
    const $res = natives.networkIsActivitySpectatorFromHandle(p0);
    return $res;
}
hashes['0xA60BB5CE242BB254'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.networkHostTransition(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x71FB0EBCD4915D56'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkDoTransitionQuickmatch(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xA091A5E44F0072E5'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkDoTransitionQuickmatchAsync(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x9C4AB58491FDC98A'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.networkDoTransitionQuickmatchWithGroup(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xA06509A691D12BE4'] = function() {
    const $res = natives.networkJoinGroupActivity();
    return $res;
}
hashes['0x1888694923EF4591'] = function() {
    const $res = natives.networkClearGroupActivity();
    return $res;
}
hashes['0xB13E88E655E5A3BC'] = function() {
    const $res = natives.networkRetainActivityGroup();
    return $res;
}
hashes['0x6512765E3BE78C50'] = function() {
    const $res = natives.networkIsTransitionClosedFriends();
    return $res;
}
hashes['0x0DBD5D7E3C5BEC3B'] = function() {
    const $res = natives.networkIsTransitionClosedCrew();
    return $res;
}
hashes['0x5DC577201723960A'] = function() {
    const $res = natives.networkIsTransitionSolo();
    return $res;
}
hashes['0x5A6AA44FF8E931E6'] = function() {
    const $res = natives.networkIsTransitionPrivate();
    return $res;
}
hashes['0x617F49C2668E6155'] = function() {
    const $res = natives.networkGetNumTransitionNonAsyncGamers();
    return $res;
}
hashes['0x261E97AD7BCF3D40'] = function(p0) {
    const $res = natives.networkMarkAsPreferredActivity(p0);
    return $res;
}
hashes['0x39917E1B4CB0F911'] = function(p0) {
    const $res = natives.networkMarkAsWaitingAsync(p0);
    return $res;
}
hashes['0x2CE9D95E4051AECD'] = function(p0) {
    const $res = natives.networkSetInProgressFinishTime(p0);
    return $res;
}
hashes['0xEF26739BCD9907D5'] = function(p0) {
    const $res = natives.networkSetTransitionCreatorHandle(p0);
    return $res;
}
hashes['0xFB3272229A82C759'] = function() {
    const $res = natives.networkClearTransitionCreatorHandle();
    return $res;
}
hashes['0x4A595C32F77DFF76'] = function(p0, p1) {
    const $res = natives.networkInviteGamersToTransition(p0, p1);
    return $res;
}
hashes['0xCA2C8073411ECDB6'] = function(p0) {
    const $res = natives.networkSetGamerInvitedToTransition(p0);
    return $res;
}
hashes['0xD23A1A815D21DB19'] = function() {
    const $res = natives.networkLeaveTransition();
    return $res;
}
hashes['0x2DCF46CB1A4F0884'] = function() {
    const $res = natives.networkLaunchTransition();
    return $res;
}
hashes['0xA2E9C1AB8A92E8CD'] = function(p0) {
    const $res = natives.networkSetDoNotLaunchFromJoinAsMigratedHost(p0);
    return $res;
}
hashes['0x023782EFC70585EE'] = function() {
    const $res = natives.networkCancelTransitionMatchmaking();
    return $res;
}
hashes['0xEAA572036990CD1B'] = function(p0, p1, p2) {
    const $res = natives.networkBailTransition(p0, p1, p2);
    return $res;
}
hashes['0x3E9BB38102A589B0'] = function(p0, p1) {
    const $res = natives.networkDoTransitionToGame(p0, p1);
    return $res;
}
hashes['0x4665F51EFED00034'] = function(p0, p1, p2) {
    const $res = natives.networkDoTransitionToNewGame(p0, p1, p2);
    return $res;
}
hashes['0x3AAD8B2FCA1E289F'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkDoTransitionToFreemode(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x9E80A5BA8109F974'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkDoTransitionToNewFreemode(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x9D7696D8F4FA6CB7'] = function() {
    const $res = natives.networkIsTransitionToGame();
    return $res;
}
hashes['0x73B000F7FBC55829'] = function(p0, p1) {
    const $res = natives.networkGetTransitionMembers(p0, p1);
    return $res;
}
hashes['0x521638ADA1BA0D18'] = function(p0, p1) {
    const $res = natives.networkApplyTransitionParameter(p0, p1);
    return $res;
}
hashes['0xEBEFC2E77084F599'] = function(p0, p1, p2) {
    const $res = natives.networkApplyTransitionParameterString(p0, p1, p2);
    return $res;
}
hashes['0x31D1D2B858D25E6B'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkSendTransitionGamerInstruction(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x5728BB6D63E3FF1D'] = function(p0) {
    const $res = natives.networkMarkTransitionGamerAsFullyJoined(p0);
    return $res;
}
hashes['0x0B824797C9BF2159'] = function() {
    const $res = natives.networkIsTransitionHost();
    return $res;
}
hashes['0x6B5C83BA3EFE6A10'] = function(p0) {
    const $res = natives.networkIsTransitionHostFromHandle(p0);
    return $res;
}
hashes['0x65042B9774C4435E'] = function(p0) {
    const $res = natives.networkGetTransitionHost(p0);
    return $res;
}
hashes['0x68049AEFF83D8F0A'] = function() {
    const $res = natives.networkIsInTransition();
    return $res;
}
hashes['0x53FA83401D9C07FE'] = function() {
    const $res = natives.networkIsTransitionStarted();
    return $res;
}
hashes['0x520F3282A53D26B7'] = function() {
    const $res = natives.networkIsTransitionBusy();
    return $res;
}
hashes['0x292564C735375EDF'] = function() {
    const $res = natives.networkIsTransitionMatchmaking();
    return $res;
}
hashes['0xC571D0E77D8BBC29'] = function() {
    const $res = natives.networkIsTransitionLeavePostponed();
    return $res;
}
hashes['0x1398582B7F72B3ED'] = function(p0) {
    const $res = natives.networkTransitionSetInProgress(p0);
    return $res;
}
hashes['0x1F8E00FB18239600'] = function(p0) {
    const $res = natives.networkTransitionSetContentCreator(p0);
    return $res;
}
hashes['0xF6F4383B7C92F11A'] = function(p0) {
    const $res = natives.networkTransitionSetActivityIsland(p0);
    return $res;
}
hashes['0x2B3A8F7CA3A38FDE'] = function() {
    const $res = natives.networkOpenTransitionMatchmaking();
    return $res;
}
hashes['0x43F4DBA69710E01E'] = function() {
    const $res = natives.networkCloseTransitionMatchmaking();
    return $res;
}
hashes['0x37A4494483B9F5C9'] = function() {
    const $res = natives.networkIsTransitionOpenToMatchmaking();
    return $res;
}
hashes['0x0C978FDA19692C2C'] = function(p0, p1) {
    const $res = natives.networkSetTransitionVisibilityLock(p0, p1);
    return $res;
}
hashes['0xD0A484CB2F829FBE'] = function() {
    const $res = natives.networkIsTransitionVisibilityLocked();
    return $res;
}
hashes['0x30DE938B516F0AD2'] = function(p0) {
    const $res = natives.networkSetTransitionActivityId(p0);
    return $res;
}
hashes['0xEEEDA5E6D7080987'] = function(p0, p1) {
    const $res = natives.networkChangeTransitionSlots(p0, p1);
    return $res;
}
hashes['0x973D76AA760A6CB6'] = function(p0) {
    const $res = natives.networkTransitionBlockJoinRequests(p0);
    return $res;
}
hashes['0x9AC9CCBFA8C29795'] = function(p0) {
    const $res = natives.networkHasPlayerStartedTransition(p0);
    return $res;
}
hashes['0x2615AA2A695930C1'] = function(p0) {
    const $res = natives.networkAreTransitionDetailsValid(p0);
    return $res;
}
hashes['0x9D060B08CD63321A'] = function(p0) {
    const $res = natives.networkJoinTransition(p0);
    return $res;
}
hashes['0x7284A47B3540E6CF'] = function(p0) {
    const $res = natives.networkHasInvitedGamerToTransition(p0);
    return $res;
}
hashes['0x3F9990BF5F22759C'] = function(p0) {
    const $res = natives.networkHasTransitionInviteBeenAcked(p0);
    return $res;
}
hashes['0x05095437424397FA'] = function() {
    const $res = natives.networkIsActivitySession();
    return $res;
}
hashes['0x236905C700FDB54D'] = function() {
    const $res = natives.networkDisableRealtimeMultiplayer();
    return $res;
}
hashes['0x4A9FDE3A5A6D0437'] = function(p0) {
    const $res = natives.networkSetPresenceSessionInvitesBlocked(p0);
    return $res;
}
hashes['0xC3C7A6AFDB244624'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSendInviteViaPresence(p0, p1, p2, p3);
    return $res;
}
hashes['0xC116FF9B4D488291'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSendTransitionInviteViaPresence(p0, p1, p2, p3);
    return $res;
}
hashes['0x1171A97A3D3981B6'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSendImportantTransitionInviteViaPresence(p0, p1, p2, p3);
    return $res;
}
hashes['0x742B58F723233ED9'] = function(p0) {
    const $res = natives.networkGetPresenceInviteIndexById(p0);
    return $res;
}
hashes['0xCEFA968912D0F78D'] = function() {
    const $res = natives.networkGetNumPresenceInvites();
    return $res;
}
hashes['0xFA91550DF9318B22'] = function(p0) {
    const $res = natives.networkAcceptPresenceInvite(p0);
    return $res;
}
hashes['0xF0210268DB0974B1'] = function(p0) {
    const $res = natives.networkRemovePresenceInvite(p0);
    return $res;
}
hashes['0xDFF09646E12EC386'] = function(p0) {
    const $res = natives.networkGetPresenceInviteId(p0);
    return $res;
}
hashes['0x4962CC4AA2F345B7'] = function(p0) {
    const $res = natives.networkGetPresenceInviteInviter(p0);
    return $res;
}
hashes['0x38D5B0FEBB086F75'] = function(p0, p1) {
    const $res = natives.networkGetPresenceInviteHandle(p0, p1);
    return $res;
}
hashes['0x26E1CD96B0903D60'] = function(p0) {
    const $res = natives.networkGetPresenceInviteSessionId(p0);
    return $res;
}
hashes['0x24409FC4C55CB22D'] = function(p0) {
    const $res = natives.networkGetPresenceInviteContentId(p0);
    return $res;
}
hashes['0xD39B3FFF8FFDD5BF'] = function(p0) {
    const $res = natives.networkGetPresenceInvitePlaylistLength(p0);
    return $res;
}
hashes['0x728C4CC7920CD102'] = function(p0) {
    const $res = natives.networkGetPresenceInvitePlaylistCurrent(p0);
    return $res;
}
hashes['0x3DBF2DF0AEB7D289'] = function(p0) {
    const $res = natives.networkGetPresenceInviteFromAdmin(p0);
    return $res;
}
hashes['0x8806CEBFABD3CE05'] = function(p0) {
    const $res = natives.networkGetPresenceInviteIsTournament(p0);
    return $res;
}
hashes['0x76D9B976C4C09FDE'] = function() {
    const $res = natives.networkHasFollowInvite();
    return $res;
}
hashes['0xC88156EBB786F8D5'] = function() {
    const $res = natives.networkActionFollowInvite();
    return $res;
}
hashes['0x439BFDE3CD0610F6'] = function() {
    const $res = natives.networkClearFollowInvite();
    return $res;
}
hashes['0xEBF8284D8CADEB53'] = function() {
    const $res = natives.networkRemoveAndCancelAllInvites();
    return $res;
}
hashes['0x7524B431B2E6F7EE'] = function(p0) {
    const $res = natives.networkRemoveTransitionInvite(p0);
    return $res;
}
hashes['0x726E0375C7A26368'] = function() {
    const $res = natives.networkRemoveAllTransitionInvite();
    return $res;
}
hashes['0xF083835B70BA9BFE'] = function() {
    const $res = natives.networkRemoveAndCancelAllTransitionInvites();
    return $res;
}
hashes['0x9D80CD1D0E6327DE'] = function(p0, p1, p2, p3) {
    const $res = natives.networkInviteGamers(p0, p1, p2, p3);
    return $res;
}
hashes['0x4D86CD31E8976ECE'] = function(p0) {
    const $res = natives.networkHasInvitedGamer(p0);
    return $res;
}
hashes['0x71DC455F5CD1C2B1'] = function(p0) {
    const $res = natives.networkHasMadeInviteDecision(p0);
    return $res;
}
hashes['0x3855FB5EB2C5E8B2'] = function(p0) {
    const $res = natives.networkGetInviteReplyStatus(p0);
    return $res;
}
hashes['0x74881E6BCAE2327C'] = function(p0) {
    const $res = natives.networkGetCurrentlySelectedGamerHandleFromInviteMenu(p0);
    return $res;
}
hashes['0x7206F674F2A3B1BB'] = function(p0) {
    const $res = natives.networkSetCurrentlySelectedGamerHandleFromInviteMenu(p0);
    return $res;
}
hashes['0x66F010A4B031A331'] = function(p0) {
    const $res = natives.networkSetInviteOnCallForInviteMenu(p0);
    return $res;
}
hashes['0x44B37CDCAE765AAE'] = function(p0, p1) {
    const $res = natives.networkCheckDataManagerSucceededForHandle(p0, p1);
    return $res;
}
hashes['0x4AD490AE1536933B'] = function(p0, p1) {
    const $res = natives.networkCheckDataManagerForHandle(p0, p1);
    return $res;
}
hashes['0x0D77A82DC2D0DA59'] = function(p0, p1) {
    const $res = natives.networkSetInviteFailedMessageForInviteMenu(p0, p1);
    return $res;
}
hashes['0xCBBD7C4991B64809'] = function(p0, p1, p2) {
    const $res = natives.filloutPmPlayerList(p0, p1, p2);
    return $res;
}
hashes['0x716B6DB9D1886106'] = function(p0, p1, p2, p3) {
    const $res = natives.filloutPmPlayerListWithNames(p0, p1, p2, p3);
    return $res;
}
hashes['0xE26CCFF8094D8C74'] = function(p0) {
    const $res = natives.refreshPlayerListStats(p0);
    return $res;
}
hashes['0x796A87B3B68D1F3D'] = function(p0) {
    const $res = natives.networkSetCurrentDataManagerHandle(p0);
    return $res;
}
hashes['0x2FC5650B0271CB57'] = function() {
    const $res = natives.networkIsInPlatformParty();
    return $res;
}
hashes['0x01ABCE5E7CBDA196'] = function() {
    const $res = natives.networkGetPlatformPartyMemberCount();
    return $res;
}
hashes['0x120364DE2845DAF8'] = function(p0, p1) {
    const $res = natives.networkGetPlatformPartyMembers(p0, p1);
    return $res;
}
hashes['0xFD8B834A8BA05048'] = function() {
    const $res = natives.networkIsInPlatformPartyChat();
    return $res;
}
hashes['0x8DE9945BCC9AEC52'] = function(p0) {
    const $res = natives.networkIsChattingInPlatformParty(p0);
    return $res;
}
hashes['0x2BF66D2E7414F686'] = function() {
    const $res = natives.networkCanQueueForPreviousSessionJoin();
    return $res;
}
hashes['0x14922ED3E38761F0'] = function() {
    const $res = natives.networkIsQueuingForSessionJoin();
    return $res;
}
hashes['0x6CE50E47F5543D0C'] = function() {
    const $res = natives.networkClearQueuedJoinRequest();
    return $res;
}
hashes['0xFA2888E3833C8E96'] = function() {
    const $res = natives.networkSendQueuedJoinRequest();
    return $res;
}
hashes['0x25D990F8E0E3F13C'] = function() {
    const $res = natives.networkRemoveAllQueuedJoinRequests();
    return $res;
}
hashes['0xF1B84178F8674195'] = function(p0) {
    const $res = natives.networkSeedRandomNumberGenerator(p0);
    return $res;
}
hashes['0x599E4FA1F87EB5FF'] = function() {
    const $res = natives.networkGetRandomInt();
    return $res;
}
hashes['0xE30CF56F1EFA5F43'] = function(p0, p1) {
    const $res = natives.networkGetRandomIntRanged(p0, p1);
    return $res;
}
hashes['0x04BD27B5ACB67067'] = function(p0, p1) {
    const $res = natives.networkGetRandomFloatRanged(p0, p1);
    return $res;
}
hashes['0x655B91F1495A9090'] = function() {
    const $res = natives.networkPlayerIsCheater();
    return $res;
}
hashes['0x172F75B6EE2233BA'] = function() {
    const $res = natives.networkPlayerGetCheaterReason();
    return $res;
}
hashes['0x19D8DA0E5A68045A'] = function() {
    const $res = natives.networkPlayerIsBadsport();
    return $res;
}
hashes['0x46FB3ED415C7641C'] = function(p0, p1, p2) {
    const $res = natives.triggerPlayerCrcHackerCheck(p0, p1, p2);
    return $res;
}
hashes['0xA12D3A5A3753CC23'] = function(p0, p1, p2) {
    const $res = natives.triggerTuningCrcHackerCheck(p0, p1, p2);
    return $res;
}
hashes['0xF287F506767CC8A9'] = function(p0, p1) {
    const $res = natives.triggerFileCrcHackerCheck(p0, p1);
    return $res;
}
hashes['0x472841A026D26D8B'] = function(p0, p1, p2) {
    const $res = natives.remoteCheaterPlayerDetected(p0, p1, p2);
    return $res;
}
hashes['0xEC5E3AF5289DCA81'] = function(p0, p1, p2) {
    const $res = natives.badSportPlayerLeftDetected(p0, p1, p2);
    return $res;
}
hashes['0x7F562DBC212E81F9'] = function(p0) {
    const $res = natives.networkAddInvalidObjectModel(p0);
    return $res;
}
hashes['0x791EDB5803B2F468'] = function(p0) {
    const $res = natives.networkRemoveInvalidObjectModel(p0);
    return $res;
}
hashes['0x03B2F03A53D85E41'] = function() {
    const $res = natives.networkClearInvalidObjectModels();
    return $res;
}
hashes['0xE66C690248F11150'] = function(p0, p1) {
    const $res = natives.networkApplyPedScarData(p0, p1);
    return $res;
}
hashes['0x1CA59E306ECB80A5'] = function(p0, p1, p2) {
    const $res = natives.networkSetThisScriptIsNetworkScript(p0, p1, p2);
    return $res;
}
hashes['0xD1110739EEADB592'] = function(p0, p1, p2) {
    const $res = natives.networkTryToSetThisScriptIsNetworkScript(p0, p1, p2);
    return $res;
}
hashes['0x2910669969E9535E'] = function() {
    const $res = natives.networkGetThisScriptIsNetworkScript();
    return $res;
}
hashes['0xA6C90FBC38E395EE'] = function() {
    const $res = natives.networkGetMaxNumParticipants();
    return $res;
}
hashes['0x18D0456E86604654'] = function() {
    const $res = natives.networkGetNumParticipants();
    return $res;
}
hashes['0x57D158647A6BFABF'] = function() {
    const $res = natives.networkGetScriptStatus();
    return $res;
}
hashes['0x3E9B2F01C50DF595'] = function(p0, p1, p2) {
    if (!Array.isArray(p0)) throw new Error('Argument unkVars should be an array');
    const $res = natives.networkRegisterHostBroadcastVariables(p1, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x3364AA97340CA215'] = function(p0, p1, p2) {
    if (!Array.isArray(p0)) throw new Error('Argument unkVars should be an array');
    const $res = natives.networkRegisterPlayerBroadcastVariables(p1, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xEA8C0DDB10E2822A'] = function(p0, p1, p2) {
    const $res = natives.networkRegisterHighFrequencyHostBroadcastVariables(p0, p1, p2);
    return $res;
}
hashes['0xD6D7478CA62B8D41'] = function(p0, p1, p2) {
    const $res = natives.networkRegisterHighFrequencyPlayerBroadcastVariables(p0, p1, p2);
    return $res;
}
hashes['0x64F62AFB081E260D'] = function() {
    const $res = natives.networkFinishBroadcastingData();
    return $res;
}
hashes['0x5D10B3795F3FC886'] = function() {
    const $res = natives.networkHasReceivedHostBroadcastData();
    return $res;
}
hashes['0x24FB80D107371267'] = function(p0) {
    const $res = natives.networkGetPlayerIndex(p0);
    return $res;
}
hashes['0x1B84DF6AF2A46938'] = function(p0) {
    const $res = natives.networkGetParticipantIndex(p0);
    return $res;
}
hashes['0x6C0E2E0125610278'] = function(p0) {
    const $res = natives.networkGetPlayerIndexFromPed(p0);
    return $res;
}
hashes['0xA4A79DD2D9600654'] = function() {
    const $res = natives.networkGetNumConnectedPlayers();
    return $res;
}
hashes['0x93DC1BE4E1ABE9D1'] = function(p0) {
    const $res = natives.networkIsPlayerConnected(p0);
    return $res;
}
hashes['0xCF61D4B4702EE9EB'] = function() {
    const $res = natives.networkGetTotalNumPlayers();
    return $res;
}
hashes['0x6FF8FF40B6357D45'] = function(p0) {
    const $res = natives.networkIsParticipantActive(p0);
    return $res;
}
hashes['0xB8DFD30D6973E135'] = function(p0) {
    const $res = natives.networkIsPlayerActive(p0);
    return $res;
}
hashes['0x3CA58F6CB7CBD784'] = function(p0) {
    const $res = natives.networkIsPlayerAParticipant(p0);
    return $res;
}
hashes['0x83CD99A1E6061AB5'] = function() {
    const $res = natives.networkIsHostOfThisScript();
    return $res;
}
hashes['0xC7B4D79B01FA7A5C'] = function() {
    const $res = natives.networkGetHostOfThisScript();
    return $res;
}
hashes['0x1D6A14F1F9A736FC'] = function(p0, p1, p2) {
    const $res = natives.networkGetHostOfScript(p0, p1, p2);
    return $res;
}
hashes['0x3B3D11CD9FFCDFC9'] = function() {
    const $res = natives.networkSetMissionFinished();
    return $res;
}
hashes['0x9D40DF90FAD26098'] = function(p0, p1, p2, p3) {
    const $res = natives.networkIsScriptActive(p0, p1, p2, p3);
    return $res;
}
hashes['0xDA7DE67F5FE5EE13'] = function(p0, p1, p2, p3) {
    const $res = natives.networkIsScriptActiveByHash(p0, p1, p2, p3);
    return $res;
}
hashes['0x560B423D73015E77'] = function(p0) {
    const $res = natives.networkIsThreadANetworkScript(p0);
    return $res;
}
hashes['0x3658E8CD94FC121A'] = function(p0, p1, p2) {
    const $res = natives.networkGetNumScriptParticipants(p0, p1, p2);
    return $res;
}
hashes['0x638A3A81733086DB'] = function() {
    const $res = natives.networkGetInstanceIdOfThisScript();
    return $res;
}
hashes['0x257ED0FADF750BCF'] = function() {
    const $res = natives.networkGetPositionHashOfThisScript();
    return $res;
}
hashes['0x1AD5B71586B94820'] = function(p0, p1, p2) {
    const $res = natives.networkIsPlayerAParticipantOnScript(p0, p1, p2);
    return $res;
}
hashes['0x2302C0264EA58D31'] = function() {
    const $res = natives.networkPreventScriptHostMigration();
    return $res;
}
hashes['0x741A3D8380319A81'] = function() {
    const $res = natives.networkRequestToBeHostOfThisScript();
    return $res;
}
hashes['0x90986E8876CE0A83'] = function() {
    const $res = natives.participantId();
    return $res;
}
hashes['0x57A3BDDAD8E5AA0A'] = function() {
    const $res = natives.participantIdToInt();
    return $res;
}
hashes['0x2DA41ED6E1FCD7A5'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument weaponHash should be an array');
    const $res = natives.networkGetKillerOfPlayer(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x7A1ADEEF01740A24'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument weaponHash should be an array');
    const $res = natives.networkGetDestroyerOfNetworkId(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xC434133D9BA52777'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument weaponHash should be an array');
    const $res = natives.networkGetDestroyerOfEntity(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x83660B734994124D'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument p2 should be an array');
    const $res = natives.networkGetAssistedKillOfEntity(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x4CACA84440FA26F6'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument p2 should be an array');
    const $res = natives.networkGetAssistedDamageOfEntity(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x42B2DAA6B596F5F8'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument weaponHash should be an array');
    const $res = natives.networkGetEntityKillerOfPlayer(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x2C863ACDCD12B3DB'] = function(p0) {
    const $res = natives.networkSetCurrentPublicContentId(p0);
    return $res;
}
hashes['0x3DAD00265FBF356B'] = function(p0) {
    const $res = natives.networkSetCurrentChatOption(p0);
    return $res;
}
hashes['0xAA6D5451DC3448B6'] = function(p0) {
    const $res = natives.networkSetCurrentSpawnLocationOption(p0);
    return $res;
}
hashes['0x8C70252FC40F320B'] = function(p0) {
    const $res = natives.networkSetVehicleDrivenInTestDrive(p0);
    return $res;
}
hashes['0xEA23C49EAA83ACFB'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.networkResurrectLocalPlayer(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x2D95C7E2D7E07307'] = function(p0) {
    const $res = natives.networkSetLocalPlayerInvincibleTime(p0);
    return $res;
}
hashes['0x8A8694B48715B000'] = function() {
    const $res = natives.networkIsLocalPlayerInvincible();
    return $res;
}
hashes['0x9DD368BF06983221'] = function(p0, p1) {
    const $res = natives.networkDisableInvincibleFlashing(p0, p1);
    return $res;
}
hashes['0xF0BC9BCD24A511D5'] = function(p0) {
    const $res = natives.networkPatchPostCutsceneHs4fTunEnt(p0);
    return $res;
}
hashes['0x524FF0AEFF9C3973'] = function(p0) {
    const $res = natives.networkSetLocalPlayerSyncLookAt(p0);
    return $res;
}
hashes['0xB07D3185E11657A5'] = function(p0) {
    const $res = natives.networkHasEntityBeenRegisteredWithThisThread(p0);
    return $res;
}
hashes['0xA11700682F3AD45C'] = function(p0) {
    const $res = natives.networkGetNetworkIdFromEntity(p0);
    return $res;
}
hashes['0xCE4E5D9B0A4FF560'] = function(p0) {
    const $res = natives.networkGetEntityFromNetworkId(p0);
    return $res;
}
hashes['0xC7827959479DCC78'] = function(p0) {
    const $res = natives.networkGetEntityIsNetworked(p0);
    return $res;
}
hashes['0x0991549DE4D64762'] = function(p0) {
    const $res = natives.networkGetEntityIsLocal(p0);
    return $res;
}
hashes['0x06FAACD625D80CAA'] = function(p0) {
    const $res = natives.networkRegisterEntityAsNetworked(p0);
    return $res;
}
hashes['0x7368E683BB9038D6'] = function(p0) {
    const $res = natives.networkUnregisterNetworkedEntity(p0);
    return $res;
}
hashes['0x38CE16C96BD11344'] = function(p0) {
    const $res = natives.networkDoesNetworkIdExist(p0);
    return $res;
}
hashes['0x18A47D074708FD68'] = function(p0) {
    const $res = natives.networkDoesEntityExistWithNetworkId(p0);
    return $res;
}
hashes['0xA670B3662FAFFBD0'] = function(p0) {
    const $res = natives.networkRequestControlOfNetworkId(p0);
    return $res;
}
hashes['0x4D36070FE0215186'] = function(p0) {
    const $res = natives.networkHasControlOfNetworkId(p0);
    return $res;
}
hashes['0x7242F8B741CE1086'] = function(p0) {
    const $res = natives.networkIsNetworkIdRemotelyControlled(p0);
    return $res;
}
hashes['0xB69317BF5E782347'] = function(p0) {
    const $res = natives.networkRequestControlOfEntity(p0);
    return $res;
}
hashes['0x870DDFD5A4A796E4'] = function(p0) {
    const $res = natives.networkRequestControlOfDoor(p0);
    return $res;
}
hashes['0x01BF60A500E28887'] = function(p0) {
    const $res = natives.networkHasControlOfEntity(p0);
    return $res;
}
hashes['0x5BC9495F0B3B6FA6'] = function(p0) {
    const $res = natives.networkHasControlOfPickup(p0);
    return $res;
}
hashes['0xCB3C68ADB06195DF'] = function(p0) {
    const $res = natives.networkHasControlOfDoor(p0);
    return $res;
}
hashes['0xC01E93FAC20C3346'] = function(p0) {
    const $res = natives.networkIsDoorNetworked(p0);
    return $res;
}
hashes['0xB4C94523F023419C'] = function(p0) {
    const $res = natives.vehToNet(p0);
    return $res;
}
hashes['0x0EDEC3C276198689'] = function(p0) {
    const $res = natives.pedToNet(p0);
    return $res;
}
hashes['0x99BFDC94A603E541'] = function(p0) {
    const $res = natives.objToNet(p0);
    return $res;
}
hashes['0x367B936610BA360C'] = function(p0) {
    const $res = natives.netToVeh(p0);
    return $res;
}
hashes['0xBDCD95FC216A8B3E'] = function(p0) {
    const $res = natives.netToPed(p0);
    return $res;
}
hashes['0xD8515F5FEA14CB3F'] = function(p0) {
    const $res = natives.netToObj(p0);
    return $res;
}
hashes['0xBFFEAB45A9A9094A'] = function(p0) {
    const $res = natives.netToEnt(p0);
    return $res;
}
hashes['0xE86051786B66CD8E'] = function(p0, p1) {
    const $res = natives.networkGetLocalHandle(p0, p1);
    return $res;
}
hashes['0xDCD51DD8F87AEC5C'] = function(p0, p1, p2) {
    const $res = natives.networkHandleFromUserId(p0, p1, p2);
    return $res;
}
hashes['0xA0FD21BED61E5C4C'] = function(p0, p1, p2) {
    const $res = natives.networkHandleFromMemberId(p0, p1, p2);
    return $res;
}
hashes['0x388EB2B86C73B6B3'] = function(p0, p1, p2) {
    const $res = natives.networkHandleFromPlayer(p0, p1, p2);
    return $res;
}
hashes['0xBC1D768F2F5D6C05'] = function(p0) {
    const $res = natives.networkHashFromPlayerHandle(p0);
    return $res;
}
hashes['0x58575AC3CF2CA8EC'] = function(p0) {
    const $res = natives.networkHashFromGamerHandle(p0);
    return $res;
}
hashes['0xD45CB817D7E177D2'] = function(p0, p1, p2) {
    const $res = natives.networkHandleFromFriend(p0, p1, p2);
    return $res;
}
hashes['0x9F0C0A981D73FA56'] = function(p0) {
    const $res = natives.networkGamertagFromHandleStart(p0);
    return $res;
}
hashes['0xB071E27958EF4CF0'] = function() {
    const $res = natives.networkGamertagFromHandlePending();
    return $res;
}
hashes['0xFD00798DBA7523DD'] = function() {
    const $res = natives.networkGamertagFromHandleSucceeded();
    return $res;
}
hashes['0x426141162EBE5CDB'] = function(p0) {
    const $res = natives.networkGetGamertagFromHandle(p0);
    return $res;
}
hashes['0xD66C9E72B3CC4982'] = function(p0, p1) {
    const $res = natives.networkDisplaynamesFromHandlesStart(p0, p1);
    return $res;
}
hashes['0x58CC181719256197'] = function(p0, p1, p2) {
    const $res = natives.networkGetDisplaynamesFromHandles(p0, p1, p2);
    return $res;
}
hashes['0x57DBA049E110F217'] = function(p0, p1) {
    const $res = natives.networkAreHandlesTheSame(p0, p1);
    return $res;
}
hashes['0x6F79B93B0A8E4133'] = function(p0, p1) {
    const $res = natives.networkIsHandleValid(p0, p1);
    return $res;
}
hashes['0xCE5F689CF5A0A49D'] = function(p0) {
    const $res = natives.networkGetPlayerFromGamerHandle(p0);
    return $res;
}
hashes['0xC82630132081BB6F'] = function(p0) {
    const $res = natives.networkMemberIdFromGamerHandle(p0);
    return $res;
}
hashes['0x0F10B05DDF8D16E9'] = function(p0) {
    const $res = natives.networkIsGamerInMySession(p0);
    return $res;
}
hashes['0x859ED1CEA343FCA8'] = function(p0) {
    const $res = natives.networkShowProfileUi(p0);
    return $res;
}
hashes['0x7718D2E2060837D2'] = function(p0) {
    const $res = natives.networkPlayerGetName(p0);
    return $res;
}
hashes['0x4927FC39CD0869A0'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument userID should be an array');
    const $res = natives.networkPlayerGetUserid(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x544ABDDA3B409B6D'] = function(p0) {
    const $res = natives.networkPlayerIsRockstarDev(p0);
    return $res;
}
hashes['0x565E430DB3B05BEC'] = function(p0) {
    const $res = natives.networkPlayerIndexIsCheater(p0);
    return $res;
}
hashes['0x815F18AD865F057F'] = function(p0) {
    const $res = natives.networkEntityGetObjectId(p0);
    return $res;
}
hashes['0x37D5F739FD494675'] = function(p0) {
    const $res = natives.networkGetEntityFromObjectId(p0);
    return $res;
}
hashes['0x7E58745504313A2E'] = function(p0) {
    const $res = natives.networkIsInactiveProfile(p0);
    return $res;
}
hashes['0xAFEBB0D5D8F687D2'] = function() {
    const $res = natives.networkGetMaxFriends();
    return $res;
}
hashes['0x203F1CFD823B27A4'] = function() {
    const $res = natives.networkGetFriendCount();
    return $res;
}
hashes['0xE11EBBB2A783FE8B'] = function(p0) {
    const $res = natives.networkGetFriendName(p0);
    return $res;
}
hashes['0x4164F227D052E293'] = function(p0) {
    const $res = natives.networkGetFriendDisplayName(p0);
    return $res;
}
hashes['0x425A44533437B64D'] = function(p0) {
    const $res = natives.networkIsFriendOnline(p0);
    return $res;
}
hashes['0x87EB7A3FFCB314DB'] = function(p0) {
    const $res = natives.networkIsFriendHandleOnline(p0);
    return $res;
}
hashes['0x2EA9A3BEDF3F17B8'] = function(p0) {
    const $res = natives.networkIsFriendInSameTitle(p0);
    return $res;
}
hashes['0x57005C18827F3A28'] = function(p0) {
    const $res = natives.networkIsFriendInMultiplayer(p0);
    return $res;
}
hashes['0x1A24A179F9B31654'] = function(p0) {
    const $res = natives.networkIsFriend(p0);
    return $res;
}
hashes['0x0BE73DA6984A6E33'] = function(p0) {
    const $res = natives.networkIsPendingFriend(p0);
    return $res;
}
hashes['0x6EA101606F6E4D81'] = function() {
    const $res = natives.networkIsAddingFriend();
    return $res;
}
hashes['0x8E02D73914064223'] = function(p0, p1) {
    const $res = natives.networkAddFriend(p0, p1);
    return $res;
}
hashes['0xBAD8F2A42B844821'] = function(p0) {
    const $res = natives.networkIsFriendIndexOnline(p0);
    return $res;
}
hashes['0x1B857666604B1A74'] = function(p0) {
    const $res = natives.networkSetPlayerIsPassive(p0);
    return $res;
}
hashes['0x82377B65E943F72D'] = function(p0) {
    const $res = natives.networkGetPlayerOwnsWaypoint(p0);
    return $res;
}
hashes['0xC927EC229934AF60'] = function() {
    const $res = natives.networkCanSetWaypoint();
    return $res;
}
hashes['0x4C2A9FDC22377075'] = function() {
    const $res = natives.networkIgnoreRemoteWaypoints();
    return $res;
}
hashes['0xAD4326FCA30D62F8'] = function(p0) {
    const $res = natives.networkIsPlayerOnBlocklist(p0);
    return $res;
}
hashes['0xB309EBEA797E001F'] = function(p0) {
    const $res = natives.networkSetScriptAutomuted(p0);
    return $res;
}
hashes['0x26F07DD83A5F7F98'] = function() {
    const $res = natives.networkHasAutomuteOverride();
    return $res;
}
hashes['0xE870F9F1F7B4F1FA'] = function() {
    const $res = natives.networkHasHeadset();
    return $res;
}
hashes['0x7D395EA61622E116'] = function(p0) {
    const $res = natives.networkSetLookAtTalkers(p0);
    return $res;
}
hashes['0xC0D2AF00BCC234CA'] = function() {
    const $res = natives.networkIsPushToTalkActive();
    return $res;
}
hashes['0xF2FD55CB574BCC55'] = function(p0) {
    const $res = natives.networkGamerHasHeadset(p0);
    return $res;
}
hashes['0x71C33B22606CD88A'] = function(p0) {
    const $res = natives.networkIsGamerTalking(p0);
    return $res;
}
hashes['0x559EBF901A8C68E0'] = function(p0) {
    const $res = natives.networkPermissionsHasGamerRecord(p0);
    return $res;
}
hashes['0x8F5D1AD832AEB06C'] = function(p0) {
    const $res = natives.networkCanCommunicateWithGamer(p0);
    return $res;
}
hashes['0xA150A4F065806B1F'] = function(p0) {
    const $res = natives.networkCanTextChatWithGamer(p0);
    return $res;
}
hashes['0xCE60DE011B6C7978'] = function(p0) {
    const $res = natives.networkIsGamerMutedByMe(p0);
    return $res;
}
hashes['0xDF02A2C93F1F26DA'] = function(p0) {
    const $res = natives.networkAmIMutedByGamer(p0);
    return $res;
}
hashes['0xE944C4F5AF1B5883'] = function(p0) {
    const $res = natives.networkIsGamerBlockedByMe(p0);
    return $res;
}
hashes['0x15337C7C268A27B2'] = function(p0) {
    const $res = natives.networkAmIBlockedByGamer(p0);
    return $res;
}
hashes['0xB57A49545BA53CE7'] = function(p0) {
    const $res = natives.networkCanViewGamerUserContent(p0);
    return $res;
}
hashes['0xCCA4318E1AB03F1F'] = function(p0) {
    const $res = natives.networkHasViewGamerUserContentResult(p0);
    return $res;
}
hashes['0x07DD29D5E22763F1'] = function(p0) {
    const $res = natives.networkCanPlayMultiplayerWithGamer(p0);
    return $res;
}
hashes['0x135F9B7B7ADD2185'] = function(p0) {
    const $res = natives.networkCanGamerPlayMultiplayerWithMe(p0);
    return $res;
}
hashes['0x021ABCBD98EC4320'] = function(p0) {
    const $res = natives.networkCanSendLocalInvite(p0);
    return $res;
}
hashes['0x421E34C55F125964'] = function(p0) {
    const $res = natives.networkCanReceiveLocalInvite(p0);
    return $res;
}
hashes['0x031E11F3D447647E'] = function(p0) {
    const $res = natives.networkIsPlayerTalking(p0);
    return $res;
}
hashes['0x3FB99A8B08D18FD6'] = function(p0) {
    const $res = natives.networkPlayerHasHeadset(p0);
    return $res;
}
hashes['0x8C71288AE68EDE39'] = function(p0) {
    const $res = natives.networkIsPlayerMutedByMe(p0);
    return $res;
}
hashes['0x9D6981DFC91A8604'] = function(p0) {
    const $res = natives.networkAmIMutedByPlayer(p0);
    return $res;
}
hashes['0x57AF1F8E27483721'] = function(p0) {
    const $res = natives.networkIsPlayerBlockedByMe(p0);
    return $res;
}
hashes['0x87F395D957D4353D'] = function(p0) {
    const $res = natives.networkAmIBlockedByPlayer(p0);
    return $res;
}
hashes['0x21A1684A25C2867F'] = function(p0) {
    const $res = natives.networkGetPlayerLoudness(p0);
    return $res;
}
hashes['0xCBF12D65F95AD686'] = function(p0) {
    const $res = natives.networkSetTalkerProximity(p0);
    return $res;
}
hashes['0x84F0F13120B4E098'] = function() {
    const $res = natives.networkGetTalkerProximity();
    return $res;
}
hashes['0xBABEC9E69A91C57B'] = function(p0) {
    const $res = natives.networkSetVoiceActive(p0);
    return $res;
}
hashes['0xCFEB46DCD7D8D5EB'] = function(p0) {
    const $res = natives.networkRemainInGameChat(p0);
    return $res;
}
hashes['0xAF66059A131AA269'] = function(p0) {
    const $res = natives.networkOverrideTransitionChat(p0);
    return $res;
}
hashes['0xD5B4883AC32F24C3'] = function(p0) {
    const $res = natives.networkSetTeamOnlyChat(p0);
    return $res;
}
hashes['0x265559DA40B3F327'] = function(p0) {
    const $res = natives.networkSetScriptControllingTeams(p0);
    return $res;
}
hashes['0x4348BFDA56023A2F'] = function(p0, p1) {
    const $res = natives.networkSetSameTeamAsLocalPlayer(p0, p1);
    return $res;
}
hashes['0x6F697A66CE78674E'] = function(p0, p1) {
    const $res = natives.networkOverrideTeamRestrictions(p0, p1);
    return $res;
}
hashes['0x70DA3BF8DACD3210'] = function(p0) {
    const $res = natives.networkSetOverrideSpectatorMode(p0);
    return $res;
}
hashes['0x3C5C1E2C2FF814B1'] = function(p0) {
    const $res = natives.networkSetOverrideTutorialSessionChat(p0);
    return $res;
}
hashes['0x9D7AFCBF21C51712'] = function(p0) {
    const $res = natives.networkSetProximityAffectsTeam(p0);
    return $res;
}
hashes['0xF46A1E03E8755980'] = function(p0) {
    const $res = natives.networkSetNoSpectatorChat(p0);
    return $res;
}
hashes['0x6A5D89D7769A40D8'] = function(p0) {
    const $res = natives.networkSetIgnoreSpectatorChatLimitsSameTeam(p0);
    return $res;
}
hashes['0x3039AE5AD2C9C0C4'] = function(p0, p1) {
    const $res = natives.networkOverrideChatRestrictions(p0, p1);
    return $res;
}
hashes['0x97DD4C5944CC2E6A'] = function(p0, p1) {
    const $res = natives.networkOverrideSendRestrictions(p0, p1);
    return $res;
}
hashes['0x57B192B4D4AD23D5'] = function(p0) {
    const $res = natives.networkOverrideSendRestrictionsAll(p0);
    return $res;
}
hashes['0xDDF73E2B1FEC5AB4'] = function(p0, p1) {
    const $res = natives.networkOverrideReceiveRestrictions(p0, p1);
    return $res;
}
hashes['0x0FF2862B61A58AF9'] = function(p0) {
    const $res = natives.networkOverrideReceiveRestrictionsAll(p0);
    return $res;
}
hashes['0xEF6212C2EFEF1A23'] = function(p0) {
    const $res = natives.networkSetVoiceChannel(p0);
    return $res;
}
hashes['0xE036A705F989E049'] = function() {
    const $res = natives.networkClearVoiceChannel();
    return $res;
}
hashes['0xDBD2056652689917'] = function(p0, p1, p2) {
    const $res = natives.networkApplyVoiceProximityOverride(p0, p1, p2);
    return $res;
}
hashes['0xF03755696450470C'] = function() {
    const $res = natives.networkClearVoiceProximityOverride();
    return $res;
}
hashes['0x5E3AA4CA2B6FB0EE'] = function(p0) {
    const $res = natives.networkEnableVoiceBandwidthRestriction(p0);
    return $res;
}
hashes['0xCA575C391FEA25CC'] = function(p0) {
    const $res = natives.networkDisableVoiceBandwidthRestriction(p0);
    return $res;
}
hashes['0xADB57E5B663CCA8B'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument p2 should be an array');
    const $res = natives.networkGetMuteCountForPlayer(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    return $res[0];
}
hashes['0x8EF52ACAECC51D9C'] = function(p0) {
    const $res = natives.networkSetSpectatorToNonSpectatorTextChat(p0);
    return $res;
}
hashes['0x5FCF4D7069B09026'] = function() {
    const $res = natives.networkTextChatIsTyping();
    return $res;
}
hashes['0x593850C16A36B692'] = function() {
    const $res = natives.shutdownAndLaunchSinglePlayerGame();
    return $res;
}
hashes['0x9ECA15ADFE141431'] = function() {
    const $res = natives.shutdownAndLoadMostRecentSave();
    return $res;
}
hashes['0xF808475FA571D823'] = function(p0) {
    const $res = natives.networkSetFriendlyFireOption(p0);
    return $res;
}
hashes['0x1DCCACDCFC569362'] = function(p0, p1, p2, p3) {
    const $res = natives.networkSetRichPresence(p0, p1, p2, p3);
    return $res;
}
hashes['0x3E200C2BCF4164EB'] = function(p0, p1) {
    const $res = natives.networkSetRichPresenceString(p0, p1);
    return $res;
}
hashes['0x5ED0356A0CE3A34F'] = function() {
    const $res = natives.networkGetTimeoutTime();
    return $res;
}
hashes['0x9769F811D1785B03'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkLeavePedBehindBeforeWarp(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xBF22E0F32968E967'] = function(p0, p1) {
    const $res = natives.networkLeavePedBehindBeforeCutscene(p0, p1);
    return $res;
}
hashes['0x715135F4B82AC90D'] = function(p0, p1) {
    const $res = natives.removeAllStickyBombsFromEntity(p0, p1);
    return $res;
}
hashes['0x17C9E241111A674D'] = function(p0, p1) {
    const $res = natives.networkKeepEntityCollisionDisabledAfterAnimScene(p0, p1);
    return $res;
}
hashes['0x2E4C123D1C8A710E'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.networkIsAnyPlayerNear(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x579CCED0265D4896'] = function() {
    const $res = natives.networkClanServiceIsValid();
    return $res;
}
hashes['0xB124B57F571D8F18'] = function(p0) {
    const $res = natives.networkClanPlayerIsActive(p0);
    return $res;
}
hashes['0xEEE6EACBE8874FBA'] = function(p0, p1, p2) {
    const $res = natives.networkClanPlayerGetDesc(p0, p1, p2);
    return $res;
}
hashes['0x7543BB439F63792B'] = function(p0, p1) {
    const $res = natives.networkClanIsRockstarClan(p0, p1);
    return $res;
}
hashes['0xF45352426FF3A4F0'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument formattedTag should be an array');
    const $res = natives.networkClanGetUiFormattedTag(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x1F471B79ACC90BEF'] = function() {
    const $res = natives.networkClanGetLocalMembershipsCount();
    return $res;
}
hashes['0x48DE78AF2C8885B8'] = function(p0, p1) {
    const $res = natives.networkClanGetMembershipDesc(p0, p1);
    return $res;
}
hashes['0xA989044E70010ABE'] = function(p0) {
    const $res = natives.networkClanDownloadMembership(p0);
    return $res;
}
hashes['0x5B9E023DC6EBEDC0'] = function(p0) {
    const $res = natives.networkClanDownloadMembershipPending(p0);
    return $res;
}
hashes['0xB3F64A6A91432477'] = function() {
    const $res = natives.networkClanAnyDownloadMembershipPending();
    return $res;
}
hashes['0xBB6E6FEE99D866B2'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.networkClanRemoteMembershipsAreInCache();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xAAB11F6C4ADBC2C1'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.networkClanGetMembershipCount();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x48A59CF88D43DF0E'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.networkClanGetMembershipValid(p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xC8BC2011F67B3411'] = function(p0, p1, p2) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.networkClanGetMembership(p1, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x9FAAA4F4FC71F87F'] = function(p0) {
    const $res = natives.networkClanJoin(p0);
    return $res;
}
hashes['0x729E3401F0430686'] = function(p0, p1) {
    const $res = natives.networkClanCrewinfoGetStringValue(p0, p1);
    return $res;
}
hashes['0x2B51EDBEFC301339'] = function(p0, p1) {
    const $res = natives.networkClanCrewinfoGetCrewranktitle(p0, p1);
    return $res;
}
hashes['0xC32EA7A2F6CA7557'] = function() {
    const $res = natives.networkClanHasCrewinfoMetadataBeenReceived();
    return $res;
}
hashes['0x5835D9CD92E83184'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument txdName should be an array');
    const $res = natives.networkClanGetEmblemTxdName(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x13518FF1C6B28938'] = function(p0) {
    const $res = natives.networkClanRequestEmblem(p0);
    return $res;
}
hashes['0xA134777FF7F33331'] = function(p0, p1) {
    const $res = natives.networkClanIsEmblemReady(p0, p1);
    return $res;
}
hashes['0x113E6E3E50E286B0'] = function(p0) {
    const $res = natives.networkClanReleaseEmblem(p0);
    return $res;
}
hashes['0x9AA46BADAD0E27ED'] = function() {
    const $res = natives.networkGetPrimaryClanDataClear();
    return $res;
}
hashes['0x042E4B70B93E6054'] = function() {
    const $res = natives.networkGetPrimaryClanDataCancel();
    return $res;
}
hashes['0xCE86D8191B762107'] = function(p0, p1) {
    const $res = natives.networkGetPrimaryClanDataStart(p0, p1);
    return $res;
}
hashes['0xB5074DB804E28CE7'] = function() {
    const $res = natives.networkGetPrimaryClanDataPending();
    return $res;
}
hashes['0x5B4F04F19376A0BA'] = function() {
    const $res = natives.networkGetPrimaryClanDataSuccess();
    return $res;
}
hashes['0xC080FF658B2E41DA'] = function(p0, p1) {
    const $res = natives.networkGetPrimaryClanDataNew(p0, p1);
    return $res;
}
hashes['0x299EEB23175895FC'] = function(p0, p1) {
    const $res = natives.setNetworkIdCanMigrate(p0, p1);
    return $res;
}
hashes['0xE05E81A888FA63C8'] = function(p0, p1) {
    const $res = natives.setNetworkIdExistsOnAllMachines(p0, p1);
    return $res;
}
hashes['0xA8A024587329F36A'] = function(p0, p1, p2) {
    const $res = natives.setNetworkIdAlwaysExistsForPlayer(p0, p1, p2);
    return $res;
}
hashes['0x9D724B400A7E8FFC'] = function(p0, p1) {
    const $res = natives.setNetworkIdCanBeReassigned(p0, p1);
    return $res;
}
hashes['0xD830567D88A1E873'] = function(p0, p1) {
    const $res = natives.networkSetEntityCanBlend(p0, p1);
    return $res;
}
hashes['0x0379DAF89BA09AA5'] = function(p0, p1) {
    const $res = natives.networkSetObjectCanBlendWhenFixed(p0, p1);
    return $res;
}
hashes['0xF1CA12B18AEF5298'] = function(p0, p1) {
    const $res = natives.networkSetEntityOnlyExistsForParticipants(p0, p1);
    return $res;
}
hashes['0xA6928482543022B4'] = function(p0, p1, p2) {
    const $res = natives.setNetworkIdVisibleInCutscene(p0, p1, p2);
    return $res;
}
hashes['0x32EBD154CB6B8B99'] = function(p0, p1, p2) {
    const $res = natives.setNetworkIdVisibleInCutsceneHack(p0, p1, p2);
    return $res;
}
hashes['0x76B3F29D3F967692'] = function(p0, p1) {
    const $res = natives.setNetworkIdVisibleInCutsceneRemainHack(p0, p1);
    return $res;
}
hashes['0xAAA553E7DD28A457'] = function(p0) {
    const $res = natives.setNetworkCutsceneEntities(p0);
    return $res;
}
hashes['0x66D6A5E9C511214A'] = function() {
    const $res = natives.areCutsceneEntitiesNetworked();
    return $res;
}
hashes['0x3FA36981311FA4FF'] = function(p0, p1) {
    const $res = natives.setNetworkIdPassControlInTutorial(p0, p1);
    return $res;
}
hashes['0xA1607996431332DF'] = function(p0) {
    const $res = natives.isNetworkIdOwnedByParticipant(p0);
    return $res;
}
hashes['0x96320E6549DAE7B4'] = function(p0, p1) {
    const $res = natives.setRemotePlayerVisibleInCutscene(p0, p1);
    return $res;
}
hashes['0xD1065D68947E7B6E'] = function(p0, p1) {
    const $res = natives.setLocalPlayerVisibleInCutscene(p0, p1);
    return $res;
}
hashes['0xE5F773C1A1D9D168'] = function(p0) {
    const $res = natives.setLocalPlayerInvisibleLocally(p0);
    return $res;
}
hashes['0x7619364C82D3BF14'] = function(p0) {
    const $res = natives.setLocalPlayerVisibleLocally(p0);
    return $res;
}
hashes['0x12B37D54667DB0B8'] = function(p0, p1) {
    const $res = natives.setPlayerInvisibleLocally(p0, p1);
    return $res;
}
hashes['0xFAA10F1FAFB11AF2'] = function(p0, p1) {
    const $res = natives.setPlayerVisibleLocally(p0, p1);
    return $res;
}
hashes['0x416DBD4CD6ED8DD2'] = function(p0) {
    const $res = natives.fadeOutLocalPlayer(p0);
    return $res;
}
hashes['0xDE564951F95E09ED'] = function(p0, p1, p2) {
    const $res = natives.networkFadeOutEntity(p0, p1, p2);
    return $res;
}
hashes['0x1F4ED342ACEFE62D'] = function(p0, p1, p2) {
    const $res = natives.networkFadeInEntity(p0, p1, p2);
    return $res;
}
hashes['0x631DC5DFF4B110E3'] = function(p0) {
    const $res = natives.networkIsPlayerFading(p0);
    return $res;
}
hashes['0x422F32CC7E56ABAD'] = function(p0) {
    const $res = natives.networkIsEntityFading(p0);
    return $res;
}
hashes['0xE73092F4157CD126'] = function(p0) {
    const $res = natives.isPlayerInCutscene(p0);
    return $res;
}
hashes['0xE0031D3C8F36AB82'] = function(p0, p1, p2) {
    const $res = natives.setEntityVisibleInCutscene(p0, p1, p2);
    return $res;
}
hashes['0xE135A9FF3F5D05D8'] = function(p0) {
    const $res = natives.setEntityLocallyInvisible(p0);
    return $res;
}
hashes['0x241E289B5C059EDC'] = function(p0) {
    const $res = natives.setEntityLocallyVisible(p0);
    return $res;
}
hashes['0x6E192E33AD436366'] = function(p0) {
    const $res = natives.isDamageTrackerActiveOnNetworkId(p0);
    return $res;
}
hashes['0xD45B1FFCCD52FF19'] = function(p0, p1) {
    const $res = natives.activateDamageTrackerOnNetworkId(p0, p1);
    return $res;
}
hashes['0xB2092A1EAA7FD45F'] = function(p0) {
    const $res = natives.isDamageTrackerActiveOnPlayer(p0);
    return $res;
}
hashes['0xBEC0816FF5ACBCDA'] = function(p0, p1) {
    const $res = natives.activateDamageTrackerOnPlayer(p0, p1);
    return $res;
}
hashes['0xD82CF8E64C8729D8'] = function(p0, p1, p2, p3) {
    const $res = natives.isSphereVisibleToAnotherMachine(p0, p1, p2, p3);
    return $res;
}
hashes['0xDC3A310219E5DA62'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isSphereVisibleToPlayer(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x4E5C93BD0C32FBF8'] = function(p0) {
    const $res = natives.reserveNetworkMissionObjects(p0);
    return $res;
}
hashes['0xB60FEBA45333D36F'] = function(p0) {
    const $res = natives.reserveNetworkMissionPeds(p0);
    return $res;
}
hashes['0x76B02E21ED27A469'] = function(p0) {
    const $res = natives.reserveNetworkMissionVehicles(p0);
    return $res;
}
hashes['0x797F9C5E661D920E'] = function(p0) {
    const $res = natives.reserveLocalNetworkMissionObjects(p0);
    return $res;
}
hashes['0x2C8DF5D129595281'] = function(p0) {
    const $res = natives.reserveLocalNetworkMissionPeds(p0);
    return $res;
}
hashes['0x42613035157E4208'] = function(p0) {
    const $res = natives.reserveLocalNetworkMissionVehicles(p0);
    return $res;
}
hashes['0x800DD4721A8B008B'] = function(p0) {
    const $res = natives.canRegisterMissionObjects(p0);
    return $res;
}
hashes['0xBCBF4FEF9FA5D781'] = function(p0) {
    const $res = natives.canRegisterMissionPeds(p0);
    return $res;
}
hashes['0x7277F1F2E085EE74'] = function(p0) {
    const $res = natives.canRegisterMissionVehicles(p0);
    return $res;
}
hashes['0x0A49D1CB6E34AF72'] = function(p0) {
    const $res = natives.canRegisterMissionPickups(p0);
    return $res;
}
hashes['0xE16AA70CE9BEEDC3'] = function(p0) {
    const $res = natives.canRegisterMissionDoors(p0);
    return $res;
}
hashes['0x69778E7564BADE6D'] = function(p0, p1, p2, p3) {
    const $res = natives.canRegisterMissionEntities(p0, p1, p2, p3);
    return $res;
}
hashes['0xAA81B5F10BC43AC2'] = function(p0, p1) {
    const $res = natives.getNumReservedMissionObjects(p0, p1);
    return $res;
}
hashes['0x1F13D5AE5CB17E17'] = function(p0, p1) {
    const $res = natives.getNumReservedMissionPeds(p0, p1);
    return $res;
}
hashes['0xCF3A965906452031'] = function(p0, p1) {
    const $res = natives.getNumReservedMissionVehicles(p0, p1);
    return $res;
}
hashes['0x12B6281B6C6706C0'] = function(p0) {
    const $res = natives.getNumCreatedMissionObjects(p0);
    return $res;
}
hashes['0xCB215C4B56A7FAE7'] = function(p0) {
    const $res = natives.getNumCreatedMissionPeds(p0);
    return $res;
}
hashes['0x0CD9AB83489430EA'] = function(p0) {
    const $res = natives.getNumCreatedMissionVehicles(p0);
    return $res;
}
hashes['0xE42D626EEC94E5D9'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.getReservedMissionEntitiesInArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xC7BE335216B5EC7C'] = function() {
    const $res = natives.getMaxNumNetworkObjects();
    return $res;
}
hashes['0x0C1F7D49C39D2289'] = function() {
    const $res = natives.getMaxNumNetworkPeds();
    return $res;
}
hashes['0x0AFCE529F69B21FF'] = function() {
    const $res = natives.getMaxNumNetworkVehicles();
    return $res;
}
hashes['0xA72835064DD63E4C'] = function() {
    const $res = natives.getMaxNumNetworkPickups();
    return $res;
}
hashes['0xBA7F0B77D80A4EB7'] = function(p0, p1) {
    const $res = natives.networkSetObjectScopeDistance(p0, p1);
    return $res;
}
hashes['0x0F1A4B45B7693B95'] = function(p0, p1) {
    const $res = natives.networkAllowCloningWhileInTutorial(p0, p1);
    return $res;
}
hashes['0xC6FCEE21C6FCEE21'] = function(p0) {
    const $res = natives.networkSetTaskCutsceneInscopeMultipler(p0);
    return $res;
}
hashes['0x7A5487FE9FAA6B48'] = function() {
    const $res = natives.getNetworkTime();
    return $res;
}
hashes['0x89023FBBF9200E9F'] = function() {
    const $res = natives.getNetworkTimeAccurate();
    return $res;
}
hashes['0x46718ACEEDEAFC84'] = function() {
    const $res = natives.hasNetworkTimeStarted();
    return $res;
}
hashes['0x017008CCDAD48503'] = function(p0, p1) {
    const $res = natives.getTimeOffset(p0, p1);
    return $res;
}
hashes['0xCB2CF5148012C8D0'] = function(p0, p1) {
    const $res = natives.isTimeLessThan(p0, p1);
    return $res;
}
hashes['0xDE350F8651E4346C'] = function(p0, p1) {
    const $res = natives.isTimeMoreThan(p0, p1);
    return $res;
}
hashes['0xF5BC95857BD6D512'] = function(p0, p1) {
    const $res = natives.isTimeEqualTo(p0, p1);
    return $res;
}
hashes['0xA2C6FC031D46FFF0'] = function(p0, p1) {
    const $res = natives.getTimeDifference(p0, p1);
    return $res;
}
hashes['0x9E23B1777A927DAD'] = function(p0) {
    const $res = natives.getTimeAsString(p0);
    return $res;
}
hashes['0xF12E6CD06C73D69E'] = function() {
    const $res = natives.getCloudTimeAsString();
    return $res;
}
hashes['0x9A73240B49945C76'] = function() {
    const $res = natives.getCloudTimeAsInt();
    return $res;
}
hashes['0xAC97AF97FA68E5D5'] = function(p0, p1) {
    const $res = natives.convertPosixTime(p0, p1);
    return $res;
}
hashes['0x423DE3854BB50894'] = function(p0, p1) {
    const $res = natives.networkSetInSpectatorMode(p0, p1);
    return $res;
}
hashes['0x419594E137637120'] = function(p0, p1, p2) {
    const $res = natives.networkSetInSpectatorModeExtended(p0, p1, p2);
    return $res;
}
hashes['0xFC18DB55AE19E046'] = function(p0) {
    const $res = natives.networkSetInFreeCamMode(p0);
    return $res;
}
hashes['0x5C707A667DF8B9FA'] = function(p0, p1) {
    const $res = natives.networkSetAntagonisticToPlayer(p0, p1);
    return $res;
}
hashes['0x048746E388762E11'] = function() {
    const $res = natives.networkIsInSpectatorMode();
    return $res;
}
hashes['0x9CA5DE655269FEC4'] = function(p0, p1) {
    const $res = natives.networkSetInMpCutscene(p0, p1);
    return $res;
}
hashes['0x6CC27C9FA2040220'] = function() {
    const $res = natives.networkIsInMpCutscene();
    return $res;
}
hashes['0x63F9EE203C3619F2'] = function(p0) {
    const $res = natives.networkIsPlayerInMpCutscene(p0);
    return $res;
}
hashes['0xFAC18E7356BD3210'] = function() {
    const $res = natives.networkHideProjectileInCutscene();
    return $res;
}
hashes['0xEC51713AB6EC36E8'] = function(p0, p1, p2, p3) {
    const $res = natives.setNetworkVehicleRespotTimer(p0, p1, p2, p3);
    return $res;
}
hashes['0xDD7CEF5B3A4DA8A6'] = function(p0) {
    const $res = natives.isNetworkVehicleRunningRespotTimer(p0);
    return $res;
}
hashes['0x6274C4712850841E'] = function(p0, p1) {
    const $res = natives.setNetworkVehicleAsGhost(p0, p1);
    return $res;
}
hashes['0xA2A707979FE754DC'] = function(p0, p1) {
    const $res = natives.setNetworkVehicleMaxPositionDeltaMultiplier(p0, p1);
    return $res;
}
hashes['0x838DA0936A24ED4D'] = function(p0, p1) {
    const $res = natives.setNetworkEnableHighSpeedEdgeFallDetection(p0, p1);
    return $res;
}
hashes['0x5FFE9B4144F9712F'] = function(p0, p1) {
    const $res = natives.setLocalPlayerAsGhost(p0, p1);
    return $res;
}
hashes['0x21D04D7BC538C146'] = function(p0) {
    const $res = natives.isEntityAGhost(p0);
    return $res;
}
hashes['0x13F1FCB111B820B0'] = function(p0) {
    const $res = natives.setNonParticipantsOfThisScriptAsGhosts(p0);
    return $res;
}
hashes['0xA7C511FA1C5BDA38'] = function(p0, p1) {
    const $res = natives.setRemotePlayerAsGhost(p0, p1);
    return $res;
}
hashes['0x658500AE6D723A7E'] = function(p0) {
    const $res = natives.setGhostAlpha(p0);
    return $res;
}
hashes['0x17330EBF2F2124A8'] = function() {
    const $res = natives.resetGhostAlpha();
    return $res;
}
hashes['0x4BA166079D658ED4'] = function(p0, p1) {
    const $res = natives.setEntityGhostedForGhostPlayers(p0, p1);
    return $res;
}
hashes['0xD7B6C73CAD419BCF'] = function(p0) {
    const $res = natives.setInvertGhosting(p0);
    return $res;
}
hashes['0x7EF7649B64D7FF10'] = function(p0) {
    const $res = natives.isEntityInGhostCollision(p0);
    return $res;
}
hashes['0x77758139EC9B66C7'] = function(p0) {
    const $res = natives.usePlayerColourInsteadOfTeamColour(p0);
    return $res;
}
hashes['0x7CD6BC4C2BBDD526'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.networkCreateSynchronisedScene(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x742A637471BCECD9'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.networkAddPedToSynchronisedScene(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xA5EAFE473E45C442'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.networkAddPedToSynchronisedSceneWithIk(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xF2404D68CBC855FA'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.networkAddEntityToSynchronisedScene(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x45F35C0EDC33B03B'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.networkAddMapEntityToSynchronisedScene(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xCF8BD3B0BD6D42D7'] = function(p0, p1, p2) {
    const $res = natives.networkAddSynchronisedSceneCamera(p0, p1, p2);
    return $res;
}
hashes['0x478DCBD2A98B705A'] = function(p0, p1, p2) {
    const $res = natives.networkAttachSynchronisedSceneToEntity(p0, p1, p2);
    return $res;
}
hashes['0x9A1B3FCDB36C8697'] = function(p0) {
    const $res = natives.networkStartSynchronisedScene(p0);
    return $res;
}
hashes['0xC254481A4574CB2F'] = function(p0) {
    const $res = natives.networkStopSynchronisedScene(p0);
    return $res;
}
hashes['0x02C40BF885C567B6'] = function(p0) {
    const $res = natives.networkGetLocalSceneFromNetworkId(p0);
    return $res;
}
hashes['0xC9B43A33D09CADA7'] = function(p0) {
    const $res = natives.networkForceLocalUseOfSyncedSceneCamera(p0);
    return $res;
}
hashes['0x144DA052257AE7D8'] = function(p0) {
    const $res = natives.networkAllowRemoteSyncedSceneLocalPlayerRequests(p0);
    return $res;
}
hashes['0xFB1F9381E80FA13F'] = function(p0, p1) {
    const $res = natives.networkFindLargestBunchOfPlayers(p0, p1);
    return $res;
}
hashes['0x5A6FFA2433E2F14C'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.networkStartRespawnSearchForPlayer(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x4BA92A18502BCA61'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.networkStartRespawnSearchInAngledAreaForPlayer(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x3C891A251567DFCE'] = function(p0) {
    const $res = natives.networkQueryRespawnResults(p0);
    return $res;
}
hashes['0xFB8F2A6F3DF08CBE'] = function() {
    const $res = natives.networkCancelRespawnSearch();
    return $res;
}
hashes['0x371EA43692861CF1'] = function(p0, p1, p2) {
    if (typeof p1 != 'object') throw new Error('Argument coordinates should be a Vector3 or an array');
    if (!Array.isArray(p2)) throw new Error('Argument heading should be an array');
    const $res = natives.networkGetRespawnResult(p0, Array.isArray(p1[0]) ? new alt.Vector3(p1[0][0], p1[0][1], p1[0][2]) : new alt.Vector3(p1[0].x, p1[0].y, p1[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p1[0])) { p1[0][0] = $res[1].x; p1[0][1] = $res[1].y; p1[0][2] = $res[1].z }
    else { p1[0].x = $res[1].x; p1[0].y = $res[1].y; p1[0].z = $res[1].z; }
    p2[0] = $res[2];
    return $res[0];
}
hashes['0x6C34F1208B8923FD'] = function(p0) {
    const $res = natives.networkGetRespawnResultFlags(p0);
    return $res;
}
hashes['0x17E0198B3882C2CB'] = function() {
    const $res = natives.networkStartSoloTutorialSession();
    return $res;
}
hashes['0xFB680D403909DC70'] = function(p0, p1) {
    const $res = natives.networkAllowGangToJoinTutorialSession(p0, p1);
    return $res;
}
hashes['0xD0AFAFF5A51D72F7'] = function() {
    const $res = natives.networkEndTutorialSession();
    return $res;
}
hashes['0xADA24309FE08DACF'] = function() {
    const $res = natives.networkIsInTutorialSession();
    return $res;
}
hashes['0xB37E4E6A2388CA7B'] = function() {
    const $res = natives.networkWaitingPopClearTutorialSession();
    return $res;
}
hashes['0x35F0B98A8387274D'] = function() {
    const $res = natives.networkIsTutorialSessionChangePending();
    return $res;
}
hashes['0x3B39236746714134'] = function(p0) {
    const $res = natives.networkGetPlayerTutorialSessionInstance(p0);
    return $res;
}
hashes['0x9DE986FC9A87C474'] = function(p0, p1) {
    const $res = natives.networkArePlayersInSameTutorialSession(p0, p1);
    return $res;
}
hashes['0xFEA7A352DDB34D52'] = function(p0) {
    const $res = natives.networkBlockProxyMigrationBetweenTutorialSessions(p0);
    return $res;
}
hashes['0xBBDF066252829606'] = function(p0, p1, p2) {
    const $res = natives.networkConcealPlayer(p0, p1, p2);
    return $res;
}
hashes['0x919B3C98ED8292F9'] = function(p0) {
    const $res = natives.networkIsPlayerConcealed(p0);
    return $res;
}
hashes['0x1632BE0AC1E62876'] = function(p0, p1) {
    const $res = natives.networkConcealEntity(p0, p1);
    return $res;
}
hashes['0x71302EC70689052A'] = function(p0) {
    const $res = natives.networkIsEntityConcealed(p0);
    return $res;
}
hashes['0xE679E3E06E363892'] = function(p0, p1, p2) {
    const $res = natives.networkOverrideClockTime(p0, p1, p2);
    return $res;
}
hashes['0x42BF1D2E723B6D7E'] = function(p0) {
    const $res = natives.networkOverrideClockRate(p0);
    return $res;
}
hashes['0xD972DF67326F966E'] = function() {
    const $res = natives.networkClearClockTimeOverride();
    return $res;
}
hashes['0xD7C95D322FF57522'] = function() {
    const $res = natives.networkIsClockTimeOverridden();
    return $res;
}
hashes['0x494C8FB299290269'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkAddEntityArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x376C6375BA60293A'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.networkAddEntityAngledArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x25B99872D588A101'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.networkAddClientEntityArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x2B1C623823DB0D9D'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.networkAddClientEntityAngledArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x93CF869BAA0C4874'] = function(p0) {
    const $res = natives.networkRemoveEntityArea(p0);
    return $res;
}
hashes['0xE64A3CA08DFA37A9'] = function(p0) {
    const $res = natives.networkEntityAreaDoesExist(p0);
    return $res;
}
hashes['0x4DF7CFFF471A7FB1'] = function(p0) {
    const $res = natives.networkEntityAreaHaveAllReplied(p0);
    return $res;
}
hashes['0x4A2D4E8BF4265B0F'] = function(p0) {
    const $res = natives.networkEntityAreaIsOccupied(p0);
    return $res;
}
hashes['0x2B1813ABA29016C5'] = function(p0, p1) {
    const $res = natives.networkUseHighPrecisionBlending(p0, p1);
    return $res;
}
hashes['0xA6FCECCF4721D679'] = function(p0) {
    const $res = natives.networkSetCustomArenaBallParams(p0);
    return $res;
}
hashes['0x95BAF97C82464629'] = function(p0, p1) {
    const $res = natives.networkEntityUseHighPrecisionRotation(p0, p1);
    return $res;
}
hashes['0x924426BFFD82E915'] = function() {
    const $res = natives.networkRequestCloudBackgroundScripts();
    return $res;
}
hashes['0x8132C0EB8B2B3293'] = function() {
    const $res = natives.networkIsCloudBackgroundScriptRequestPending();
    return $res;
}
hashes['0x42FB3B532D526E6C'] = function() {
    const $res = natives.networkRequestCloudTunables();
    return $res;
}
hashes['0x0467C11ED88B7D28'] = function() {
    const $res = natives.networkIsTunableCloudRequestPending();
    return $res;
}
hashes['0x10BD227A753B0D84'] = function() {
    const $res = natives.networkGetTunableCloudCrc();
    return $res;
}
hashes['0x85E5F8B9B898B20A'] = function(p0, p1) {
    const $res = natives.networkDoesTunableExist(p0, p1);
    return $res;
}
hashes['0x8BE1146DFD5D4468'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument value should be an array');
    const $res = natives.networkAccessTunableInt(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0xE5608CA7BC163A5F'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument value should be an array');
    const $res = natives.networkAccessTunableFloat(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0xAA6A47A573ABB75A'] = function(p0, p1) {
    const $res = natives.networkAccessTunableBool(p0, p1);
    return $res;
}
hashes['0xE4E53E1419D81127'] = function(p0, p1) {
    const $res = natives.networkDoesTunableExistHash(p0, p1);
    return $res;
}
hashes['0xFAFC23AEE23868DB'] = function() {
    const $res = natives.networkAccessTunableModificationDetectionClear();
    return $res;
}
hashes['0x40FCE03E50E8DBE8'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument value should be an array');
    const $res = natives.networkAccessTunableIntHash(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x3A8B55FDA4C8DDEF'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument value should be an array');
    const $res = natives.networkAccessTunableIntModificationDetectionRegistrationHash(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x972BC203BBC4C4D5'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument value should be an array');
    const $res = natives.networkAccessTunableFloatHash(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x1950DAE9848A4739'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument value should be an array');
    const $res = natives.networkAccessTunableFloatModificationDetectionRegistrationHash(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0xEA16B69D93D71A45'] = function(p0, p1) {
    const $res = natives.networkAccessTunableBoolHash(p0, p1);
    return $res;
}
hashes['0x697F508861875B42'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument value should be an array');
    const $res = natives.networkAccessTunableBoolModificationDetectionRegistrationHash(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0xC7420099936CE286'] = function(p0, p1, p2) {
    const $res = natives.networkTryAccessTunableBoolHash(p0, p1, p2);
    return $res;
}
hashes['0x187382F8A3E0A6C3'] = function(p0) {
    const $res = natives.networkGetContentModifierListId(p0);
    return $res;
}
hashes['0x7DB53B37A2F211A0'] = function() {
    const $res = natives.networkGetBoneIdOfFatalHit();
    return $res;
}
hashes['0x72433699B4E6DD64'] = function() {
    const $res = natives.networkResetBodyTracker();
    return $res;
}
hashes['0xD38C4A6D047C019D'] = function() {
    const $res = natives.networkGetNumberBodyTrackerHits();
    return $res;
}
hashes['0x2E0BF682CC778D49'] = function(p0) {
    const $res = natives.networkHasBoneBeenHitByKiller(p0);
    return $res;
}
hashes['0x0EDE326D47CD0F3E'] = function(p0, p1) {
    const $res = natives.networkSetAttributeDamageToPlayer(p0, p1);
    return $res;
}
hashes['0x890E2C5ABED7236D'] = function(p0, p1) {
    const $res = natives.networkTriggerDamageEventForZeroDamage(p0, p1);
    return $res;
}
hashes['0x38B7C51AB1EDC7D8'] = function(p0, p1) {
    const $res = natives.networkTriggerDamageEventForZeroWeaponHash(p0, p1);
    return $res;
}
hashes['0x3FC795691834481D'] = function(p0, p1) {
    const $res = natives.networkSetNoLongerNeeded(p0, p1);
    return $res;
}
hashes['0x301A42153C9AD707'] = function(p0, p1, p2, p3) {
    const $res = natives.networkExplodeVehicle(p0, p1, p2, p3);
    return $res;
}
hashes['0x2A5E0621DD815A9A'] = function(p0, p1, p2, p3) {
    const $res = natives.networkExplodeHeli(p0, p1, p2, p3);
    return $res;
}
hashes['0xCD71A4ECAB22709E'] = function(p0) {
    const $res = natives.networkUseLogarithmicBlendingThisFrame(p0);
    return $res;
}
hashes['0xA7E30DE9272B6D49'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.networkOverrideCoordsAndHeading(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xE6717E652B8C8D8A'] = function(p0, p1) {
    const $res = natives.networkEnableExtraVehicleOrientationBlendChecks(p0, p1);
    return $res;
}
hashes['0x407091CF6037118E'] = function(p0) {
    const $res = natives.networkDisableProximityMigration(p0);
    return $res;
}
hashes['0x1775961C2FBBCB5C'] = function(p0) {
    const $res = natives.networkSetPropertyId(p0);
    return $res;
}
hashes['0xC2B82527CA77053E'] = function() {
    const $res = natives.networkClearPropertyId();
    return $res;
}
hashes['0x367EF5E2F439B4C6'] = function(p0) {
    const $res = natives.networkSetPlayerMentalState(p0);
    return $res;
}
hashes['0x94538037EE44F5CF'] = function(p0) {
    const $res = natives.networkSetMinimumRankForMission(p0);
    return $res;
}
hashes['0xBD0BE0BFC927EAC1'] = function() {
    const $res = natives.networkCacheLocalPlayerHeadBlendData();
    return $res;
}
hashes['0x237D5336A9A54108'] = function(p0) {
    const $res = natives.networkHasCachedPlayerHeadBlendData(p0);
    return $res;
}
hashes['0x99B72C7ABDE5C910'] = function(p0, p1) {
    const $res = natives.networkApplyCachedPlayerHeadBlendData(p0, p1);
    return $res;
}
hashes['0xF2EAC213D5EA0623'] = function() {
    const $res = natives.getNumCommerceItems();
    return $res;
}
hashes['0xEA14EEF5B7CD2C30'] = function() {
    const $res = natives.isCommerceDataValid();
    return $res;
}
hashes['0xB606E6CC59664972'] = function(p0) {
    const $res = natives.triggerCommerceDataFetch(p0);
    return $res;
}
hashes['0x1D4DC17C38FEAFF0'] = function() {
    const $res = natives.isCommerceDataFetchInProgress();
    return $res;
}
hashes['0x662635855957C411'] = function(p0) {
    const $res = natives.getCommerceItemId(p0);
    return $res;
}
hashes['0xB4271092CA7EDF48'] = function(p0) {
    const $res = natives.getCommerceItemName(p0);
    return $res;
}
hashes['0xCA94551B50B4932C'] = function(p0) {
    const $res = natives.getCommerceProductPrice(p0);
    return $res;
}
hashes['0x2A7776C709904AB0'] = function(p0) {
    const $res = natives.getCommerceItemNumCats(p0);
    return $res;
}
hashes['0x6F44CBF56D79FAC0'] = function(p0, p1) {
    const $res = natives.getCommerceItemCat(p0, p1);
    return $res;
}
hashes['0x58C21165F6545892'] = function(p0, p1, p2) {
    const $res = natives.openCommerceStore(p0, p1, p2);
    return $res;
}
hashes['0x2EAC52B4019E2782'] = function() {
    const $res = natives.isCommerceStoreOpen();
    return $res;
}
hashes['0x9641A9FF718E9C5E'] = function(p0) {
    const $res = natives.setStoreEnabled(p0);
    return $res;
}
hashes['0xA2F952104FC6DD4B'] = function(p0) {
    const $res = natives.requestCommerceItemImage(p0);
    return $res;
}
hashes['0x72D0706CD6CCDB58'] = function() {
    const $res = natives.releaseAllCommerceItemImages();
    return $res;
}
hashes['0x722F5D28B61C5EA8'] = function(p0) {
    const $res = natives.getCommerceItemTexturename(p0);
    return $res;
}
hashes['0x883D79C4071E18B3'] = function() {
    const $res = natives.isStoreAvailableToUser();
    return $res;
}
hashes['0x265635150FB0D82E'] = function() {
    const $res = natives.delayMpStoreOpen();
    return $res;
}
hashes['0x444C4525ECE0A4B9'] = function() {
    const $res = natives.resetStoreNetworkGameTracking();
    return $res;
}
hashes['0x59328EB08C5CEB2B'] = function() {
    const $res = natives.isUserOldEnoughToAccessStore();
    return $res;
}
hashes['0xFAE628F1E9ADB239'] = function(p0, p1, p2) {
    const $res = natives.setLastViewedShopItem(p0, p1, p2);
    return $res;
}
hashes['0x754615490A029508'] = function() {
    const $res = natives.getUserPremiumAccess();
    return $res;
}
hashes['0x155467ACA0F55705'] = function() {
    const $res = natives.getUserStarterAccess();
    return $res;
}
hashes['0xC64DED7EF0D2FE37'] = function(p0) {
    const $res = natives.cloudDeleteMemberFile(p0);
    return $res;
}
hashes['0x4C61B39930D045DA'] = function(p0) {
    const $res = natives.cloudHasRequestCompleted(p0);
    return $res;
}
hashes['0x3A3D5568AF297CD5'] = function(p0) {
    const $res = natives.cloudDidRequestSucceed(p0);
    return $res;
}
hashes['0x4F18196C8D38768D'] = function() {
    const $res = natives.cloudCheckAvailability();
    return $res;
}
hashes['0xC7ABAC5DE675EE3B'] = function() {
    const $res = natives.cloudIsCheckingAvailability();
    return $res;
}
hashes['0x0B0CC10720653F3B'] = function() {
    const $res = natives.cloudGetAvailabilityCheckResult();
    return $res;
}
hashes['0x8B0C2964BA471961'] = function() {
    const $res = natives.getContentToLoadType();
    return $res;
}
hashes['0x88B588B41FF7868E'] = function() {
    const $res = natives.getIsLaunchFromLiveArea();
    return $res;
}
hashes['0x67FC09BC554A75E5'] = function() {
    const $res = natives.getIsLiveAreaLaunchWithContent();
    return $res;
}
hashes['0x966DD84FB6A46017'] = function() {
    const $res = natives.clearServiceEventArguments();
    return $res;
}
hashes['0x152D90E4C1B4738A'] = function(p0, p1) {
    const $res = natives.ugcCopyContent(p0, p1);
    return $res;
}
hashes['0x9FEDF86898F100E9'] = function() {
    const $res = natives.ugcIsCreating();
    return $res;
}
hashes['0x5E24341A7F92A74B'] = function() {
    const $res = natives.ugcHasCreateFinished();
    return $res;
}
hashes['0x24E4E51FC16305F9'] = function() {
    const $res = natives.ugcDidCreateSucceed();
    return $res;
}
hashes['0xFBC5E768C7A77A6A'] = function() {
    const $res = natives.ugcGetCreateResult();
    return $res;
}
hashes['0xC55A0B40FFB1ED23'] = function() {
    const $res = natives.ugcGetCreateContentId();
    return $res;
}
hashes['0x17440AA15D1D3739'] = function() {
    const $res = natives.ugcClearCreateResult();
    return $res;
}
hashes['0x9BF438815F5D96EA'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.ugcQueryMyContent(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x692D58DF40657E8C'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.ugcQueryByCategory(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x158EC424F35EC469'] = function(p0, p1, p2) {
    const $res = natives.ugcQueryByContentId(p0, p1, p2);
    return $res;
}
hashes['0xC7397A83F7A2A462'] = function(p0, p1, p2, p3) {
    const $res = natives.ugcQueryByContentIds(p0, p1, p2, p3);
    return $res;
}
hashes['0x6D4CB481FAC835E8'] = function(p0, p1, p2, p3) {
    const $res = natives.ugcQueryMostRecentlyCreatedContent(p0, p1, p2, p3);
    return $res;
}
hashes['0xD5A4B59980401588'] = function(p0, p1, p2, p3) {
    const $res = natives.ugcGetBookmarkedContent(p0, p1, p2, p3);
    return $res;
}
hashes['0x3195F8DD0D531052'] = function(p0, p1, p2, p3) {
    const $res = natives.ugcGetMyContent(p0, p1, p2, p3);
    return $res;
}
hashes['0xF9E1CCAE8BA4C281'] = function(p0, p1, p2, p3) {
    const $res = natives.ugcGetFriendContent(p0, p1, p2, p3);
    return $res;
}
hashes['0x9F6E2821885CAEE2'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.ugcGetCrewContent(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x678BB03C1A3BD51E'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.ugcGetGetByCategory(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x815E5E3073DA1D67'] = function(p0, p1) {
    const $res = natives.ugcGetGetByContentId(p0, p1);
    return $res;
}
hashes['0xB8322EEB38BE7C26'] = function(p0, p1, p2) {
    const $res = natives.ugcGetGetByContentIds(p0, p1, p2);
    return $res;
}
hashes['0xA7862BC5ED1DFD7E'] = function(p0, p1, p2, p3) {
    const $res = natives.ugcGetMostRecentlyCreatedContent(p0, p1, p2, p3);
    return $res;
}
hashes['0x97A770BEEF227E2B'] = function(p0, p1, p2, p3) {
    const $res = natives.ugcGetMostRecentlyPlayedContent(p0, p1, p2, p3);
    return $res;
}
hashes['0x5324A0E3E4CE3570'] = function(p0, p1, p2, p3) {
    const $res = natives.ugcGetTopRatedContent(p0, p1, p2, p3);
    return $res;
}
hashes['0xE9B99B6853181409'] = function() {
    const $res = natives.ugcCancelQuery();
    return $res;
}
hashes['0xD53ACDBEF24A46E8'] = function() {
    const $res = natives.ugcIsGetting();
    return $res;
}
hashes['0x02ADA21EA2F6918F'] = function() {
    const $res = natives.ugcHasGetFinished();
    return $res;
}
hashes['0x941E5306BCD7C2C7'] = function() {
    const $res = natives.ugcDidGetSucceed();
    return $res;
}
hashes['0xC87E740D9F3872CC'] = function() {
    const $res = natives.ugcWasQueryForceCancelled();
    return $res;
}
hashes['0xEDF7F927136C224B'] = function() {
    const $res = natives.ugcGetQueryResult();
    return $res;
}
hashes['0xE0A6138401BCB837'] = function() {
    const $res = natives.ugcGetContentNum();
    return $res;
}
hashes['0x769951E2455E2EB5'] = function() {
    const $res = natives.ugcGetContentTotal();
    return $res;
}
hashes['0x3A17A27D75C74887'] = function() {
    const $res = natives.ugcGetContentHash();
    return $res;
}
hashes['0xBA96394A0EECFA65'] = function() {
    const $res = natives.ugcClearQueryResults();
    return $res;
}
hashes['0xCD67AD041A394C9C'] = function(p0) {
    const $res = natives.ugcGetContentUserId(p0);
    return $res;
}
hashes['0x584770794D758C18'] = function(p0, p1) {
    const $res = natives.ugcGetContentCreatorGamerHandle(p0, p1);
    return $res;
}
hashes['0x8C8D2739BA44AF0F'] = function(p0) {
    const $res = natives.ugcGetContentCreatedByLocalPlayer(p0);
    return $res;
}
hashes['0x703F12425ECA8BF5'] = function(p0) {
    const $res = natives.ugcGetContentUserName(p0);
    return $res;
}
hashes['0xAEAB987727C5A8A4'] = function(p0) {
    const $res = natives.ugcGetContentIsUsingScNickname(p0);
    return $res;
}
hashes['0xA7BAB11E7C9C6C5A'] = function(p0) {
    const $res = natives.ugcGetContentCategory(p0);
    return $res;
}
hashes['0x55AA95F481D694D2'] = function(p0) {
    const $res = natives.ugcGetContentId(p0);
    return $res;
}
hashes['0xC0173D6BFF4E0348'] = function(p0) {
    const $res = natives.ugcGetRootContentId(p0);
    return $res;
}
hashes['0xBF09786A7FCAB582'] = function(p0) {
    const $res = natives.ugcGetContentName(p0);
    return $res;
}
hashes['0x7CF0448787B23758'] = function(p0) {
    const $res = natives.ugcGetContentDescriptionHash(p0);
    return $res;
}
hashes['0xBAF6BABF9E7CCC13'] = function(p0, p1) {
    const $res = natives.ugcGetContentPath(p0, p1);
    return $res;
}
hashes['0xCFD115B373C0DF63'] = function(p0, p1) {
    const $res = natives.ugcGetContentUpdatedDate(p0, p1);
    return $res;
}
hashes['0x37025B27D9B658B1'] = function(p0, p1) {
    const $res = natives.ugcGetContentFileVersion(p0, p1);
    return $res;
}
hashes['0x1D610EB0FEA716D9'] = function(p0) {
    const $res = natives.ugcGetContentHasLoResPhoto(p0);
    return $res;
}
hashes['0x7FCC39C46C3C03BD'] = function(p0) {
    const $res = natives.ugcGetContentHasHiResPhoto(p0);
    return $res;
}
hashes['0x32DD916F3F7C9672'] = function(p0) {
    const $res = natives.ugcGetContentLanguage(p0);
    return $res;
}
hashes['0x3054F114121C21EA'] = function(p0) {
    const $res = natives.ugcGetContentIsPublished(p0);
    return $res;
}
hashes['0xA9240A96C74CCA13'] = function(p0) {
    const $res = natives.ugcGetContentIsVerified(p0);
    return $res;
}
hashes['0x1ACCFBA3D8DAB2EE'] = function(p0, p1) {
    const $res = natives.ugcGetContentRating(p0, p1);
    return $res;
}
hashes['0x759299C5BB31D2A9'] = function(p0, p1) {
    const $res = natives.ugcGetContentRatingCount(p0, p1);
    return $res;
}
hashes['0x87E5C46C187FE0AE'] = function(p0, p1) {
    const $res = natives.ugcGetContentRatingPositiveCount(p0, p1);
    return $res;
}
hashes['0x4E548C0D7AE39FF9'] = function(p0, p1) {
    const $res = natives.ugcGetContentRatingNegativeCount(p0, p1);
    return $res;
}
hashes['0x70EA8DA57840F9BE'] = function(p0) {
    const $res = natives.ugcGetContentHasPlayerRecord(p0);
    return $res;
}
hashes['0x993CBE59D350D225'] = function(p0) {
    const $res = natives.ugcGetContentHasPlayerBookmarked(p0);
    return $res;
}
hashes['0x171DF6A0C07FB3DC'] = function(p0, p1) {
    const $res = natives.ugcRequestContentDataFromIndex(p0, p1);
    return $res;
}
hashes['0x7FD2990AF016795E'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.ugcRequestContentDataFromParams(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x5E0165278F6339EE'] = function(p0) {
    const $res = natives.ugcRequestCachedDescription(p0);
    return $res;
}
hashes['0x2D5DC831176D0114'] = function(p0) {
    const $res = natives.ugcIsDescriptionRequestInProgress(p0);
    return $res;
}
hashes['0xEBFA8D50ADDC54C4'] = function(p0) {
    const $res = natives.ugcHasDescriptionRequestFinished(p0);
    return $res;
}
hashes['0x162C23CA83ED0A62'] = function(p0) {
    const $res = natives.ugcDidDescriptionRequestSucceed(p0);
    return $res;
}
hashes['0x40F7E66472DF3E5C'] = function(p0, p1) {
    const $res = natives.ugcGetCachedDescription(p0, p1);
    return $res;
}
hashes['0x5A34CD9C3C5BEC44'] = function(p0) {
    const $res = natives.ugcReleaseCachedDescription(p0);
    return $res;
}
hashes['0x68103E2247887242'] = function() {
    const $res = natives.ugcReleaseAllCachedDescriptions();
    return $res;
}
hashes['0x1DE0F5F50D723CAA'] = function(p0, p1, p2) {
    const $res = natives.ugcPublish(p0, p1, p2);
    return $res;
}
hashes['0x274A1519DFC1094F'] = function(p0, p1, p2) {
    const $res = natives.ugcSetBookmarked(p0, p1, p2);
    return $res;
}
hashes['0xD05D1A6C74DA3498'] = function(p0, p1, p2) {
    const $res = natives.ugcSetDeleted(p0, p1, p2);
    return $res;
}
hashes['0x45E816772E93A9DB'] = function() {
    const $res = natives.ugcIsModifying();
    return $res;
}
hashes['0x299EF3C576773506'] = function() {
    const $res = natives.ugcHasModifyFinished();
    return $res;
}
hashes['0x793FF272D5B365F4'] = function() {
    const $res = natives.ugcDidModifySucceed();
    return $res;
}
hashes['0x5A0A3D1A186A5508'] = function() {
    const $res = natives.ugcGetModifyResult();
    return $res;
}
hashes['0xA1E5E0204A6FCC70'] = function() {
    const $res = natives.ugcClearModifyResult();
    return $res;
}
hashes['0xB746D20B17F2A229'] = function(p0, p1) {
    const $res = natives.ugcGetCreatorsByUserId(p0, p1);
    return $res;
}
hashes['0x63B406D7884BFA95'] = function() {
    const $res = natives.ugcHasQueryCreatorsFinished();
    return $res;
}
hashes['0x4D02279C83BE69FE'] = function() {
    const $res = natives.ugcDidQueryCreatorsSucceed();
    return $res;
}
hashes['0x597F8DBA9B206FC7'] = function() {
    const $res = natives.ugcGetCreatorNum();
    return $res;
}
hashes['0x5CAE833B0EE0C500'] = function(p0) {
    const $res = natives.ugcLoadOfflineQuery(p0);
    return $res;
}
hashes['0x61A885D3F7CFEE9A'] = function() {
    const $res = natives.ugcClearOfflineQuery();
    return $res;
}
hashes['0xF98DDE0A8ED09323'] = function(p0) {
    const $res = natives.ugcSetQueryDataFromOffline(p0);
    return $res;
}
hashes['0xFD75DABC0957BF33'] = function(p0) {
    const $res = natives.ugcSetUsingOfflineContent(p0);
    return $res;
}
hashes['0xF53E48461B71EECB'] = function(p0) {
    const $res = natives.ugcIsLanguageSupported(p0);
    return $res;
}
hashes['0x098AB65B9ED9A9EC'] = function(p0, p1, p2) {
    const $res = natives.facebookPostCompletedHeist(p0, p1, p2);
    return $res;
}
hashes['0xDC48473142545431'] = function() {
    const $res = natives.facebookPostCreateCharacter();
    return $res;
}
hashes['0x0AE1F1653B554AB9'] = function(p0) {
    const $res = natives.facebookPostCompletedMilestone(p0);
    return $res;
}
hashes['0x62B9FEC9A11F10EF'] = function() {
    const $res = natives.facebookHasPostCompleted();
    return $res;
}
hashes['0xA75E2B6733DA5142'] = function() {
    const $res = natives.facebookDidPostSucceed();
    return $res;
}
hashes['0x43865688AE10F0D7'] = function() {
    const $res = natives.facebookCanPostToFacebook();
    return $res;
}
hashes['0x16160DA74A8E74A2'] = function(p0, p1, p2, p3) {
    const $res = natives.textureDownloadRequest(p0, p1, p2, p3);
    return $res;
}
hashes['0x0B203B4AFDE53A4F'] = function(p0, p1, p2) {
    const $res = natives.titleTextureDownloadRequest(p0, p1, p2);
    return $res;
}
hashes['0x308F96458B7087CC'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.ugcTextureDownloadRequest(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x487EB90B98E9FB19'] = function(p0) {
    const $res = natives.textureDownloadRelease(p0);
    return $res;
}
hashes['0x5776ED562C134687'] = function(p0) {
    const $res = natives.textureDownloadHasFailed(p0);
    return $res;
}
hashes['0x3448505B6E35262D'] = function(p0) {
    const $res = natives.textureDownloadGetName(p0);
    return $res;
}
hashes['0x8BD6C6DEA20E82C6'] = function(p0) {
    const $res = natives.getStatusOfTextureDownload(p0);
    return $res;
}
hashes['0x60EDD13EB3AC1FF3'] = function() {
    const $res = natives.networkCheckRosLinkWentdownNotNet();
    return $res;
}
hashes['0x82A2B386716608F1'] = function() {
    const $res = natives.networkShouldShowStrictNatWarning();
    return $res;
}
hashes['0xEFFB25453D8600F9'] = function() {
    const $res = natives.networkIsCableConnected();
    return $res;
}
hashes['0x66B59CFFD78467AF'] = function() {
    const $res = natives.networkHaveScsPrivateMsgPriv();
    return $res;
}
hashes['0x606E4D3E3CCCF3EB'] = function() {
    const $res = natives.networkHaveRosSocialClubPriv();
    return $res;
}
hashes['0x8020A73847E0CA7D'] = function() {
    const $res = natives.networkHaveRosBannedPriv();
    return $res;
}
hashes['0xA0AD7E2AF5349F61'] = function() {
    const $res = natives.networkHaveRosCreateTicketPriv();
    return $res;
}
hashes['0x5F91D5D0B36AA310'] = function() {
    const $res = natives.networkHaveRosMultiplayerPriv();
    return $res;
}
hashes['0x422D396F80A96547'] = function() {
    const $res = natives.networkHaveRosLeaderboardWritePriv();
    return $res;
}
hashes['0xA699957E60D80214'] = function(p0) {
    const $res = natives.networkHasRosPrivilege(p0);
    return $res;
}
hashes['0xC22912B1D85F26B1'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument banType should be an array');
    const $res = natives.networkHasRosPrivilegeEndDate(p0, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x593570C289A77688'] = function() {
    const $res = natives.networkHasRosPrivilegePlayedLastGen();
    return $res;
}
hashes['0x91B87C55093DE351'] = function() {
    const $res = natives.networkHasRosPrivilegeSpecialEditionContent();
    return $res;
}
hashes['0x36391F397731595D'] = function(p0) {
    const $res = natives.networkStartCommunicationPermissionsCheck(p0);
    return $res;
}
hashes['0xDEB2B99A1AF1A2A6'] = function(p0) {
    const $res = natives.networkStartUserContentPermissionsCheck(p0);
    return $res;
}
hashes['0x9465E683B12D3F6B'] = function() {
    const $res = natives.networkSkipRadioResetNextClose();
    return $res;
}
hashes['0xCA59CCAE5D01E4CE'] = function() {
    const $res = natives.networkSkipRadioResetNextOpen();
    return $res;
}
hashes['0x659CF2EF7F550C4F'] = function() {
    const $res = natives.networkSkipRadioWarning();
    return $res;
}
hashes['0xB7C7F6AD6424304B'] = function() {
    const $res = natives.networkForceLocalPlayerScarSync();
    return $res;
}
hashes['0xC505036A35AFD01B'] = function(p0) {
    const $res = natives.networkDisableLeaveRemotePedBehind(p0);
    return $res;
}
hashes['0x267C78C60E806B9A'] = function(p0, p1) {
    const $res = natives.networkAllowRemoteAttachmentModification(p0, p1);
    return $res;
}
hashes['0x6BFF5F84102DF80A'] = function(p0) {
    const $res = natives.networkShowChatRestrictionMsc(p0);
    return $res;
}
hashes['0x5C497525F803486B'] = function() {
    const $res = natives.networkShowPsnUgcRestriction();
    return $res;
}
hashes['0x6FB7BB3607D27FA2'] = function() {
    const $res = natives.networkIsTitleUpdateRequired();
    return $res;
}
hashes['0x45A83257ED02D9BC'] = function() {
    const $res = natives.networkQuitMpToDesktop();
    return $res;
}
hashes['0x16D3D49902F697BB'] = function(p0) {
    const $res = natives.networkIsConnectedViaRelay(p0);
    return $res;
}
hashes['0xD414BE129BB81B32'] = function(p0) {
    const $res = natives.networkGetAverageLatency(p0);
    return $res;
}
hashes['0x0E3A041ED6AC2B45'] = function(p0) {
    const $res = natives.networkGetAveragePing(p0);
    return $res;
}
hashes['0x350C23949E43686C'] = function(p0) {
    const $res = natives.networkGetAveragePacketLoss(p0);
    return $res;
}
hashes['0xFF8FCF9FFC458A1C'] = function(p0) {
    const $res = natives.networkGetNumUnackedReliables(p0);
    return $res;
}
hashes['0x3765C3A3E8192E10'] = function(p0) {
    const $res = natives.networkGetUnreliableResendCount(p0);
    return $res;
}
hashes['0x52C1EADAF7B10302'] = function(p0) {
    const $res = natives.networkGetHighestReliableResendCount(p0);
    return $res;
}
hashes['0x5626D9D6810730D5'] = function() {
    const $res = natives.networkReportCodeTamper();
    return $res;
}
hashes['0x64D779659BC37B19'] = function(p0) {
    const $res = natives.networkGetLastEntityPosReceivedOverNetwork(p0);
    return new mp.Vector3($res);
}
hashes['0x125E6D638B8605D4'] = function(p0) {
    const $res = natives.networkGetLastPlayerPosReceivedOverNetwork(p0);
    return new mp.Vector3($res);
}
hashes['0x33DE49EDF4DDE77A'] = function(p0) {
    const $res = natives.networkGetLastVelReceivedOverNetwork(p0);
    return new mp.Vector3($res);
}
hashes['0xAA5FAFCD2C5F5E47'] = function(p0) {
    const $res = natives.networkGetPredictedVelocity(p0);
    return new mp.Vector3($res);
}
hashes['0xAEDF1BC1C133D6E3'] = function() {
    const $res = natives.networkDumpNetIfConfig();
    return $res;
}
hashes['0x2555CF7DA5473794'] = function(p0) {
    const $res = natives.networkGetSignallingInfo(p0);
    return $res;
}
hashes['0x6FD992C4A1C1B986'] = function(p0) {
    const $res = natives.networkGetNetStatisticsInfo(p0);
    return $res;
}
hashes['0xDB663CC9FF3407A9'] = function(p0) {
    const $res = natives.networkGetPlayerAccountId(p0);
    return $res;
}
hashes['0xC1447451DDB512F0'] = function(p0, p1) {
    const $res = natives.networkUgcNav(p0, p1);
    return $res;
}
hashes['0x509D5878EB39E842'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.createObject(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x9A294B2138ABB884'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.createObjectNoOffset(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x539E0AE3E6634B9F'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument object should be an array');
    const $res = natives.deleteObject();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x58A850EAEE20FAA3'] = function(p0) {
    const $res = natives.placeObjectOnGroundProperly(p0);
    return $res;
}
hashes['0xD76EEEF746057FD6'] = function(p0) {
    const $res = natives.placeObjectOnGroundOrObjectProperly(p0);
    return $res;
}
hashes['0xAFE24E4D29249E4A'] = function(p0, p1, p2, p3) {
    const $res = natives.rotateObject(p0, p1, p2, p3);
    return $res;
}
hashes['0x2FDFF4107B8C1147'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.slideObject(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x8A7391690F5AFD81'] = function(p0, p1) {
    const $res = natives.setObjectTargettable(p0, p1);
    return $res;
}
hashes['0x77F33F2CCF64B3AA'] = function(p0, p1) {
    const $res = natives.setObjectForceVehiclesToAvoid(p0, p1);
    return $res;
}
hashes['0xE143FA2249364369'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.getClosestObjectOfType(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x8ABFB70C49CC43E2'] = function(p0, p1) {
    const $res = natives.hasObjectBeenBroken(p0, p1);
    return $res;
}
hashes['0x761B0E69AC4D007E'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.hasClosestObjectOfTypeBeenBroken(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x46494A2475701343'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.hasClosestObjectOfTypeBeenCompletelyDestroyed(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x2542269291C6AC84'] = function(p0) {
    const $res = natives.getHasObjectBeenCompletelyDestroyed(p0);
    return $res;
}
hashes['0x163E252DE035A133'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.getOffsetFromCoordAndHeadingInWorldCoords(p0, p1, p2, p3, p4, p5, p6);
    return new mp.Vector3($res);
}
hashes['0x163F8B586BC95F2A'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    if (typeof p5 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    if (typeof p6 != 'object') throw new Error('Argument outRotation should be a Vector3 or an array');
    const $res = natives.getCoordsAndRotationOfClosestObjectOfType(p0, p1, p2, p3, p4, Array.isArray(p5[0]) ? new alt.Vector3(p5[0][0], p5[0][1], p5[0][2]) : new alt.Vector3(p5[0].x, p5[0].y, p5[0].z), Array.isArray(p6[0]) ? new alt.Vector3(p6[0][0], p6[0][1], p6[0][2]) : new alt.Vector3(p6[0].x, p6[0].y, p6[0].z), p7);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p5[0])) { p5[0][0] = $res[1].x; p5[0][1] = $res[1].y; p5[0][2] = $res[1].z }
    else { p5[0].x = $res[1].x; p5[0].y = $res[1].y; p5[0].z = $res[1].z; }
    if (Array.isArray(p6[0])) { p6[0][0] = $res[2].x; p6[0][1] = $res[2].y; p6[0][2] = $res[2].z }
    else { p6[0].x = $res[2].x; p6[0].y = $res[2].y; p6[0].z = $res[2].z; }
    return $res[0];
}
hashes['0xF82D8F1926A02C3D'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setStateOfClosestDoorOfType(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xEDC1A5B84AEF33FF'] = function(p0, p1, p2, p3, p4, p5) {
    if (!Array.isArray(p4)) throw new Error('Argument locked should be an array');
    if (!Array.isArray(p5)) throw new Error('Argument heading should be an array');
    const $res = natives.getStateOfClosestDoorOfType(p0, p1, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p4[0] = $res[1];
    p5[0] = $res[2];
    return $res[0];
}
hashes['0x9B12F9A24FABEDB0'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setLockedUnstreamedInDoorOfType(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x006E4B040ED37EC3'] = function(p0) {
    const $res = natives.playObjectAutoStartAnim(p0);
    return $res;
}
hashes['0x6F8838D03D1DC226'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.addDoorToSystem(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x464D8E1427156FE4'] = function(p0, p1) {
    const $res = natives.removeDoorFromSystem(p0, p1);
    return $res;
}
hashes['0x6BAB9442830C7F53'] = function(p0, p1, p2, p3) {
    const $res = natives.doorSystemSetDoorState(p0, p1, p2, p3);
    return $res;
}
hashes['0x160AA1B32F6139B8'] = function(p0) {
    const $res = natives.doorSystemGetDoorState(p0);
    return $res;
}
hashes['0x4BC2854478F3A749'] = function(p0) {
    const $res = natives.doorSystemGetDoorPendingState(p0);
    return $res;
}
hashes['0x03C27E13B42A0E82'] = function(p0, p1, p2, p3) {
    const $res = natives.doorSystemSetAutomaticRate(p0, p1, p2, p3);
    return $res;
}
hashes['0x9BA001CB45CBF627'] = function(p0, p1, p2, p3) {
    const $res = natives.doorSystemSetAutomaticDistance(p0, p1, p2, p3);
    return $res;
}
hashes['0xB6E6FBA95C7324AC'] = function(p0, p1, p2, p3) {
    const $res = natives.doorSystemSetOpenRatio(p0, p1, p2, p3);
    return $res;
}
hashes['0xE851471AEFC3374F'] = function(p0) {
    const $res = natives.doorSystemGetAutomaticDistance(p0);
    return $res;
}
hashes['0x65499865FCA6E5EC'] = function(p0) {
    const $res = natives.doorSystemGetOpenRatio(p0);
    return $res;
}
hashes['0xC485E07E4F0B7958'] = function(p0, p1, p2, p3) {
    const $res = natives.doorSystemSetSpringRemoved(p0, p1, p2, p3);
    return $res;
}
hashes['0xD9B71952F78A2640'] = function(p0, p1) {
    const $res = natives.doorSystemSetHoldOpen(p0, p1);
    return $res;
}
hashes['0xA85A21582451E951'] = function(p0, p1) {
    const $res = natives.doorSystemSetDoorOpenForRaces(p0, p1);
    return $res;
}
hashes['0xC153C43EA202C8C1'] = function(p0) {
    const $res = natives.isDoorRegisteredWithSystem(p0);
    return $res;
}
hashes['0xC531EE8A1145A149'] = function(p0) {
    const $res = natives.isDoorClosed(p0);
    return $res;
}
hashes['0xC7F29CA00F46350E'] = function(p0) {
    const $res = natives.openAllBarriersForRace(p0);
    return $res;
}
hashes['0x701FDA1E82076BA4'] = function() {
    const $res = natives.closeAllBarriersForRace();
    return $res;
}
hashes['0xDF97CDD4FC08FD34'] = function(p0) {
    const $res = natives.doorSystemGetIsPhysicsLoaded(p0);
    return $res;
}
hashes['0x589F80B325CC82C5'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p4)) throw new Error('Argument outDoorHash should be an array');
    const $res = natives.doorSystemFindExistingDoor(p0, p1, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p4[0] = $res[1];
    return $res[0];
}
hashes['0x90E47239EA1980B8'] = function(p0, p1, p2) {
    const $res = natives.isGarageEmpty(p0, p1, p2);
    return $res;
}
hashes['0x024A60DEB0EA69F0'] = function(p0, p1, p2, p3) {
    const $res = natives.isPlayerEntirelyInsideGarage(p0, p1, p2, p3);
    return $res;
}
hashes['0x1761DC5D8471CBAA'] = function(p0, p1, p2) {
    const $res = natives.isPlayerPartiallyInsideGarage(p0, p1, p2);
    return $res;
}
hashes['0x85B6C850546FDDE2'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.areEntitiesEntirelyInsideGarage(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x673ED815D6E323B7'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isAnyEntityEntirelyInsideGarage(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x372EF6699146A1E4'] = function(p0, p1, p2, p3) {
    const $res = natives.isObjectEntirelyInsideGarage(p0, p1, p2, p3);
    return $res;
}
hashes['0xF0EED5A6BC7B237A'] = function(p0, p1, p2) {
    const $res = natives.isObjectPartiallyInsideGarage(p0, p1, p2);
    return $res;
}
hashes['0xDA05194260CDCDF9'] = function(p0, p1) {
    const $res = natives.clearGarage(p0, p1);
    return $res;
}
hashes['0x190428512B240692'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.clearObjectsInsideGarage(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x659F9D71F52843F8'] = function(p0, p1) {
    const $res = natives.disableTidyingUpInGarage(p0, p1);
    return $res;
}
hashes['0xF2E1A7133DD356A6'] = function(p0, p1) {
    const $res = natives.enableSavingInGarage(p0, p1);
    return $res;
}
hashes['0x66A49D021870FE88'] = function() {
    const $res = natives.closeSafehouseGarages();
    return $res;
}
hashes['0xBFA48E2FF417213F'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.doesObjectOfTypeExistAtCoords(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x2A70BAE8883E4C81'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.isPointInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x4D89D607CB3DD1D2'] = function(p0, p1) {
    const $res = natives.setObjectAllowLowLodBuoyancy(p0, p1);
    return $res;
}
hashes['0xF6DF6E90DE7DF90F'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.setObjectPhysicsParams(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0xB6FBFD079B8D0596'] = function(p0, p1) {
    const $res = natives.getObjectFragmentDamageHealth(p0, p1);
    return $res;
}
hashes['0x406137F8EF90EAF5'] = function(p0, p1) {
    const $res = natives.setActivateObjectPhysicsAsSoonAsItIsUnfrozen(p0, p1);
    return $res;
}
hashes['0x397DC58FF00298D1'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isAnyObjectNearPoint(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x8C90FE4B381BA60A'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isObjectNearPoint(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x4A39DB43E47CF3AA'] = function(p0) {
    const $res = natives.removeObjectHighDetailModel(p0);
    return $res;
}
hashes['0xE7E4C198B0185900'] = function(p0, p1, p2) {
    const $res = natives.breakObjectFragmentChild(p0, p1, p2);
    return $res;
}
hashes['0xE05F6AEEFEB0BB02'] = function(p0, p1, p2) {
    const $res = natives.damageObjectFragmentChild(p0, p1, p2);
    return $res;
}
hashes['0xF9C1681347C8BD15'] = function(p0) {
    const $res = natives.fixObjectFragment(p0);
    return $res;
}
hashes['0xB252BC036B525623'] = function(p0) {
    const $res = natives.trackObjectVisibility(p0);
    return $res;
}
hashes['0x8B32ACE6326A7546'] = function(p0) {
    const $res = natives.isObjectVisible(p0);
    return $res;
}
hashes['0xC6033D32241F6FB5'] = function(p0, p1) {
    const $res = natives.setObjectIsSpecialGolfball(p0, p1);
    return $res;
}
hashes['0xEB6F1A9B5510A5D2'] = function(p0, p1) {
    const $res = natives.setObjectTakesDamageFromCollidingWithBuildings(p0, p1);
    return $res;
}
hashes['0xABDABF4E1EDECBFA'] = function(p0) {
    const $res = natives.allowDamageEventsForNonNetworkedObjects(p0);
    return $res;
}
hashes['0xBCE595371A5FBAAF'] = function(p0, p1) {
    const $res = natives.setCutscenesWeaponFlashlightOnThisFrame(p0, p1);
    return $res;
}
hashes['0xB48FCED898292E52'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.getRayfireMapObject(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x5C29F698D404C5E1'] = function(p0, p1) {
    const $res = natives.setStateOfRayfireMapObject(p0, p1);
    return $res;
}
hashes['0x899BA936634A322E'] = function(p0) {
    const $res = natives.getStateOfRayfireMapObject(p0);
    return $res;
}
hashes['0x52AF537A0C5B8AAD'] = function(p0) {
    const $res = natives.doesRayfireMapObjectExist(p0);
    return $res;
}
hashes['0x260EE4FDBDF4DB01'] = function(p0) {
    const $res = natives.getRayfireMapObjectAnimPhase(p0);
    return $res;
}
hashes['0xFBA08C503DD5FA58'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.createPickup(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x891804727E0A98B7'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.createPickupRotate(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x394CD08E31313C28'] = function() {
    const $res = natives.forcePickupRotateFaceUp();
    return $res;
}
hashes['0x826D1EE4D1CAFC78'] = function(p0, p1) {
    const $res = natives.setCustomPickupWeaponHash(p0, p1);
    return $res;
}
hashes['0x673966A0C0FD7171'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.createAmbientPickup(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x9C93764223E29C50'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.createNonNetworkedAmbientPickup(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x1E3F1B1B891A2AAA'] = function(p0, p1) {
    const $res = natives.blockPlayersForAmbientPickup(p0, p1);
    return $res;
}
hashes['0x2EAF1FDB2FB55698'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.createPortablePickup(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x125494B98A21AAF7'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.createNonNetworkedPortablePickup(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x8DC39368BDD57755'] = function(p0, p1) {
    const $res = natives.attachPortablePickupToPed(p0, p1);
    return $res;
}
hashes['0xCF463D1E9A0AECB1'] = function(p0) {
    const $res = natives.detachPortablePickupFromPed(p0);
    return $res;
}
hashes['0x5CE2E45A5CE2E45A'] = function(p0) {
    const $res = natives.forcePortablePickupLastAccessiblePositionSetting(p0);
    return $res;
}
hashes['0x867458251D47CCB2'] = function(p0, p1) {
    const $res = natives.hidePortablePickupWhenDetached(p0, p1);
    return $res;
}
hashes['0x0BF3B3BD47D79C08'] = function(p0, p1) {
    const $res = natives.setMaxNumPortablePickupsCarriedByPlayer(p0, p1);
    return $res;
}
hashes['0x78857FC65CADB909'] = function(p0) {
    const $res = natives.setLocalPlayerCanCollectPortablePickups(p0);
    return $res;
}
hashes['0x6E16BC2503FF1FF0'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.getSafePickupCoords(p0, p1, p2, p3, p4);
    return new mp.Vector3($res);
}
hashes['0xD4A7A435B3710D05'] = function(p0, p1, p2, p3) {
    const $res = natives.addExtendedPickupProbeArea(p0, p1, p2, p3);
    return $res;
}
hashes['0xB7C6D80FB371659A'] = function() {
    const $res = natives.clearExtendedPickupProbeAreas();
    return $res;
}
hashes['0x225B8B35C88029B3'] = function(p0) {
    const $res = natives.getPickupCoords(p0);
    return new mp.Vector3($res);
}
hashes['0x8DCA505A5C196F05'] = function(p0, p1) {
    const $res = natives.suppressPickupSoundForPickup(p0, p1);
    return $res;
}
hashes['0x27F9D613092159CF'] = function(p0) {
    const $res = natives.removeAllPickupsOfType(p0);
    return $res;
}
hashes['0x80EC48E6679313F9'] = function(p0) {
    const $res = natives.hasPickupBeenCollected(p0);
    return $res;
}
hashes['0x3288D8ACAECD2AB2'] = function(p0) {
    const $res = natives.removePickup(p0);
    return $res;
}
hashes['0x0589B5E791CE9B2B'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.createMoneyPickups(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xAFC1CA75AD4074D1'] = function(p0) {
    const $res = natives.doesPickupExist(p0);
    return $res;
}
hashes['0xD9EFB6DBF7DAAEA3'] = function(p0) {
    const $res = natives.doesPickupObjectExist(p0);
    return $res;
}
hashes['0x5099BC55630B25AE'] = function(p0) {
    const $res = natives.getPickupObject(p0);
    return $res;
}
hashes['0xFC481C641EBBD27D'] = function(p0) {
    const $res = natives.isObjectAPickup(p0);
    return $res;
}
hashes['0x0378C08504160D0D'] = function(p0) {
    const $res = natives.isObjectAPortablePickup(p0);
    return $res;
}
hashes['0xF9C36251F6E48E33'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.doesPickupOfTypeExistInArea(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x78015C9B4B3ECC9D'] = function(p0, p1) {
    const $res = natives.setPickupRegenerationTime(p0, p1);
    return $res;
}
hashes['0x758A5C1B3B1E1990'] = function(p0) {
    const $res = natives.forcePickupRegenerate(p0);
    return $res;
}
hashes['0x616093EC6B139DD9'] = function(p0, p1, p2) {
    const $res = natives.setPlayerPermittedToCollectPickupsOfType(p0, p1, p2);
    return $res;
}
hashes['0x88EAEC617CD26926'] = function(p0, p1) {
    const $res = natives.setLocalPlayerPermittedToCollectPickupsWithModel(p0, p1);
    return $res;
}
hashes['0xFDC07C58E8AAB715'] = function(p0) {
    const $res = natives.allowAllPlayersToCollectPickupsOfType(p0);
    return $res;
}
hashes['0x53E0DF1A2A3CF0CA'] = function(p0, p1, p2) {
    const $res = natives.setTeamPickupObject(p0, p1, p2);
    return $res;
}
hashes['0x92AEFB5F6E294023'] = function(p0, p1, p2) {
    const $res = natives.preventCollectionOfPortablePickup(p0, p1, p2);
    return $res;
}
hashes['0x27F248C3FEBFAAD3'] = function(p0, p1) {
    const $res = natives.setPickupObjectGlowWhenUncollectable(p0, p1);
    return $res;
}
hashes['0x0596843B34B95CE5'] = function(p0, p1) {
    const $res = natives.setPickupGlowOffset(p0, p1);
    return $res;
}
hashes['0xA08FE5E49BDC39DD'] = function(p0, p1, p2) {
    const $res = natives.setPickupObjectGlowOffset(p0, p1, p2);
    return $res;
}
hashes['0x62454A641B41F3C5'] = function(p0) {
    const $res = natives.setObjectGlowInSameTeam(p0);
    return $res;
}
hashes['0x39A5FB7EAF150840'] = function(p0, p1) {
    const $res = natives.setPickupObjectArrowMarker(p0, p1);
    return $res;
}
hashes['0x834344A414C7C85D'] = function(p0, p1) {
    const $res = natives.allowPickupArrowMarkerWhenUncollectable(p0, p1);
    return $res;
}
hashes['0xDB41D07A45A6D4B7'] = function(p0) {
    const $res = natives.getDefaultAmmoForWeaponPickup(p0);
    return $res;
}
hashes['0x318516E02DE3ECE2'] = function(p0) {
    const $res = natives.setPickupGenerationRangeMultiplier(p0);
    return $res;
}
hashes['0xB3ECA65C7317F174'] = function() {
    const $res = natives.getPickupGenerationRangeMultiplier();
    return $res;
}
hashes['0x31F924B53EADDF65'] = function(p0) {
    const $res = natives.setOnlyAllowAmmoCollectionWhenLow(p0);
    return $res;
}
hashes['0x1C1B69FAE509BA97'] = function(p0, p1) {
    const $res = natives.setPickupUncollectable(p0, p1);
    return $res;
}
hashes['0x858EC9FD25DE04AA'] = function(p0, p1) {
    const $res = natives.setPickupTransparentWhenUncollectable(p0, p1);
    return $res;
}
hashes['0x3ED2B83AB2E82799'] = function(p0, p1) {
    const $res = natives.setPickupHiddenWhenUncollectable(p0, p1);
    return $res;
}
hashes['0x8881C98A31117998'] = function(p0, p1) {
    const $res = natives.setPickupObjectTransparentWhenUncollectable(p0, p1);
    return $res;
}
hashes['0x8CFF648FBD7330F1'] = function(p0) {
    const $res = natives.setPickupObjectAlphaWhenTransparent(p0);
    return $res;
}
hashes['0x46F3ADD1E2D5BAF2'] = function(p0, p1) {
    const $res = natives.setPortablePickupPersist(p0, p1);
    return $res;
}
hashes['0x641F272B52E2F0F8'] = function(p0, p1) {
    const $res = natives.allowPortablePickupToMigrateToNonParticipants(p0, p1);
    return $res;
}
hashes['0x4C134B4DF76025D0'] = function(p0, p1) {
    const $res = natives.forceActivatePhysicsOnUnfixedPickup(p0, p1);
    return $res;
}
hashes['0xAA059C615DE9DD03'] = function(p0, p1) {
    const $res = natives.allowPickupByNoneParticipant(p0, p1);
    return $res;
}
hashes['0xF92099527DB8E2A7'] = function(p0, p1) {
    const $res = natives.suppressPickupRewardType(p0, p1);
    return $res;
}
hashes['0xA2C1F5E92AFE49ED'] = function() {
    const $res = natives.clearAllPickupRewardTypeSuppression();
    return $res;
}
hashes['0x762DB2D380B48D04'] = function(p0) {
    const $res = natives.clearPickupRewardTypeSuppression(p0);
    return $res;
}
hashes['0x3430676B11CDF21D'] = function(p0, p1, p2, p3) {
    const $res = natives.renderFakePickupGlow(p0, p1, p2, p3);
    return $res;
}
hashes['0x7813E8B8C4AE4799'] = function(p0) {
    const $res = natives.setPickupObjectCollectableInVehicle(p0);
    return $res;
}
hashes['0xBFFE53AE7E67FCDC'] = function(p0, p1) {
    const $res = natives.setPickupTrackDamageEvents(p0, p1);
    return $res;
}
hashes['0xD05A3241B9A86F19'] = function(p0, p1) {
    const $res = natives.setEntityFlagSuppressShadow(p0, p1);
    return $res;
}
hashes['0xB2D0BDE54F0E8E5A'] = function(p0, p1) {
    const $res = natives.setEntityFlagRenderSmallShadow(p0, p1);
    return $res;
}
hashes['0x08F96CA6C551AD51'] = function(p0) {
    const $res = natives.getWeaponTypeFromPickupType(p0);
    return $res;
}
hashes['0xD6429A016084F1A5'] = function(p0) {
    const $res = natives.getPickupTypeFromWeaponHash(p0);
    return $res;
}
hashes['0x11D1E53A726891FE'] = function(p0) {
    const $res = natives.isPickupWeaponObjectValid(p0);
    return $res;
}
hashes['0xE84EB93729C5F36A'] = function(p0) {
    const $res = natives.getObjectTintIndex(p0);
    return $res;
}
hashes['0x971DA0055324D033'] = function(p0, p1) {
    const $res = natives.setObjectTintIndex(p0, p1);
    return $res;
}
hashes['0xF12E33034D887F66'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setTintIndexClosestBuildingOfType(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x31574B1B41268673'] = function(p0, p1) {
    const $res = natives.setPropTintIndex(p0, p1);
    return $res;
}
hashes['0x5F048334B4A4E774'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPropLightColor(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xADF084FB8F075D06'] = function(p0) {
    const $res = natives.isPropLightOverriden(p0);
    return $res;
}
hashes['0x3B2FD68DB5F8331C'] = function(p0, p1) {
    const $res = natives.setObjectIsVisibleInMirrors(p0, p1);
    return $res;
}
hashes['0x96EE0EBA0163DF80'] = function(p0, p1) {
    const $res = natives.setObjectSpeedBoostAmount(p0, p1);
    return $res;
}
hashes['0xDF6CA0330F2E737B'] = function(p0, p1) {
    const $res = natives.setObjectSpeedBoostDuration(p0, p1);
    return $res;
}
hashes['0x5EAAD83F8CFB4575'] = function(p0) {
    const $res = natives.convertOldPickupTypeToNew(p0);
    return $res;
}
hashes['0xF538081986E49E9D'] = function(p0, p1, p2, p3) {
    const $res = natives.setForceObjectThisFrame(p0, p1, p2, p3);
    return $res;
}
hashes['0xADBE4809F19F927A'] = function(p0) {
    const $res = natives.onlyCleanUpObjectWhenOutOfRange(p0);
    return $res;
}
hashes['0x8CAAB2BD3EA58BD4'] = function(p0) {
    const $res = natives.setDisableCollisionsBetweenCarsAndCarParachute(p0);
    return $res;
}
hashes['0x63ECF581BC70E363'] = function(p0, p1) {
    const $res = natives.setProjectilesShouldExplodeOnContact(p0, p1);
    return $res;
}
hashes['0x911024442F4898F0'] = function(p0, p1, p2) {
    const $res = natives.setDriveArticulatedJoint(p0, p1, p2);
    return $res;
}
hashes['0xB20834A7DD3D8896'] = function(p0, p1, p2, p3) {
    const $res = natives.setDriveArticulatedJointWithInflictor(p0, p1, p2, p3);
    return $res;
}
hashes['0x734E1714D077DA9A'] = function(p0, p1) {
    const $res = natives.setObjectIsAPressurePlate(p0, p1);
    return $res;
}
hashes['0x1A6CBB06E2D0D79D'] = function(p0, p1) {
    const $res = natives.setWeaponImpactsApplyGreaterForce(p0, p1);
    return $res;
}
hashes['0x43C677F1E1158005'] = function(p0, p1) {
    const $res = natives.getIsArticulatedJointAtMinAngle(p0, p1);
    return $res;
}
hashes['0x3BD770D281982DB5'] = function(p0, p1) {
    const $res = natives.getIsArticulatedJointAtMaxAngle(p0, p1);
    return $res;
}
hashes['0x1C57C94A6446492A'] = function(p0, p1) {
    const $res = natives.setIsObjectArticulated(p0, p1);
    return $res;
}
hashes['0xB5B7742424BD4445'] = function(p0, p1) {
    const $res = natives.setIsObjectBall(p0, p1);
    return $res;
}
hashes['0x1CEA6BFDF248E5D9'] = function(p0, p1) {
    const $res = natives.isControlEnabled(p0, p1);
    return $res;
}
hashes['0xF3A21BCD95725A4A'] = function(p0, p1) {
    const $res = natives.isControlPressed(p0, p1);
    return $res;
}
hashes['0x648EE3E7F38877DD'] = function(p0, p1) {
    const $res = natives.isControlReleased(p0, p1);
    return $res;
}
hashes['0x580417101DDB492F'] = function(p0, p1) {
    const $res = natives.isControlJustPressed(p0, p1);
    return $res;
}
hashes['0x50F940259D3841E6'] = function(p0, p1) {
    const $res = natives.isControlJustReleased(p0, p1);
    return $res;
}
hashes['0xD95E79E8686D2C27'] = function(p0, p1) {
    const $res = natives.getControlValue(p0, p1);
    return $res;
}
hashes['0xEC3C9B8D5327B563'] = function(p0, p1) {
    const $res = natives.getControlNormal(p0, p1);
    return $res;
}
hashes['0x5B73C77D9EB66E24'] = function(p0) {
    const $res = natives.setUseAdjustedMouseCoords(p0);
    return $res;
}
hashes['0x5B84D09CEC5209C5'] = function(p0, p1) {
    const $res = natives.getControlUnboundNormal(p0, p1);
    return $res;
}
hashes['0xE8A25867FBA3B05E'] = function(p0, p1, p2) {
    const $res = natives.setControlValueNextFrame(p0, p1, p2);
    return $res;
}
hashes['0xE2587F8CBBD87B1D'] = function(p0, p1) {
    const $res = natives.isDisabledControlPressed(p0, p1);
    return $res;
}
hashes['0xFB6C4072E9A32E92'] = function(p0, p1) {
    const $res = natives.isDisabledControlReleased(p0, p1);
    return $res;
}
hashes['0x91AEF906BCA88877'] = function(p0, p1) {
    const $res = natives.isDisabledControlJustPressed(p0, p1);
    return $res;
}
hashes['0x305C8DCD79DA8B0F'] = function(p0, p1) {
    const $res = natives.isDisabledControlJustReleased(p0, p1);
    return $res;
}
hashes['0x11E65974A982637C'] = function(p0, p1) {
    const $res = natives.getDisabledControlNormal(p0, p1);
    return $res;
}
hashes['0x4F8A26A890FD62FB'] = function(p0, p1) {
    const $res = natives.getDisabledControlUnboundNormal(p0, p1);
    return $res;
}
hashes['0xD7D22F5592AED8BA'] = function(p0) {
    const $res = natives.getControlHowLongAgo(p0);
    return $res;
}
hashes['0xA571D46727E2B718'] = function(p0) {
    const $res = natives.isUsingKeyboardAndMouse(p0);
    return $res;
}
hashes['0x13337B38DB572509'] = function(p0) {
    const $res = natives.isUsingCursor(p0);
    return $res;
}
hashes['0xFC695459D4D0E219'] = function(p0, p1) {
    const $res = natives.setCursorPosition(p0, p1);
    return $res;
}
hashes['0x23F09EADC01449D6'] = function(p0) {
    const $res = natives.isUsingRemotePlay(p0);
    return $res;
}
hashes['0x6CD79468A1E595C6'] = function(p0) {
    const $res = natives.haveControlsChanged(p0);
    return $res;
}
hashes['0x0499D7B09FC9B407'] = function(p0, p1, p2) {
    const $res = natives.getControlInstructionalButtonsString(p0, p1, p2);
    return $res;
}
hashes['0x80C2FD58D720C801'] = function(p0, p1, p2) {
    const $res = natives.getControlGroupInstructionalButtonsString(p0, p1, p2);
    return $res;
}
hashes['0x8290252FFF36ACB5'] = function(p0, p1, p2, p3) {
    const $res = natives.setControlLightEffectColor(p0, p1, p2, p3);
    return $res;
}
hashes['0xCB0360EFEFB2580D'] = function(p0) {
    const $res = natives.clearControlLightEffect(p0);
    return $res;
}
hashes['0x48B3886C1358D0D5'] = function(p0, p1, p2) {
    const $res = natives.setControlShake(p0, p1, p2);
    return $res;
}
hashes['0x14D29BB12D47F68C'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setControlTriggerShake(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x38C16A305E8CDC8D'] = function(p0) {
    const $res = natives.stopControlShake(p0);
    return $res;
}
hashes['0xF239400E16C23E08'] = function(p0, p1) {
    const $res = natives.setControlShakeSuppressedId(p0, p1);
    return $res;
}
hashes['0xA0CEFCEA390AAB9B'] = function(p0) {
    const $res = natives.clearControlShakeSuppressedId(p0);
    return $res;
}
hashes['0x77B612531280010D'] = function() {
    const $res = natives.isLookInverted();
    return $res;
}
hashes['0xE1615EC03B3BB4FD'] = function() {
    const $res = natives.isMouseLookInverted();
    return $res;
}
hashes['0xBB41AFBBBC0A0287'] = function() {
    const $res = natives.getLocalPlayerAimState();
    return $res;
}
hashes['0x59B9A7AF4C95133C'] = function() {
    const $res = natives.getLocalPlayerGamepadAimState();
    return $res;
}
hashes['0x25AAA32BDC98F2A3'] = function() {
    const $res = natives.getIsUsingAlternateHandbrake();
    return $res;
}
hashes['0x0F70731BACCFBB96'] = function() {
    const $res = natives.getIsUsingAlternateDriveby();
    return $res;
}
hashes['0xFC859E2374407556'] = function() {
    const $res = natives.getAllowMovementWhileZoomed();
    return $res;
}
hashes['0x798FDEB5B1575088'] = function(p0) {
    const $res = natives.setPlayerpadShakesWhenControllerDisabled(p0);
    return $res;
}
hashes['0xEDE476E5EE29EDB1'] = function(p0, p1) {
    const $res = natives.setInputExclusive(p0, p1);
    return $res;
}
hashes['0xFE99B66D079CF6BC'] = function(p0, p1, p2) {
    const $res = natives.disableControlAction(p0, p1, p2);
    return $res;
}
hashes['0x351220255D64C155'] = function(p0, p1, p2) {
    const $res = natives.enableControlAction(p0, p1, p2);
    return $res;
}
hashes['0x5F4B6931816E599B'] = function(p0) {
    const $res = natives.disableAllControlActions(p0);
    return $res;
}
hashes['0xA5FFE9B05F199DE7'] = function(p0) {
    const $res = natives.enableAllControlActions(p0);
    return $res;
}
hashes['0x3D42B92563939375'] = function(p0) {
    const $res = natives.initPcScriptedControls(p0);
    return $res;
}
hashes['0x4683149ED1DDE7A1'] = function(p0) {
    const $res = natives.switchPcScriptedControls(p0);
    return $res;
}
hashes['0x643ED62D5EA3BEBD'] = function() {
    const $res = natives.shutdownPcScriptedControls();
    return $res;
}
hashes['0x7F4724035FDCA1DD'] = function(p0) {
    const $res = natives.disableInputGroup(p0);
    return $res;
}
hashes['0xBF1A602B5BA52FEE'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setRoadsInArea(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x1A5AA1208AF5DB59'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.setRoadsInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x34F060F4BF92E018'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setPedPathsInArea(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xB61C8E878A4199CA'] = function(p0, p1, p2, p3, p4, p5) {
    if (typeof p4 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    const $res = natives.getSafeCoordForPed(p0, p1, p2, p3, Array.isArray(p4[0]) ? new alt.Vector3(p4[0][0], p4[0][1], p4[0][2]) : new alt.Vector3(p4[0].x, p4[0].y, p4[0].z), p5);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p4[0])) { p4[0][0] = $res[1].x; p4[0][1] = $res[1].y; p4[0][2] = $res[1].z }
    else { p4[0].x = $res[1].x; p4[0].y = $res[1].y; p4[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x240A18690AE96513'] = function(p0, p1, p2, p3, p4, p5, p6) {
    if (typeof p3 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    const $res = natives.getClosestVehicleNode(p0, p1, p2, Array.isArray(p3[0]) ? new alt.Vector3(p3[0][0], p3[0][1], p3[0][2]) : new alt.Vector3(p3[0].x, p3[0].y, p3[0].z), p4, p5, p6);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p3[0])) { p3[0][0] = $res[1].x; p3[0][1] = $res[1].y; p3[0][2] = $res[1].z }
    else { p3[0].x = $res[1].x; p3[0].y = $res[1].y; p3[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x2EABE3B06F58C1BE'] = function(p0, p1, p2, p3, p4, p5) {
    if (typeof p3 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    const $res = natives.getClosestMajorVehicleNode(p0, p1, p2, Array.isArray(p3[0]) ? new alt.Vector3(p3[0][0], p3[0][1], p3[0][2]) : new alt.Vector3(p3[0].x, p3[0].y, p3[0].z), p4, p5);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p3[0])) { p3[0][0] = $res[1].x; p3[0][1] = $res[1].y; p3[0][2] = $res[1].z }
    else { p3[0].x = $res[1].x; p3[0].y = $res[1].y; p3[0].z = $res[1].z; }
    return $res[0];
}
hashes['0xFF071FB798B803B0'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    if (typeof p3 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    if (!Array.isArray(p4)) throw new Error('Argument outHeading should be an array');
    const $res = natives.getClosestVehicleNodeWithHeading(p0, p1, p2, Array.isArray(p3[0]) ? new alt.Vector3(p3[0][0], p3[0][1], p3[0][2]) : new alt.Vector3(p3[0].x, p3[0].y, p3[0].z), p5, p6, p7);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p3[0])) { p3[0][0] = $res[1].x; p3[0][1] = $res[1].y; p3[0][2] = $res[1].z }
    else { p3[0].x = $res[1].x; p3[0].y = $res[1].y; p3[0].z = $res[1].z; }
    p4[0] = $res[2];
    return $res[0];
}
hashes['0xE50E52416CCF948B'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    if (typeof p4 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    const $res = natives.getNthClosestVehicleNode(p0, p1, p2, p3, Array.isArray(p4[0]) ? new alt.Vector3(p4[0][0], p4[0][1], p4[0][2]) : new alt.Vector3(p4[0].x, p4[0].y, p4[0].z), p5, p6, p7);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p4[0])) { p4[0][0] = $res[1].x; p4[0][1] = $res[1].y; p4[0][2] = $res[1].z }
    else { p4[0].x = $res[1].x; p4[0].y = $res[1].y; p4[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x22D7275A79FE8215'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.getNthClosestVehicleNodeId(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x80CA6A8B6C094CC4'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    if (typeof p4 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    if (!Array.isArray(p5)) throw new Error('Argument outHeading should be an array');
    if (!Array.isArray(p6)) throw new Error('Argument outNumLanes should be an array');
    const $res = natives.getNthClosestVehicleNodeWithHeading(p0, p1, p2, p3, Array.isArray(p4[0]) ? new alt.Vector3(p4[0][0], p4[0][1], p4[0][2]) : new alt.Vector3(p4[0].x, p4[0].y, p4[0].z), p7, p8, p9);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p4[0])) { p4[0][0] = $res[1].x; p4[0][1] = $res[1].y; p4[0][2] = $res[1].z }
    else { p4[0].x = $res[1].x; p4[0].y = $res[1].y; p4[0].z = $res[1].z; }
    p5[0] = $res[2];
    p6[0] = $res[3];
    return $res[0];
}
hashes['0x6448050E9C2A7207'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    if (typeof p4 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    if (!Array.isArray(p5)) throw new Error('Argument outHeading should be an array');
    const $res = natives.getNthClosestVehicleNodeIdWithHeading(p0, p1, p2, p3, Array.isArray(p4[0]) ? new alt.Vector3(p4[0][0], p4[0][1], p4[0][2]) : new alt.Vector3(p4[0].x, p4[0].y, p4[0].z), p6, p7, p8);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p4[0])) { p4[0][0] = $res[1].x; p4[0][1] = $res[1].y; p4[0][2] = $res[1].z }
    else { p4[0].x = $res[1].x; p4[0].y = $res[1].y; p4[0].z = $res[1].z; }
    p5[0] = $res[2];
    return $res[0];
}
hashes['0x45905BE8654AE067'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    if (typeof p7 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    if (!Array.isArray(p8)) throw new Error('Argument outHeading should be an array');
    const $res = natives.getNthClosestVehicleNodeFavourDirection(p0, p1, p2, p3, p4, p5, p6, Array.isArray(p7[0]) ? new alt.Vector3(p7[0][0], p7[0][1], p7[0][2]) : new alt.Vector3(p7[0].x, p7[0].y, p7[0].z), p9, p10, p11);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p7[0])) { p7[0][0] = $res[1].x; p7[0][1] = $res[1].y; p7[0][2] = $res[1].z }
    else { p7[0].x = $res[1].x; p7[0].y = $res[1].y; p7[0].z = $res[1].z; }
    p8[0] = $res[2];
    return $res[0];
}
hashes['0x0568566ACBB5DEDC'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p3)) throw new Error('Argument density should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument flags should be an array');
    const $res = natives.getVehicleNodeProperties(p0, p1, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p3[0] = $res[1];
    p4[0] = $res[2];
    return $res[0];
}
hashes['0x1EAF30FCFBF5AF74'] = function(p0) {
    const $res = natives.isVehicleNodeIdValid(p0);
    return $res;
}
hashes['0x703123E5E7D429C2'] = function(p0, p1) {
    if (typeof p1 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    const $res = natives.getVehicleNodePosition(p0, Array.isArray(p1[0]) ? new alt.Vector3(p1[0][0], p1[0][1], p1[0][2]) : new alt.Vector3(p1[0].x, p1[0].y, p1[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p1[0])) { p1[0][0] = $res[1].x; p1[0][1] = $res[1].y; p1[0][2] = $res[1].z }
    else { p1[0].x = $res[1].x; p1[0].y = $res[1].y; p1[0].z = $res[1].z; }
    return $res[0];
}
hashes['0xA2AE5C478B96E3B6'] = function(p0) {
    const $res = natives.getVehicleNodeIsGpsAllowed(p0);
    return $res;
}
hashes['0x4F5070AA58F69279'] = function(p0) {
    const $res = natives.getVehicleNodeIsSwitchedOff(p0);
    return $res;
}
hashes['0x132F52BBA570FE92'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    if (typeof p5 != 'object') throw new Error('Argument p5 should be a Vector3 or an array');
    if (typeof p6 != 'object') throw new Error('Argument p6 should be a Vector3 or an array');
    if (!Array.isArray(p9)) throw new Error('Argument p9 should be an array');
    const $res = natives.getClosestRoad(p0, p1, p2, p3, p4, Array.isArray(p5[0]) ? new alt.Vector3(p5[0][0], p5[0][1], p5[0][2]) : new alt.Vector3(p5[0].x, p5[0].y, p5[0].z), Array.isArray(p6[0]) ? new alt.Vector3(p6[0][0], p6[0][1], p6[0][2]) : new alt.Vector3(p6[0].x, p6[0].y, p6[0].z), p7, p8, p10);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p5[0])) { p5[0][0] = $res[1].x; p5[0][1] = $res[1].y; p5[0][2] = $res[1].z }
    else { p5[0].x = $res[1].x; p5[0].y = $res[1].y; p5[0].z = $res[1].z; }
    if (Array.isArray(p6[0])) { p6[0][0] = $res[2].x; p6[0][1] = $res[2].y; p6[0][2] = $res[2].z }
    else { p6[0].x = $res[2].x; p6[0].y = $res[2].y; p6[0].z = $res[2].z; }
    p9[0] = $res[3];
    return $res[0];
}
hashes['0xC2AB6BFE34E92F8B'] = function(p0) {
    const $res = natives.loadAllPathNodes(p0);
    return $res;
}
hashes['0x228E5C6AD4D74BFD'] = function(p0) {
    const $res = natives.setAllowStreamPrologueNodes(p0);
    return $res;
}
hashes['0xF74B1FFA4A15FBEA'] = function(p0) {
    const $res = natives.setAllowStreamHeistIslandNodes(p0);
    return $res;
}
hashes['0xF7B79A50B905A30D'] = function(p0, p1, p2, p3) {
    const $res = natives.areNodesLoadedForArea(p0, p1, p2, p3);
    return $res;
}
hashes['0x07FB139B592FA687'] = function(p0, p1, p2, p3) {
    const $res = natives.requestPathNodesInAreaThisFrame(p0, p1, p2, p3);
    return $res;
}
hashes['0x1EE7063B80FFC77C'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setRoadsBackToOriginal(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x0027501B9F3B407E'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setRoadsBackToOriginalInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x0B919E1FB47CC4E0'] = function(p0) {
    const $res = natives.setAmbientPedRangeMultiplierThisFrame(p0);
    return $res;
}
hashes['0xAA76052DDA9BFC3E'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.adjustAmbientPedSpawnDensitiesThisFrame(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xE04B48F2CC926253'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setPedPathsBackToOriginal(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x93E0DB8440B73A7D'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    if (typeof p7 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    if (!Array.isArray(p8)) throw new Error('Argument nodeId should be an array');
    const $res = natives.getRandomVehicleNode(p0, p1, p2, p3, p4, p5, p6, Array.isArray(p7[0]) ? new alt.Vector3(p7[0][0], p7[0][1], p7[0][2]) : new alt.Vector3(p7[0].x, p7[0].y, p7[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p7[0])) { p7[0][0] = $res[1].x; p7[0][1] = $res[1].y; p7[0][2] = $res[1].z }
    else { p7[0].x = $res[1].x; p7[0].y = $res[1].y; p7[0].z = $res[1].z; }
    p8[0] = $res[2];
    return $res[0];
}
hashes['0x2EB41072B4C1E4C0'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p3)) throw new Error('Argument streetName should be an array');
    if (!Array.isArray(p4)) throw new Error('Argument crossingRoad should be an array');
    const $res = natives.getStreetNameAtCoord(p0, p1, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p3[0] = $res[1];
    p4[0] = $res[2];
    return $res[0];
}
hashes['0xF90125F1F79ECDF8'] = function(p0, p1, p2, p3, p4, p5, p6) {
    if (!Array.isArray(p4)) throw new Error('Argument direction should be an array');
    if (!Array.isArray(p5)) throw new Error('Argument p5 should be an array');
    if (!Array.isArray(p6)) throw new Error('Argument distToNxJunction should be an array');
    const $res = natives.generateDirectionsToCoord(p0, p1, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p4[0] = $res[1];
    p5[0] = $res[2];
    p6[0] = $res[3];
    return $res[0];
}
hashes['0x72751156E7678833'] = function(p0) {
    const $res = natives.setIgnoreNoGpsFlag(p0);
    return $res;
}
hashes['0x1FC289A0C3FF470F'] = function(p0) {
    const $res = natives.setIgnoreNoGpsFlagUntilFirstNormalNode(p0);
    return $res;
}
hashes['0xDC20483CD3DD5201'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setGpsDisabledZone(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xBBB45C3CF5C8AA85'] = function() {
    const $res = natives.getGpsBlipRouteLength();
    return $res;
}
hashes['0xF3162836C28F9DA5'] = function(p0, p1, p2, p3) {
    if (typeof p0 != 'object') throw new Error('Argument result should be a Vector3 or an array');
    const $res = natives.getPosAlongGpsTypeRoute(Array.isArray(p0[0]) ? new alt.Vector3(p0[0][0], p0[0][1], p0[0][2]) : new alt.Vector3(p0[0].x, p0[0].y, p0[0].z), p1, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p0[0])) { p0[0][0] = $res[1].x; p0[0][1] = $res[1].y; p0[0][2] = $res[1].z }
    else { p0[0].x = $res[1].x; p0[0].y = $res[1].y; p0[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x869DAACBBE9FA006'] = function() {
    const $res = natives.getGpsBlipRouteFound();
    return $res;
}
hashes['0xA0F8A7517A273C05'] = function(p0, p1, p2, p3, p4) {
    if (typeof p4 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    const $res = natives.getRoadBoundaryUsingHeading(p0, p1, p2, p3, Array.isArray(p4[0]) ? new alt.Vector3(p4[0][0], p4[0][1], p4[0][2]) : new alt.Vector3(p4[0].x, p4[0].y, p4[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p4[0])) { p4[0][0] = $res[1].x; p4[0][1] = $res[1].y; p4[0][2] = $res[1].z }
    else { p4[0].x = $res[1].x; p4[0].y = $res[1].y; p4[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x16F46FB18C8009E4'] = function(p0, p1, p2, p3, p4) {
    if (typeof p4 != 'object') throw new Error('Argument outPosition should be a Vector3 or an array');
    const $res = natives.getPositionBySideOfRoad(p0, p1, p2, p3, Array.isArray(p4[0]) ? new alt.Vector3(p4[0][0], p4[0][1], p4[0][2]) : new alt.Vector3(p4[0].x, p4[0].y, p4[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p4[0])) { p4[0][0] = $res[1].x; p4[0][1] = $res[1].y; p4[0][2] = $res[1].z }
    else { p4[0].x = $res[1].x; p4[0].y = $res[1].y; p4[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x125BF4ABFC536B09'] = function(p0, p1, p2, p3) {
    const $res = natives.isPointOnRoad(p0, p1, p2, p3);
    return $res;
}
hashes['0xD3A6A0EF48823A8C'] = function() {
    const $res = natives.getNextGpsDisabledZoneIndex();
    return $res;
}
hashes['0xD0BC1C6FB18EE154'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setGpsDisabledZoneAtIndex(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x2801D0012266DF07'] = function(p0) {
    const $res = natives.clearGpsDisabledZoneAtIndex(p0);
    return $res;
}
hashes['0x387EAD7EE42F6685'] = function(p0, p1, p2) {
    const $res = natives.addNavmeshRequiredRegion(p0, p1, p2);
    return $res;
}
hashes['0x916F0A3CDEC3445E'] = function() {
    const $res = natives.removeNavmeshRequiredRegions();
    return $res;
}
hashes['0x705A844002B39DC0'] = function() {
    const $res = natives.isNavmeshRequiredRegionInUse();
    return $res;
}
hashes['0x4C8872D8CDBE1B8B'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.disableNavmeshInArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x8415D95B194A3AEA'] = function() {
    const $res = natives.areAllNavmeshRegionsLoaded();
    return $res;
}
hashes['0xF813C7E63F9062A5'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.isNavmeshLoadedInArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x01708E8DD3FF8C65'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.getNumNavmeshesExistingInArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xFCD5C8E06E502F5A'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.addNavmeshBlockingObject(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x109E99373F290687'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.updateNavmeshBlockingObject(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x46399A7895957C0E'] = function(p0) {
    const $res = natives.removeNavmeshBlockingObject(p0);
    return $res;
}
hashes['0x0EAEB0DB4B132399'] = function(p0) {
    const $res = natives.doesNavmeshBlockingObjectExist(p0);
    return $res;
}
hashes['0x29C24BFBED8AB8FB'] = function(p0, p1) {
    const $res = natives.getApproxHeightForPoint(p0, p1);
    return $res;
}
hashes['0x8ABE8608576D9CE3'] = function(p0, p1, p2, p3) {
    const $res = natives.getApproxHeightForArea(p0, p1, p2, p3);
    return $res;
}
hashes['0x336511A34F2E5185'] = function(p0, p1) {
    const $res = natives.getApproxFloorForPoint(p0, p1);
    return $res;
}
hashes['0x3599D741C9AC6310'] = function(p0, p1, p2, p3) {
    const $res = natives.getApproxFloorForArea(p0, p1, p2, p3);
    return $res;
}
hashes['0xADD95C7005C4A197'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.calculateTravelDistanceBetweenPoints(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xD49F9B0955C367DE'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.createPed(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x9614299DCB53E54B'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument ped should be an array');
    const $res = natives.deletePed();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xEF29A16337FACADB'] = function(p0, p1, p2, p3) {
    const $res = natives.clonePed(p0, p1, p2, p3);
    return $res;
}
hashes['0x668FD40BCBA5DE48'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.clonePedAlt(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xE952D6431689AD9A'] = function(p0, p1) {
    const $res = natives.clonePedToTarget(p0, p1);
    return $res;
}
hashes['0x148B08C2D2ACB884'] = function(p0, p1, p2) {
    const $res = natives.clonePedToTargetAlt(p0, p1, p2);
    return $res;
}
hashes['0xA3EE4A07279BB9DB'] = function(p0, p1, p2) {
    const $res = natives.isPedInVehicle(p0, p1, p2);
    return $res;
}
hashes['0x796D90EFB19AA332'] = function(p0, p1) {
    const $res = natives.isPedInModel(p0, p1);
    return $res;
}
hashes['0x997ABD671D25CA0B'] = function(p0, p1) {
    const $res = natives.isPedInAnyVehicle(p0, p1);
    return $res;
}
hashes['0x16EC4839969F9F5E'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.isCopPedInArea3d(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x84A2DD9AC37C35C1'] = function(p0) {
    const $res = natives.isPedInjured(p0);
    return $res;
}
hashes['0x5983BB449D7FDB12'] = function(p0) {
    const $res = natives.isPedHurt(p0);
    return $res;
}
hashes['0xD839450756ED5A80'] = function(p0) {
    const $res = natives.isPedFatallyInjured(p0);
    return $res;
}
hashes['0x3317DEDB88C95038'] = function(p0, p1) {
    const $res = natives.isPedDeadOrDying(p0, p1);
    return $res;
}
hashes['0xE0A0AEC214B1FABA'] = function(p0) {
    const $res = natives.isConversationPedDead(p0);
    return $res;
}
hashes['0x3998B1276A3300E5'] = function(p0) {
    const $res = natives.isPedAimingFromCover(p0);
    return $res;
}
hashes['0x24B100C68C645951'] = function(p0) {
    const $res = natives.isPedReloading(p0);
    return $res;
}
hashes['0x12534C348C6CB68B'] = function(p0) {
    const $res = natives.isPedAPlayer(p0);
    return $res;
}
hashes['0x7DD959874C1FD534'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.createPedInsideVehicle(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xAA5A7ECE2AA8FE70'] = function(p0, p1) {
    const $res = natives.setPedDesiredHeading(p0, p1);
    return $res;
}
hashes['0xFF287323B0E2C69A'] = function(p0) {
    const $res = natives.forceAllHeadingValuesToAlign(p0);
    return $res;
}
hashes['0xD71649DB0A545AA3'] = function(p0, p1, p2) {
    const $res = natives.isPedFacingPed(p0, p1, p2);
    return $res;
}
hashes['0x4E209B2C1EAD5159'] = function(p0) {
    const $res = natives.isPedInMeleeCombat(p0);
    return $res;
}
hashes['0x530944F6F4B8A214'] = function(p0) {
    const $res = natives.isPedStopped(p0);
    return $res;
}
hashes['0x7E9DFE24AC1E58EF'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.isPedShootingInArea(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xA0D3D71EA1086C55'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.isAnyPedShootingInArea(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x34616828CD07F1A1'] = function(p0) {
    const $res = natives.isPedShooting(p0);
    return $res;
}
hashes['0x7AEFB85C1D49DEB6'] = function(p0, p1) {
    const $res = natives.setPedAccuracy(p0, p1);
    return $res;
}
hashes['0x37F4AD56ECBC0CD6'] = function(p0) {
    const $res = natives.getPedAccuracy(p0);
    return $res;
}
hashes['0x87DDEB611B329A9C'] = function(p0) {
    const $res = natives.setAmbientLawPedAccuracyModifier(p0);
    return $res;
}
hashes['0xC9D55B1A358A5BF7'] = function(p0, p1) {
    const $res = natives.isPedModel(p0, p1);
    return $res;
}
hashes['0x2D05CED3A38D0F3A'] = function(p0, p1) {
    const $res = natives.explodePedHead(p0, p1);
    return $res;
}
hashes['0xAC6D445B994DF95E'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument ped should be an array');
    const $res = natives.removePedElegantly();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x5BA652A0CD14DF2F'] = function(p0, p1) {
    const $res = natives.addArmourToPed(p0, p1);
    return $res;
}
hashes['0xCEA04D83135264CC'] = function(p0, p1) {
    const $res = natives.setPedArmour(p0, p1);
    return $res;
}
hashes['0xF75B0D629E1C063D'] = function(p0, p1, p2) {
    const $res = natives.setPedIntoVehicle(p0, p1, p2);
    return $res;
}
hashes['0x3C028C636A414ED9'] = function(p0, p1) {
    const $res = natives.setPedAllowVehiclesOverride(p0, p1);
    return $res;
}
hashes['0x3E8349C08E4B82E4'] = function(p0) {
    const $res = natives.canCreateRandomPed(p0);
    return $res;
}
hashes['0xB4AC7D0CF06BFE8F'] = function(p0, p1, p2) {
    const $res = natives.createRandomPed(p0, p1, p2);
    return $res;
}
hashes['0x9B62392B474F44A0'] = function(p0, p1) {
    const $res = natives.createRandomPedAsDriver(p0, p1);
    return $res;
}
hashes['0xB8EB95E5B4E56978'] = function() {
    const $res = natives.canCreateRandomDriver();
    return $res;
}
hashes['0xEACEEDA81751915C'] = function() {
    const $res = natives.canCreateRandomBikeRider();
    return $res;
}
hashes['0x9E8C908F41584ECD'] = function(p0) {
    const $res = natives.setPedMoveAnimsBlendOut(p0);
    return $res;
}
hashes['0xC1670E958EEE24E5'] = function(p0, p1) {
    const $res = natives.setPedCanBeDraggedOut(p0, p1);
    return $res;
}
hashes['0xF2BEBCDFAFDAA19E'] = function(p0) {
    const $res = natives.setPedAllowHurtCombatForAllMissionPeds(p0);
    return $res;
}
hashes['0x6D9F5FAA7488BA46'] = function(p0) {
    const $res = natives.isPedMale(p0);
    return $res;
}
hashes['0xB980061DA992779D'] = function(p0) {
    const $res = natives.isPedHuman(p0);
    return $res;
}
hashes['0x9A9112A0FE9A4713'] = function(p0, p1) {
    const $res = natives.getVehiclePedIsIn(p0, p1);
    return $res;
}
hashes['0xBB8DE8CF6A8DD8BB'] = function(p0) {
    const $res = natives.resetPedLastVehicle(p0);
    return $res;
}
hashes['0x95E3D6257B166CF2'] = function(p0) {
    const $res = natives.setPedDensityMultiplierThisFrame(p0);
    return $res;
}
hashes['0x7A556143A1C03898'] = function(p0, p1) {
    const $res = natives.setScenarioPedDensityMultiplierThisFrame(p0, p1);
    return $res;
}
hashes['0x5A7F62FDA59759BD'] = function() {
    const $res = natives.suppressAmbientPedAggressiveCleanupThisFrame();
    return $res;
}
hashes['0x5086C7843552CF85'] = function(p0, p1, p2) {
    const $res = natives.setScriptedConversionCoordThisFrame(p0, p1, p2);
    return $res;
}
hashes['0xEE01041D559983EA'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setPedNonCreationArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x2E05208086BA0651'] = function() {
    const $res = natives.clearPedNonCreationArea();
    return $res;
}
hashes['0x4759CC730F947C81'] = function() {
    const $res = natives.instantlyFillPedPopulation();
    return $res;
}
hashes['0x460BC76A0E10655E'] = function(p0) {
    const $res = natives.isPedOnMount(p0);
    return $res;
}
hashes['0xE7E11B8DCBED1058'] = function(p0) {
    const $res = natives.getMount(p0);
    return $res;
}
hashes['0x67722AEB798E5FAB'] = function(p0) {
    const $res = natives.isPedOnVehicle(p0);
    return $res;
}
hashes['0xEC5F66E459AF3BB2'] = function(p0, p1) {
    const $res = natives.isPedOnSpecificVehicle(p0, p1);
    return $res;
}
hashes['0xA9C8960E8684C1B5'] = function(p0, p1) {
    const $res = natives.setPedMoney(p0, p1);
    return $res;
}
hashes['0x3F69145BBA87BAE7'] = function(p0) {
    const $res = natives.getPedMoney(p0);
    return $res;
}
hashes['0xFF4803BC019852D9'] = function(p0, p1) {
    const $res = natives.setHealthSnacksCarriedByAllNewPeds(p0, p1);
    return $res;
}
hashes['0x6B0E6172C9A4D902'] = function(p0) {
    const $res = natives.setAmbientPedsDropMoney(p0);
    return $res;
}
hashes['0x9911F4A24485F653'] = function(p0) {
    const $res = natives.setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame(p0);
    return $res;
}
hashes['0xEBD76F2359F190AC'] = function(p0, p1) {
    const $res = natives.setPedSuffersCriticalHits(p0, p1);
    return $res;
}
hashes['0xAFC976FD0580C7B3'] = function(p0, p1) {
    const $res = natives.setPedUpperBodyDamageOnly(p0, p1);
    return $res;
}
hashes['0xA808AA1D79230FC2'] = function(p0, p1) {
    const $res = natives.isPedSittingInVehicle(p0, p1);
    return $res;
}
hashes['0x826AA586EDB9FEF8'] = function(p0) {
    const $res = natives.isPedSittingInAnyVehicle(p0);
    return $res;
}
hashes['0x01FEE67DB37F59B2'] = function(p0) {
    const $res = natives.isPedOnFoot(p0);
    return $res;
}
hashes['0x94495889E22C6479'] = function(p0) {
    const $res = natives.isPedOnAnyBike(p0);
    return $res;
}
hashes['0xC70B5FAE151982D8'] = function(p0) {
    const $res = natives.isPedPlantingBomb(p0);
    return $res;
}
hashes['0xCD5003B097200F36'] = function(p0, p1, p2) {
    const $res = natives.getDeadPedPickupCoords(p0, p1, p2);
    return new mp.Vector3($res);
}
hashes['0x2E0E1C2B4F6CB339'] = function(p0) {
    const $res = natives.isPedInAnyBoat(p0);
    return $res;
}
hashes['0xFBFC01CCFB35D99E'] = function(p0) {
    const $res = natives.isPedInAnySub(p0);
    return $res;
}
hashes['0x298B91AE825E5705'] = function(p0) {
    const $res = natives.isPedInAnyHeli(p0);
    return $res;
}
hashes['0x5FFF4CFC74D8FB80'] = function(p0) {
    const $res = natives.isPedInAnyPlane(p0);
    return $res;
}
hashes['0x9134873537FA419C'] = function(p0) {
    const $res = natives.isPedInFlyingVehicle(p0);
    return $res;
}
hashes['0x56CEF0AC79073BDE'] = function(p0, p1) {
    const $res = natives.setPedDiesInWater(p0, p1);
    return $res;
}
hashes['0x65671A4FB8218930'] = function(p0) {
    const $res = natives.getPedDiesInWater(p0);
    return $res;
}
hashes['0xD718A22995E2B4BC'] = function(p0, p1) {
    const $res = natives.setPedDiesInSinkingVehicle(p0, p1);
    return $res;
}
hashes['0x9483AF821605B1D8'] = function(p0) {
    const $res = natives.getPedArmour(p0);
    return $res;
}
hashes['0xEDF4079F9D54C9A1'] = function(p0, p1) {
    const $res = natives.setPedStayInVehicleWhenJacked(p0, p1);
    return $res;
}
hashes['0xC7EF1BA83230BA07'] = function(p0, p1) {
    const $res = natives.setPedCanBeShotInVehicle(p0, p1);
    return $res;
}
hashes['0xD75960F6BD9EA49C'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument outBone should be an array');
    const $res = natives.getPedLastDamageBone(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x8EF6B7AC68E2F01B'] = function(p0) {
    const $res = natives.clearPedLastDamageBone(p0);
    return $res;
}
hashes['0x1B1E2A40A65B8521'] = function(p0) {
    const $res = natives.setAiWeaponDamageModifier(p0);
    return $res;
}
hashes['0xEA16670E7BA4743C'] = function() {
    const $res = natives.resetAiWeaponDamageModifier();
    return $res;
}
hashes['0x66460DEDDD417254'] = function(p0) {
    const $res = natives.setAiMeleeWeaponDamageModifier(p0);
    return $res;
}
hashes['0x46E56A7CD1D63C3F'] = function() {
    const $res = natives.resetAiMeleeWeaponDamageModifier();
    return $res;
}
hashes['0x2F3C3D9F50681DE4'] = function(p0, p1) {
    const $res = natives.setTreatAsAmbientPedForDriverLockon(p0, p1);
    return $res;
}
hashes['0x63F58F7C80513AAD'] = function(p0, p1) {
    const $res = natives.setPedCanBeTargetted(p0, p1);
    return $res;
}
hashes['0xBF1CA77833E58F2C'] = function(p0, p1, p2) {
    const $res = natives.setPedCanBeTargettedByTeam(p0, p1, p2);
    return $res;
}
hashes['0x66B57B72E0836A76'] = function(p0, p1, p2) {
    const $res = natives.setPedCanBeTargettedByPlayer(p0, p1, p2);
    return $res;
}
hashes['0x061CB768363D6424'] = function(p0, p1) {
    const $res = natives.setAllowLockonToPedIfFriendly(p0, p1);
    return $res;
}
hashes['0xFD325494792302D7'] = function(p0, p1) {
    const $res = natives.setUseCameraHeadingForDesiredDirectionLockOnTest(p0, p1);
    return $res;
}
hashes['0x0BD04E29640C9C12'] = function(p0) {
    const $res = natives.isPedInAnyPoliceVehicle(p0);
    return $res;
}
hashes['0x16E42E800B472221'] = function(p0) {
    const $res = natives.forcePedToOpenParachute(p0);
    return $res;
}
hashes['0x7DCE8BDA0F1C1200'] = function(p0) {
    const $res = natives.isPedInParachuteFreeFall(p0);
    return $res;
}
hashes['0xFB92A102F1C4DFA3'] = function(p0) {
    const $res = natives.isPedFalling(p0);
    return $res;
}
hashes['0xCEDABC5900A0BF97'] = function(p0) {
    const $res = natives.isPedJumping(p0);
    return $res;
}
hashes['0x412F1364FA066CFB'] = function(p0) {
    const $res = natives.isPedLanding(p0);
    return $res;
}
hashes['0x451D05012CCEC234'] = function(p0) {
    const $res = natives.isPedDoingABeastJump(p0);
    return $res;
}
hashes['0x53E8CB4F48BFE623'] = function(p0) {
    const $res = natives.isPedClimbing(p0);
    return $res;
}
hashes['0x117C70D1F5730B5E'] = function(p0) {
    const $res = natives.isPedVaulting(p0);
    return $res;
}
hashes['0x5527B8246FEF9B11'] = function(p0) {
    const $res = natives.isPedDiving(p0);
    return $res;
}
hashes['0x433DDFFE2044B636'] = function(p0) {
    const $res = natives.isPedJumpingOutOfVehicle(p0);
    return $res;
}
hashes['0x26AF0E8E30BD2A2C'] = function(p0) {
    const $res = natives.isPedOpeningDoor(p0);
    return $res;
}
hashes['0x79CFD9827CC979B6'] = function(p0) {
    const $res = natives.getPedParachuteState(p0);
    return $res;
}
hashes['0x8B9F1FC6AE8166C0'] = function(p0) {
    const $res = natives.getPedParachuteLandingType(p0);
    return $res;
}
hashes['0x333FC8DB079B7186'] = function(p0, p1) {
    const $res = natives.setPedParachuteTintIndex(p0, p1);
    return $res;
}
hashes['0xEAF5F7E5AE7C6C9D'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument outTintIndex should be an array');
    const $res = natives.getPedParachuteTintIndex(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xE88DA0751C22A2AD'] = function(p0, p1) {
    const $res = natives.setPedReserveParachuteTintIndex(p0, p1);
    return $res;
}
hashes['0x8C4F3BF23B6237DB'] = function(p0, p1, p2) {
    const $res = natives.createParachuteBagObject(p0, p1, p2);
    return $res;
}
hashes['0x030983CA930B692D'] = function(p0, p1) {
    const $res = natives.setPedDucking(p0, p1);
    return $res;
}
hashes['0xD125AE748725C6BC'] = function(p0) {
    const $res = natives.isPedDucking(p0);
    return $res;
}
hashes['0x6E575D6A898AB852'] = function(p0) {
    const $res = natives.isPedInAnyTaxi(p0);
    return $res;
}
hashes['0xF107E836A70DCE05'] = function(p0, p1) {
    const $res = natives.setPedIdRange(p0, p1);
    return $res;
}
hashes['0x52D59AB61DDC05DD'] = function(p0, p1) {
    const $res = natives.setPedHighlyPerceptive(p0, p1);
    return $res;
}
hashes['0x2F074C904D85129E'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setCopPerceptionOverrides(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xEC4B4B3B9908052A'] = function(p0, p1) {
    const $res = natives.setPedInjuredOnGroundBehaviour(p0, p1);
    return $res;
}
hashes['0x733C87D4CE22BEA2'] = function(p0) {
    const $res = natives.disablePedInjuredOnGroundBehaviour(p0);
    return $res;
}
hashes['0xF29CF591C4BF6CEE'] = function(p0, p1) {
    const $res = natives.setPedSeeingRange(p0, p1);
    return $res;
}
hashes['0x33A8F7F7D5F7F33C'] = function(p0, p1) {
    const $res = natives.setPedHearingRange(p0, p1);
    return $res;
}
hashes['0x2DB492222FB21E26'] = function(p0, p1) {
    const $res = natives.setPedVisualFieldMinAngle(p0, p1);
    return $res;
}
hashes['0x70793BDCA1E854D4'] = function(p0, p1) {
    const $res = natives.setPedVisualFieldMaxAngle(p0, p1);
    return $res;
}
hashes['0x7A276EB2C224D70F'] = function(p0, p1) {
    const $res = natives.setPedVisualFieldMinElevationAngle(p0, p1);
    return $res;
}
hashes['0x78D0B67629D75856'] = function(p0, p1) {
    const $res = natives.setPedVisualFieldMaxElevationAngle(p0, p1);
    return $res;
}
hashes['0x9C74B0BC831B753A'] = function(p0, p1) {
    const $res = natives.setPedVisualFieldPeripheralRange(p0, p1);
    return $res;
}
hashes['0x3B6405E8AB34A907'] = function(p0, p1) {
    const $res = natives.setPedVisualFieldCenterAngle(p0, p1);
    return $res;
}
hashes['0xEF2C71A32CAD5FBD'] = function(p0) {
    const $res = natives.getPedVisualFieldCenterAngle(p0);
    return $res;
}
hashes['0x88CBB5CEB96B7BD2'] = function(p0, p1, p2) {
    const $res = natives.setPedStealthMovement(p0, p1, p2);
    return $res;
}
hashes['0x7C2AC9CA66575FBF'] = function(p0) {
    const $res = natives.getPedStealthMovement(p0);
    return $res;
}
hashes['0x90370EBE0FEE1A3D'] = function(p0) {
    const $res = natives.createGroup(p0);
    return $res;
}
hashes['0x2A7819605465FBCE'] = function(p0, p1) {
    const $res = natives.setPedAsGroupLeader(p0, p1);
    return $res;
}
hashes['0x9F3480FE65DB31B5'] = function(p0, p1) {
    const $res = natives.setPedAsGroupMember(p0, p1);
    return $res;
}
hashes['0x2E2F4240B3F24647'] = function(p0, p1, p2) {
    const $res = natives.setPedCanTeleportToGroupLeader(p0, p1, p2);
    return $res;
}
hashes['0x8EB2F69076AF7053'] = function(p0) {
    const $res = natives.removeGroup(p0);
    return $res;
}
hashes['0xED74007FFB146BC2'] = function(p0) {
    const $res = natives.removePedFromGroup(p0);
    return $res;
}
hashes['0x9BB01E3834671191'] = function(p0, p1) {
    const $res = natives.isPedGroupMember(p0, p1);
    return $res;
}
hashes['0x1C86D8AEF8254B78'] = function(p0) {
    const $res = natives.isPedHangingOnToVehicle(p0);
    return $res;
}
hashes['0x4102C7858CFEE4E4'] = function(p0, p1) {
    const $res = natives.setGroupSeparationRange(p0, p1);
    return $res;
}
hashes['0xFA0675AB151073FA'] = function(p0, p1) {
    const $res = natives.setPedMinGroundTimeForStungun(p0, p1);
    return $res;
}
hashes['0xD6A86331A537A7B9'] = function(p0) {
    const $res = natives.isPedProne(p0);
    return $res;
}
hashes['0x4859F1FC66A6278E'] = function(p0, p1) {
    const $res = natives.isPedInCombat(p0, p1);
    return $res;
}
hashes['0x32C27A11307B01CC'] = function(p0, p1) {
    const $res = natives.getPedTargetFromCombatPed(p0, p1);
    return $res;
}
hashes['0xEAD42DE3610D0721'] = function(p0, p1) {
    const $res = natives.canPedInCombatSeeTarget(p0, p1);
    return $res;
}
hashes['0xB2C086CC1BF8F2BF'] = function(p0) {
    const $res = natives.isPedDoingDriveby(p0);
    return $res;
}
hashes['0x4AE4FF911DFB61DA'] = function(p0) {
    const $res = natives.isPedJacking(p0);
    return $res;
}
hashes['0x9A497FE2DF198913'] = function(p0) {
    const $res = natives.isPedBeingJacked(p0);
    return $res;
}
hashes['0x4FBACCE3B4138EE8'] = function(p0, p1) {
    const $res = natives.isPedBeingStunned(p0, p1);
    return $res;
}
hashes['0x9B128DC36C1E04CF'] = function(p0) {
    const $res = natives.getPedsJacker(p0);
    return $res;
}
hashes['0x5486A79D9FBD342D'] = function(p0) {
    const $res = natives.getJackTarget(p0);
    return $res;
}
hashes['0xBBCCE00B381F8482'] = function(p0) {
    const $res = natives.isPedFleeing(p0);
    return $res;
}
hashes['0x60DFD0691A170B88'] = function(p0, p1) {
    const $res = natives.isPedInCover(p0, p1);
    return $res;
}
hashes['0x845333B3150583AB'] = function(p0) {
    const $res = natives.isPedInCoverFacingLeft(p0);
    return $res;
}
hashes['0x6A03BF943D767C93'] = function(p0) {
    const $res = natives.isPedInHighCover(p0);
    return $res;
}
hashes['0x9F65DBC537E59AD5'] = function(p0) {
    const $res = natives.isPedGoingIntoCover(p0);
    return $res;
}
hashes['0xAAD6D1ACF08F4612'] = function(p0, p1, p2) {
    const $res = natives.setPedPinnedDown(p0, p1, p2);
    return $res;
}
hashes['0x6F4C85ACD641BCD2'] = function(p0) {
    const $res = natives.getSeatPedIsTryingToEnter(p0);
    return $res;
}
hashes['0x814FA8BE5449445D'] = function(p0) {
    const $res = natives.getVehiclePedIsTryingToEnter(p0);
    return $res;
}
hashes['0x93C8B64DEB84728C'] = function(p0) {
    const $res = natives.getPedSourceOfDeath(p0);
    return $res;
}
hashes['0x16FFE42AB2D2DC59'] = function(p0) {
    const $res = natives.getPedCauseOfDeath(p0);
    return $res;
}
hashes['0x1E98817B311AE98A'] = function(p0) {
    const $res = natives.getPedTimeOfDeath(p0);
    return $res;
}
hashes['0x5407B7288D0478B7'] = function(p0) {
    const $res = natives.countPedsInCombatWithTarget(p0);
    return $res;
}
hashes['0x336B3D200AB007CB'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.countPedsInCombatWithTargetWithinRadius(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xADB3F206518799E8'] = function(p0, p1) {
    const $res = natives.setPedRelationshipGroupDefaultHash(p0, p1);
    return $res;
}
hashes['0xC80A74AC829DDD92'] = function(p0, p1) {
    const $res = natives.setPedRelationshipGroupHash(p0, p1);
    return $res;
}
hashes['0xBF25EB89375A37AD'] = function(p0, p1, p2) {
    const $res = natives.setRelationshipBetweenGroups(p0, p1, p2);
    return $res;
}
hashes['0x5E29243FB56FC6D4'] = function(p0, p1, p2) {
    const $res = natives.clearRelationshipBetweenGroups(p0, p1, p2);
    return $res;
}
hashes['0xF372BC22FCB88606'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument groupHash should be an array');
    const $res = natives.addRelationshipGroup(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xB6BA2444AB393DA2'] = function(p0) {
    const $res = natives.removeRelationshipGroup(p0);
    return $res;
}
hashes['0xCC6E3B6BB69501F1'] = function(p0) {
    const $res = natives.doesRelationshipGroupExist(p0);
    return $res;
}
hashes['0xEBA5AD3A0EAF7121'] = function(p0, p1) {
    const $res = natives.getRelationshipBetweenPeds(p0, p1);
    return $res;
}
hashes['0x42FDD0F017B1E38E'] = function(p0) {
    const $res = natives.getPedRelationshipGroupDefaultHash(p0);
    return $res;
}
hashes['0x7DBDD04862D95F04'] = function(p0) {
    const $res = natives.getPedRelationshipGroupHash(p0);
    return $res;
}
hashes['0x9E6B70061662AE5C'] = function(p0, p1) {
    const $res = natives.getRelationshipBetweenGroups(p0, p1);
    return $res;
}
hashes['0x5615E0C5EB2BC6E2'] = function(p0, p1) {
    const $res = natives.setRelationshipGroupAffectsWantedLevel(p0, p1);
    return $res;
}
hashes['0xAD27D957598E49E9'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.tellGroupPedsInAreaToAttack(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x4328652AE5769C71'] = function(p0, p1) {
    const $res = natives.setPedCanBeTargetedWithoutLos(p0, p1);
    return $res;
}
hashes['0x112942C6E708F70B'] = function(p0, p1, p2) {
    const $res = natives.setPedToInformRespectedFriends(p0, p1, p2);
    return $res;
}
hashes['0x625B774D75C87068'] = function(p0, p1) {
    const $res = natives.isPedRespondingToEvent(p0, p1);
    return $res;
}
hashes['0xBA656A3BB01BDEA3'] = function(p0, p1, p2) {
    const $res = natives.getPosFromFiredEvent(p0, p1, p2);
    return $res;
}
hashes['0x9AC577F5A12AD8A9'] = function(p0, p1) {
    const $res = natives.setPedFiringPattern(p0, p1);
    return $res;
}
hashes['0x614DA022990752DC'] = function(p0, p1) {
    const $res = natives.setPedShootRate(p0, p1);
    return $res;
}
hashes['0xFF41B4B141ED981C'] = function(p0, p1, p2) {
    const $res = natives.setCombatFloat(p0, p1, p2);
    return $res;
}
hashes['0x52DFF8A10508090A'] = function(p0, p1) {
    const $res = natives.getCombatFloat(p0, p1);
    return $res;
}
hashes['0x8DE69FE35CA09A45'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument sizeInMembers should be an array');
    const $res = natives.getGroupSize(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x7C6B0C22F9F40BBE'] = function(p0) {
    const $res = natives.doesGroupExist(p0);
    return $res;
}
hashes['0xF162E133B4E7A675'] = function(p0) {
    const $res = natives.getPedGroupIndex(p0);
    return $res;
}
hashes['0x5891CAC5D4ACFF74'] = function(p0) {
    const $res = natives.isPedInGroup(p0);
    return $res;
}
hashes['0x6A3975DEA89F9A17'] = function(p0) {
    const $res = natives.getPlayerPedIsFollowing(p0);
    return $res;
}
hashes['0xCE2F5FC3AF7E8C1E'] = function(p0, p1) {
    const $res = natives.setGroupFormation(p0, p1);
    return $res;
}
hashes['0x1D9D45004C28C916'] = function(p0, p1, p2, p3) {
    const $res = natives.setGroupFormationSpacing(p0, p1, p2, p3);
    return $res;
}
hashes['0x63DAB4CCB3273205'] = function(p0) {
    const $res = natives.resetGroupFormationDefaultSpacing(p0);
    return $res;
}
hashes['0x6094AD011A2EA87D'] = function(p0) {
    const $res = natives.getVehiclePedIsUsing(p0);
    return $res;
}
hashes['0xF92691AED837A5FC'] = function(p0) {
    const $res = natives.getVehiclePedIsEntering(p0);
    return $res;
}
hashes['0x9FF447B6B6AD960A'] = function(p0, p1) {
    const $res = natives.setPedGravity(p0, p1);
    return $res;
}
hashes['0x697157CED63F18D4'] = function(p0, p1, p2, p3) {
    const $res = natives.applyDamageToPed(p0, p1, p2, p3);
    return $res;
}
hashes['0x36B77BB84687C318'] = function(p0, p1) {
    const $res = natives.getTimePedDamagedByWeapon(p0, p1);
    return $res;
}
hashes['0xDA1F1B7BE1A8766F'] = function(p0, p1) {
    const $res = natives.setPedAllowedToDuck(p0, p1);
    return $res;
}
hashes['0x3DBFC55D5C9BB447'] = function(p0, p1) {
    const $res = natives.setPedNeverLeavesGroup(p0, p1);
    return $res;
}
hashes['0xFF059E1E4C01E63C'] = function(p0) {
    const $res = natives.getPedType(p0);
    return $res;
}
hashes['0xBB03C38DD3FB7FFD'] = function(p0, p1) {
    const $res = natives.setPedAsCop(p0, p1);
    return $res;
}
hashes['0xB3352E018D6F89DF'] = function(p0) {
    const $res = natives.setPedHealthPendingLastDamageEventOverrideFlag(p0);
    return $res;
}
hashes['0xF5F6378C4F3419D3'] = function(p0, p1) {
    const $res = natives.setPedMaxHealth(p0, p1);
    return $res;
}
hashes['0x4700A416E8324EF3'] = function(p0) {
    const $res = natives.getPedMaxHealth(p0);
    return $res;
}
hashes['0x43C851690662113D'] = function(p0, p1) {
    const $res = natives.setPedMaxTimeInWater(p0, p1);
    return $res;
}
hashes['0x6BA428C528D9E522'] = function(p0, p1) {
    const $res = natives.setPedMaxTimeUnderwater(p0, p1);
    return $res;
}
hashes['0x2735233A786B1BEF'] = function(p0, p1) {
    const $res = natives.setCorpseRagdollFriction(p0, p1);
    return $res;
}
hashes['0x952F06BEECD775CC'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPedVehicleForcedSeatUsage(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xE6CA85E7259CE16B'] = function(p0) {
    const $res = natives.clearAllPedVehicleForcedSeatUsage(p0);
    return $res;
}
hashes['0xB282749D5E028163'] = function(p0, p1) {
    const $res = natives.setPedCanBeKnockedOffBike(p0, p1);
    return $res;
}
hashes['0x7A6535691B477C48'] = function(p0, p1) {
    const $res = natives.setPedCanBeKnockedOffVehicle(p0, p1);
    return $res;
}
hashes['0x51AC07A44D4F5B8A'] = function(p0) {
    const $res = natives.canKnockPedOffVehicle(p0);
    return $res;
}
hashes['0x45BBCBA77C29A841'] = function(p0) {
    const $res = natives.knockPedOffVehicle(p0);
    return $res;
}
hashes['0x87052FE446E07247'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedCoordsNoGang(p0, p1, p2, p3);
    return $res;
}
hashes['0x51455483CF23ED97'] = function(p0, p1) {
    const $res = natives.getPedAsGroupMember(p0, p1);
    return $res;
}
hashes['0x5CCE68DBD5FE93EC'] = function(p0) {
    const $res = natives.getPedAsGroupLeader(p0);
    return $res;
}
hashes['0x971D38760FBC02EF'] = function(p0, p1) {
    const $res = natives.setPedKeepTask(p0, p1);
    return $res;
}
hashes['0x49E50BDB8BA4DAB2'] = function(p0, p1) {
    const $res = natives.setPedAllowMinorReactionsAsMissionPed(p0, p1);
    return $res;
}
hashes['0x9DE327631295B4C2'] = function(p0) {
    const $res = natives.isPedSwimming(p0);
    return $res;
}
hashes['0xC024869A53992F34'] = function(p0) {
    const $res = natives.isPedSwimmingUnderWater(p0);
    return $res;
}
hashes['0x9AFEFF481A85AB2E'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedCoordsKeepVehicle(p0, p1, p2, p3);
    return $res;
}
hashes['0x2A30922C90C9B42C'] = function(p0, p1) {
    const $res = natives.setPedDiesInVehicle(p0, p1);
    return $res;
}
hashes['0x102E68B2024D536D'] = function(p0) {
    const $res = natives.setCreateRandomCops(p0);
    return $res;
}
hashes['0x8A4986851C4EF6E7'] = function(p0) {
    const $res = natives.setCreateRandomCopsNotOnScenarios(p0);
    return $res;
}
hashes['0x444CB7D7DBE6973D'] = function(p0) {
    const $res = natives.setCreateRandomCopsOnScenarios(p0);
    return $res;
}
hashes['0x5EE2CAFF7F17770D'] = function() {
    const $res = natives.canCreateRandomCops();
    return $res;
}
hashes['0x02A0C9720B854BFA'] = function(p0, p1) {
    const $res = natives.setPedAsEnemy(p0, p1);
    return $res;
}
hashes['0x1CCE141467FF42A2'] = function(p0, p1, p2) {
    const $res = natives.setPedCanSmashGlass(p0, p1, p2);
    return $res;
}
hashes['0x6F972C1AB75A1ED0'] = function(p0) {
    const $res = natives.isPedInAnyTrain(p0);
    return $res;
}
hashes['0xBB062B2B5722478E'] = function(p0) {
    const $res = natives.isPedGettingIntoAVehicle(p0);
    return $res;
}
hashes['0x44D28D5DDFE5F68C'] = function(p0) {
    const $res = natives.isPedTryingToEnterALockedVehicle(p0);
    return $res;
}
hashes['0xDF1AF8B5D56542FA'] = function(p0, p1) {
    const $res = natives.setEnableHandcuffs(p0, p1);
    return $res;
}
hashes['0xC52E0F855C58FC2E'] = function(p0, p1) {
    const $res = natives.setEnableBoundAnkles(p0, p1);
    return $res;
}
hashes['0xF99F62004024D506'] = function(p0, p1) {
    const $res = natives.setEnableScuba(p0, p1);
    return $res;
}
hashes['0xB3B1CB349FF9C75D'] = function(p0, p1, p2) {
    const $res = natives.setCanAttackFriendly(p0, p1, p2);
    return $res;
}
hashes['0xF6AA118530443FD2'] = function(p0) {
    const $res = natives.getPedAlertness(p0);
    return $res;
}
hashes['0xDBA71115ED9941A6'] = function(p0, p1) {
    const $res = natives.setPedAlertness(p0, p1);
    return $res;
}
hashes['0xBC0ED94165A48BC2'] = function(p0, p1) {
    const $res = natives.setPedGetOutUpsideDownVehicle(p0, p1);
    return $res;
}
hashes['0xAF8A94EDE7712BEF'] = function(p0, p1, p2) {
    const $res = natives.setPedMovementClipset(p0, p1, p2);
    return $res;
}
hashes['0xAA74EC0CB0AAEA2C'] = function(p0, p1) {
    const $res = natives.resetPedMovementClipset(p0, p1);
    return $res;
}
hashes['0x29A28F3F8CF6D854'] = function(p0, p1) {
    const $res = natives.setPedStrafeClipset(p0, p1);
    return $res;
}
hashes['0x20510814175EA477'] = function(p0) {
    const $res = natives.resetPedStrafeClipset(p0);
    return $res;
}
hashes['0x2622E35B77D3ACA2'] = function(p0, p1) {
    const $res = natives.setPedWeaponMovementClipset(p0, p1);
    return $res;
}
hashes['0x97B0DB5B4AA74E77'] = function(p0) {
    const $res = natives.resetPedWeaponMovementClipset(p0);
    return $res;
}
hashes['0xED34AB6C5CB36520'] = function(p0, p1) {
    const $res = natives.setPedDriveByClipsetOverride(p0, p1);
    return $res;
}
hashes['0x4AFE3690D7E0B5AC'] = function(p0) {
    const $res = natives.clearPedDriveByClipsetOverride(p0);
    return $res;
}
hashes['0x9DBA107B4937F809'] = function(p0, p1) {
    const $res = natives.setPedMotionInCoverClipsetOverride(p0, p1);
    return $res;
}
hashes['0xC79196DCB36F6121'] = function(p0) {
    const $res = natives.clearPedMotionInCoverClipsetOverride(p0);
    return $res;
}
hashes['0x80054D7FCC70EEC6'] = function(p0) {
    const $res = natives.clearPedFallUpperBodyClipsetOverride(p0);
    return $res;
}
hashes['0x530071295899A8C6'] = function(p0, p1) {
    const $res = natives.setPedInVehicleContext(p0, p1);
    return $res;
}
hashes['0x22EF8FF8778030EB'] = function(p0) {
    const $res = natives.resetPedInVehicleContext(p0);
    return $res;
}
hashes['0x6EC47A344923E1ED'] = function(p0, p1, p2) {
    const $res = natives.isScriptedScenarioPedUsingConditionalAnim(p0, p1, p2);
    return $res;
}
hashes['0x6C60394CB4F75E9A'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPedAlternateWalkAnim(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x8844BBFCE30AA9E9'] = function(p0, p1) {
    const $res = natives.clearPedAlternateWalkAnim(p0, p1);
    return $res;
}
hashes['0x90A43CC281FFAB46'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setPedAlternateMovementAnim(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xD8D19675ED5FBDCE'] = function(p0, p1, p2) {
    const $res = natives.clearPedAlternateMovementAnim(p0, p1, p2);
    return $res;
}
hashes['0xDDF803377F94AAA8'] = function(p0, p1) {
    const $res = natives.setPedGestureGroup(p0, p1);
    return $res;
}
hashes['0xBE22B26DD764C040'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.getAnimInitialOffsetPosition(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return new mp.Vector3($res);
}
hashes['0x4B805E6046EE9E47'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.getAnimInitialOffsetRotation(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return new mp.Vector3($res);
}
hashes['0x67F3780DD425D4FC'] = function(p0, p1) {
    const $res = natives.getPedDrawableVariation(p0, p1);
    return $res;
}
hashes['0x27561561732A7842'] = function(p0, p1) {
    const $res = natives.getNumberOfPedDrawableVariations(p0, p1);
    return $res;
}
hashes['0x04A355E041E004E6'] = function(p0, p1) {
    const $res = natives.getPedTextureVariation(p0, p1);
    return $res;
}
hashes['0x8F7156A3142A6BAD'] = function(p0, p1, p2) {
    const $res = natives.getNumberOfPedTextureVariations(p0, p1, p2);
    return $res;
}
hashes['0x5FAF9754E789FB47'] = function(p0, p1) {
    const $res = natives.getNumberOfPedPropDrawableVariations(p0, p1);
    return $res;
}
hashes['0xA6E7F1CEB523E171'] = function(p0, p1, p2) {
    const $res = natives.getNumberOfPedPropTextureVariations(p0, p1, p2);
    return $res;
}
hashes['0xE3DD5F2A84B42281'] = function(p0, p1) {
    const $res = natives.getPedPaletteVariation(p0, p1);
    return $res;
}
hashes['0x9E30E91FB03A2CAF'] = function(p0, p1) {
    const $res = natives.getMpOutfitDataFromMetadata(p0, p1);
    return $res;
}
hashes['0x1E77FA7A62EE6C4C'] = function(p0) {
    const $res = natives.getFmMaleShopPedApparelItemIndex(p0);
    return $res;
}
hashes['0xF033419D1B81FAE8'] = function(p0) {
    const $res = natives.getFmFemaleShopPedApparelItemIndex(p0);
    return $res;
}
hashes['0xE825F6B6CEA7671D'] = function(p0, p1, p2, p3) {
    const $res = natives.isPedComponentVariationValid(p0, p1, p2, p3);
    return $res;
}
hashes['0x262B14F48D29DE80'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPedComponentVariation(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC8A9481A01E63C28'] = function(p0, p1) {
    const $res = natives.setPedRandomComponentVariation(p0, p1);
    return $res;
}
hashes['0xC44AA05345C992C6'] = function(p0) {
    const $res = natives.setPedRandomProps(p0);
    return $res;
}
hashes['0x45EEE61580806D63'] = function(p0) {
    const $res = natives.setPedDefaultComponentVariation(p0);
    return $res;
}
hashes['0x137BBD05230DB22D'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPedBlendFromParents(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x9414E18B9434C2FE'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.setPedHeadBlendData(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x2746BD9D88C5C5D0'] = function(p0, p1) {
    const $res = natives.getPedHeadBlendData(p0, p1);
    return $res;
}
hashes['0x723538F61C647C5A'] = function(p0, p1, p2, p3) {
    const $res = natives.updatePedHeadBlendData(p0, p1, p2, p3);
    return $res;
}
hashes['0x50B56988B170AFDF'] = function(p0, p1) {
    const $res = natives.setHeadBlendEyeColor(p0, p1);
    return $res;
}
hashes['0x76BBA2CEE66D47E9'] = function(p0) {
    const $res = natives.getHeadBlendEyeColor(p0);
    return $res;
}
hashes['0x48F44967FA05CC1E'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedHeadOverlay(p0, p1, p2, p3);
    return $res;
}
hashes['0xA60EF3B6461A4D43'] = function(p0, p1) {
    const $res = natives.getPedHeadOverlay(p0, p1);
    return $res;
}
hashes['0xCF1CE768BB43480E'] = function(p0) {
    const $res = natives.getPedHeadOverlayNum(p0);
    return $res;
}
hashes['0x497BF74A7B9CB952'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPedHeadOverlayTint(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x4CFFC65454C93A49'] = function(p0, p1, p2) {
    const $res = natives.setPedHairTint(p0, p1, p2);
    return $res;
}
hashes['0xE5C0CF872C2AD150'] = function() {
    const $res = natives.getNumPedHairTints();
    return $res;
}
hashes['0xD1F7CA1535D22818'] = function() {
    const $res = natives.getNumPedMakeupTints();
    return $res;
}
hashes['0x4852FC386E2E1BB5'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument outR should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument outG should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument outB should be an array');
    const $res = natives.getPedHairTintColor(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0x013E5CFC38CD5387'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument outR should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument outG should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument outB should be an array');
    const $res = natives.getPedMakeupTintColor(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0xED6D8E27A43B8CDE'] = function(p0) {
    const $res = natives.isPedHairTintForCreator(p0);
    return $res;
}
hashes['0xEA9960D07DADCF10'] = function(p0) {
    const $res = natives.getDefaultSecondaryTintForCreator(p0);
    return $res;
}
hashes['0x3E802F11FBE27674'] = function(p0) {
    const $res = natives.isPedLipstickTintForCreator(p0);
    return $res;
}
hashes['0xF41B5D290C99A3D6'] = function(p0) {
    const $res = natives.isPedBlushTintForCreator(p0);
    return $res;
}
hashes['0xE0D36E5D9E99CC21'] = function(p0) {
    const $res = natives.isPedHairTintForBarber(p0);
    return $res;
}
hashes['0xAAA6A3698A69E048'] = function(p0) {
    const $res = natives.getDefaultSecondaryTintForBarber(p0);
    return $res;
}
hashes['0x0525A2C2562F3CD4'] = function(p0) {
    const $res = natives.isPedLipstickTintForBarber(p0);
    return $res;
}
hashes['0x604E810189EE3A59'] = function(p0) {
    const $res = natives.isPedBlushTintForBarber(p0);
    return $res;
}
hashes['0x09E7ECA981D9B210'] = function(p0) {
    const $res = natives.isPedBlushFacepaintTintForBarber(p0);
    return $res;
}
hashes['0xC56FBF2F228E1DAC'] = function(p0, p1, p2) {
    const $res = natives.getTintIndexForLastGenHairTexture(p0, p1, p2);
    return $res;
}
hashes['0x71A5C1DBA060049E'] = function(p0, p1, p2) {
    const $res = natives.setPedMicroMorph(p0, p1, p2);
    return $res;
}
hashes['0x654CD0A825161131'] = function(p0) {
    const $res = natives.hasPedHeadBlendFinished(p0);
    return $res;
}
hashes['0x4668D80430D6C299'] = function(p0) {
    const $res = natives.finalizeHeadBlend(p0);
    return $res;
}
hashes['0xCC9682B8951C5229'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setHeadBlendPaletteColor(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xA21C118553BBDF02'] = function(p0) {
    const $res = natives.disableHeadBlendPaletteColor(p0);
    return $res;
}
hashes['0x68D353AB88B97E0C'] = function(p0) {
    const $res = natives.getPedHeadBlendFirstIndex(p0);
    return $res;
}
hashes['0x5EF37013A6539C9D'] = function(p0) {
    const $res = natives.getPedHeadBlendNumHeads(p0);
    return $res;
}
hashes['0x39D55A620FCB6A3A'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedPreloadVariationData(p0, p1, p2, p3);
    return $res;
}
hashes['0x66680A92700F43DF'] = function(p0) {
    const $res = natives.hasPedPreloadVariationDataFinished(p0);
    return $res;
}
hashes['0x5AAB586FFEC0FD96'] = function(p0) {
    const $res = natives.releasePedPreloadVariationData(p0);
    return $res;
}
hashes['0x2B16A3BFF1FBCE49'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedPreloadPropData(p0, p1, p2, p3);
    return $res;
}
hashes['0x784002A632822099'] = function(p0) {
    const $res = natives.hasPedPreloadPropDataFinished(p0);
    return $res;
}
hashes['0xF79F9DEF0AADE61A'] = function(p0) {
    const $res = natives.releasePedPreloadPropData(p0);
    return $res;
}
hashes['0x898CC20EA75BACD8'] = function(p0, p1, p2) {
    const $res = natives.getPedPropIndex(p0, p1, p2);
    return $res;
}
hashes['0x93376B65A266EB5F'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setPedPropIndex(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x6FD7816A36615F48'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.knockOffPedProp(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x0943E5B8E078E76E'] = function(p0, p1, p2) {
    const $res = natives.clearPedProp(p0, p1, p2);
    return $res;
}
hashes['0xCD8A7537A9B52F06'] = function(p0, p1) {
    const $res = natives.clearAllPedProps(p0, p1);
    return $res;
}
hashes['0xAFF4710E2A0A6C12'] = function(p0) {
    const $res = natives.dropAmbientProp(p0);
    return $res;
}
hashes['0xE131A28626F81AB2'] = function(p0, p1) {
    const $res = natives.getPedPropTextureIndex(p0, p1);
    return $res;
}
hashes['0x1280804F7CFD2D6C'] = function(p0) {
    const $res = natives.clearPedParachutePackVariation(p0);
    return $res;
}
hashes['0x36C6984C3ED0C911'] = function(p0) {
    const $res = natives.setPedScubaGearVariation(p0);
    return $res;
}
hashes['0xB50EB4CCB29704AC'] = function(p0) {
    const $res = natives.clearPedScubaGearVariation(p0);
    return $res;
}
hashes['0xFEC9A3B1820F3331'] = function(p0) {
    const $res = natives.isUsingPedScubaGearVariation(p0);
    return $res;
}
hashes['0x9F8AA94D6D97DBF4'] = function(p0, p1) {
    const $res = natives.setBlockingOfNonTemporaryEvents(p0, p1);
    return $res;
}
hashes['0x4F5F651ACCC9C4CF'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setPedBoundsOrientation(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x2F25D9AEFA34FBA2'] = function(p0, p1) {
    const $res = natives.registerTarget(p0, p1);
    return $res;
}
hashes['0x9222F300BF8354FE'] = function(p0, p1) {
    const $res = natives.registerHatedTargetsAroundPed(p0, p1);
    return $res;
}
hashes['0x876046A8E3A4B71C'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.getRandomPedAtCoord(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xC33AB876A77F8164'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    if (!Array.isArray(p6)) throw new Error('Argument outPed should be an array');
    const $res = natives.getClosestPed(p0, p1, p2, p3, p4, p5, p7, p8, p9);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p6[0] = $res[1];
    return $res[0];
}
hashes['0x14F19A8782C8071E'] = function(p0) {
    const $res = natives.setScenarioPedsToBeReturnedByNextCommand(p0);
    return $res;
}
hashes['0x03EA03AF85A85CB7'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.getCanPedBeGrabbedByScript(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xDED5AF5A0EA4B297'] = function(p0, p1) {
    const $res = natives.setDriverRacingModifier(p0, p1);
    return $res;
}
hashes['0xB195FFA8042FC5C3'] = function(p0, p1) {
    const $res = natives.setDriverAbility(p0, p1);
    return $res;
}
hashes['0xA731F608CA104E3C'] = function(p0, p1) {
    const $res = natives.setDriverAggressiveness(p0, p1);
    return $res;
}
hashes['0x128F79EDCECE4FD5'] = function(p0) {
    const $res = natives.canPedRagdoll(p0);
    return $res;
}
hashes['0xAE99FB955581844A'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setPedToRagdoll(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xD76632D99E4966C8'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.setPedToRagdollWithFall(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0xF0A4F1BBF4FA7497'] = function(p0, p1) {
    const $res = natives.setPedRagdollOnCollision(p0, p1);
    return $res;
}
hashes['0x47E4E977581C5B55'] = function(p0) {
    const $res = natives.isPedRagdoll(p0);
    return $res;
}
hashes['0xE3B6097CC25AA69E'] = function(p0) {
    const $res = natives.isPedRunningRagdollTask(p0);
    return $res;
}
hashes['0x01F6594B923B9251'] = function(p0) {
    const $res = natives.setPedRagdollForceFall(p0);
    return $res;
}
hashes['0x9FA4664CF62E47E8'] = function(p0) {
    const $res = natives.resetPedRagdollTimer(p0);
    return $res;
}
hashes['0xB128377056A54E2A'] = function(p0, p1) {
    const $res = natives.setPedCanRagdoll(p0, p1);
    return $res;
}
hashes['0xD1871251F3B5ACD7'] = function(p0) {
    const $res = natives.isPedRunningMeleeTask(p0);
    return $res;
}
hashes['0x2AFE52F782F25775'] = function(p0) {
    const $res = natives.isPedRunningMobilePhoneTask(p0);
    return $res;
}
hashes['0xA3F3564A5B3646C0'] = function(p0) {
    const $res = natives.isMobilePhoneToPedEar(p0);
    return $res;
}
hashes['0x26695EC767728D84'] = function(p0, p1) {
    const $res = natives.setRagdollBlockingFlags(p0, p1);
    return $res;
}
hashes['0xD86D101FCFD00A4B'] = function(p0, p1) {
    const $res = natives.clearRagdollBlockingFlags(p0, p1);
    return $res;
}
hashes['0xC7F76DF27A5045A1'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.setPedAngledDefensiveArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x9D3151A373974804'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setPedSphereDefensiveArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xF9B8F91AAD3B953E'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setPedDefensiveSphereAttachedToPed(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xE4723DB6E736CCFF'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setPedDefensiveSphereAttachedToVehicle(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x4EF47FE21698A8B6'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.setPedDefensiveAreaAttachedToPed(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x413C6C763A4AFFAD'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPedDefensiveAreaDirection(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x74D4E028107450A9'] = function(p0, p1) {
    const $res = natives.removePedDefensiveArea(p0, p1);
    return $res;
}
hashes['0x3C06B8786DD94CD1'] = function(p0, p1) {
    const $res = natives.getPedDefensiveAreaPosition(p0, p1);
    return new mp.Vector3($res);
}
hashes['0xBA63D9FE45412247'] = function(p0, p1) {
    const $res = natives.isPedDefensiveAreaActive(p0, p1);
    return $res;
}
hashes['0x8421EB4DA7E391B9'] = function(p0, p1) {
    const $res = natives.setPedPreferredCoverSet(p0, p1);
    return $res;
}
hashes['0xFDDB234CF74073D9'] = function(p0) {
    const $res = natives.removePedPreferredCoverSet(p0);
    return $res;
}
hashes['0x8D8ACD8388CD99CE'] = function(p0) {
    const $res = natives.reviveInjuredPed(p0);
    return $res;
}
hashes['0x71BC8E838B9C6035'] = function(p0) {
    const $res = natives.resurrectPed(p0);
    return $res;
}
hashes['0x98EFA132A4117BE1'] = function(p0, p1) {
    const $res = natives.setPedNameDebug(p0, p1);
    return $res;
}
hashes['0xE0AF41401ADF87E3'] = function(p0, p1) {
    const $res = natives.getPedExtractedDisplacement(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x5BA7919BED300023'] = function(p0, p1) {
    const $res = natives.setPedDiesWhenInjured(p0, p1);
    return $res;
}
hashes['0x97A790315D3831FD'] = function(p0, p1) {
    const $res = natives.setPedEnableWeaponBlocking(p0, p1);
    return $res;
}
hashes['0xF9ACF4A08098EA25'] = function(p0, p1) {
    const $res = natives.specialFunctionDoNotUse(p0, p1);
    return $res;
}
hashes['0x3AC1F7B898F30C05'] = function(p0) {
    const $res = natives.resetPedVisibleDamage(p0);
    return $res;
}
hashes['0x816F6981C60BF53B'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.applyPedBloodDamageByZone(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x83F7E01C7B769A26'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.applyPedBlood(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x3311E47B91EDCBBC'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.applyPedBloodByZone(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xEF0D582CBF2D9B0F'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.applyPedBloodSpecific(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x397C38AA7B4A5F83'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.applyPedDamageDecal(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x46DF918788CB093F'] = function(p0, p1, p2, p3) {
    const $res = natives.applyPedDamagePack(p0, p1, p2, p3);
    return $res;
}
hashes['0x8FE22675A5A45817'] = function(p0) {
    const $res = natives.clearPedBloodDamage(p0);
    return $res;
}
hashes['0x56E3B78C5408D9F4'] = function(p0, p1) {
    const $res = natives.clearPedBloodDamageByZone(p0, p1);
    return $res;
}
hashes['0x62AB793144DE75DC'] = function(p0, p1, p2) {
    const $res = natives.hidePedBloodDamageByZone(p0, p1, p2);
    return $res;
}
hashes['0x523C79AEEFCC4A2A'] = function(p0, p1, p2) {
    const $res = natives.clearPedDamageDecalByZone(p0, p1, p2);
    return $res;
}
hashes['0x71EAB450D86954A1'] = function(p0) {
    const $res = natives.getPedDecorationsState(p0);
    return $res;
}
hashes['0x2B694AFCF64E6994'] = function(p0, p1) {
    const $res = natives.markPedDecorationsAsClonedFromLocalPlayer(p0, p1);
    return $res;
}
hashes['0x9C720776DAA43E7E'] = function(p0) {
    const $res = natives.clearPedWetness(p0);
    return $res;
}
hashes['0x44CB6447D2571AA0'] = function(p0, p1) {
    const $res = natives.setPedWetnessHeight(p0, p1);
    return $res;
}
hashes['0xB5485E4907B53019'] = function(p0) {
    const $res = natives.setPedWetnessEnabledThisFrame(p0);
    return $res;
}
hashes['0xAC0BB4D87777CAE2'] = function(p0, p1) {
    const $res = natives.setPedWetness(p0, p1);
    return $res;
}
hashes['0x6585D955A68452A5'] = function(p0) {
    const $res = natives.clearPedEnvDirt(p0);
    return $res;
}
hashes['0x27B0405F59637D1F'] = function(p0, p1) {
    const $res = natives.setPedSweat(p0, p1);
    return $res;
}
hashes['0x5F5D1665E352A839'] = function(p0, p1, p2) {
    const $res = natives.addPedDecorationFromHashes(p0, p1, p2);
    return $res;
}
hashes['0x5619BFA07CFD7833'] = function(p0, p1, p2) {
    const $res = natives.addPedDecorationFromHashesInCorona(p0, p1, p2);
    return $res;
}
hashes['0x9FD452BFBE7A7A8B'] = function(p0, p1) {
    const $res = natives.getPedDecorationZoneFromHashes(p0, p1);
    return $res;
}
hashes['0x0E5173C163976E38'] = function(p0) {
    const $res = natives.clearPedDecorations(p0);
    return $res;
}
hashes['0xE3B27E70CEAB9F0C'] = function(p0) {
    const $res = natives.clearPedDecorationsLeaveScars(p0);
    return $res;
}
hashes['0x11B499C1E0FF8559'] = function(p0) {
    const $res = natives.wasPedSkeletonUpdated(p0);
    return $res;
}
hashes['0x17C07FC640E86B4E'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.getPedBoneCoords(p0, p1, p2, p3, p4);
    return new mp.Vector3($res);
}
hashes['0x418EF2A1BCE56685'] = function(p0, p1) {
    const $res = natives.createNmMessage(p0, p1);
    return $res;
}
hashes['0xB158DFCCC56E5C5B'] = function(p0) {
    const $res = natives.givePedNmMessage(p0);
    return $res;
}
hashes['0x1B5C85C612E5256E'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.addScenarioBlockingArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xD37401D78A929A49'] = function() {
    const $res = natives.removeScenarioBlockingAreas();
    return $res;
}
hashes['0x31D16B74C6E29D66'] = function(p0, p1) {
    const $res = natives.removeScenarioBlockingArea(p0, p1);
    return $res;
}
hashes['0x28157D43CF600981'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setScenarioPedsSpawnInSphereArea(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x8A24B067D175A7BD'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.doesScenarioBlockingAreaExists(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x1BF094736DD62C2E'] = function(p0, p1) {
    const $res = natives.isPedUsingScenario(p0, p1);
    return $res;
}
hashes['0x57AB4A3080F85143'] = function(p0) {
    const $res = natives.isPedUsingAnyScenario(p0);
    return $res;
}
hashes['0xFE07FF6495D52E2A'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedPanicExitScenario(p0, p1, p2, p3);
    return $res;
}
hashes['0x9A77DFD295E29B09'] = function(p0, p1) {
    const $res = natives.toggleScenarioPedCowerInPlace(p0, p1);
    return $res;
}
hashes['0x25361A96E0F7E419'] = function(p0, p1, p2, p3) {
    const $res = natives.triggerPedScenarioPanicexittoflee(p0, p1, p2, p3);
    return $res;
}
hashes['0xEC6935EBE0847B90'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedShouldPlayDirectedNormalScenarioExit(p0, p1, p2, p3);
    return $res;
}
hashes['0xA3A9299C4F2ADB98'] = function(p0) {
    const $res = natives.setPedShouldPlayNormalScenarioExit(p0);
    return $res;
}
hashes['0xF1C03A5352243A30'] = function(p0) {
    const $res = natives.setPedShouldPlayImmediateScenarioExit(p0);
    return $res;
}
hashes['0xEEED8FAFEC331A70'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedShouldPlayFleeScenarioExit(p0, p1, p2, p3);
    return $res;
}
hashes['0x425AECF167663F48'] = function(p0, p1) {
    const $res = natives.setPedShouldIgnoreScenarioExitCollisionChecks(p0, p1);
    return $res;
}
hashes['0x5B6010B3CBC29095'] = function(p0, p1) {
    const $res = natives.setPedShouldIgnoreScenarioNavChecks(p0, p1);
    return $res;
}
hashes['0xCEDA60A74219D064'] = function(p0, p1) {
    const $res = natives.setPedShouldProbeForScenarioExitsInOneFrame(p0, p1);
    return $res;
}
hashes['0xC30BDAEE47256C13'] = function(p0) {
    const $res = natives.isPedGesturing(p0);
    return $res;
}
hashes['0x007FDE5A7897E426'] = function(p0) {
    const $res = natives.resetFacialIdleAnim(p0);
    return $res;
}
hashes['0xE1E65CA8AC9C00ED'] = function(p0, p1, p2) {
    const $res = natives.playFacialAnim(p0, p1, p2);
    return $res;
}
hashes['0x5687C7F05B39E401'] = function(p0, p1) {
    const $res = natives.setFacialClipset(p0, p1);
    return $res;
}
hashes['0xFFC24B988B938B38'] = function(p0, p1, p2) {
    const $res = natives.setFacialIdleAnimOverride(p0, p1, p2);
    return $res;
}
hashes['0x726256CC1EEB182F'] = function(p0) {
    const $res = natives.clearFacialIdleAnimOverride(p0);
    return $res;
}
hashes['0xBAF20C5432058024'] = function(p0, p1) {
    const $res = natives.setPedCanPlayGestureAnims(p0, p1);
    return $res;
}
hashes['0xF833DDBA3B104D43'] = function(p0, p1, p2) {
    const $res = natives.setPedCanPlayVisemeAnims(p0, p1, p2);
    return $res;
}
hashes['0x33A60D8BDD6E508C'] = function(p0, p1) {
    const $res = natives.setPedIsIgnoredByAutoOpenDoors(p0, p1);
    return $res;
}
hashes['0x6373D1349925A70E'] = function(p0, p1) {
    const $res = natives.setPedCanPlayAmbientAnims(p0, p1);
    return $res;
}
hashes['0x0EB0585D15254740'] = function(p0, p1) {
    const $res = natives.setPedCanPlayAmbientBaseAnims(p0, p1);
    return $res;
}
hashes['0xC2EE020F5FB4DB53'] = function(p0) {
    const $res = natives.triggerIdleAnimationOnPed(p0);
    return $res;
}
hashes['0x6C3B4D6D13B4C841'] = function(p0, p1) {
    const $res = natives.setPedCanArmIk(p0, p1);
    return $res;
}
hashes['0xC11C18092C5530DC'] = function(p0, p1) {
    const $res = natives.setPedCanHeadIk(p0, p1);
    return $res;
}
hashes['0x73518ECE2485412B'] = function(p0, p1) {
    const $res = natives.setPedCanLegIk(p0, p1);
    return $res;
}
hashes['0xF2B7106D37947CE0'] = function(p0, p1) {
    const $res = natives.setPedCanTorsoIk(p0, p1);
    return $res;
}
hashes['0xF5846EDB26A98A24'] = function(p0, p1) {
    const $res = natives.setPedCanTorsoReactIk(p0, p1);
    return $res;
}
hashes['0x6647C5F6F5792496'] = function(p0, p1) {
    const $res = natives.setPedCanTorsoVehicleIk(p0, p1);
    return $res;
}
hashes['0xEC4686EC06434678'] = function(p0, p1) {
    const $res = natives.setPedCanUseAutoConversationLookat(p0, p1);
    return $res;
}
hashes['0x5CD3CB88A7F8850D'] = function(p0, p1) {
    const $res = natives.isPedHeadtrackingPed(p0, p1);
    return $res;
}
hashes['0x813A0A7C9D2E831F'] = function(p0, p1) {
    const $res = natives.isPedHeadtrackingEntity(p0, p1);
    return $res;
}
hashes['0xCD17B554996A8D9E'] = function(p0, p1) {
    const $res = natives.setPedPrimaryLookat(p0, p1);
    return $res;
}
hashes['0x78C4E9961DB3EB5B'] = function(p0, p1) {
    const $res = natives.setPedClothPinFrames(p0, p1);
    return $res;
}
hashes['0x82A3D6D9CC2CB8E3'] = function(p0, p1) {
    const $res = natives.setPedClothPackageIndex(p0, p1);
    return $res;
}
hashes['0xA660FAF550EB37E5'] = function(p0, p1) {
    const $res = natives.setPedClothProne(p0, p1);
    return $res;
}
hashes['0x1913FE4CBF41C463'] = function(p0, p1, p2) {
    const $res = natives.setPedConfigFlag(p0, p1, p2);
    return $res;
}
hashes['0xC1E8A365BF3B29F2'] = function(p0, p1, p2) {
    const $res = natives.setPedResetFlag(p0, p1, p2);
    return $res;
}
hashes['0x7EE53118C892B513'] = function(p0, p1, p2) {
    const $res = natives.getPedConfigFlag(p0, p1, p2);
    return $res;
}
hashes['0xAF9E59B1B1FBF2A0'] = function(p0, p1) {
    const $res = natives.getPedResetFlag(p0, p1);
    return $res;
}
hashes['0x0BDDB8D9EC6BCF3C'] = function(p0, p1) {
    const $res = natives.setPedGroupMemberPassengerIndex(p0, p1);
    return $res;
}
hashes['0x6B7A646C242A7059'] = function(p0, p1) {
    const $res = natives.setPedCanEvasiveDive(p0, p1);
    return $res;
}
hashes['0x414641C26E105898'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument evadingEntity should be an array');
    const $res = natives.isPedEvasiveDiving(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x96A05E4FB321B1BA'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPedShootsAtCoord(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xE163A4BCE4DE6F11'] = function(p0, p1) {
    const $res = natives.setPedModelIsSuppressed(p0, p1);
    return $res;
}
hashes['0xB47BD05FA66B40CF'] = function() {
    const $res = natives.stopAnyPedModelBeingSuppressed();
    return $res;
}
hashes['0x638C03B0F9878F57'] = function(p0, p1) {
    const $res = natives.setPedCanBeTargetedWhenInjured(p0, p1);
    return $res;
}
hashes['0x7FB17BA2E7DECA5B'] = function(p0, p1) {
    const $res = natives.setPedGeneratesDeadBodyEvents(p0, p1);
    return $res;
}
hashes['0xE43A13C9E4CCCBCF'] = function(p0, p1) {
    const $res = natives.blockPedFromGeneratingDeadBodyEventsWhenDead(p0, p1);
    return $res;
}
hashes['0x3E9679C1DFCF422C'] = function(p0, p1) {
    const $res = natives.setPedWillOnlyAttackWantedPlayer(p0, p1);
    return $res;
}
hashes['0xDF993EE5E90ABA25'] = function(p0, p1) {
    const $res = natives.setPedCanRagdollFromPlayerImpact(p0, p1);
    return $res;
}
hashes['0x54C7C4A94367717E'] = function(p0, p1, p2, p3) {
    const $res = natives.givePedHelmet(p0, p1, p2, p3);
    return $res;
}
hashes['0xA7B2458D0AD6DED8'] = function(p0, p1) {
    const $res = natives.removePedHelmet(p0, p1);
    return $res;
}
hashes['0x14590DDBEDB1EC85'] = function(p0) {
    const $res = natives.isPedTakingOffHelmet(p0);
    return $res;
}
hashes['0x560A43136EB58105'] = function(p0, p1) {
    const $res = natives.setPedHelmet(p0, p1);
    return $res;
}
hashes['0xC0E78D5C2CE3EB25'] = function(p0, p1) {
    const $res = natives.setPedHelmetFlag(p0, p1);
    return $res;
}
hashes['0x26D83693ED99291C'] = function(p0, p1, p2) {
    const $res = natives.setPedHelmetPropIndex(p0, p1, p2);
    return $res;
}
hashes['0x3F7325574E41B44D'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedHelmetVisorPropIndices(p0, p1, p2, p3);
    return $res;
}
hashes['0xB9496CE47546DB2C'] = function(p0) {
    const $res = natives.isPedHelmetVisorUp(p0);
    return $res;
}
hashes['0xF1550C4BD22582E2'] = function(p0, p1) {
    const $res = natives.setPedHelmetTextureIndex(p0, p1);
    return $res;
}
hashes['0xF33BDFE19B309B19'] = function(p0) {
    const $res = natives.isPedWearingHelmet(p0);
    return $res;
}
hashes['0x687C0B594907D2E8'] = function(p0) {
    const $res = natives.clearPedStoredHatProp(p0);
    return $res;
}
hashes['0x451294E859ECC018'] = function(p0) {
    const $res = natives.getPedHelmetStoredHatPropIndex(p0);
    return $res;
}
hashes['0x9D728C1E12BF5518'] = function(p0) {
    const $res = natives.getPedHelmetStoredHatTexIndex(p0);
    return $res;
}
hashes['0xF2385935BFFD4D92'] = function(p0) {
    const $res = natives.isCurrentHeadPropAHelmet(p0);
    return $res;
}
hashes['0x332B562EEDA62399'] = function(p0, p1) {
    const $res = natives.setPedToLoadCover(p0, p1);
    return $res;
}
hashes['0xCB7553CDCEF4A735'] = function(p0, p1) {
    const $res = natives.setPedCanCowerInCover(p0, p1);
    return $res;
}
hashes['0xC514825C507E3736'] = function(p0, p1) {
    const $res = natives.setPedCanPeekInCover(p0, p1);
    return $res;
}
hashes['0x94D94BF1A75AED3D'] = function(p0, p1) {
    const $res = natives.setPedPlaysHeadOnHornAnimWhenDiesInVehicle(p0, p1);
    return $res;
}
hashes['0xC396F5B86FF9FEBD'] = function(p0, p1) {
    const $res = natives.setPedLegIkMode(p0, p1);
    return $res;
}
hashes['0x0A986918B102B448'] = function(p0, p1) {
    const $res = natives.setPedMotionBlur(p0, p1);
    return $res;
}
hashes['0xED7F7EFE9FABF340'] = function(p0, p1) {
    const $res = natives.setPedCanSwitchWeapon(p0, p1);
    return $res;
}
hashes['0xEEB64139BA29A7CF'] = function(p0, p1) {
    const $res = natives.setPedDiesInstantlyInWater(p0, p1);
    return $res;
}
hashes['0x1A330D297AAC6BC1'] = function(p0, p1) {
    const $res = natives.setLadderClimbInputState(p0, p1);
    return $res;
}
hashes['0xC158D28142A34608'] = function(p0) {
    const $res = natives.stopPedWeaponFiringWhenDropped(p0);
    return $res;
}
hashes['0x5917BBA32D06C230'] = function(p0, p1) {
    const $res = natives.setScriptedAnimSeatOffset(p0, p1);
    return $res;
}
hashes['0x4D9CA1009AFBD057'] = function(p0, p1) {
    const $res = natives.setPedCombatMovement(p0, p1);
    return $res;
}
hashes['0xDEA92412FCAEB3F5'] = function(p0) {
    const $res = natives.getPedCombatMovement(p0);
    return $res;
}
hashes['0xC7622C0D36B2FDA8'] = function(p0, p1) {
    const $res = natives.setPedCombatAbility(p0, p1);
    return $res;
}
hashes['0x3C606747B23E497B'] = function(p0, p1) {
    const $res = natives.setPedCombatRange(p0, p1);
    return $res;
}
hashes['0xF9D9F7F2DB8E2FA0'] = function(p0) {
    const $res = natives.getPedCombatRange(p0);
    return $res;
}
hashes['0x9F7794730795E019'] = function(p0, p1, p2) {
    const $res = natives.setPedCombatAttributes(p0, p1, p2);
    return $res;
}
hashes['0x0703B9079823DA4A'] = function(p0, p1) {
    const $res = natives.setPedTargetLossResponse(p0, p1);
    return $res;
}
hashes['0xDCCA191DF9980FD7'] = function(p0) {
    const $res = natives.isPedPerformingMeleeAction(p0);
    return $res;
}
hashes['0xFD4CCDBCC59941B7'] = function(p0) {
    const $res = natives.isPedPerformingStealthKill(p0);
    return $res;
}
hashes['0xEBD0EDBA5BE957CF'] = function(p0) {
    const $res = natives.isPedPerformingACounterAttack(p0);
    return $res;
}
hashes['0x863B23EFDE9C5DF2'] = function(p0) {
    const $res = natives.isPedBeingStealthKilled(p0);
    return $res;
}
hashes['0x18A3E9EE1297FD39'] = function(p0) {
    const $res = natives.getMeleeTargetForPed(p0);
    return $res;
}
hashes['0xF9800AA1A771B000'] = function(p0) {
    const $res = natives.wasPedKilledByStealth(p0);
    return $res;
}
hashes['0x7F08E26039C7347C'] = function(p0) {
    const $res = natives.wasPedKilledByTakedown(p0);
    return $res;
}
hashes['0x61767F73EACEED21'] = function(p0) {
    const $res = natives.wasPedKnockedOut(p0);
    return $res;
}
hashes['0x70A2D1137C8ED7C9'] = function(p0, p1, p2) {
    const $res = natives.setPedFleeAttributes(p0, p1, p2);
    return $res;
}
hashes['0xA549131166868ED3'] = function(p0, p1) {
    const $res = natives.setPedCowerHash(p0, p1);
    return $res;
}
hashes['0x2016C603D6B8987C'] = function(p0, p1) {
    const $res = natives.setPedSteersAroundDeadBodies(p0, p1);
    return $res;
}
hashes['0x46F2193B3AD1D891'] = function(p0, p1) {
    const $res = natives.setPedSteersAroundPeds(p0, p1);
    return $res;
}
hashes['0x1509C089ADC208BF'] = function(p0, p1) {
    const $res = natives.setPedSteersAroundObjects(p0, p1);
    return $res;
}
hashes['0xEB6FB9D48DDE23EC'] = function(p0, p1) {
    const $res = natives.setPedSteersAroundVehicles(p0, p1);
    return $res;
}
hashes['0xA9B61A329BFDCBEA'] = function(p0, p1) {
    const $res = natives.setPedIsAvoidedByOthers(p0, p1);
    return $res;
}
hashes['0x570389D1C3DE3C6B'] = function(p0) {
    const $res = natives.setPedIncreasedAvoidanceRadius(p0);
    return $res;
}
hashes['0x576594E8D64375E2'] = function(p0, p1) {
    const $res = natives.setPedBlocksPathingWhenDead(p0, p1);
    return $res;
}
hashes['0xA52D5247A4227E14'] = function(p0) {
    const $res = natives.setPedNoTimeDelayBeforeShot(p0);
    return $res;
}
hashes['0x083961498679DC9F'] = function(p0, p1, p2, p3) {
    const $res = natives.isAnyPedNearPoint(p0, p1, p2, p3);
    return $res;
}
hashes['0x2208438012482A1A'] = function(p0, p1, p2) {
    const $res = natives.forcePedAiAndAnimationUpdate(p0, p1, p2);
    return $res;
}
hashes['0xFCF37A457CB96DC0'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isPedHeadingTowardsPosition(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x7D7A2E43E74E2EB8'] = function(p0) {
    const $res = natives.requestPedVisibilityTracking(p0);
    return $res;
}
hashes['0x2BC338A7B21F4608'] = function(p0, p1) {
    const $res = natives.requestPedVehicleVisibilityTracking(p0, p1);
    return $res;
}
hashes['0xCD018C591F94CB43'] = function(p0, p1) {
    const $res = natives.requestPedRestrictedVehicleVisibilityTracking(p0, p1);
    return $res;
}
hashes['0x75BA1CB3B7D40CAF'] = function(p0, p1) {
    const $res = natives.requestPedUseSmallBboxVisibilityTracking(p0, p1);
    return $res;
}
hashes['0x91C8E617F64188AC'] = function(p0) {
    const $res = natives.isTrackedPedVisible(p0);
    return $res;
}
hashes['0x511F1A683387C7E2'] = function(p0) {
    const $res = natives.getTrackedPedPixelcount(p0);
    return $res;
}
hashes['0x4C5E1F087CD10BB7'] = function(p0) {
    const $res = natives.isPedTracked(p0);
    return $res;
}
hashes['0x8507BCB710FA6DC0'] = function(p0, p1) {
    const $res = natives.hasPedReceivedEvent(p0, p1);
    return $res;
}
hashes['0x6CD5A433374D4CFB'] = function(p0, p1) {
    const $res = natives.canPedSeeHatedPed(p0, p1);
    return $res;
}
hashes['0x9C6A6C19B6C0C496'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.canPedShuffleToOrFromTurretSeat(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x2DFC81C9B9608549'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.canPedShuffleToOrFromExtraSeat(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x3F428D08BE5AAE31'] = function(p0, p1) {
    const $res = natives.getPedBoneIndex(p0, p1);
    return $res;
}
hashes['0x2057EF813397A772'] = function(p0, p1) {
    const $res = natives.getPedRagdollBoneIndex(p0, p1);
    return $res;
}
hashes['0xBF29516833893561'] = function(p0, p1) {
    const $res = natives.setPedEnveffScale(p0, p1);
    return $res;
}
hashes['0x9C14D30395A51A3C'] = function(p0) {
    const $res = natives.getPedEnveffScale(p0);
    return $res;
}
hashes['0xD2C5AA0C0E8D0F1E'] = function(p0, p1) {
    const $res = natives.setEnablePedEnveffScale(p0, p1);
    return $res;
}
hashes['0x110F526AB784111F'] = function(p0, p1) {
    const $res = natives.setPedEnveffCpvAdd(p0, p1);
    return $res;
}
hashes['0xD69411AA0CEBF9E9'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedEnveffColorModulator(p0, p1, p2, p3);
    return $res;
}
hashes['0x4E90D746056E273D'] = function(p0, p1) {
    const $res = natives.setPedEmissiveScale(p0, p1);
    return $res;
}
hashes['0x1461B28A06717D68'] = function(p0) {
    const $res = natives.getPedEmissiveScale(p0);
    return $res;
}
hashes['0x81AA517FBBA05D39'] = function(p0) {
    const $res = natives.isPedShaderReady(p0);
    return $res;
}
hashes['0xE906EC930F5FE7C8'] = function(p0, p1) {
    const $res = natives.setPedEnableCrewEmblem(p0, p1);
    return $res;
}
hashes['0x1216E0BFA72CC703'] = function(p0, p1) {
    const $res = natives.requestRagdollBoundsUpdate(p0, p1);
    return $res;
}
hashes['0x2B5AA717A181FB4C'] = function(p0, p1) {
    const $res = natives.setPedAoBlobRendering(p0, p1);
    return $res;
}
hashes['0xB8B52E498014F5B0'] = function(p0) {
    const $res = natives.isPedSheltered(p0);
    return $res;
}
hashes['0x8C18E0F9080ADD73'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.createSynchronizedScene(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x62EC273D00187DCA'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.createSynchronizedSceneAtMapObject(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x25D39B935A038A26'] = function(p0) {
    const $res = natives.isSynchronizedSceneRunning(p0);
    return $res;
}
hashes['0x6ACF6B7225801CD7'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setSynchronizedSceneOrigin(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x734292F4F0ABF6D0'] = function(p0, p1) {
    const $res = natives.setSynchronizedScenePhase(p0, p1);
    return $res;
}
hashes['0xE4A310B1D7FA73CC'] = function(p0) {
    const $res = natives.getSynchronizedScenePhase(p0);
    return $res;
}
hashes['0xB6C49F8A5E295A5D'] = function(p0, p1) {
    const $res = natives.setSynchronizedSceneRate(p0, p1);
    return $res;
}
hashes['0xD80932D577274D40'] = function(p0) {
    const $res = natives.getSynchronizedSceneRate(p0);
    return $res;
}
hashes['0xD9A897A4C6C2974F'] = function(p0, p1) {
    const $res = natives.setSynchronizedSceneLooped(p0, p1);
    return $res;
}
hashes['0x62522002E0C391BA'] = function(p0) {
    const $res = natives.isSynchronizedSceneLooped(p0);
    return $res;
}
hashes['0x394B9CD12435C981'] = function(p0, p1) {
    const $res = natives.setSynchronizedSceneHoldLastFrame(p0, p1);
    return $res;
}
hashes['0x7F2F4F13AC5257EF'] = function(p0) {
    const $res = natives.isSynchronizedSceneHoldLastFrame(p0);
    return $res;
}
hashes['0x272E4723B56A3B96'] = function(p0, p1, p2) {
    const $res = natives.attachSynchronizedSceneToEntity(p0, p1, p2);
    return $res;
}
hashes['0x6D38F1F04CBB37EA'] = function(p0) {
    const $res = natives.detachSynchronizedScene(p0);
    return $res;
}
hashes['0xCD9CC7E200A52A6F'] = function(p0) {
    const $res = natives.takeOwnershipOfSynchronizedScene(p0);
    return $res;
}
hashes['0xF28965D04F570DCA'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.forcePedMotionState(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xF60165E1D2C5370B'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument speedX should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument speedY should be an array');
    const $res = natives.getPedCurrentMoveBlendRatio(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    return $res[0];
}
hashes['0x433083750C5E064A'] = function(p0, p1) {
    const $res = natives.setPedMaxMoveBlendRatio(p0, p1);
    return $res;
}
hashes['0x01A898D26E2333DD'] = function(p0, p1) {
    const $res = natives.setPedMinMoveBlendRatio(p0, p1);
    return $res;
}
hashes['0x085BF80FA50A39D1'] = function(p0, p1) {
    const $res = natives.setPedMoveRateOverride(p0, p1);
    return $res;
}
hashes['0x0B3E35AC043707D9'] = function(p0, p1) {
    const $res = natives.setPedMoveRateInWaterOverride(p0, p1);
    return $res;
}
hashes['0x46B05BCAE43856B0'] = function(p0, p1) {
    const $res = natives.pedHasSexinessFlagSet(p0, p1);
    return $res;
}
hashes['0xCFF869CBFA210D82'] = function(p0, p1) {
    const $res = natives.getPedNearbyVehicles(p0, p1);
    return $res;
}
hashes['0x23F8F5FC7E8C4A6B'] = function(p0, p1, p2) {
    const $res = natives.getPedNearbyPeds(p0, p1, p2);
    return $res;
}
hashes['0x7350823473013C02'] = function(p0) {
    const $res = natives.haveAllStreamingRequestsCompleted(p0);
    return $res;
}
hashes['0x00E73468D085F745'] = function(p0) {
    const $res = natives.isPedUsingActionMode(p0);
    return $res;
}
hashes['0xD75ACCF5E0FB5367'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedUsingActionMode(p0, p1, p2, p3);
    return $res;
}
hashes['0x781DE8FA214E87D2'] = function(p0, p1) {
    const $res = natives.setMovementModeOverride(p0, p1);
    return $res;
}
hashes['0x364DF566EC833DE2'] = function(p0, p1) {
    const $res = natives.setPedCapsule(p0, p1);
    return $res;
}
hashes['0x4462658788425076'] = function(p0) {
    const $res = natives.registerPedheadshot(p0);
    return $res;
}
hashes['0xBA8805A1108A2515'] = function(p0) {
    const $res = natives.registerPedheadshotHires(p0);
    return $res;
}
hashes['0x953563CE563143AF'] = function(p0) {
    const $res = natives.registerPedheadshotTransparent(p0);
    return $res;
}
hashes['0x96B1361D9B24C2FF'] = function(p0) {
    const $res = natives.unregisterPedheadshot(p0);
    return $res;
}
hashes['0xA0A9668F158129A2'] = function(p0) {
    const $res = natives.isPedheadshotValid(p0);
    return $res;
}
hashes['0x7085228842B13A67'] = function(p0) {
    const $res = natives.isPedheadshotReady(p0);
    return $res;
}
hashes['0xDB4EACD4AD0A5D6B'] = function(p0) {
    const $res = natives.getPedheadshotTxdString(p0);
    return $res;
}
hashes['0xF0DAEF2F545BEE25'] = function(p0) {
    const $res = natives.requestPedheadshotImgUpload(p0);
    return $res;
}
hashes['0x5D517B27CF6ECD04'] = function(p0) {
    const $res = natives.releasePedheadshotImgUpload(p0);
    return $res;
}
hashes['0xEBB376779A760AA8'] = function() {
    const $res = natives.isPedheadshotImgUploadAvailable();
    return $res;
}
hashes['0x876928DDDFCCC9CD'] = function() {
    const $res = natives.hasPedheadshotImgUploadFailed();
    return $res;
}
hashes['0xE8A169E666CBC541'] = function() {
    const $res = natives.hasPedheadshotImgUploadSucceeded();
    return $res;
}
hashes['0xC1F6EBF9A3D55538'] = function(p0, p1) {
    const $res = natives.setPedHeatscaleOverride(p0, p1);
    return $res;
}
hashes['0x600048C60D5C2C51'] = function(p0) {
    const $res = natives.disablePedHeatscaleOverride(p0);
    return $res;
}
hashes['0x2DF9038C90AD5264'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.spawnpointsStartSearch(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xB2AFF10216DEFA2F'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.spawnpointsStartSearchInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xFEE4A5459472A9F8'] = function() {
    const $res = natives.spawnpointsCancelSearch();
    return $res;
}
hashes['0x3C67506996001F5E'] = function() {
    const $res = natives.spawnpointsIsSearchActive();
    return $res;
}
hashes['0xA586FBEB32A53DBB'] = function() {
    const $res = natives.spawnpointsIsSearchComplete();
    return $res;
}
hashes['0xF445DE8DA80A1792'] = function() {
    const $res = natives.spawnpointsIsSearchFailed();
    return $res;
}
hashes['0xA635C11B8C44AFC2'] = function() {
    const $res = natives.spawnpointsGetNumSearchResults();
    return $res;
}
hashes['0x280C7E3AC7F56E90'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument x should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument y should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument z should be an array');
    const $res = natives.spawnpointsGetSearchResult(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0xB782F8238512BAD5'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.spawnpointsGetSearchResultFlags(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xC32779C16FCEECD9'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.setIkTarget(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xED3C76ADFA6D07C4'] = function(p0) {
    const $res = natives.forceInstantLegIkSetup(p0);
    return $res;
}
hashes['0x290E2780BB7AA598'] = function(p0) {
    const $res = natives.requestActionModeAsset(p0);
    return $res;
}
hashes['0xE4B5F4BF2CB24E65'] = function(p0) {
    const $res = natives.hasActionModeAssetLoaded(p0);
    return $res;
}
hashes['0x13E940F88470FA51'] = function(p0) {
    const $res = natives.removeActionModeAsset(p0);
    return $res;
}
hashes['0x2A0A62FCDEE16D4F'] = function(p0) {
    const $res = natives.requestStealthModeAsset(p0);
    return $res;
}
hashes['0xE977FC5B08AF3441'] = function(p0) {
    const $res = natives.hasStealthModeAssetLoaded(p0);
    return $res;
}
hashes['0x9219857D21F0E842'] = function(p0) {
    const $res = natives.removeStealthModeAsset(p0);
    return $res;
}
hashes['0xDC2C5C242AAC342B'] = function(p0, p1) {
    const $res = natives.setPedLodMultiplier(p0, p1);
    return $res;
}
hashes['0xE861D0B05C7662B8'] = function(p0, p1, p2) {
    const $res = natives.setPedCanLosePropsOnDamage(p0, p1, p2);
    return $res;
}
hashes['0x129466ED55140F8D'] = function(p0, p1) {
    const $res = natives.setForceFootstepUpdate(p0, p1);
    return $res;
}
hashes['0xCB968B53FC7F916D'] = function(p0, p1, p2, p3) {
    const $res = natives.setForceStepType(p0, p1, p2, p3);
    return $res;
}
hashes['0x68772DB2B2526F9F'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isAnyHostilePedNearPoint(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x820E9892A77E97CD'] = function(p0, p1) {
    const $res = natives.setPedCanPlayInCarIdles(p0, p1);
    return $res;
}
hashes['0x06087579E7AA85A9'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.isTargetPedInPerceptionArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xD8C3BE3EE94CAF2D'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPopControlSphereThisFrame(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xD33DAA36272177C4'] = function(p0) {
    const $res = natives.forceZeroMassInCollisions(p0);
    return $res;
}
hashes['0x711794453CFD692B'] = function(p0, p1) {
    const $res = natives.setDisableHighFallDeath(p0, p1);
    return $res;
}
hashes['0x83A169EABCDB10A2'] = function(p0, p1) {
    const $res = natives.setPedPhonePaletteIdx(p0, p1);
    return $res;
}
hashes['0x288DF530C92DAD6F'] = function(p0, p1) {
    const $res = natives.setPedSteerBias(p0, p1);
    return $res;
}
hashes['0x3795688A307E1EB6'] = function(p0) {
    const $res = natives.isPedSwitchingWeapon(p0);
    return $res;
}
hashes['0x0F62619393661D6E'] = function(p0, p1, p2) {
    const $res = natives.setPedTreatedAsFriendly(p0, p1, p2);
    return $res;
}
hashes['0xDFE68C4B787E1BFB'] = function(p0) {
    const $res = natives.setDisablePedMapCollision(p0);
    return $res;
}
hashes['0xEE2476B9EE4A094F'] = function(p0, p1) {
    const $res = natives.enableMpLight(p0, p1);
    return $res;
}
hashes['0x88274C11CF0D866D'] = function(p0) {
    const $res = natives.getMpLightEnabled(p0);
    return $res;
}
hashes['0x637822DC2AFEEBF8'] = function(p0) {
    const $res = natives.clearCoverPointForPed(p0);
    return $res;
}
hashes['0xFAB944D4D481ACCB'] = function(p0, p1) {
    const $res = natives.setAllowStuntJumpCamera(p0, p1);
    return $res;
}
hashes['0xE832D760399EB220'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16) {
    const $res = natives.addRope(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);
    return $res;
}
hashes['0x52B4829281364649'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument ropeId should be an array');
    const $res = natives.deleteRope();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xAA5D6B1888E4DB20'] = function(p0) {
    const $res = natives.deleteChildRope(p0);
    return $res;
}
hashes['0xFD5448BE3111ED96'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument ropeId should be an array');
    const $res = natives.doesRopeExist();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xA1AE736541B0FCA3'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument ropeId should be an array');
    const $res = natives.ropeDrawEnabled(p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xF159A63806BB5BA8'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument ropeId should be an array');
    const $res = natives.ropeDrawShadowEnabled(p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xCBB203C04D1ABD27'] = function(p0, p1) {
    const $res = natives.loadRopeData(p0, p1);
    return $res;
}
hashes['0x2B320CF14146B69A'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.pinRopeVertex(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x4B5AE2EEE4A8F180'] = function(p0, p1) {
    const $res = natives.unpinRopeVertex(p0, p1);
    return $res;
}
hashes['0x3655F544CD30F0B5'] = function(p0) {
    const $res = natives.getRopeVertexCount(p0);
    return $res;
}
hashes['0x3D95EC8B6D940AC3'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.attachEntitiesToRope(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0x4B490A6832559A65'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.attachRopeToEntity(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xBCF3026912A8647D'] = function(p0, p1) {
    const $res = natives.detachRopeFromEntity(p0, p1);
    return $res;
}
hashes['0xC8D667EE52114ABA'] = function(p0) {
    const $res = natives.ropeSetUpdatePinverts(p0);
    return $res;
}
hashes['0xDC57A637A20006ED'] = function(p0, p1) {
    const $res = natives.ropeSetUpdateOrder(p0, p1);
    return $res;
}
hashes['0x36CCB9BE67B970FD'] = function(p0, p1) {
    const $res = natives.ropeSetSmoothReelin(p0, p1);
    return $res;
}
hashes['0x84DE3B5FB3E666F0'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument ropeId should be an array');
    const $res = natives.isRopeAttachedAtBothEnds();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x21BB0FBD3E217C2D'] = function(p0) {
    const $res = natives.getRopeLastVertexCoord(p0);
    return new mp.Vector3($res);
}
hashes['0xEA61CA8E80F09E4D'] = function(p0, p1) {
    const $res = natives.getRopeVertexCoord(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x1461C72C889E343E'] = function(p0) {
    const $res = natives.startRopeWinding(p0);
    return $res;
}
hashes['0xCB2D4AB84A19AA7C'] = function(p0) {
    const $res = natives.stopRopeWinding(p0);
    return $res;
}
hashes['0x538D1179EC1AA9A9'] = function(p0) {
    const $res = natives.startRopeUnwindingFront(p0);
    return $res;
}
hashes['0xFFF3A50779EFBBB3'] = function(p0) {
    const $res = natives.stopRopeUnwindingFront(p0);
    return $res;
}
hashes['0x5389D48EFA2F079A'] = function(p0) {
    const $res = natives.ropeConvertToSimple(p0);
    return $res;
}
hashes['0x9B9039DBF2D258C1'] = function() {
    const $res = natives.ropeLoadTextures();
    return $res;
}
hashes['0xF2D0E6A75CC05597'] = function() {
    const $res = natives.ropeAreTexturesLoaded();
    return $res;
}
hashes['0x6CE36C35C1AC8163'] = function() {
    const $res = natives.ropeUnloadTextures();
    return $res;
}
hashes['0x271C9D3ACA5D6409'] = function(p0) {
    const $res = natives.doesScriptOwnRope(p0);
    return $res;
}
hashes['0xBC0CE682D4D05650'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.ropeAttachVirtualBoundGeom(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0xB1B6216CA2E7B55E'] = function(p0, p1, p2) {
    const $res = natives.ropeChangeScriptOwner(p0, p1, p2);
    return $res;
}
hashes['0xB743F735C03D7810'] = function(p0, p1) {
    const $res = natives.ropeSetRefframevelocityColliderorder(p0, p1);
    return $res;
}
hashes['0x73040398DFF9A4A6'] = function(p0) {
    const $res = natives.ropeGetDistanceBetweenEnds(p0);
    return $res;
}
hashes['0xD009F759A723DB1B'] = function(p0, p1) {
    const $res = natives.ropeForceLength(p0, p1);
    return $res;
}
hashes['0xC16DE94D9BEA14A0'] = function(p0, p1) {
    const $res = natives.ropeResetLength(p0, p1);
    return $res;
}
hashes['0xE37F721824571784'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.applyImpulseToCloth(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xEEA3B200A6FEB65B'] = function(p0, p1, p2) {
    const $res = natives.setDamping(p0, p1, p2);
    return $res;
}
hashes['0x710311ADF0E20730'] = function(p0) {
    const $res = natives.activatePhysics(p0);
    return $res;
}
hashes['0xD8FA3908D7B86904'] = function(p0, p1, p2, p3) {
    const $res = natives.setCgoffset(p0, p1, p2, p3);
    return $res;
}
hashes['0x8214A4B5A7A33612'] = function(p0) {
    const $res = natives.getCgoffset(p0);
    return new mp.Vector3($res);
}
hashes['0xBE520D9761FF811F'] = function(p0) {
    const $res = natives.setCgAtBoundcenter(p0);
    return $res;
}
hashes['0x2E648D16F6E308F3'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.breakEntityGlass(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x0C112765300C7E1E'] = function(p0) {
    const $res = natives.getIsEntityAFrag(p0);
    return $res;
}
hashes['0x5CEC1A84620E7D5B'] = function(p0, p1) {
    const $res = natives.setDisableBreaking(p0, p1);
    return $res;
}
hashes['0xCC6E963682533882'] = function(p0) {
    const $res = natives.resetDisableBreaking(p0);
    return $res;
}
hashes['0x01BA3AED21C16CFB'] = function(p0, p1) {
    const $res = natives.setDisableFragDamage(p0, p1);
    return $res;
}
hashes['0x15F944730C832252'] = function(p0, p1) {
    const $res = natives.setUseKinematicPhysics(p0, p1);
    return $res;
}
hashes['0x9EBD751E5787BAF2'] = function(p0) {
    const $res = natives.setInStuntMode(p0);
    return $res;
}
hashes['0xAA6A6098851C396F'] = function(p0) {
    const $res = natives.setInArenaMode(p0);
    return $res;
}
hashes['0x43A66C31C68491C0'] = function(p0) {
    const $res = natives.getPlayerPed(p0);
    return $res;
}
hashes['0x50FAC3A3E030A6E1'] = function(p0) {
    const $res = natives.getPlayerPedScriptIndex(p0);
    return $res;
}
hashes['0x00A1CADD00108836'] = function(p0, p1) {
    const $res = natives.setPlayerModel(p0, p1);
    return $res;
}
hashes['0x048189FAC643DEEE'] = function(p0, p1, p2, p3) {
    const $res = natives.changePlayerPed(p0, p1, p2, p3);
    return $res;
}
hashes['0xE902EF951DCE178F'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument r should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument g should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument b should be an array');
    const $res = natives.getPlayerRgbColour(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0x407C7F91DDB46C16'] = function() {
    const $res = natives.getNumberOfPlayers();
    return $res;
}
hashes['0x37039302F4E0A008'] = function(p0) {
    const $res = natives.getPlayerTeam(p0);
    return $res;
}
hashes['0x0299FA38396A4940'] = function(p0, p1) {
    const $res = natives.setPlayerTeam(p0, p1);
    return $res;
}
hashes['0x1FC200409F10E6F1'] = function(p0) {
    const $res = natives.getNumberOfPlayersInTeam(p0);
    return $res;
}
hashes['0x6D0DE6A7B5DA71F8'] = function(p0) {
    const $res = natives.getPlayerName(p0);
    return $res;
}
hashes['0x085DEB493BE80812'] = function(p0) {
    const $res = natives.getWantedLevelRadius(p0);
    return $res;
}
hashes['0x0C92BA89F1AF26F8'] = function(p0) {
    const $res = natives.getPlayerWantedCentrePosition(p0);
    return new mp.Vector3($res);
}
hashes['0x520E541A97A13354'] = function(p0, p1, p2, p3) {
    if (typeof p1 != 'object') throw new Error('Argument position should be a Vector3 or an array');
    const $res = natives.setPlayerWantedCentrePosition(p0, Array.isArray(p1[0]) ? new alt.Vector3(p1[0][0], p1[0][1], p1[0][2]) : new alt.Vector3(p1[0].x, p1[0].y, p1[0].z), p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p1[0])) { p1[0][0] = $res[1].x; p1[0][1] = $res[1].y; p1[0][2] = $res[1].z }
    else { p1[0].x = $res[1].x; p1[0].y = $res[1].y; p1[0].z = $res[1].z; }
    return $res[0];
}
hashes['0xFDD179EAF45B556C'] = function(p0) {
    const $res = natives.getWantedLevelThreshold(p0);
    return $res;
}
hashes['0x39FF19C64EF7DA5B'] = function(p0, p1, p2) {
    const $res = natives.setPlayerWantedLevel(p0, p1, p2);
    return $res;
}
hashes['0x340E61DE7F471565'] = function(p0, p1, p2) {
    const $res = natives.setPlayerWantedLevelNoDrop(p0, p1, p2);
    return $res;
}
hashes['0xE0A7D1E497FFCD6F'] = function(p0, p1) {
    const $res = natives.setPlayerWantedLevelNow(p0, p1);
    return $res;
}
hashes['0xAFAF86043E5874E9'] = function(p0) {
    const $res = natives.arePlayerFlashingStarsAboutToDrop(p0);
    return $res;
}
hashes['0x0A6EB355EE14A2DB'] = function(p0) {
    const $res = natives.arePlayerStarsGreyedOut(p0);
    return $res;
}
hashes['0x7E07C78925D5FD96'] = function(p0) {
    const $res = natives.isWantedAndHasBeenSeenByCops(p0);
    return $res;
}
hashes['0xDB172424876553F4'] = function(p0, p1) {
    const $res = natives.setDispatchCopsForPlayer(p0, p1);
    return $res;
}
hashes['0x238DB2A2C23EE9EF'] = function(p0, p1) {
    const $res = natives.isPlayerWantedLevelGreater(p0, p1);
    return $res;
}
hashes['0xB302540597885499'] = function(p0) {
    const $res = natives.clearPlayerWantedLevel(p0);
    return $res;
}
hashes['0x424D4687FA1E5652'] = function(p0) {
    const $res = natives.isPlayerDead(p0);
    return $res;
}
hashes['0xFA1E2BF8B10598F9'] = function(p0) {
    const $res = natives.isPlayerPressingHorn(p0);
    return $res;
}
hashes['0x8D32347D6D4C40A2'] = function(p0, p1, p2) {
    const $res = natives.setPlayerControl(p0, p1, p2);
    return $res;
}
hashes['0xE28E54788CE8F12D'] = function(p0) {
    const $res = natives.getPlayerWantedLevel(p0);
    return $res;
}
hashes['0xAA5F02DB48D704B9'] = function(p0) {
    const $res = natives.setMaxWantedLevel(p0);
    return $res;
}
hashes['0x43286D561B72B8BF'] = function(p0) {
    const $res = natives.setPoliceRadarBlips(p0);
    return $res;
}
hashes['0x32C62AA929C2DA6A'] = function(p0, p1) {
    const $res = natives.setPoliceIgnorePlayer(p0, p1);
    return $res;
}
hashes['0x5E9564D8246B909A'] = function(p0) {
    const $res = natives.isPlayerPlaying(p0);
    return $res;
}
hashes['0x8EEDA153AD141BA4'] = function(p0, p1) {
    const $res = natives.setEveryoneIgnorePlayer(p0, p1);
    return $res;
}
hashes['0x056E0FE8534C2949'] = function(p0, p1) {
    const $res = natives.setAllRandomPedsFlee(p0, p1);
    return $res;
}
hashes['0x471D2FF42A94B4F2'] = function(p0) {
    const $res = natives.setAllRandomPedsFleeThisFrame(p0);
    return $res;
}
hashes['0xDE45D1A1EF45EE61'] = function(p0, p1) {
    const $res = natives.setAllNeutralRandomPedsFlee(p0, p1);
    return $res;
}
hashes['0xC3376F42B1FACCC6'] = function(p0) {
    const $res = natives.setAllNeutralRandomPedsFleeThisFrame(p0);
    return $res;
}
hashes['0xFAC75988A7D078D3'] = function(p0) {
    const $res = natives.setLawPedsCanAttackNonWantedPlayerThisFrame(p0);
    return $res;
}
hashes['0x596976B02B6B5700'] = function(p0, p1) {
    const $res = natives.setIgnoreLowPriorityShockingEvents(p0, p1);
    return $res;
}
hashes['0x020E5F00CDA207BA'] = function(p0) {
    const $res = natives.setWantedLevelMultiplier(p0);
    return $res;
}
hashes['0x9B0BB33B04405E7A'] = function(p0, p1) {
    const $res = natives.setWantedLevelDifficulty(p0, p1);
    return $res;
}
hashes['0xB9D0DD990DC141DD'] = function(p0) {
    const $res = natives.resetWantedLevelDifficulty(p0);
    return $res;
}
hashes['0xA72200F51875FEA4'] = function() {
    const $res = natives.getWantedLevelTimeToEscape();
    return $res;
}
hashes['0x49B856B1360C47C7'] = function(p0, p1, p2) {
    const $res = natives.setWantedLevelHiddenEscapeTime(p0, p1, p2);
    return $res;
}
hashes['0x823EC8E82BA45986'] = function(p0) {
    const $res = natives.resetWantedLevelHiddenEscapeTime(p0);
    return $res;
}
hashes['0xBF9BD71691857E48'] = function(p0) {
    const $res = natives.startFiringAmnesty(p0);
    return $res;
}
hashes['0xE9B09589827545E7'] = function(p0, p1, p2) {
    const $res = natives.reportCrime(p0, p1, p2);
    return $res;
}
hashes['0x9A987297ED8BD838'] = function(p0, p1) {
    const $res = natives.suppressCrimeThisFrame(p0, p1);
    return $res;
}
hashes['0xBC9490CA15AEA8FB'] = function(p0) {
    const $res = natives.updateWantedPositionThisFrame(p0);
    return $res;
}
hashes['0x4669B3ED80F24B4E'] = function(p0) {
    const $res = natives.suppressLosingWantedLevelIfHiddenThisFrame(p0);
    return $res;
}
hashes['0x2F41A3BAE005E5FA'] = function(p0, p1) {
    const $res = natives.allowEvasionHudIfDisablingHiddenEvasionThisFrame(p0, p1);
    return $res;
}
hashes['0xAD73CE5A09E42D12'] = function(p0) {
    const $res = natives.forceStartHiddenEvasion(p0);
    return $res;
}
hashes['0x36F1B38855F2A8DF'] = function(p0) {
    const $res = natives.suppressWitnessesCallingPoliceThisFrame(p0);
    return $res;
}
hashes['0xDC64D2C53493ED12'] = function(p0) {
    const $res = natives.reportPoliceSpottedPlayer(p0);
    return $res;
}
hashes['0xB45EFF719D8427A6'] = function(p0) {
    const $res = natives.setLawResponseDelayOverride(p0);
    return $res;
}
hashes['0x0032A6DBA562C518'] = function() {
    const $res = natives.resetLawResponseDelayOverride();
    return $res;
}
hashes['0xDE7465A27D403C06'] = function(p0) {
    const $res = natives.canPlayerStartMission(p0);
    return $res;
}
hashes['0x908CBECC2CAA3690'] = function(p0) {
    const $res = natives.isPlayerReadyForCutscene(p0);
    return $res;
}
hashes['0x7912F7FC4F6264B6'] = function(p0, p1) {
    const $res = natives.isPlayerTargettingEntity(p0, p1);
    return $res;
}
hashes['0x13EDE1A5DBF797C9'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument entity should be an array');
    const $res = natives.getPlayerTargetEntity(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x2E397FD2ECD37C87'] = function(p0) {
    const $res = natives.isPlayerFreeAiming(p0);
    return $res;
}
hashes['0x3C06B5C839B38F7B'] = function(p0, p1) {
    const $res = natives.isPlayerFreeAimingAtEntity(p0, p1);
    return $res;
}
hashes['0x2975C866E6713290'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument entity should be an array');
    const $res = natives.getEntityPlayerIsFreeAimingAt(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x29961D490E5814FD'] = function(p0, p1) {
    const $res = natives.setPlayerLockonRangeOverride(p0, p1);
    return $res;
}
hashes['0x6E8834B52EC20C77'] = function(p0, p1) {
    const $res = natives.setPlayerCanDoDriveBy(p0, p1);
    return $res;
}
hashes['0xD5E460AD7020A246'] = function(p0, p1) {
    const $res = natives.setPlayerCanBeHassledByGangs(p0, p1);
    return $res;
}
hashes['0xD465A8599DFF6814'] = function(p0, p1) {
    const $res = natives.setPlayerCanUseCover(p0, p1);
    return $res;
}
hashes['0x462E0DB9B137DC5F'] = function() {
    const $res = natives.getMaxWantedLevel();
    return $res;
}
hashes['0x78CFE51896B6B8A4'] = function(p0) {
    const $res = natives.isPlayerTargettingAnything(p0);
    return $res;
}
hashes['0xA01B8075D8B92DF4'] = function(p0, p1) {
    const $res = natives.setPlayerSprint(p0, p1);
    return $res;
}
hashes['0xA6F312FCCE9C1DFE'] = function(p0) {
    const $res = natives.resetPlayerStamina(p0);
    return $res;
}
hashes['0xA352C1B864CAFD33'] = function(p0, p1) {
    const $res = natives.restorePlayerStamina(p0, p1);
    return $res;
}
hashes['0x3F9F16F8E65A7ED7'] = function(p0) {
    const $res = natives.getPlayerSprintStaminaRemaining(p0);
    return $res;
}
hashes['0x1885BC9B108B4C99'] = function(p0) {
    const $res = natives.getPlayerSprintTimeRemaining(p0);
    return $res;
}
hashes['0xA1FCF8E6AF40B731'] = function(p0) {
    const $res = natives.getPlayerUnderwaterTimeRemaining(p0);
    return $res;
}
hashes['0xA0D3E4F7AAFB7E78'] = function(p0, p1) {
    const $res = natives.setPlayerUnderwaterBreathPercentRemaining(p0, p1);
    return $res;
}
hashes['0x0D127585F77030AF'] = function(p0) {
    const $res = natives.getPlayerGroup(p0);
    return $res;
}
hashes['0x92659B4CE1863CB3'] = function(p0) {
    const $res = natives.getPlayerMaxArmour(p0);
    return $res;
}
hashes['0x49C32D60007AFA47'] = function(p0) {
    const $res = natives.isPlayerControlOn(p0);
    return $res;
}
hashes['0x7C814D2FB49F40C0'] = function() {
    const $res = natives.getAreCameraControlsDisabled();
    return $res;
}
hashes['0x8A876A65283DD7D7'] = function(p0) {
    const $res = natives.isPlayerScriptControlOn(p0);
    return $res;
}
hashes['0x95E8F73DC65EFB9C'] = function(p0) {
    const $res = natives.isPlayerClimbing(p0);
    return $res;
}
hashes['0x388A47C51ABDAC8E'] = function(p0, p1) {
    const $res = natives.isPlayerBeingArrested(p0, p1);
    return $res;
}
hashes['0x2D03E13C460760D6'] = function(p0) {
    const $res = natives.resetPlayerArrestState(p0);
    return $res;
}
hashes['0xB6997A7EB3F5C8C0'] = function() {
    const $res = natives.getPlayersLastVehicle();
    return $res;
}
hashes['0xA5EDC40EF369B48D'] = function() {
    const $res = natives.getPlayerIndex();
    return $res;
}
hashes['0x41BD2A6B006AF756'] = function(p0) {
    const $res = natives.intToPlayerindex(p0);
    return $res;
}
hashes['0x9EC6603812C24710'] = function(p0) {
    const $res = natives.intToParticipantindex(p0);
    return $res;
}
hashes['0x5D35ECF3A81A0EE0'] = function(p0) {
    const $res = natives.getTimeSincePlayerHitVehicle(p0);
    return $res;
}
hashes['0xE36A25322DC35F42'] = function(p0) {
    const $res = natives.getTimeSincePlayerHitPed(p0);
    return $res;
}
hashes['0xD559D2BE9E37853B'] = function(p0) {
    const $res = natives.getTimeSincePlayerDroveOnPavement(p0);
    return $res;
}
hashes['0xDB89591E290D9182'] = function(p0) {
    const $res = natives.getTimeSincePlayerDroveAgainstTraffic(p0);
    return $res;
}
hashes['0xDCCFD3F106C36AB4'] = function(p0) {
    const $res = natives.isPlayerFreeForAmbientTask(p0);
    return $res;
}
hashes['0x4F8644AF03D0E0D6'] = function() {
    const $res = natives.playerId();
    return $res;
}
hashes['0xD80958FC74E988A6'] = function() {
    const $res = natives.playerPedId();
    return $res;
}
hashes['0xEE68096F9F37341E'] = function() {
    const $res = natives.networkPlayerIdToInt();
    return $res;
}
hashes['0xC968670BFACE42D9'] = function(p0) {
    const $res = natives.hasForceCleanupOccurred(p0);
    return $res;
}
hashes['0xBC8983F38F78ED51'] = function(p0) {
    const $res = natives.forceCleanup(p0);
    return $res;
}
hashes['0x4C68DDDDF0097317'] = function(p0, p1) {
    const $res = natives.forceCleanupForAllThreadsWithThisName(p0, p1);
    return $res;
}
hashes['0xF745B37630DF176B'] = function(p0, p1) {
    const $res = natives.forceCleanupForThreadWithThisId(p0, p1);
    return $res;
}
hashes['0x9A41CF4674A12272'] = function() {
    const $res = natives.getCauseOfMostRecentForceCleanup();
    return $res;
}
hashes['0x8026FF78F208978A'] = function(p0, p1) {
    const $res = natives.setPlayerMayOnlyEnterThisVehicle(p0, p1);
    return $res;
}
hashes['0x1DE37BBF9E9CC14A'] = function(p0) {
    const $res = natives.setPlayerMayNotEnterAnyVehicle(p0);
    return $res;
}
hashes['0xBEC7076D64130195'] = function(p0) {
    const $res = natives.giveAchievementToPlayer(p0);
    return $res;
}
hashes['0xC2AFFFDABBDC2C5C'] = function(p0, p1) {
    const $res = natives.setAchievementProgress(p0, p1);
    return $res;
}
hashes['0x1C186837D0619335'] = function(p0) {
    const $res = natives.getAchievementProgress(p0);
    return $res;
}
hashes['0x867365E111A3B6EB'] = function(p0) {
    const $res = natives.hasAchievementBeenPassed(p0);
    return $res;
}
hashes['0xF25D331DC2627BBC'] = function() {
    const $res = natives.isPlayerOnline();
    return $res;
}
hashes['0x74556E1420867ECA'] = function() {
    const $res = natives.isPlayerLoggingInNp();
    return $res;
}
hashes['0x94DD7888C10A979E'] = function(p0) {
    const $res = natives.displaySystemSigninUi(p0);
    return $res;
}
hashes['0x5D511E3867C87139'] = function() {
    const $res = natives.isSystemUiBeingDisplayed();
    return $res;
}
hashes['0x239528EACDC3E7DE'] = function(p0, p1) {
    const $res = natives.setPlayerInvincible(p0, p1);
    return $res;
}
hashes['0xB721981B2B939E07'] = function(p0) {
    const $res = natives.getPlayerInvincible(p0);
    return $res;
}
hashes['0xDCC07526B8EC45AF'] = function(p0) {
    const $res = natives.getPlayerDebugInvincible(p0);
    return $res;
}
hashes['0x6BC97F4F4BB3C04B'] = function(p0, p1) {
    const $res = natives.setPlayerInvincibleButHasReactions(p0, p1);
    return $res;
}
hashes['0xCAC57395B151135F'] = function(p0, p1) {
    const $res = natives.setPlayerCanCollectDroppedMoney(p0, p1);
    return $res;
}
hashes['0xF3AC26D3CC576528'] = function(p0, p1) {
    const $res = natives.removePlayerHelmet(p0, p1);
    return $res;
}
hashes['0x3C49C870E66F0A28'] = function(p0, p1) {
    const $res = natives.givePlayerRagdollControl(p0, p1);
    return $res;
}
hashes['0x5C8B2F450EE4328E'] = function(p0, p1) {
    const $res = natives.setPlayerLockon(p0, p1);
    return $res;
}
hashes['0xB1906895227793F3'] = function(p0) {
    const $res = natives.setPlayerTargetingMode(p0);
    return $res;
}
hashes['0x5702B917B99DB1CD'] = function(p0) {
    const $res = natives.setPlayerTargetLevel(p0);
    return $res;
}
hashes['0xB9CF1F793A9F1BF1'] = function() {
    const $res = natives.getIsUsingFpsThirdPersonCover();
    return $res;
}
hashes['0xCB645E85E97EA48B'] = function() {
    const $res = natives.getIsUsingHoodCamera();
    return $res;
}
hashes['0xF0B67A4DE6AB5F98'] = function(p0) {
    const $res = natives.clearPlayerHasDamagedAtLeastOnePed(p0);
    return $res;
}
hashes['0x20CE80B0C2BF4ACC'] = function(p0) {
    const $res = natives.hasPlayerDamagedAtLeastOnePed(p0);
    return $res;
}
hashes['0x4AACB96203D11A31'] = function(p0) {
    const $res = natives.clearPlayerHasDamagedAtLeastOneNonAnimalPed(p0);
    return $res;
}
hashes['0xE4B90F367BD81752'] = function(p0) {
    const $res = natives.hasPlayerDamagedAtLeastOneNonAnimalPed(p0);
    return $res;
}
hashes['0xCA7DC8329F0A1E9E'] = function(p0, p1) {
    const $res = natives.setAirDragMultiplierForPlayersVehicle(p0, p1);
    return $res;
}
hashes['0xA91C6F0FF7D16A13'] = function(p0, p1) {
    const $res = natives.setSwimMultiplierForPlayer(p0, p1);
    return $res;
}
hashes['0x6DB47AA77FD94E09'] = function(p0, p1) {
    const $res = natives.setRunSprintMultiplierForPlayer(p0, p1);
    return $res;
}
hashes['0x5063F92F07C2A316'] = function() {
    const $res = natives.getTimeSinceLastArrest();
    return $res;
}
hashes['0xC7034807558DDFCA'] = function() {
    const $res = natives.getTimeSinceLastDeath();
    return $res;
}
hashes['0xAEBF081FFC0A0E5E'] = function() {
    const $res = natives.assistedMovementCloseRoute();
    return $res;
}
hashes['0x8621390F0CDCFE1F'] = function() {
    const $res = natives.assistedMovementFlushRoute();
    return $res;
}
hashes['0x0FEE4F80AC44A726'] = function(p0, p1) {
    const $res = natives.setPlayerForcedAim(p0, p1);
    return $res;
}
hashes['0x75E7D505F2B15902'] = function(p0, p1) {
    const $res = natives.setPlayerForcedZoom(p0, p1);
    return $res;
}
hashes['0x7651BC64AE59E128'] = function(p0, p1) {
    const $res = natives.setPlayerForceSkipAimIntro(p0, p1);
    return $res;
}
hashes['0x5E6CC07646BBEAB8'] = function(p0, p1) {
    const $res = natives.disablePlayerFiring(p0, p1);
    return $res;
}
hashes['0xB885852C39CC265D'] = function() {
    const $res = natives.disablePlayerThrowGrenadeWhileUsingGun();
    return $res;
}
hashes['0x2E8AABFA40A84F8C'] = function(p0, p1) {
    const $res = natives.setDisableAmbientMeleeMove(p0, p1);
    return $res;
}
hashes['0x77DFCCF5948B8C71'] = function(p0, p1) {
    const $res = natives.setPlayerMaxArmour(p0, p1);
    return $res;
}
hashes['0x821FDC827D6F4090'] = function(p0, p1) {
    const $res = natives.specialAbilityActivate(p0, p1);
    return $res;
}
hashes['0xB214D570EAD7F81A'] = function(p0, p1, p2) {
    const $res = natives.setSpecialAbilityMp(p0, p1, p2);
    return $res;
}
hashes['0x17F7471EACA78290'] = function(p0, p1) {
    const $res = natives.specialAbilityDeactivateMp(p0, p1);
    return $res;
}
hashes['0xD6A953C6D1492057'] = function(p0, p1) {
    const $res = natives.specialAbilityDeactivate(p0, p1);
    return $res;
}
hashes['0x9CB5CE07A3968D5A'] = function(p0, p1) {
    const $res = natives.specialAbilityDeactivateFast(p0, p1);
    return $res;
}
hashes['0x375F0E738F861A94'] = function(p0, p1) {
    const $res = natives.specialAbilityReset(p0, p1);
    return $res;
}
hashes['0xC9A763D8FE87436A'] = function(p0, p1) {
    const $res = natives.specialAbilityChargeOnMissionFailed(p0, p1);
    return $res;
}
hashes['0x2E7B9B683481687D'] = function(p0, p1, p2, p3) {
    const $res = natives.specialAbilityChargeSmall(p0, p1, p2, p3);
    return $res;
}
hashes['0xF113E3AA9BC54613'] = function(p0, p1, p2, p3) {
    const $res = natives.specialAbilityChargeMedium(p0, p1, p2, p3);
    return $res;
}
hashes['0xF733F45FA4497D93'] = function(p0, p1, p2, p3) {
    const $res = natives.specialAbilityChargeLarge(p0, p1, p2, p3);
    return $res;
}
hashes['0xED481732DFF7E997'] = function(p0, p1, p2) {
    const $res = natives.specialAbilityChargeContinuous(p0, p1, p2);
    return $res;
}
hashes['0xB7B0870EB531D08D'] = function(p0, p1, p2, p3) {
    const $res = natives.specialAbilityChargeAbsolute(p0, p1, p2, p3);
    return $res;
}
hashes['0xA0696A65F009EE18'] = function(p0, p1, p2, p3) {
    const $res = natives.specialAbilityChargeNormalized(p0, p1, p2, p3);
    return $res;
}
hashes['0x3DACA8DDC6FD4980'] = function(p0, p1, p2) {
    const $res = natives.specialAbilityFillMeter(p0, p1, p2);
    return $res;
}
hashes['0x1D506DBBBC51E64B'] = function(p0, p1, p2) {
    const $res = natives.specialAbilityDepleteMeter(p0, p1, p2);
    return $res;
}
hashes['0x6A09D0D590A47D13'] = function(p0, p1) {
    const $res = natives.specialAbilityLock(p0, p1);
    return $res;
}
hashes['0xF145F3BE2EFA9A3B'] = function(p0, p1) {
    const $res = natives.specialAbilityUnlock(p0, p1);
    return $res;
}
hashes['0xC6017F6A6CDFA694'] = function(p0) {
    const $res = natives.isSpecialAbilityUnlocked(p0);
    return $res;
}
hashes['0x3E5F7FC85D854E15'] = function(p0, p1) {
    const $res = natives.isSpecialAbilityActive(p0, p1);
    return $res;
}
hashes['0x05A1FE504B7F2587'] = function(p0, p1) {
    const $res = natives.isSpecialAbilityMeterFull(p0, p1);
    return $res;
}
hashes['0x181EC197DAEFE121'] = function(p0, p1, p2) {
    const $res = natives.enableSpecialAbility(p0, p1, p2);
    return $res;
}
hashes['0xB1D200FE26AEF3CB'] = function(p0, p1) {
    const $res = natives.isSpecialAbilityEnabled(p0, p1);
    return $res;
}
hashes['0xA49C426ED0CA4AB7'] = function(p0) {
    const $res = natives.setSpecialAbilityMultiplier(p0);
    return $res;
}
hashes['0xFFEE8FA29AB9A18E'] = function(p0, p1) {
    const $res = natives.updateSpecialAbilityFromStat(p0, p1);
    return $res;
}
hashes['0x5FC472C501CCADB3'] = function(p0) {
    const $res = natives.getIsPlayerDrivingOnHighway(p0);
    return $res;
}
hashes['0xF10B44FD479D69F3'] = function(p0, p1) {
    const $res = natives.getIsPlayerDrivingWreckless(p0, p1);
    return $res;
}
hashes['0xDD2620B7B9D16FF1'] = function(p0, p1) {
    const $res = natives.getIsMoppingAreaFreeInFrontOfPlayer(p0, p1);
    return $res;
}
hashes['0xAD15F075A4DA0FDE'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.startPlayerTeleport(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xE23D5873C2394C61'] = function(p0) {
    const $res = natives.updatePlayerTeleport(p0);
    return $res;
}
hashes['0xC449EDED9D73009C'] = function() {
    const $res = natives.stopPlayerTeleport();
    return $res;
}
hashes['0x02B15662D7F8886F'] = function() {
    const $res = natives.isPlayerTeleportActive();
    return $res;
}
hashes['0x2F395D61F3A1F877'] = function(p0) {
    const $res = natives.getPlayerCurrentStealthNoise(p0);
    return $res;
}
hashes['0x5DB660B38DD98A31'] = function(p0, p1) {
    const $res = natives.setPlayerHealthRechargeMultiplier(p0, p1);
    return $res;
}
hashes['0x8BC515BAE4AAF8FF'] = function(p0) {
    const $res = natives.getPlayerHealthRechargeMaxPercent(p0);
    return $res;
}
hashes['0xC388A0F065F5BC34'] = function(p0, p1) {
    const $res = natives.setPlayerHealthRechargeMaxPercent(p0, p1);
    return $res;
}
hashes['0xBCB06442F7E52666'] = function(p0) {
    const $res = natives.disablePlayerHealthRecharge(p0);
    return $res;
}
hashes['0xEFD79FA81DFBA9CB'] = function(p0, p1) {
    const $res = natives.setPlayerFallDistanceToTriggerRagdollOverride(p0, p1);
    return $res;
}
hashes['0xCE07B9F7817AADA3'] = function(p0, p1) {
    const $res = natives.setPlayerWeaponDamageModifier(p0, p1);
    return $res;
}
hashes['0x2D83BC011CA14A3C'] = function(p0, p1) {
    const $res = natives.setPlayerWeaponDefenseModifier(p0, p1);
    return $res;
}
hashes['0xBCFDE9EDE4CF27DC'] = function(p0, p1) {
    const $res = natives.setPlayerWeaponMinigunDefenseModifier(p0, p1);
    return $res;
}
hashes['0x4A3DC7ECCC321032'] = function(p0, p1, p2) {
    const $res = natives.setPlayerMeleeWeaponDamageModifier(p0, p1, p2);
    return $res;
}
hashes['0xAE540335B4ABC4E2'] = function(p0, p1) {
    const $res = natives.setPlayerMeleeWeaponDefenseModifier(p0, p1);
    return $res;
}
hashes['0xA50E117CDDF82F0C'] = function(p0, p1) {
    const $res = natives.setPlayerVehicleDamageModifier(p0, p1);
    return $res;
}
hashes['0x4C60E6EFDAFF2462'] = function(p0, p1) {
    const $res = natives.setPlayerVehicleDefenseModifier(p0, p1);
    return $res;
}
hashes['0x8D768602ADEF2245'] = function(p0, p1) {
    const $res = natives.setPlayerMaxExplosiveDamage(p0, p1);
    return $res;
}
hashes['0xD821056B9ACF8052'] = function(p0, p1) {
    const $res = natives.setPlayerExplosiveDamageModifier(p0, p1);
    return $res;
}
hashes['0x31E90B8873A4CD3B'] = function(p0, p1) {
    const $res = natives.setPlayerWeaponTakedownDefenseModifier(p0, p1);
    return $res;
}
hashes['0xA3D0E54541D9A5E5'] = function(p0, p1) {
    const $res = natives.setPlayerParachuteTintIndex(p0, p1);
    return $res;
}
hashes['0x75D3F7A1B0D9B145'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument tintIndex should be an array');
    const $res = natives.getPlayerParachuteTintIndex(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xAF04C87F5DC1DF38'] = function(p0, p1) {
    const $res = natives.setPlayerReserveParachuteTintIndex(p0, p1);
    return $res;
}
hashes['0xD5A016BC3C09CF40'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument index should be an array');
    const $res = natives.getPlayerReserveParachuteTintIndex(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x93B0FB27C9A04060'] = function(p0, p1) {
    const $res = natives.setPlayerParachutePackTintIndex(p0, p1);
    return $res;
}
hashes['0x6E9C742F340CE5A2'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument tintIndex should be an array');
    const $res = natives.getPlayerParachutePackTintIndex(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x7DDAB28D31FAC363'] = function(p0) {
    const $res = natives.setPlayerHasReserveParachute(p0);
    return $res;
}
hashes['0x5DDFE2FF727F3CA3'] = function(p0) {
    const $res = natives.getPlayerHasReserveParachute(p0);
    return $res;
}
hashes['0xF401B182DBA8AF53'] = function(p0, p1) {
    const $res = natives.setPlayerCanLeaveParachuteSmokeTrail(p0, p1);
    return $res;
}
hashes['0x8217FD371A4625CF'] = function(p0, p1, p2, p3) {
    const $res = natives.setPlayerParachuteSmokeTrailColor(p0, p1, p2, p3);
    return $res;
}
hashes['0xEF56DBABD3CD4887'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument r should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument g should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument b should be an array');
    const $res = natives.getPlayerParachuteSmokeTrailColor(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0x11D5F725F0E780E0'] = function(p0, p1) {
    const $res = natives.setPlayerPhonePaletteIdx(p0, p1);
    return $res;
}
hashes['0xDB89EF50FF25FCE9'] = function(p0, p1) {
    const $res = natives.setPlayerNoiseMultiplier(p0, p1);
    return $res;
}
hashes['0xB2C1A29588A9F47C'] = function(p0, p1) {
    const $res = natives.setPlayerSneakingNoiseMultiplier(p0, p1);
    return $res;
}
hashes['0xF297383AA91DCA29'] = function(p0, p1) {
    const $res = natives.canPedHearPlayer(p0, p1);
    return $res;
}
hashes['0x477D5D63E63ECA5D'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.simulatePlayerInputGait(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x19531C47A2ABD691'] = function(p0) {
    const $res = natives.resetPlayerInputGait(p0);
    return $res;
}
hashes['0x9F343285A00B4BB6'] = function(p0, p1) {
    const $res = natives.setAutoGiveParachuteWhenEnterPlane(p0, p1);
    return $res;
}
hashes['0xD2B315B6689D537D'] = function(p0, p1) {
    const $res = natives.setAutoGiveScubaGearWhenExitVehicle(p0, p1);
    return $res;
}
hashes['0x4E9021C1FCDD507A'] = function(p0, p1) {
    const $res = natives.setPlayerStealthPerceptionModifier(p0, p1);
    return $res;
}
hashes['0x690A61A6D13583F6'] = function(p0) {
    const $res = natives.isRemotePlayerInNonClonedVehicle(p0);
    return $res;
}
hashes['0x9EDD76E87D5D51BA'] = function(p0) {
    const $res = natives.increasePlayerJumpSuppressionRange(p0);
    return $res;
}
hashes['0xC54C95DA968EC5B5'] = function(p0, p1) {
    const $res = natives.setPlayerSimulateAiming(p0, p1);
    return $res;
}
hashes['0x749FADDF97DFE930'] = function(p0, p1) {
    const $res = natives.setPlayerClothPinFrames(p0, p1);
    return $res;
}
hashes['0x9F7BBA2EA6372500'] = function(p0) {
    const $res = natives.setPlayerClothPackageIndex(p0);
    return $res;
}
hashes['0x14D913B777DFF5DA'] = function(p0) {
    const $res = natives.setPlayerClothLockCounter(p0);
    return $res;
}
hashes['0xED51733DC73AED51'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.playerAttachVirtualBound(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x1DD5897E2FA6E7C9'] = function() {
    const $res = natives.playerDetachVirtualBound();
    return $res;
}
hashes['0xD705740BB0A1CF4C'] = function(p0) {
    const $res = natives.hasPlayerBeenSpottedInStolenVehicle(p0);
    return $res;
}
hashes['0x38D28DA81E4E9BF9'] = function(p0) {
    const $res = natives.isPlayerBattleAware(p0);
    return $res;
}
hashes['0xBC0753C9CA14B506'] = function(p0, p1, p2) {
    const $res = natives.getPlayerReceivedBattleEventRecently(p0, p1, p2);
    return $res;
}
hashes['0x5006D96C995A5827'] = function(p0, p1, p2) {
    const $res = natives.extendWorldBoundaryForPlayer(p0, p1, p2);
    return $res;
}
hashes['0xDA1DF03D5A315F4E'] = function() {
    const $res = natives.resetWorldBoundaryForPlayer();
    return $res;
}
hashes['0x4EC12697209F2196'] = function(p0) {
    const $res = natives.isPlayerRidingTrain(p0);
    return $res;
}
hashes['0xD55DDFB47991A294'] = function(p0) {
    const $res = natives.hasPlayerLeftTheWorld(p0);
    return $res;
}
hashes['0xFF300C7649724A0B'] = function(p0, p1) {
    const $res = natives.setPlayerLeavePedBehind(p0, p1);
    return $res;
}
hashes['0xD9284A8C0D48352C'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPlayerParachuteVariationOverride(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x0F4CC924CF8C7B21'] = function(p0) {
    const $res = natives.clearPlayerParachuteVariationOverride(p0);
    return $res;
}
hashes['0x977DB4641F6FC3DB'] = function(p0, p1) {
    const $res = natives.setPlayerParachuteModelOverride(p0, p1);
    return $res;
}
hashes['0x0764486AEDE748DB'] = function(p0, p1) {
    const $res = natives.setPlayerReserveParachuteModelOverride(p0, p1);
    return $res;
}
hashes['0xC219887CA3E65C41'] = function(p0) {
    const $res = natives.getPlayerParachuteModelOverride(p0);
    return $res;
}
hashes['0x37FAAA68DCA9D08D'] = function(p0) {
    const $res = natives.getPlayerReserveParachuteModelOverride(p0);
    return $res;
}
hashes['0x8753997EB5F6EE3F'] = function(p0) {
    const $res = natives.clearPlayerParachuteModelOverride(p0);
    return $res;
}
hashes['0x290D248E25815AE8'] = function(p0) {
    const $res = natives.clearPlayerReserveParachuteModelOverride(p0);
    return $res;
}
hashes['0xDC80A4C2F18A2B64'] = function(p0, p1) {
    const $res = natives.setPlayerParachutePackModelOverride(p0, p1);
    return $res;
}
hashes['0x10C54E4389C12B42'] = function(p0) {
    const $res = natives.clearPlayerParachutePackModelOverride(p0);
    return $res;
}
hashes['0xC142BE3BB9CE125F'] = function(p0) {
    const $res = natives.disablePlayerVehicleRewards(p0);
    return $res;
}
hashes['0x2F7CEB6520288061'] = function(p0) {
    const $res = natives.setPlayerSpectatedVehicleRadioOverride(p0);
    return $res;
}
hashes['0x5DC40A8869C22141'] = function(p0, p1) {
    const $res = natives.setPlayerBluetoothState(p0, p1);
    return $res;
}
hashes['0x65FAEE425DE637B0'] = function(p0) {
    const $res = natives.isPlayerBluetoothEnable(p0);
    return $res;
}
hashes['0x5501B7A5CDB79D37'] = function(p0) {
    const $res = natives.disableCameraViewModeCycle(p0);
    return $res;
}
hashes['0x56105E599CAB0EFA'] = function(p0) {
    const $res = natives.getPlayerFakeWantedLevel(p0);
    return $res;
}
hashes['0x55FCC0C390620314'] = function(p0, p1, p2) {
    const $res = natives.setPlayerCanDamagePlayer(p0, p1, p2);
    return $res;
}
hashes['0x2382AB11450AE7BA'] = function(p0, p1) {
    const $res = natives.setApplyWaypointOfPlayer(p0, p1);
    return $res;
}
hashes['0x6E4361FF3E8CD7CA'] = function(p0) {
    const $res = natives.isPlayerVehicleWeaponToggledToNonHoming(p0);
    return $res;
}
hashes['0x237440E46D918649'] = function(p0) {
    const $res = natives.setPlayerVehicleWeaponToNonHoming(p0);
    return $res;
}
hashes['0xEE4EBDD2593BA844'] = function(p0, p1) {
    const $res = natives.setPlayerHomingDisabledForAllVehicleWeapons(p0, p1);
    return $res;
}
hashes['0x9097EB6D4BB9A12A'] = function(p0, p1) {
    const $res = natives.addPlayerTargetableEntity(p0, p1);
    return $res;
}
hashes['0x9F260BFB59ADBCA3'] = function(p0, p1) {
    const $res = natives.removePlayerTargetableEntity(p0, p1);
    return $res;
}
hashes['0x7BAE68775557AE0B'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setPlayerPreviousVariationData(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x7148E0F43D11F0D9'] = function() {
    const $res = natives.removeScriptFirePosition();
    return $res;
}
hashes['0x70A382ADEC069DD3'] = function(p0, p1, p2) {
    const $res = natives.setScriptFirePosition(p0, p1, p2);
    return $res;
}
hashes['0x48621C9FCA3EBD28'] = function(p0) {
    const $res = natives.replayStartEvent(p0);
    return $res;
}
hashes['0x81CBAE94390F9F89'] = function() {
    const $res = natives.replayStopEvent();
    return $res;
}
hashes['0x13B350B8AD0EEE10'] = function() {
    const $res = natives.replayCancelEvent();
    return $res;
}
hashes['0x293220DA1B46CEBC'] = function(p0, p1, p2) {
    const $res = natives.replayRecordBackForTime(p0, p1, p2);
    return $res;
}
hashes['0x208784099002BC30'] = function(p0, p1) {
    const $res = natives.replayCheckForEventThisFrame(p0, p1);
    return $res;
}
hashes['0xEB2D525B57F42B40'] = function() {
    const $res = natives.replayPreventRecordingThisFrame();
    return $res;
}
hashes['0xF854439EFBB3B583'] = function() {
    const $res = natives.replayResetEventInfo();
    return $res;
}
hashes['0xAF66DCEE6609B148'] = function() {
    const $res = natives.replayDisableCameraMovementThisFrame();
    return $res;
}
hashes['0x66972397E0757E7A'] = function(p0, p1, p2) {
    const $res = natives.recordGreatestMoment(p0, p1, p2);
    return $res;
}
hashes['0xC3AC2FFF9612AC81'] = function(p0) {
    const $res = natives.startReplayRecording(p0);
    return $res;
}
hashes['0x071A5197D6AFC8B3'] = function() {
    const $res = natives.stopReplayRecording();
    return $res;
}
hashes['0x88BB3507ED41A240'] = function() {
    const $res = natives.cancelReplayRecording();
    return $res;
}
hashes['0x644546EC5287471B'] = function() {
    const $res = natives.saveReplayRecording();
    return $res;
}
hashes['0x1897CA71995A90B4'] = function() {
    const $res = natives.isReplayRecording();
    return $res;
}
hashes['0xDF4B952F7D381B95'] = function() {
    const $res = natives.isReplayInitialized();
    return $res;
}
hashes['0x4282E08174868BE3'] = function() {
    const $res = natives.isReplayAvailable();
    return $res;
}
hashes['0x33D47E85B476ABCD'] = function(p0) {
    const $res = natives.isReplayRecordSpaceAvailable(p0);
    return $res;
}
hashes['0x7E2BD3EF6C205F09'] = function(p0, p1) {
    const $res = natives.registerEffectForReplayEditor(p0, p1);
    return $res;
}
hashes['0x95AB8B5C992C7B58'] = function() {
    const $res = natives.replaySystemHasRequestedAScriptCleanup();
    return $res;
}
hashes['0x5AD3932DAEB1E5D3'] = function() {
    const $res = natives.setScriptsHaveCleanedUpForReplaySystem();
    return $res;
}
hashes['0xE058175F8EAFE79A'] = function(p0) {
    const $res = natives.setReplaySystemPausedForSave(p0);
    return $res;
}
hashes['0x3353D13F09307691'] = function() {
    const $res = natives.replayControlShutdown();
    return $res;
}
hashes['0x49DA8145672B2725'] = function(p0) {
    const $res = natives.activateRockstarEditor(p0);
    return $res;
}
hashes['0x84B418E93894AC1C'] = function() {
    const $res = natives.savemigrationIsMpEnabled();
    return $res;
}
hashes['0x85F41F9225D08C72'] = function() {
    const $res = natives.savemigrationMpRequestAccounts();
    return $res;
}
hashes['0xC8CB5999919EA2CA'] = function() {
    const $res = natives.savemigrationMpGetAccountsStatus();
    return $res;
}
hashes['0x77A16200E18E0C55'] = function() {
    const $res = natives.savemigrationMpNumAccounts();
    return $res;
}
hashes['0xFCE2747EEF1D05FC'] = function(p0, p1) {
    const $res = natives.savemigrationMpGetAccount(p0, p1);
    return $res;
}
hashes['0xE5E9746A66359F9D'] = function() {
    const $res = natives.savemigrationMpRequestStatus();
    return $res;
}
hashes['0x690B76BD2763E068'] = function() {
    const $res = natives.savemigrationMpGetStatus();
    return $res;
}
hashes['0x6EB5F71AA68F2E8E'] = function(p0) {
    const $res = natives.requestScript(p0);
    return $res;
}
hashes['0xC90D2DCACD56184C'] = function(p0) {
    const $res = natives.setScriptAsNoLongerNeeded(p0);
    return $res;
}
hashes['0xE6CC9F3BA0FB9EF1'] = function(p0) {
    const $res = natives.hasScriptLoaded(p0);
    return $res;
}
hashes['0xFC04745FBE67C19A'] = function(p0) {
    const $res = natives.doesScriptExist(p0);
    return $res;
}
hashes['0xD62A67D26D9653E6'] = function(p0) {
    const $res = natives.requestScriptWithNameHash(p0);
    return $res;
}
hashes['0xC5BC038960E9DB27'] = function(p0) {
    const $res = natives.setScriptWithNameHashAsNoLongerNeeded(p0);
    return $res;
}
hashes['0x5F0F0C783EB16C04'] = function(p0) {
    const $res = natives.hasScriptWithNameHashLoaded(p0);
    return $res;
}
hashes['0xF86AA3C56BA31381'] = function(p0) {
    const $res = natives.doesScriptWithNameHashExist(p0);
    return $res;
}
hashes['0xC8B189ED9138BCD4'] = function(p0) {
    const $res = natives.terminateThread(p0);
    return $res;
}
hashes['0x46E9AE36D8FA6417'] = function(p0) {
    const $res = natives.isThreadActive(p0);
    return $res;
}
hashes['0x05A42BA9FC8DA96B'] = function(p0) {
    const $res = natives.getNameOfScriptWithThisId(p0);
    return $res;
}
hashes['0xDADFADA5A20143A8'] = function() {
    const $res = natives.scriptThreadIteratorReset();
    return $res;
}
hashes['0x30B4FA1C82DD4B9F'] = function() {
    const $res = natives.scriptThreadIteratorGetNextThreadId();
    return $res;
}
hashes['0xC30338E8088E2E21'] = function() {
    const $res = natives.getIdOfThisThread();
    return $res;
}
hashes['0x1090044AD1DA76FA'] = function() {
    const $res = natives.terminateThisThread();
    return $res;
}
hashes['0x2C83A9DA6BFFC4F9'] = function(p0) {
    const $res = natives.getNumberOfThreadsRunningTheScriptWithThisHash(p0);
    return $res;
}
hashes['0x442E0A7EDE4A738A'] = function() {
    const $res = natives.getThisScriptName();
    return $res;
}
hashes['0x8A1C8B1738FFE87E'] = function() {
    const $res = natives.getHashOfThisScriptName();
    return $res;
}
hashes['0x5F92A689A06620AA'] = function(p0) {
    const $res = natives.getNumberOfEvents(p0);
    return $res;
}
hashes['0x936E6168A9BCEDB5'] = function(p0, p1) {
    const $res = natives.getEventExists(p0, p1);
    return $res;
}
hashes['0xD8F66A3A60C62153'] = function(p0, p1) {
    const $res = natives.getEventAtIndex(p0, p1);
    return $res;
}
hashes['0x2902843FCD2B2D79'] = function(p0, p1, p2, p3) {
    const $res = natives.getEventData(p0, p1, p2, p3);
    return $res;
}
hashes['0x5AE99C571D5BBE5D'] = function(p0, p1, p2, p3) {
    const $res = natives.triggerScriptEvent(p0, p1, p2, p3);
    return $res;
}
hashes['0x078EBE9809CCD637'] = function() {
    const $res = natives.shutdownLoadingScreen();
    return $res;
}
hashes['0x5262CC1995D07E09'] = function(p0) {
    const $res = natives.setNoLoadingScreen(p0);
    return $res;
}
hashes['0x18C1270EA7F199BC'] = function() {
    const $res = natives.getNoLoadingScreen();
    return $res;
}
hashes['0xB1577667C3708F9B'] = function() {
    const $res = natives.commitToLoadingscreenSelction();
    return $res;
}
hashes['0x836B62713E0534CA'] = function() {
    const $res = natives.bgIsExitflagSet();
    return $res;
}
hashes['0x760910B49D2B98EA'] = function() {
    const $res = natives.bgSetExitflagResponse();
    return $res;
}
hashes['0x75B18E49607874C7'] = function(p0) {
    const $res = natives.bgStartContextHash(p0);
    return $res;
}
hashes['0x107E5CC7CA942BC1'] = function(p0) {
    const $res = natives.bgEndContextHash(p0);
    return $res;
}
hashes['0x9D5A25BADB742ACD'] = function(p0) {
    const $res = natives.bgStartContext(p0);
    return $res;
}
hashes['0xDC2BACD920D0A0DD'] = function(p0) {
    const $res = natives.bgEndContext(p0);
    return $res;
}
hashes['0x0F6F1EBBC4E1D5E6'] = function(p0, p1) {
    const $res = natives.bgDoesLaunchParamExist(p0, p1);
    return $res;
}
hashes['0x22E21FBCFC88C149'] = function(p0, p1) {
    const $res = natives.bgGetLaunchParamValue(p0, p1);
    return $res;
}
hashes['0x829CD22E043A2577'] = function(p0) {
    const $res = natives.bgGetScriptIdFromNameHash(p0);
    return $res;
}
hashes['0xA40CC53DF8E50837'] = function(p0, p1, p2, p3) {
    const $res = natives.sendTuScriptEvent(p0, p1, p2, p3);
    return $res;
}
hashes['0x40EB1EFD921822BC'] = function(p0) {
    const $res = natives.registerScriptVariable(p0);
    return $res;
}
hashes['0x340A36A700E99699'] = function(p0) {
    const $res = natives.unregisterScriptVariable(p0);
    return $res;
}
hashes['0x8E580AB902917360'] = function() {
    const $res = natives.forceCheckScriptVariables();
    return $res;
}
hashes['0x7EE9F5D83DD4F90E'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.startShapeTestLosProbe(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x377906D8A31E5586'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.startExpensiveSynchronousShapeTestLosProbe(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x052837721A854EC7'] = function(p0, p1, p2) {
    const $res = natives.startShapeTestBoundingBox(p0, p1, p2);
    return $res;
}
hashes['0xFE466162C4401D18'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.startShapeTestBox(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x37181417CE7C8900'] = function(p0, p1, p2) {
    const $res = natives.startShapeTestBound(p0, p1, p2);
    return $res;
}
hashes['0x28579D1B8F8AAC80'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.startShapeTestCapsule(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xE6AC6C45FBE83004'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.startShapeTestSweptSphere(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xFF6BE494C7987F34'] = function(p0, p1, p2, p3, p4) {
    if (typeof p0 != 'object') throw new Error('Argument pVec1 should be a Vector3 or an array');
    if (typeof p1 != 'object') throw new Error('Argument pVec2 should be a Vector3 or an array');
    const $res = natives.startShapeTestMouseCursorLosProbe(Array.isArray(p0[0]) ? new alt.Vector3(p0[0][0], p0[0][1], p0[0][2]) : new alt.Vector3(p0[0].x, p0[0].y, p0[0].z), Array.isArray(p1[0]) ? new alt.Vector3(p1[0][0], p1[0][1], p1[0][2]) : new alt.Vector3(p1[0].x, p1[0].y, p1[0].z), p2, p3, p4);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p0[0])) { p0[0][0] = $res[1].x; p0[0][1] = $res[1].y; p0[0][2] = $res[1].z }
    else { p0[0].x = $res[1].x; p0[0].y = $res[1].y; p0[0].z = $res[1].z; }
    if (Array.isArray(p1[0])) { p1[0][0] = $res[2].x; p1[0][1] = $res[2].y; p1[0][2] = $res[2].z }
    else { p1[0].x = $res[2].x; p1[0].y = $res[2].y; p1[0].z = $res[2].z; }
    return $res[0];
}
hashes['0x3D87450E15D98694'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p1)) throw new Error('Argument hit should be an array');
    if (typeof p2 != 'object') throw new Error('Argument endCoords should be a Vector3 or an array');
    if (typeof p3 != 'object') throw new Error('Argument surfaceNormal should be a Vector3 or an array');
    if (!Array.isArray(p4)) throw new Error('Argument entityHit should be an array');
    const $res = natives.getShapeTestResult(p0, Array.isArray(p2[0]) ? new alt.Vector3(p2[0][0], p2[0][1], p2[0][2]) : new alt.Vector3(p2[0].x, p2[0].y, p2[0].z), Array.isArray(p3[0]) ? new alt.Vector3(p3[0][0], p3[0][1], p3[0][2]) : new alt.Vector3(p3[0].x, p3[0].y, p3[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    if (Array.isArray(p2[0])) { p2[0][0] = $res[2].x; p2[0][1] = $res[2].y; p2[0][2] = $res[2].z }
    else { p2[0].x = $res[2].x; p2[0].y = $res[2].y; p2[0].z = $res[2].z; }
    if (Array.isArray(p3[0])) { p3[0][0] = $res[3].x; p3[0][1] = $res[3].y; p3[0][2] = $res[3].z }
    else { p3[0].x = $res[3].x; p3[0].y = $res[3].y; p3[0].z = $res[3].z; }
    p4[0] = $res[4];
    return $res[0];
}
hashes['0x65287525D951F6BE'] = function(p0, p1, p2, p3, p4, p5) {
    if (!Array.isArray(p1)) throw new Error('Argument hit should be an array');
    if (typeof p2 != 'object') throw new Error('Argument endCoords should be a Vector3 or an array');
    if (typeof p3 != 'object') throw new Error('Argument surfaceNormal should be a Vector3 or an array');
    if (!Array.isArray(p4)) throw new Error('Argument materialHash should be an array');
    if (!Array.isArray(p5)) throw new Error('Argument entityHit should be an array');
    const $res = natives.getShapeTestResultIncludingMaterial(p0, Array.isArray(p2[0]) ? new alt.Vector3(p2[0][0], p2[0][1], p2[0][2]) : new alt.Vector3(p2[0].x, p2[0].y, p2[0].z), Array.isArray(p3[0]) ? new alt.Vector3(p3[0][0], p3[0][1], p3[0][2]) : new alt.Vector3(p3[0].x, p3[0].y, p3[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    if (Array.isArray(p2[0])) { p2[0][0] = $res[2].x; p2[0][1] = $res[2].y; p2[0][2] = $res[2].z }
    else { p2[0].x = $res[2].x; p2[0].y = $res[2].y; p2[0].z = $res[2].z; }
    if (Array.isArray(p3[0])) { p3[0][0] = $res[3].x; p3[0][1] = $res[3].y; p3[0][2] = $res[3].z }
    else { p3[0].x = $res[3].x; p3[0].y = $res[3].y; p3[0].z = $res[3].z; }
    p4[0] = $res[4];
    p5[0] = $res[5];
    return $res[0];
}
hashes['0x2B3334BCA57CD799'] = function(p0) {
    const $res = natives.releaseScriptGuidFromEntity(p0);
    return $res;
}
hashes['0x03A93FF1A2CA0864'] = function() {
    const $res = natives.scInboxGetTotalNumMessages();
    return $res;
}
hashes['0xBB8EA16ECBC976C4'] = function(p0) {
    const $res = natives.scInboxGetMessageTypeAtIndex(p0);
    return $res;
}
hashes['0x93028F1DB42BFD08'] = function(p0) {
    const $res = natives.scInboxGetMessageIsReadAtIndex(p0);
    return $res;
}
hashes['0x2C015348CF19CA1D'] = function(p0) {
    const $res = natives.scInboxSetMessageAsReadAtIndex(p0);
    return $res;
}
hashes['0xA00EFE4082C4056E'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument out should be an array');
    const $res = natives.scInboxMessageGetDataInt(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0xFFE5C16F402D851D'] = function(p0, p1) {
    const $res = natives.scInboxMessageGetDataBool(p0, p1);
    return $res;
}
hashes['0x7572EF42FC6A9B6D'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument out should be an array');
    const $res = natives.scInboxMessageGetDataString(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x9A2C8064B6C1E41A'] = function(p0) {
    const $res = natives.scInboxMessageDoApply(p0);
    return $res;
}
hashes['0xF3E31D16CBDCB304'] = function(p0) {
    const $res = natives.scInboxMessageGetRawTypeAtIndex(p0);
    return $res;
}
hashes['0xDA024BDBD600F44A'] = function(p0) {
    const $res = natives.scInboxMessagePushGamerT0RecipList(p0);
    return $res;
}
hashes['0xA68D3D229F4F3B06'] = function(p0) {
    const $res = natives.scInboxSendUgcstatupdateToRecipList(p0);
    return $res;
}
hashes['0x69D82604A1A5A254'] = function(p0, p1) {
    const $res = natives.scInboxMessageGetUgcdata(p0, p1);
    return $res;
}
hashes['0x6AFD2CD753FEEF83'] = function(p0) {
    const $res = natives.scInboxSendBountyToRecipList(p0);
    return $res;
}
hashes['0x87E0052F08BD64E6'] = function(p0, p1) {
    const $res = natives.scInboxGetBountyDataAtIndex(p0, p1);
    return $res;
}
hashes['0x040ADDCBAFA1018A'] = function(p0, p1) {
    const $res = natives.scEmailRetrieveEmails(p0, p1);
    return $res;
}
hashes['0x16DA8172459434AA'] = function() {
    const $res = natives.scEmailGetRetrievalStatus();
    return $res;
}
hashes['0x7DB18CA8CAD5B098'] = function() {
    const $res = natives.scEmailGetNumRetrievedEmails();
    return $res;
}
hashes['0x4737980E8A283806'] = function(p0, p1) {
    const $res = natives.scEmailGetEmailAtIndex(p0, p1);
    return $res;
}
hashes['0x44ACA259D67651DB'] = function(p0, p1) {
    const $res = natives.scEmailDeleteEmails(p0, p1);
    return $res;
}
hashes['0x2330C12A7A605D16'] = function(p0) {
    const $res = natives.scEmailMessagePushGamerToRecipList(p0);
    return $res;
}
hashes['0x55DF6DB45179236E'] = function() {
    const $res = natives.scEmailMessageClearRecipList();
    return $res;
}
hashes['0x116FB94DC4B79F17'] = function(p0) {
    const $res = natives.scEmailSendEmail(p0);
    return $res;
}
hashes['0x07DBD622D9533857'] = function(p0) {
    const $res = natives.scEmailSetCurrentEmailTag(p0);
    return $res;
}
hashes['0xBFA0A56A817C6C7D'] = function(p0) {
    const $res = natives.scCacheNewRockstarMsgs(p0);
    return $res;
}
hashes['0xBC1CC91205EC8D6E'] = function() {
    const $res = natives.scHasNewRockstarMsg();
    return $res;
}
hashes['0xDF649C4E9AFDD788'] = function() {
    const $res = natives.scGetNewRockstarMsg();
    return $res;
}
hashes['0x1F1E9682483697C7'] = function(p0, p1) {
    const $res = natives.scPresenceAttrSetInt(p0, p1);
    return $res;
}
hashes['0xC4C4575F62534A24'] = function(p0, p1) {
    const $res = natives.scPresenceAttrSetFloat(p0, p1);
    return $res;
}
hashes['0x287F1F75D2803595'] = function(p0, p1) {
    const $res = natives.scPresenceAttrSetString(p0, p1);
    return $res;
}
hashes['0x487912FD248EFDDF'] = function(p0, p1) {
    const $res = natives.scPresenceSetActivityRating(p0, p1);
    return $res;
}
hashes['0xC85A7127E7AD02AA'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument value should be an array');
    const $res = natives.scGamerdataGetInt(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xA770C8EEC6FB2AC5'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument value should be an array');
    const $res = natives.scGamerdataGetFloat(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x8416FE4E4629D7D7'] = function(p0) {
    const $res = natives.scGamerdataGetBool(p0);
    return $res;
}
hashes['0x7FFCBFEE44ECFABF'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument value should be an array');
    const $res = natives.scGamerdataGetString(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x2D874D4AE612A65F'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument value should be an array');
    const $res = natives.scGamerdataGetActiveXpBonus();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x75632C5ECD7ED843'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument token should be an array');
    const $res = natives.scProfanityCheckString(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xEB2BF817463DFA28'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument token should be an array');
    const $res = natives.scProfanityCheckStringUgc(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x1753344C770358AE'] = function(p0) {
    const $res = natives.scProfanityGetCheckIsValid(p0);
    return $res;
}
hashes['0x82E4A58BABC15AE7'] = function(p0) {
    const $res = natives.scProfanityGetCheckIsPending(p0);
    return $res;
}
hashes['0x85535ACF97FC0969'] = function(p0) {
    const $res = natives.scProfanityGetStringPassed(p0);
    return $res;
}
hashes['0x930DE22F07B1CCE3'] = function(p0) {
    const $res = natives.scProfanityGetStringStatus(p0);
    return $res;
}
hashes['0xF6BAAAF762E1BF40'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.scLicenseplateCheckString(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xF22CA0FD74B80E7A'] = function(p0) {
    const $res = natives.scLicenseplateGetCheckIsValid(p0);
    return $res;
}
hashes['0x9237E334F6E43156'] = function(p0) {
    const $res = natives.scLicenseplateGetCheckIsPending(p0);
    return $res;
}
hashes['0x700569DBA175A77C'] = function(p0) {
    const $res = natives.scLicenseplateGetCount(p0);
    return $res;
}
hashes['0x1D4446A62D35B0D0'] = function(p0, p1) {
    const $res = natives.scLicenseplateGetPlate(p0, p1);
    return $res;
}
hashes['0x2E89990DDFF670C3'] = function(p0, p1) {
    const $res = natives.scLicenseplateGetPlateData(p0, p1);
    return $res;
}
hashes['0xD0EE05FE193646EA'] = function(p0, p1, p2) {
    const $res = natives.scLicenseplateSetPlateData(p0, p1, p2);
    return $res;
}
hashes['0x1989C6E6F67E76A8'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument token should be an array');
    const $res = natives.scLicenseplateAdd(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x07C61676E5BB52CD'] = function(p0) {
    const $res = natives.scLicenseplateGetAddIsPending(p0);
    return $res;
}
hashes['0x8147FFF6A718E1AD'] = function(p0) {
    const $res = natives.scLicenseplateGetAddStatus(p0);
    return $res;
}
hashes['0x0F73393BAC7E6730'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument token should be an array');
    const $res = natives.scLicenseplateIsvalid(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xD302E99EDF0449CF'] = function(p0) {
    const $res = natives.scLicenseplateGetIsvalidIsPending(p0);
    return $res;
}
hashes['0x5C4EBFFA98BDB41C'] = function(p0) {
    const $res = natives.scLicenseplateGetIsvalidStatus(p0);
    return $res;
}
hashes['0xFF8F3A92B75ED67A'] = function() {
    const $res = natives.scCommunityEventIsActive();
    return $res;
}
hashes['0x4ED9C8D6DA297639'] = function() {
    const $res = natives.scCommunityEventGetEventId();
    return $res;
}
hashes['0x710BCDA8071EDED1'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.scCommunityEventGetExtraDataInt(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x50A8A36201DBF83E'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.scCommunityEventGetExtraDataFloat(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x9DE5D2F723575ED0'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.scCommunityEventGetExtraDataString(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xC2C97EA97711D1AE'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.scCommunityEventGetDisplayName();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x450819D8CF90C416'] = function(p0) {
    const $res = natives.scCommunityEventIsActiveForType(p0);
    return $res;
}
hashes['0x4A7D6E727F941747'] = function(p0) {
    const $res = natives.scCommunityEventGetEventIdForType(p0);
    return $res;
}
hashes['0xE75A4A2E5E316D86'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.scCommunityEventGetExtraDataIntForType(p0, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x2570E26BE63964E3'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.scCommunityEventGetExtraDataFloatForType(p0, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x1D12A56FC95BE92E'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.scCommunityEventGetExtraDataStringForType(p0, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x33DF47CC0642061B'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.scCommunityEventGetDisplayNameForType(p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xA468E0BE12B12C70'] = function(p0) {
    const $res = natives.scCommunityEventIsActiveById(p0);
    return $res;
}
hashes['0x8CC469AB4D349B7C'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument p2 should be an array');
    const $res = natives.scCommunityEventGetExtraDataIntById(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0xC5A35C73B68F3C49'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument p2 should be an array');
    const $res = natives.scCommunityEventGetExtraDataFloatById(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x699E4A5C8C893A18'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument p2 should be an array');
    const $res = natives.scCommunityEventGetExtraDataStringById(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x19853B5B17D77BCA'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.scCommunityEventGetDisplayNameById(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x6BFB12CE158E3DD4'] = function(p0) {
    const $res = natives.scTransitionNewsShow(p0);
    return $res;
}
hashes['0xFE4C1D0D3B9CC17E'] = function(p0, p1) {
    const $res = natives.scTransitionNewsShowTimed(p0, p1);
    return $res;
}
hashes['0xD8122C407663B995'] = function() {
    const $res = natives.scTransitionNewsShowNextItem();
    return $res;
}
hashes['0x3001BEF2FECA3680'] = function() {
    const $res = natives.scTransitionNewsHasExtraDataTu();
    return $res;
}
hashes['0x92DA6E70EF249BD1'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument p1 should be an array');
    const $res = natives.scTransitionNewsGetExtraDataIntTu(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x675721C9F644D161'] = function() {
    const $res = natives.scTransitionNewsEnd();
    return $res;
}
hashes['0xE4F6E8D07A2F0F51'] = function(p0) {
    const $res = natives.scPauseNewsInitStarterPack(p0);
    return $res;
}
hashes['0x8A4416C0DB05FA66'] = function(p0) {
    const $res = natives.scPauseNewsGetPendingStory(p0);
    return $res;
}
hashes['0xEA95C0853A27888E'] = function() {
    const $res = natives.scPauseNewsShutdown();
    return $res;
}
hashes['0x198D161F458ECC7F'] = function() {
    const $res = natives.scAccountInfoGetNickname();
    return $res;
}
hashes['0x225798743970412B'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.scAchievementInfoStatus();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x418DC16FAE452C1C'] = function(p0) {
    const $res = natives.scHasAchievementBeenPassed(p0);
    return $res;
}
hashes['0xEB0A72181D4AA4AD'] = function(p0) {
    const $res = natives.statClearSlotForReload(p0);
    return $res;
}
hashes['0xA651443F437B1CE6'] = function(p0) {
    const $res = natives.statLoad(p0);
    return $res;
}
hashes['0xE07BCA305B82D2FD'] = function(p0, p1, p2, p3) {
    const $res = natives.statSave(p0, p1, p2, p3);
    return $res;
}
hashes['0x5688585E6D563CD8'] = function(p0) {
    const $res = natives.statSetOpenSavetypeInJob(p0);
    return $res;
}
hashes['0xA1750FFAFA181661'] = function(p0) {
    const $res = natives.statLoadPending(p0);
    return $res;
}
hashes['0x7D3A583856F2C5AC'] = function() {
    const $res = natives.statSavePending();
    return $res;
}
hashes['0xBBB6AD006F1BBEA3'] = function() {
    const $res = natives.statSavePendingOrRequested();
    return $res;
}
hashes['0x49A49BED12794D70'] = function(p0) {
    const $res = natives.statDeleteSlot(p0);
    return $res;
}
hashes['0x0D0A9F0E7BD91E3C'] = function(p0) {
    const $res = natives.statSlotIsLoaded(p0);
    return $res;
}
hashes['0x7F2C4CDF2E82DF4C'] = function(p0) {
    const $res = natives.statCloudSlotLoadFailed(p0);
    return $res;
}
hashes['0xE496A53BA5F50A56'] = function(p0) {
    const $res = natives.statCloudSlotLoadFailedCode(p0);
    return $res;
}
hashes['0xF434A10BA01C37D0'] = function(p0) {
    const $res = natives.statSetBlockSaves(p0);
    return $res;
}
hashes['0x6A7F19756F1A9016'] = function() {
    const $res = natives.statGetBlockSaves();
    return $res;
}
hashes['0x7E6946F68A38B74F'] = function(p0) {
    const $res = natives.statCloudSlotSaveFailed(p0);
    return $res;
}
hashes['0xA8733668D1047B51'] = function(p0) {
    const $res = natives.statClearPendingSaves(p0);
    return $res;
}
hashes['0xECB41AC6AB754401'] = function() {
    const $res = natives.statLoadDirtyReadDetected();
    return $res;
}
hashes['0x9B4BD21D69B1E609'] = function() {
    const $res = natives.statClearDirtyReadDetected();
    return $res;
}
hashes['0xC0E0D686DDFC6EAE'] = function() {
    const $res = natives.statGetLoadSafeToProgressToMpFromSp();
    return $res;
}
hashes['0xB3271D7AB655B441'] = function(p0, p1, p2) {
    const $res = natives.statSetInt(p0, p1, p2);
    return $res;
}
hashes['0x4851997F37FE9B3C'] = function(p0, p1, p2) {
    const $res = natives.statSetFloat(p0, p1, p2);
    return $res;
}
hashes['0x4B33C4243DE0C432'] = function(p0, p1, p2) {
    const $res = natives.statSetBool(p0, p1, p2);
    return $res;
}
hashes['0x17695002FD8B2AE0'] = function(p0, p1, p2) {
    const $res = natives.statSetGxtLabel(p0, p1, p2);
    return $res;
}
hashes['0x2C29BFB64F4FCBE4'] = function(p0, p1, p2, p3) {
    const $res = natives.statSetDate(p0, p1, p2, p3);
    return $res;
}
hashes['0xA87B2335D12531D7'] = function(p0, p1, p2) {
    const $res = natives.statSetString(p0, p1, p2);
    return $res;
}
hashes['0xDB283FDE680FE72E'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.statSetPos(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x7BBB1B54583ED410'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.statSetMaskedInt(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x8CDDF1E452BABE11'] = function(p0, p1, p2) {
    const $res = natives.statSetUserId(p0, p1, p2);
    return $res;
}
hashes['0xC2F84B7F9C4D0C61'] = function(p0, p1) {
    const $res = natives.statSetCurrentPosixTime(p0, p1);
    return $res;
}
hashes['0x767FBC2AC802EF3D'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument outValue should be an array');
    const $res = natives.statGetInt(p0, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0xD7AE6C9C9C6AC54C'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument outValue should be an array');
    const $res = natives.statGetFloat(p0, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x11B5E6D2AE73F48E'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument outValue should be an array');
    const $res = natives.statGetBool(p0, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x8B0FACEFC36C824B'] = function(p0, p1, p2, p3) {
    const $res = natives.statGetDate(p0, p1, p2, p3);
    return $res;
}
hashes['0xE50384ACC2C3DB74'] = function(p0, p1) {
    const $res = natives.statGetString(p0, p1);
    return $res;
}
hashes['0x350F82CCB186AA1B'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p1)) throw new Error('Argument outX should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument outY should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument outZ should be an array');
    const $res = natives.statGetPos(p0, p4);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0x655185A06D9EEAAB'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p1)) throw new Error('Argument outValue should be an array');
    const $res = natives.statGetMaskedInt(p0, p2, p3, p4);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x2365C388E393BBE2'] = function(p0) {
    const $res = natives.statGetUserId(p0);
    return $res;
}
hashes['0x5473D4195058B2E4'] = function(p0) {
    const $res = natives.statGetLicensePlate(p0);
    return $res;
}
hashes['0x69FF13266D7296DA'] = function(p0, p1) {
    const $res = natives.statSetLicensePlate(p0, p1);
    return $res;
}
hashes['0x9B5A68C6489E9909'] = function(p0, p1) {
    const $res = natives.statIncrement(p0, p1);
    return $res;
}
hashes['0x5A556B229A169402'] = function() {
    const $res = natives.statCommunityStartSynch();
    return $res;
}
hashes['0xB1D2BB1E1631F5B1'] = function() {
    const $res = natives.statCommunitySynchIsPending();
    return $res;
}
hashes['0xBED9F5693F34ED17'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument outValue should be an array');
    const $res = natives.statCommunityGetHistory(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x26D7399B9587FE89'] = function(p0) {
    const $res = natives.statResetAllOnlineCharacterStats(p0);
    return $res;
}
hashes['0xA78B8FA58200DA56'] = function(p0) {
    const $res = natives.statLocalResetAllOnlineCharacterStats(p0);
    return $res;
}
hashes['0xE0E854F5280FB769'] = function(p0) {
    const $res = natives.statGetNumberOfDays(p0);
    return $res;
}
hashes['0xF2D4B2FE415AAFC3'] = function(p0) {
    const $res = natives.statGetNumberOfHours(p0);
    return $res;
}
hashes['0x7583B4BE4C5A41B5'] = function(p0) {
    const $res = natives.statGetNumberOfMinutes(p0);
    return $res;
}
hashes['0x2CE056FF3723F00B'] = function(p0) {
    const $res = natives.statGetNumberOfSeconds(p0);
    return $res;
}
hashes['0x68F01422BE1D838F'] = function(p0, p1) {
    const $res = natives.statSetProfileSettingValue(p0, p1);
    return $res;
}
hashes['0xC01D2470F22CDE5A'] = function(p0) {
    const $res = natives.statsCompletedCharacterCreation(p0);
    return $res;
}
hashes['0x94F12ABF9C79E339'] = function(p0) {
    const $res = natives.packedStatGetIntStatIndex(p0);
    return $res;
}
hashes['0x61E111E323419E07'] = function(p0, p1, p2, p3) {
    const $res = natives.getPackedIntStatKey(p0, p1, p2, p3);
    return $res;
}
hashes['0xD16C2AD6B8E32854'] = function(p0, p1, p2, p3) {
    const $res = natives.getPackedTuIntStatKey(p0, p1, p2, p3);
    return $res;
}
hashes['0x2B4CDCA6F07FF3DA'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.getPackedNgIntStatKey(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xDA7EBFC49AE3F1B0'] = function(p0, p1) {
    const $res = natives.getPackedStatBoolCode(p0, p1);
    return $res;
}
hashes['0x0BC900A6FE73770C'] = function(p0, p1) {
    const $res = natives.getPackedStatIntCode(p0, p1);
    return $res;
}
hashes['0xDB8A58AEAA67CD07'] = function(p0, p1, p2) {
    const $res = natives.setPackedStatBoolCode(p0, p1, p2);
    return $res;
}
hashes['0x1581503AE529CD2E'] = function(p0, p1, p2) {
    const $res = natives.setPackedStatIntCode(p0, p1, p2);
    return $res;
}
hashes['0x5009DFD741329729'] = function(p0, p1) {
    const $res = natives.playstatsBackgroundScriptAction(p0, p1);
    return $res;
}
hashes['0x93054C88E6AA7C44'] = function(p0) {
    const $res = natives.playstatsNpcInvite(p0);
    return $res;
}
hashes['0x46F917F6B4128FE4'] = function(p0, p1, p2) {
    const $res = natives.playstatsAwardXp(p0, p1, p2);
    return $res;
}
hashes['0xC7F2DE41D102BFB4'] = function(p0) {
    const $res = natives.playstatsRankUp(p0);
    return $res;
}
hashes['0x098760C7461724CD'] = function() {
    const $res = natives.playstatsStartedSessionInOfflinemode();
    return $res;
}
hashes['0xA071E0ED98F91286'] = function(p0, p1) {
    const $res = natives.playstatsActivityDone(p0, p1);
    return $res;
}
hashes['0xC5BE134EC7BA96A0'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsLeaveJobChain(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC19A2925C34D2231'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsMissionStarted(p0, p1, p2, p3);
    return $res;
}
hashes['0x7C4BB33A8CED7324'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.playstatsMissionOver(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xC900596A63978C1D'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsMissionCheckpoint(p0, p1, p2, p3);
    return $res;
}
hashes['0x71862B1D855F32E1'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsRandomMissionDone(p0, p1, p2, p3);
    return $res;
}
hashes['0x121FB4DDDC2D5291'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsRosBet(p0, p1, p2, p3);
    return $res;
}
hashes['0x9C375C315099DDE4'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsRaceCheckpoint(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x6DEE77AFF8C21BD1'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument playerAccountId should be an array');
    if (!Array.isArray(p1)) throw new Error('Argument posixTime should be an array');
    const $res = natives.playstatsCreateMatchHistoryId2();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    p1[0] = $res[2];
    return $res[0];
}
hashes['0xBC80E22DED931E3D'] = function(p0, p1, p2) {
    const $res = natives.playstatsMatchStarted(p0, p1, p2);
    return $res;
}
hashes['0x176852ACAAC173D1'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsShopItem(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x1CAE5D2E3F9A07F0'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.playstatsCrateDropMissionDone(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xAFC7E5E075A96F46'] = function(p0, p1, p2) {
    const $res = natives.playstatsCrateCreated(p0, p1, p2);
    return $res;
}
hashes['0xCB00196B31C39EB1'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsHoldUpMissionDone(p0, p1, p2, p3);
    return $res;
}
hashes['0x2B69F5074C894811'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsImportExportMissionDone(p0, p1, p2, p3);
    return $res;
}
hashes['0xADDD1C754E2E2914'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsRaceToPointMissionDone(p0, p1, p2, p3);
    return $res;
}
hashes['0x79AB33F0FBFAC40C'] = function(p0) {
    const $res = natives.playstatsAcquiredHiddenPackage(p0);
    return $res;
}
hashes['0xDDF24D535060F811'] = function(p0, p1) {
    const $res = natives.playstatsWebsiteVisited(p0, p1);
    return $res;
}
hashes['0x0F71DE29AB2258F1'] = function(p0, p1) {
    const $res = natives.playstatsFriendActivity(p0, p1);
    return $res;
}
hashes['0x69DEA3E9DB727B4C'] = function(p0, p1, p2) {
    const $res = natives.playstatsOddjobDone(p0, p1, p2);
    return $res;
}
hashes['0xBA739D6D5A05D6E7'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsPropChange(p0, p1, p2, p3);
    return $res;
}
hashes['0x34B973047A2268B9'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsClothChange(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xE95C8A1875A02CA4'] = function(p0, p1, p2) {
    const $res = natives.playstatsWeaponModeChange(p0, p1, p2);
    return $res;
}
hashes['0x6058665D72302D3F'] = function(p0) {
    const $res = natives.playstatsCheatApplied(p0);
    return $res;
}
hashes['0xF8C54A461C3E11DC'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsJobActivityEnd(p0, p1, p2, p3);
    return $res;
}
hashes['0xF5BB8DAC426A52C0'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsJobBend(p0, p1, p2, p3);
    return $res;
}
hashes['0xA736CF7FB7C5BFF4'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsJobLtsEnd(p0, p1, p2, p3);
    return $res;
}
hashes['0x14E0B2D1AD1044E0'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsJobLtsRoundEnd(p0, p1, p2, p3);
    return $res;
}
hashes['0x90D0622866E80445'] = function(p0, p1) {
    const $res = natives.playstatsQuickfixTool(p0, p1);
    return $res;
}
hashes['0x5DA3A8DE8CB6226F'] = function(p0) {
    const $res = natives.playstatsIdleKick(p0);
    return $res;
}
hashes['0xD1032E482629049E'] = function(p0) {
    const $res = natives.playstatsSetJoinType(p0);
    return $res;
}
hashes['0xF4FF020A08BC8863'] = function(p0, p1) {
    const $res = natives.playstatsHeistSaveCheat(p0, p1);
    return $res;
}
hashes['0x46326E13DA4E0546'] = function(p0) {
    const $res = natives.playstatsAppendDirectorMetric(p0);
    return $res;
}
hashes['0x47B32F5611E6E483'] = function(p0) {
    const $res = natives.playstatsAwardBadSport(p0);
    return $res;
}
hashes['0x9572BD4DD6B72122'] = function(p0) {
    const $res = natives.playstatsPegasusAsPersonalAircraft(p0);
    return $res;
}
hashes['0xF96E9EA876D9DC92'] = function(p0, p1, p2) {
    const $res = natives.playstatsShopmenuNav(p0, p1, p2);
    return $res;
}
hashes['0x6A60E43998228229'] = function(p0) {
    const $res = natives.playstatsFmEventChallenges(p0);
    return $res;
}
hashes['0xBFAFDB5FAAA5C5AB'] = function(p0) {
    const $res = natives.playstatsFmEventVehicletarget(p0);
    return $res;
}
hashes['0x8C9D11605E59D955'] = function(p0) {
    const $res = natives.playstatsFmEventUrbanwarfare(p0);
    return $res;
}
hashes['0x3DE3AA516FB126A4'] = function(p0) {
    const $res = natives.playstatsFmEventCheckpointcollection(p0);
    return $res;
}
hashes['0xBAA2F0490E146BE8'] = function(p0) {
    const $res = natives.playstatsFmEventAtob(p0);
    return $res;
}
hashes['0x1A7CE7CD3E653485'] = function(p0) {
    const $res = natives.playstatsFmEventPennedin(p0);
    return $res;
}
hashes['0x419615486BBF1956'] = function(p0) {
    const $res = natives.playstatsFmEventPasstheparcel(p0);
    return $res;
}
hashes['0x84DFC579C2FC214C'] = function(p0) {
    const $res = natives.playstatsFmEventHotproperty(p0);
    return $res;
}
hashes['0x0A9C7F36E5D7B683'] = function(p0) {
    const $res = natives.playstatsFmEventDeaddrop(p0);
    return $res;
}
hashes['0x164C5FF663790845'] = function(p0) {
    const $res = natives.playstatsFmEventKingofthecastle(p0);
    return $res;
}
hashes['0xEDBF6C9B0D2C65C8'] = function(p0) {
    const $res = natives.playstatsFmEventCriminaldamage(p0);
    return $res;
}
hashes['0x6551B1F7F6CD46EA'] = function(p0) {
    const $res = natives.playstatsFmEventCompetitiveurbanwarfare(p0);
    return $res;
}
hashes['0x2CD90358F67D0AA8'] = function(p0) {
    const $res = natives.playstatsFmEventHuntbeast(p0);
    return $res;
}
hashes['0x203B381133817079'] = function(p0) {
    const $res = natives.playstatsPimenuHideOptions(p0);
    return $res;
}
hashes['0x117B45156D7EFF2E'] = function(p0, p1) {
    const $res = natives.leaderboardsGetNumberOfColumns(p0, p1);
    return $res;
}
hashes['0xC4B5467A1886EA7E'] = function(p0, p1, p2) {
    const $res = natives.leaderboardsGetColumnId(p0, p1, p2);
    return $res;
}
hashes['0xBF4FEF46DB7894D3'] = function(p0, p1, p2) {
    const $res = natives.leaderboardsGetColumnType(p0, p1, p2);
    return $res;
}
hashes['0xA34CB6E6F0DF4A0B'] = function() {
    const $res = natives.leaderboardsReadClearAll();
    return $res;
}
hashes['0x7CCE5C737A665701'] = function(p0, p1, p2) {
    const $res = natives.leaderboardsReadClear(p0, p1, p2);
    return $res;
}
hashes['0xAC392C8483342AC2'] = function(p0, p1, p2) {
    const $res = natives.leaderboardsReadPending(p0, p1, p2);
    return $res;
}
hashes['0xA31FD15197B192BD'] = function() {
    const $res = natives.leaderboardsReadAnyPending();
    return $res;
}
hashes['0x2FB19228983E832C'] = function(p0, p1, p2) {
    const $res = natives.leaderboardsReadSuccessful(p0, p1, p2);
    return $res;
}
hashes['0x918B101666F9CB83'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.leaderboards2ReadFriendsByRow(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xC30713A383BFBF0E'] = function(p0, p1) {
    const $res = natives.leaderboards2ReadByHandle(p0, p1);
    return $res;
}
hashes['0xA9CDB1E3F0A49883'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.leaderboards2ReadByRow(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xBA2C7DB0C129449A'] = function(p0, p1, p2) {
    const $res = natives.leaderboards2ReadByRank(p0, p1, p2);
    return $res;
}
hashes['0x5CE587FB5A42C8C4'] = function(p0, p1, p2) {
    const $res = natives.leaderboards2ReadByRadius(p0, p1, p2);
    return $res;
}
hashes['0x7EEC7E4F6984A16A'] = function(p0, p1, p2) {
    const $res = natives.leaderboards2ReadByScoreInt(p0, p1, p2);
    return $res;
}
hashes['0xE662C8B759D08F3C'] = function(p0, p1, p2) {
    const $res = natives.leaderboards2ReadByScoreFloat(p0, p1, p2);
    return $res;
}
hashes['0xC38DC1E90D22547C'] = function(p0, p1, p2) {
    const $res = natives.leaderboards2ReadRankPrediction(p0, p1, p2);
    return $res;
}
hashes['0xF1AE5DCDBFCA2721'] = function(p0, p1, p2) {
    const $res = natives.leaderboards2ReadByPlaform(p0, p1, p2);
    return $res;
}
hashes['0xA0F93D5465B3094D'] = function(p0) {
    const $res = natives.leaderboards2ReadGetRowDataStart(p0);
    return $res;
}
hashes['0x71B008056E5692D6'] = function() {
    const $res = natives.leaderboards2ReadGetRowDataEnd();
    return $res;
}
hashes['0x34770B9CE0E03B91'] = function(p0, p1) {
    const $res = natives.leaderboards2ReadGetRowDataInfo(p0, p1);
    return $res;
}
hashes['0x88578F6EC36B4A3A'] = function(p0, p1) {
    const $res = natives.leaderboards2ReadGetRowDataInt(p0, p1);
    return $res;
}
hashes['0x38491439B6BA7F7D'] = function(p0, p1) {
    const $res = natives.leaderboards2ReadGetRowDataFloat(p0, p1);
    return $res;
}
hashes['0xAE2206545888AE49'] = function(p0) {
    const $res = natives.leaderboards2WriteData(p0);
    return $res;
}
hashes['0x0BCA1D2C47B0D269'] = function(p0, p1, p2) {
    const $res = natives.leaderboardsWriteAddColumn(p0, p1, p2);
    return $res;
}
hashes['0x2E65248609523599'] = function(p0, p1, p2) {
    const $res = natives.leaderboardsWriteAddColumnLong(p0, p1, p2);
    return $res;
}
hashes['0xB9BB18E2C40142ED'] = function(p0) {
    const $res = natives.leaderboardsCacheDataRow(p0);
    return $res;
}
hashes['0xD4B02A6B476E1FDC'] = function() {
    const $res = natives.leaderboardsClearCacheData();
    return $res;
}
hashes['0x8EC74CEB042E7CFF'] = function(p0) {
    const $res = natives.leaderboardsClearCacheDataId(p0);
    return $res;
}
hashes['0x9C51349BE6CDFE2C'] = function(p0) {
    const $res = natives.leaderboardsGetCacheExists(p0);
    return $res;
}
hashes['0xF04C1C27DA35F6C8'] = function(p0) {
    const $res = natives.leaderboardsGetCacheTime(p0);
    return $res;
}
hashes['0x58A651CD201D89AD'] = function(p0) {
    const $res = natives.leaderboardsGetCacheNumberOfRows(p0);
    return $res;
}
hashes['0x9120E8DBA3D69273'] = function(p0, p1, p2) {
    const $res = natives.leaderboardsGetCacheDataRow(p0, p1, p2);
    return $res;
}
hashes['0x11FF1C80276097ED'] = function(p0, p1, p2) {
    const $res = natives.presenceEventUpdatestatInt(p0, p1, p2);
    return $res;
}
hashes['0x30A6614C1F7799B8'] = function(p0, p1, p2) {
    const $res = natives.presenceEventUpdatestatFloat(p0, p1, p2);
    return $res;
}
hashes['0x6483C25849031C4F'] = function(p0, p1, p2, p3) {
    const $res = natives.presenceEventUpdatestatIntWithString(p0, p1, p2, p3);
    return $res;
}
hashes['0x5EAD2BF6484852E4'] = function() {
    const $res = natives.getPlayerHasDrivenAllVehicles();
    return $res;
}
hashes['0xC141B8917E0017EC'] = function() {
    const $res = natives.setHasPostedAllVehiclesDriven();
    return $res;
}
hashes['0xB475F27C6A994D65'] = function() {
    const $res = natives.setProfileSettingPrologueComplete();
    return $res;
}
hashes['0xC67E2DA1CBE759E2'] = function() {
    const $res = natives.setProfileSettingSpChopMissionComplete();
    return $res;
}
hashes['0xF1A1803D3476F215'] = function(p0) {
    const $res = natives.setProfileSettingCreatorRacesDone(p0);
    return $res;
}
hashes['0x38BAAA5DD4C9D19F'] = function(p0) {
    const $res = natives.setProfileSettingCreatorDmDone(p0);
    return $res;
}
hashes['0x55384438FC55AD8E'] = function(p0) {
    const $res = natives.setProfileSettingCreatorCtfDone(p0);
    return $res;
}
hashes['0x723C1CE13FBFDB67'] = function(p0, p1) {
    const $res = natives.setJobActivityIdStarted(p0, p1);
    return $res;
}
hashes['0x0D01D20616FC73FB'] = function(p0, p1) {
    const $res = natives.setFreemodePrologueDone(p0, p1);
    return $res;
}
hashes['0x79D310A861697CC9'] = function(p0, p1) {
    const $res = natives.setFreemodeStrandProgressionStatus(p0, p1);
    return $res;
}
hashes['0x428EAF89E24F6C36'] = function(p0, p1) {
    const $res = natives.statNetworkIncrementOnSuicide(p0, p1);
    return $res;
}
hashes['0x047CBED6F6F8B63C'] = function() {
    const $res = natives.statSetCheatIsActive();
    return $res;
}
hashes['0xC980E62E33DF1D5C'] = function(p0, p1) {
    const $res = natives.leaderboards2WriteDataForEventType(p0, p1);
    return $res;
}
hashes['0x6F361B8889A792A3'] = function() {
    const $res = natives.forceCloudMpStatsDownloadAndOverwriteLocalSave();
    return $res;
}
hashes['0xC847B43F369AC0B5'] = function() {
    const $res = natives.statMigrateClearForRestart();
    return $res;
}
hashes['0xA5C80D8E768A9E66'] = function(p0) {
    const $res = natives.statMigrateSavegameStart(p0);
    return $res;
}
hashes['0x9A62EC95AE10E011'] = function() {
    const $res = natives.statMigrateSavegameGetStatus();
    return $res;
}
hashes['0x4C89FE2BDEB3F169'] = function() {
    const $res = natives.statMigrateCheckAlreadyDone();
    return $res;
}
hashes['0xC6E0E2616A7576BB'] = function() {
    const $res = natives.statMigrateCheckStart();
    return $res;
}
hashes['0x5BD5F255321C4AAF'] = function(p0) {
    const $res = natives.statMigrateCheckGetIsPlatformAvailable(p0);
    return $res;
}
hashes['0xDEAAF77EB3687E97'] = function(p0, p1) {
    const $res = natives.statMigrateCheckGetPlatformStatus(p0, p1);
    return $res;
}
hashes['0x886913BBEACA68C1'] = function(p0) {
    const $res = natives.statGetSaveMigrationStatus(p0);
    return $res;
}
hashes['0x4FEF53183C3C6414'] = function() {
    const $res = natives.statSaveMigrationCancelPendingOperation();
    return $res;
}
hashes['0x567384DFA67029E6'] = function() {
    const $res = natives.statGetCancelSaveMigrationStatus();
    return $res;
}
hashes['0x3270F67EED31FBC1'] = function(p0, p1, p2) {
    const $res = natives.statSaveMigrationConsumeContent(p0, p1, p2);
    return $res;
}
hashes['0xCE5AA445ABA8DEE0'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument p0 should be an array');
    const $res = natives.statGetSaveMigrationConsumeContentStatus();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x98E2BC1CA26287C3'] = function() {
    const $res = natives.statEnableStatsTracking();
    return $res;
}
hashes['0x629526ABA383BCAA'] = function() {
    const $res = natives.statDisableStatsTracking();
    return $res;
}
hashes['0xBE3DB208333D9844'] = function() {
    const $res = natives.statIsStatsTrackingEnabled();
    return $res;
}
hashes['0x33D72899E24C3365'] = function(p0, p1) {
    const $res = natives.statStartRecordStat(p0, p1);
    return $res;
}
hashes['0xA761D4AC6115623D'] = function() {
    const $res = natives.statStopRecordStat();
    return $res;
}
hashes['0xF11F01D98113536A'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument value should be an array');
    const $res = natives.statGetRecordedValue();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x8B9CDBD6C566C38C'] = function() {
    const $res = natives.statIsRecordingStat();
    return $res;
}
hashes['0xE8853FBCE7D8D0D6'] = function() {
    const $res = natives.statGetCurrentNearMissNocrashPrecise();
    return $res;
}
hashes['0xA943FD1722E11EFD'] = function() {
    const $res = natives.statGetCurrentRearWheelDistance();
    return $res;
}
hashes['0x84A810B375E69C0E'] = function() {
    const $res = natives.statGetCurrentFrontWheelDistance();
    return $res;
}
hashes['0x9EC8858184CD253A'] = function() {
    const $res = natives.statGetCurrentJumpDistance();
    return $res;
}
hashes['0xBA9749CC94C1FD85'] = function() {
    const $res = natives.statGetCurrentDriveNocrashDistance();
    return $res;
}
hashes['0x55A8BECAF28A4EB7'] = function() {
    const $res = natives.statGetCurrentSpeed();
    return $res;
}
hashes['0x32CAC93C9DE73D32'] = function() {
    const $res = natives.statGetCurrentDrivingReverseDistance();
    return $res;
}
hashes['0xAFF47709F1D5DCCE'] = function() {
    const $res = natives.statGetCurrentSkydivingDistance();
    return $res;
}
hashes['0x6E0A5253375C4584'] = function() {
    const $res = natives.statGetChallengeFlyingDist();
    return $res;
}
hashes['0x1A8EA222F9C67DBB'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument outValue should be an array');
    const $res = natives.statGetFlyingAltitude();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xF9F2922717B819EC'] = function() {
    const $res = natives.statIsPlayerVehicleAboveOcean();
    return $res;
}
hashes['0x0B8B7F74BF061C6D'] = function() {
    const $res = natives.statGetVehicleBailDistance();
    return $res;
}
hashes['0xB3DA2606774A8E2D'] = function() {
    const $res = natives.statRollbackSaveMigration();
    return $res;
}
hashes['0xDAC073C7901F9E15'] = function(p0) {
    const $res = natives.setHasSpecialeditionContent(p0);
    return $res;
}
hashes['0xF6792800AC95350D'] = function(p0) {
    const $res = natives.setSaveMigrationTransactionIdWarning(p0);
    return $res;
}
hashes['0x6BC0ACD0673ACEBE'] = function(p0, p1, p2) {
    const $res = natives.getBossGoonUuid(p0, p1, p2);
    return $res;
}
hashes['0x8D8ADB562F09A245'] = function(p0) {
    const $res = natives.playstatsBwBossonbossdeathmatch(p0);
    return $res;
}
hashes['0xD1A1EE3B4FA8E760'] = function(p0) {
    const $res = natives.playstatsBwYatchattack(p0);
    return $res;
}
hashes['0x88087EE1F28024AE'] = function(p0) {
    const $res = natives.playstatsBwHuntTheBoss(p0);
    return $res;
}
hashes['0xFCC228E07217FCAC'] = function(p0) {
    const $res = natives.playstatsBwSightseer(p0);
    return $res;
}
hashes['0x678F86D8FC040BDB'] = function(p0) {
    const $res = natives.playstatsBwAssault(p0);
    return $res;
}
hashes['0xA6F54BB2FFCA35EA'] = function(p0) {
    const $res = natives.playstatsBwBellyOfTheBeast(p0);
    return $res;
}
hashes['0x5FF2C33B13A02A11'] = function(p0) {
    const $res = natives.playstatsBwHeadHunter(p0);
    return $res;
}
hashes['0x282B6739644F4347'] = function(p0) {
    const $res = natives.playstatsBwFragileGoods(p0);
    return $res;
}
hashes['0xF06A6F41CB445443'] = function(p0) {
    const $res = natives.playstatsBwAirFreight(p0);
    return $res;
}
hashes['0x7B18DA61F6BAE9D5'] = function(p0) {
    const $res = natives.playstatsBcCarJacking(p0);
    return $res;
}
hashes['0x06EAF70AE066441E'] = function(p0) {
    const $res = natives.playstatsBcSmashAndGrab(p0);
    return $res;
}
hashes['0x14EDA9EE27BD1626'] = function(p0) {
    const $res = natives.playstatsBcProtectionRacket(p0);
    return $res;
}
hashes['0x930F504203F561C9'] = function(p0) {
    const $res = natives.playstatsBcMostWanted(p0);
    return $res;
}
hashes['0xE3261D791EB44ACB'] = function(p0) {
    const $res = natives.playstatsBcFindersKeepers(p0);
    return $res;
}
hashes['0x73001E34F85137F8'] = function(p0) {
    const $res = natives.playstatsBcPointToPoint(p0);
    return $res;
}
hashes['0x53CAE13E9B426993'] = function(p0) {
    const $res = natives.playstatsBcCashing(p0);
    return $res;
}
hashes['0x7D36291161859389'] = function(p0) {
    const $res = natives.playstatsBcSalvage(p0);
    return $res;
}
hashes['0xBE509B0A3693DE8B'] = function(p0) {
    const $res = natives.playstatsSpentPiCustomLoadout(p0);
    return $res;
}
hashes['0xD6781E42755531F7'] = function(p0) {
    const $res = natives.playstatsBuyContrabandMission(p0);
    return $res;
}
hashes['0xC729991A9065376E'] = function(p0) {
    const $res = natives.playstatsSellContrabandMission(p0);
    return $res;
}
hashes['0x2605663BD4F23B5D'] = function(p0) {
    const $res = natives.playstatsDefendContrabandMission(p0);
    return $res;
}
hashes['0x04D90BA8207ADA2D'] = function(p0) {
    const $res = natives.playstatsRecoverContrabandMission(p0);
    return $res;
}
hashes['0x60EEDC12AF66E846'] = function(p0) {
    const $res = natives.playstatsHitContrabandDestroyLimit(p0);
    return $res;
}
hashes['0x3EBEAC6C3F81F6BD'] = function(p0) {
    const $res = natives.startBeingBoss(p0);
    return $res;
}
hashes['0x96E6D5150DBF1C09'] = function(p0, p1, p2) {
    const $res = natives.startBeingGoon(p0, p1, p2);
    return $res;
}
hashes['0xA3C53804BDB68ED2'] = function(p0, p1) {
    const $res = natives.endBeingBoss(p0, p1);
    return $res;
}
hashes['0x6BCCF9948492FD85'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.endBeingGoon(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x792271AB35C356A4'] = function(p0, p1) {
    const $res = natives.hiredLimo(p0, p1);
    return $res;
}
hashes['0xCEA553E35C2246E1'] = function(p0, p1, p2) {
    const $res = natives.orderBossVehicle(p0, p1, p2);
    return $res;
}
hashes['0xD1C9B92BDD3F151D'] = function(p0, p1, p2) {
    const $res = natives.changeUniform(p0, p1, p2);
    return $res;
}
hashes['0x44919CC079BB60BF'] = function(p0) {
    const $res = natives.changeGoonLookingForWork(p0);
    return $res;
}
hashes['0x7033EEFD9B28088E'] = function(p0) {
    const $res = natives.sendMetricGhostingToPlayer(p0);
    return $res;
}
hashes['0xAA525DFF66BB82F5'] = function(p0, p1, p2) {
    const $res = natives.sendMetricVipPoach(p0, p1, p2);
    return $res;
}
hashes['0x015B03EE1C43E6EC'] = function(p0) {
    const $res = natives.sendMetricPunishBodyguard(p0);
    return $res;
}
hashes['0x928DBFB892638EF3'] = function() {
    const $res = natives.playstatsStartTrackingStunts();
    return $res;
}
hashes['0x8A800DACCC0DA55D'] = function() {
    const $res = natives.playstatsStopTrackingStunts();
    return $res;
}
hashes['0xBF371CD2B64212FD'] = function(p0) {
    const $res = natives.playstatsMissionEnded(p0);
    return $res;
}
hashes['0x7D8BA05688AD64C7'] = function(p0) {
    const $res = natives.playstatsImpexpMissionEnded(p0);
    return $res;
}
hashes['0x0B565B0AAE56A0E8'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.playstatsChangeMcRole(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x28ECB8AC2F607DB2'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsChangeMcOutfit(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x0A50D2604E05CB94'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsSwitchMcEmblem(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xCC25A4553DFBF9EA'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsMcRequestBike(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xF534D94DFA2EAD26'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsMcKilledRivalMcMember(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xD558BEC0BBA7E8D2'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsAbandonedMc(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x501478855A6074CE'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.playstatsEarnedMcPoints(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x03C2EEBB04B3FB72'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.playstatsMcFormationEnds(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x8989CBD7B4E82534'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.playstatsMcClubhouseActivity(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x27AA1C973CACFE63'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.playstatsRivalBehavior(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xB7257BA2550EA10A'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.playstatsCopyRankIntoNewSlot(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x848B66100EE33B05'] = function(p0) {
    const $res = natives.playstatsDupeDetected(p0);
    return $res;
}
hashes['0x516FC96EB88EEFE5'] = function(p0) {
    const $res = natives.playstatsBanAlert(p0);
    return $res;
}
hashes['0x0EACDF8487D5155A'] = function(p0) {
    const $res = natives.playstatsGunrunningMissionEnded(p0);
    return $res;
}
hashes['0xDAF80797FC534BEC'] = function(p0) {
    const $res = natives.playstatsGunrunningRnd(p0);
    return $res;
}
hashes['0x316DB59CD14C1774'] = function(p0) {
    const $res = natives.playstatsBusinessBattleEnded(p0);
    return $res;
}
hashes['0x2D7A9B577E72385E'] = function(p0) {
    const $res = natives.playstatsWarehouseMissionEnded(p0);
    return $res;
}
hashes['0x830C3A44EB3F2CF9'] = function(p0) {
    const $res = natives.playstatsNightclubMissionEnded(p0);
    return $res;
}
hashes['0xB26F670685631727'] = function(p0, p1) {
    const $res = natives.playstatsDjUsage(p0, p1);
    return $res;
}
hashes['0xC14BD9F5337219B2'] = function(p0, p1, p2) {
    const $res = natives.playstatsMinigameUsage(p0, p1, p2);
    return $res;
}
hashes['0x35E39E5570358630'] = function(p0) {
    const $res = natives.playstatsStoneHatchetEnded(p0);
    return $res;
}
hashes['0x320C35147D5B5DDD'] = function(p0) {
    const $res = natives.playstatsSmugglerMissionEnded(p0);
    return $res;
}
hashes['0xD8AFB345A9C5CCBB'] = function(p0) {
    const $res = natives.playstatsFmHeistPrepEnded(p0);
    return $res;
}
hashes['0x1E1497D0D2108115'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsInstancedHeistEnded(p0, p1, p2, p3);
    return $res;
}
hashes['0x0BC254FF3A911501'] = function(p0) {
    const $res = natives.playstatsDarCheckpoint(p0);
    return $res;
}
hashes['0x878FF156D36E9956'] = function(p0) {
    const $res = natives.playstatsEnterSessionPack(p0);
    return $res;
}
hashes['0x66C7BB2416ED3FCE'] = function(p0, p1, p2) {
    const $res = natives.playstatsDroneUsage(p0, p1, p2);
    return $res;
}
hashes['0x6731DE84A38BFAD0'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsSpinWheel(p0, p1, p2, p3);
    return $res;
}
hashes['0x6F4F599753F8200A'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsArenaWarsSpectator(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xB479D9F0D48A1BC5'] = function(p0) {
    const $res = natives.playstatsArenaWarsEnded(p0);
    return $res;
}
hashes['0x35EEC6C2BC821A71'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsSwitchPassiveMode(p0, p1, p2, p3);
    return $res;
}
hashes['0xCD0A8A9338681CF2'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.playstatsCollectiblePickedUp(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0xFCCCAC2BD3C1F180'] = function(p0, p1) {
    const $res = natives.playstatsCasinoStoryMissionEnded(p0, p1);
    return $res;
}
hashes['0x0999F3F090EC5012'] = function(p0) {
    const $res = natives.playstatsCasinoChip(p0);
    return $res;
}
hashes['0x95101C443A84E7F1'] = function(p0) {
    const $res = natives.playstatsCasinoRoulette(p0);
    return $res;
}
hashes['0x3EAE97309727E7AD'] = function(p0) {
    const $res = natives.playstatsCasinoBlackjack(p0);
    return $res;
}
hashes['0xF740FB339D471C35'] = function(p0) {
    const $res = natives.playstatsCasinoThreeCardPoker(p0);
    return $res;
}
hashes['0xEF5EC67D392B830A'] = function(p0) {
    const $res = natives.playstatsCasinoSlotMachine(p0);
    return $res;
}
hashes['0x049F059625058A86'] = function(p0) {
    const $res = natives.playstatsCasinoInsideTrack(p0);
    return $res;
}
hashes['0x0C432C1435F5E4FA'] = function(p0) {
    const $res = natives.playstatsCasinoLuckySeven(p0);
    return $res;
}
hashes['0x6572ABA3DE1197FC'] = function(p0) {
    const $res = natives.playstatsCasinoRouletteLight(p0);
    return $res;
}
hashes['0xD5451C7BF151EB6F'] = function(p0) {
    const $res = natives.playstatsCasinoBlackjackLight(p0);
    return $res;
}
hashes['0xC9001364B4388F22'] = function(p0) {
    const $res = natives.playstatsCasinoThreeCardPokerLight(p0);
    return $res;
}
hashes['0xE60054A0FAE8227F'] = function(p0) {
    const $res = natives.playstatsCasinoSlotMachineLight(p0);
    return $res;
}
hashes['0x23A3CBCD50D54E47'] = function(p0) {
    const $res = natives.playstatsCasinoInsideTrackLight(p0);
    return $res;
}
hashes['0x533A7D1EA58DF958'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.playstatsArcadeGame(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x4FCDBD3F0A813C25'] = function(p0, p1) {
    const $res = natives.playstatsArcadeLoveMatch(p0, p1);
    return $res;
}
hashes['0x1A0D4A6C336B7BC5'] = function(p0) {
    const $res = natives.playstatsFreemodeCasinoMissionEnded(p0);
    return $res;
}
hashes['0xDFBD93BF2943E29B'] = function(p0) {
    const $res = natives.playstatsHeist3Drone(p0);
    return $res;
}
hashes['0x92FC0EEDFAC04A14'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.playstatsHeist3Hack(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x0077F15613D36993'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.playstatsNpcPhone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0xF9096193DF1F99D4'] = function(p0) {
    const $res = natives.playstatsArcadeCabinet(p0);
    return $res;
}
hashes['0x2E0259BABC27A327'] = function(p0) {
    const $res = natives.playstatsHeist3Finale(p0);
    return $res;
}
hashes['0x53C31853EC9531FF'] = function(p0) {
    const $res = natives.playstatsHeist3Prep(p0);
    return $res;
}
hashes['0x810B5FCC52EC7FF0'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsMasterControl(p0, p1, p2, p3);
    return $res;
}
hashes['0x5BF29846C6527C54'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsQuitMode(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC03FAB2C2F92289B'] = function(p0) {
    const $res = natives.playstatsMissionVote(p0);
    return $res;
}
hashes['0x5CDAED54B34B0ED0'] = function(p0) {
    const $res = natives.playstatsNjvsVote(p0);
    return $res;
}
hashes['0x4AFF7E02E485E92B'] = function() {
    const $res = natives.playstatsKillYourself();
    return $res;
}
hashes['0x46A70777BE6CEAB9'] = function(p0, p1, p2) {
    const $res = natives.playstatsFmMissionEnd(p0, p1, p2);
    return $res;
}
hashes['0xDFCDB14317A9B361'] = function(p0) {
    const $res = natives.playstatsHeist4Prep(p0);
    return $res;
}
hashes['0xC1E963C58664B556'] = function(p0) {
    const $res = natives.playstatsHeist4Finale(p0);
    return $res;
}
hashes['0x2FA3173480008493'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.playstatsHeist4Hack(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xD4367D310F079DB0'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsSubWeap(p0, p1, p2, p3);
    return $res;
}
hashes['0x4DC416F246A41FC8'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.playstatsFastTrvl(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x2818FF6638CB09DE'] = function(p0) {
    const $res = natives.playstatsHubEntry(p0);
    return $res;
}
hashes['0xD6CA58B3B53A0F22'] = function(p0) {
    const $res = natives.playstatsDjMissionEnded(p0);
    return $res;
}
hashes['0x1A67DFBF1F5C3835'] = function(p0) {
    const $res = natives.playstatsRobberyPrep(p0);
    return $res;
}
hashes['0xBBA55BE9AAAABF44'] = function(p0) {
    const $res = natives.playstatsRobberyFinale(p0);
    return $res;
}
hashes['0xFA5B74BAB8A7EF99'] = function(p0) {
    const $res = natives.playstatsExtraEvent(p0);
    return $res;
}
hashes['0xFF14D6FEEC507BBE'] = function(p0) {
    const $res = natives.playstatsCarclubPoints(p0);
    return $res;
}
hashes['0x1187CB58D7F3BED7'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsCarclubChallenge(p0, p1, p2, p3);
    return $res;
}
hashes['0x69C922B677621428'] = function(p0, p1) {
    const $res = natives.playstatsCarclubPrize(p0, p1);
    return $res;
}
hashes['0x70F52471E758EBAE'] = function(p0, p1, p2, p3) {
    const $res = natives.playstatsAwardNav(p0, p1, p2, p3);
    return $res;
}
hashes['0xFEA3F7E83C0610FA'] = function(p0) {
    const $res = natives.playstatsInstMissionEnd(p0);
    return $res;
}
hashes['0x5A46ACE5C4661132'] = function(p0) {
    const $res = natives.playstatsHubExit(p0);
    return $res;
}
hashes['0x887DAD63CF5B7908'] = function(p0) {
    const $res = natives.playstatsInventory(p0);
    return $res;
}
hashes['0x8A23D1324F6B2BAC'] = function(p0) {
    const $res = natives.playstatsAcidMissionEnd(p0);
    return $res;
}
hashes['0xCEACCF0550FDC5BA'] = function(p0) {
    const $res = natives.playstatsAcidRnd(p0);
    return $res;
}
hashes['0xEC9553A178E8F1D1'] = function(p0, p1, p2) {
    const $res = natives.playstatsIdle(p0, p1, p2);
    return $res;
}
hashes['0x48FAC5DC7AC6EA99'] = function(p0) {
    const $res = natives.playstatsPlayerStyle(p0);
    return $res;
}
hashes['0xBD6E84632DD4CB3F'] = function() {
    const $res = natives.loadAllObjectsNow();
    return $res;
}
hashes['0x4448EB75B4904BDB'] = function(p0, p1, p2) {
    const $res = natives.loadScene(p0, p1, p2);
    return $res;
}
hashes['0xC4582015556D1C46'] = function() {
    const $res = natives.networkUpdateLoadScene();
    return $res;
}
hashes['0x41CA5A33160EA4AB'] = function() {
    const $res = natives.isNetworkLoadingScene();
    return $res;
}
hashes['0xE37B76C387BE28ED'] = function(p0, p1) {
    const $res = natives.setInteriorActive(p0, p1);
    return $res;
}
hashes['0x963D27A58DF860AC'] = function(p0) {
    const $res = natives.requestModel(p0);
    return $res;
}
hashes['0xA0261AEF7ACFC51E'] = function(p0) {
    const $res = natives.requestMenuPedModel(p0);
    return $res;
}
hashes['0x98A4EB5D89A0C952'] = function(p0) {
    const $res = natives.hasModelLoaded(p0);
    return $res;
}
hashes['0x8A7A40100EDFEC58'] = function(p0, p1) {
    const $res = natives.requestModelsInRoom(p0, p1);
    return $res;
}
hashes['0xE532F5D78798DAAB'] = function(p0) {
    const $res = natives.setModelAsNoLongerNeeded(p0);
    return $res;
}
hashes['0x35B9E0803292B641'] = function(p0) {
    const $res = natives.isModelInCdimage(p0);
    return $res;
}
hashes['0xC0296A2EDF545E92'] = function(p0) {
    const $res = natives.isModelValid(p0);
    return $res;
}
hashes['0x75816577FEA6DAD5'] = function(p0) {
    const $res = natives.isModelAPed(p0);
    return $res;
}
hashes['0x19AAC8F07BFEC53E'] = function(p0) {
    const $res = natives.isModelAVehicle(p0);
    return $res;
}
hashes['0x07503F7948F491A7'] = function(p0, p1, p2) {
    const $res = natives.requestCollisionAtCoord(p0, p1, p2);
    return $res;
}
hashes['0x923CB32A3B874FCB'] = function(p0) {
    const $res = natives.requestCollisionForModel(p0);
    return $res;
}
hashes['0x22CCA434E368F03A'] = function(p0) {
    const $res = natives.hasCollisionForModelLoaded(p0);
    return $res;
}
hashes['0xC9156DC11411A9EA'] = function(p0, p1, p2) {
    const $res = natives.requestAdditionalCollisionAtCoord(p0, p1, p2);
    return $res;
}
hashes['0x2DA49C3B79856961'] = function(p0) {
    const $res = natives.doesAnimDictExist(p0);
    return $res;
}
hashes['0xD3BD40951412FEF6'] = function(p0) {
    const $res = natives.requestAnimDict(p0);
    return $res;
}
hashes['0xD031A9162D01088C'] = function(p0) {
    const $res = natives.hasAnimDictLoaded(p0);
    return $res;
}
hashes['0xF66A602F829E2A06'] = function(p0) {
    const $res = natives.removeAnimDict(p0);
    return $res;
}
hashes['0x6EA47DAE7FAD0EED'] = function(p0) {
    const $res = natives.requestAnimSet(p0);
    return $res;
}
hashes['0xC4EA073D86FB29B0'] = function(p0) {
    const $res = natives.hasAnimSetLoaded(p0);
    return $res;
}
hashes['0x16350528F93024B3'] = function(p0) {
    const $res = natives.removeAnimSet(p0);
    return $res;
}
hashes['0xD2A71E1A77418A49'] = function(p0) {
    const $res = natives.requestClipSet(p0);
    return $res;
}
hashes['0x318234F4F3738AF3'] = function(p0) {
    const $res = natives.hasClipSetLoaded(p0);
    return $res;
}
hashes['0x01F73A131C18CD94'] = function(p0) {
    const $res = natives.removeClipSet(p0);
    return $res;
}
hashes['0x41B4893843BBDB74'] = function(p0) {
    const $res = natives.requestIpl(p0);
    return $res;
}
hashes['0xEE6C5AD3ECE0A82D'] = function(p0) {
    const $res = natives.removeIpl(p0);
    return $res;
}
hashes['0x88A741E44A2B3495'] = function(p0) {
    const $res = natives.isIplActive(p0);
    return $res;
}
hashes['0x6E0C692677008888'] = function(p0) {
    const $res = natives.setStreaming(p0);
    return $res;
}
hashes['0x7E3F55ED251B76D3'] = function(p0) {
    const $res = natives.loadGlobalWaterFile(p0);
    return $res;
}
hashes['0xF741BD853611592D'] = function() {
    const $res = natives.getGlobalWaterFile();
    return $res;
}
hashes['0x717CD6E6FAEBBEDC'] = function(p0) {
    const $res = natives.setGamePausesForStreaming(p0);
    return $res;
}
hashes['0x77B5F9A36BF96710'] = function(p0) {
    const $res = natives.setReducePedModelBudget(p0);
    return $res;
}
hashes['0x80C527893080CCF3'] = function(p0) {
    const $res = natives.setReduceVehicleModelBudget(p0);
    return $res;
}
hashes['0x42CBE54462D92634'] = function(p0) {
    const $res = natives.setDitchPoliceModels(p0);
    return $res;
}
hashes['0x4060057271CEBC89'] = function() {
    const $res = natives.getNumberOfStreamingRequests();
    return $res;
}
hashes['0x944955FB2A3935C8'] = function() {
    const $res = natives.requestPtfxAsset();
    return $res;
}
hashes['0xCA7D9B86ECA7481B'] = function() {
    const $res = natives.hasPtfxAssetLoaded();
    return $res;
}
hashes['0x88C6814073DD4A73'] = function() {
    const $res = natives.removePtfxAsset();
    return $res;
}
hashes['0xB80D8756B4668AB6'] = function(p0) {
    const $res = natives.requestNamedPtfxAsset(p0);
    return $res;
}
hashes['0x8702416E512EC454'] = function(p0) {
    const $res = natives.hasNamedPtfxAssetLoaded(p0);
    return $res;
}
hashes['0x5F61EBBE1A00F96D'] = function(p0) {
    const $res = natives.removeNamedPtfxAsset(p0);
    return $res;
}
hashes['0xCB9E1EB3BE2AF4E9'] = function(p0) {
    const $res = natives.setVehiclePopulationBudget(p0);
    return $res;
}
hashes['0x8C95333CFC3340F3'] = function(p0) {
    const $res = natives.setPedPopulationBudget(p0);
    return $res;
}
hashes['0x31B73D1EA9F01DA2'] = function() {
    const $res = natives.clearFocus();
    return $res;
}
hashes['0xBB7454BAFF08FE25'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setFocusPosAndVel(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x198F77705FA0931D'] = function(p0) {
    const $res = natives.setFocusEntity(p0);
    return $res;
}
hashes['0x2DDFF3FB9075D747'] = function(p0) {
    const $res = natives.isEntityFocus(p0);
    return $res;
}
hashes['0x0811381EF5062FEC'] = function(p0) {
    const $res = natives.setRestoreFocusEntity(p0);
    return $res;
}
hashes['0xAF12610C644A35C9'] = function(p0, p1) {
    const $res = natives.setMapdatacullboxEnabled(p0, p1);
    return $res;
}
hashes['0x4E52E752C76E7E7A'] = function(p0) {
    const $res = natives.setAllMapdataCulled(p0);
    return $res;
}
hashes['0x219C7B8D53E429FD'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.streamvolCreateSphere(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x1F3F018BC3AFA77C'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.streamvolCreateFrustum(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x0AD9710CEE2F590F'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.streamvolCreateLine(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x1EE7D8DF4425F053'] = function(p0) {
    const $res = natives.streamvolDelete(p0);
    return $res;
}
hashes['0x7D41E9D2D17C5B2D'] = function(p0) {
    const $res = natives.streamvolHasLoaded(p0);
    return $res;
}
hashes['0x07C313F94746702C'] = function(p0) {
    const $res = natives.streamvolIsValid(p0);
    return $res;
}
hashes['0xBC9823AB80A3DCAC'] = function() {
    const $res = natives.isStreamvolActive();
    return $res;
}
hashes['0x212A8D0D2BABFAC2'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.newLoadSceneStart(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xACCFB4ACF53551B0'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.newLoadSceneStartSphere(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC197616D221FF4A4'] = function() {
    const $res = natives.newLoadSceneStop();
    return $res;
}
hashes['0xA41A05B6CB741B85'] = function() {
    const $res = natives.isNewLoadSceneActive();
    return $res;
}
hashes['0x01B8247A7A8B9AD1'] = function() {
    const $res = natives.isNewLoadSceneLoaded();
    return $res;
}
hashes['0x71E7B2E657449AAD'] = function() {
    const $res = natives.isSafeToStartPlayerSwitch();
    return $res;
}
hashes['0xFAA23F2CBA159D67'] = function(p0, p1, p2, p3) {
    const $res = natives.startPlayerSwitch(p0, p1, p2, p3);
    return $res;
}
hashes['0x95C0A5BBDC189AA1'] = function() {
    const $res = natives.stopPlayerSwitch();
    return $res;
}
hashes['0xD9D2CFFF49FAB35F'] = function() {
    const $res = natives.isPlayerSwitchInProgress();
    return $res;
}
hashes['0xB3C94A90D9FC9E62'] = function() {
    const $res = natives.getPlayerSwitchType();
    return $res;
}
hashes['0xB5D7B26B45720E05'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.getIdealPlayerSwitchType(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x470555300D10B2A5'] = function() {
    const $res = natives.getPlayerSwitchState();
    return $res;
}
hashes['0x20F898A5D9782800'] = function() {
    const $res = natives.getPlayerShortSwitchState();
    return $res;
}
hashes['0x5F2013F8BC24EE69'] = function(p0) {
    const $res = natives.setPlayerShortSwitchStyle(p0);
    return $res;
}
hashes['0x78C0D93253149435'] = function() {
    const $res = natives.getPlayerSwitchJumpCutIndex();
    return $res;
}
hashes['0xC208B673CE446B61'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.setPlayerSwitchOutro(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x0FDE9DBFC0A6BC65'] = function(p0) {
    const $res = natives.setPlayerSwitchEstablishingShot(p0);
    return $res;
}
hashes['0x43D1680C6D19A8E9'] = function() {
    const $res = natives.allowPlayerSwitchPan();
    return $res;
}
hashes['0x74DE2E8739086740'] = function() {
    const $res = natives.allowPlayerSwitchOutro();
    return $res;
}
hashes['0x8E2A065ABDAE6994'] = function() {
    const $res = natives.allowPlayerSwitchAscent();
    return $res;
}
hashes['0xAD5FDF34B81BFE79'] = function() {
    const $res = natives.allowPlayerSwitchDescent();
    return $res;
}
hashes['0xDFA80CB25D0A19B3'] = function() {
    const $res = natives.isSwitchReadyForDescent();
    return $res;
}
hashes['0xD4793DFF3AF2ABCD'] = function() {
    const $res = natives.enableSwitchPauseBeforeDescent();
    return $res;
}
hashes['0xBD605B8E0E18B3BB'] = function() {
    const $res = natives.disableSwitchOutroFx();
    return $res;
}
hashes['0xAAB3200ED59016BC'] = function(p0, p1, p2) {
    const $res = natives.switchToMultiFirstpart(p0, p1, p2);
    return $res;
}
hashes['0xD8295AF639FD9CB8'] = function(p0) {
    const $res = natives.switchToMultiSecondpart(p0);
    return $res;
}
hashes['0x933BBEEB8C61B5F4'] = function() {
    const $res = natives.isSwitchToMultiFirstpartFinished();
    return $res;
}
hashes['0x08C2D6C52A3104BB'] = function() {
    const $res = natives.getPlayerSwitchInterpOutDuration();
    return $res;
}
hashes['0x5B48A06DD0E792A5'] = function() {
    const $res = natives.getPlayerSwitchInterpOutCurrentTime();
    return $res;
}
hashes['0x5B74EA8CFD5E3E7E'] = function() {
    const $res = natives.isSwitchSkippingDescent();
    return $res;
}
hashes['0x1E9057A74FD73E23'] = function() {
    const $res = natives.setSceneStreamingTracksCamPosThisFrame();
    return $res;
}
hashes['0x0C15B0E443B2349D'] = function() {
    const $res = natives.getLodscale();
    return $res;
}
hashes['0xA76359FC80B2438E'] = function(p0) {
    const $res = natives.overrideLodscaleThisFrame(p0);
    return $res;
}
hashes['0xBED8CA5FF5E04113'] = function(p0, p1, p2, p3) {
    const $res = natives.remapLodscaleRangeThisFrame(p0, p1, p2, p3);
    return $res;
}
hashes['0x472397322E92A856'] = function() {
    const $res = natives.suppressHdMapStreamingThisFrame();
    return $res;
}
hashes['0x40AEFD1A244741F2'] = function(p0) {
    const $res = natives.setRenderHdOnly(p0);
    return $res;
}
hashes['0x03F1A106BDA7DD3E'] = function() {
    const $res = natives.forceAllowTimeBasedFadingThisFrame();
    return $res;
}
hashes['0x95A7DABDDBB78AE7'] = function(p0, p1) {
    const $res = natives.iplGroupSwapStart(p0, p1);
    return $res;
}
hashes['0x63EB2B972A218CAC'] = function() {
    const $res = natives.iplGroupSwapCancel();
    return $res;
}
hashes['0xFB199266061F820A'] = function() {
    const $res = natives.iplGroupSwapIsReady();
    return $res;
}
hashes['0xF4A0DADB70F57FA6'] = function() {
    const $res = natives.iplGroupSwapFinish();
    return $res;
}
hashes['0x5068F488DDB54DD8'] = function() {
    const $res = natives.iplGroupSwapIsActive();
    return $res;
}
hashes['0x3D245789CE12982C'] = function(p0) {
    const $res = natives.prefetchSrl(p0);
    return $res;
}
hashes['0xD0263801A4C5B0BB'] = function() {
    const $res = natives.isSrlLoaded();
    return $res;
}
hashes['0x9BADDC94EF83B823'] = function() {
    const $res = natives.beginSrl();
    return $res;
}
hashes['0x0A41540E63C9EE17'] = function() {
    const $res = natives.endSrl();
    return $res;
}
hashes['0xA74A541C6884E7B8'] = function(p0) {
    const $res = natives.setSrlTime(p0);
    return $res;
}
hashes['0xEF39EE20C537E98C'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setSrlPostCutsceneCamera(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xBEB2D9A1D9A8F55A'] = function(p0, p1, p2, p3) {
    const $res = natives.setSrlReadaheadTimes(p0, p1, p2, p3);
    return $res;
}
hashes['0x20C6C7E4EB082A7F'] = function(p0) {
    const $res = natives.setSrlLongJumpMode(p0);
    return $res;
}
hashes['0xF8155A7F03DDFC8E'] = function(p0) {
    const $res = natives.setSrlForcePrestream(p0);
    return $res;
}
hashes['0xB85F26619073E775'] = function(p0, p1, p2, p3) {
    const $res = natives.setHdArea(p0, p1, p2, p3);
    return $res;
}
hashes['0xCE58B1CFB9290813'] = function() {
    const $res = natives.clearHdArea();
    return $res;
}
hashes['0xB5A4DB34FE89B88A'] = function() {
    const $res = natives.initCreatorBudget();
    return $res;
}
hashes['0xCCE26000E9A6FAD7'] = function() {
    const $res = natives.shutdownCreatorBudget();
    return $res;
}
hashes['0x0BC3144DEB678666'] = function(p0) {
    const $res = natives.addModelToCreatorBudget(p0);
    return $res;
}
hashes['0xF086AD9354FAC3A3'] = function(p0) {
    const $res = natives.removeModelFromCreatorBudget(p0);
    return $res;
}
hashes['0x3D3D8B3BE5A83D35'] = function() {
    const $res = natives.getUsedCreatorBudget();
    return $res;
}
hashes['0x9A9D1BA639675CF1'] = function(p0, p1) {
    const $res = natives.setIslandEnabled(p0, p1);
    return $res;
}
hashes['0xE73A266DB0CA9042'] = function(p0, p1) {
    const $res = natives.taskPause(p0, p1);
    return $res;
}
hashes['0x919BE13EED931959'] = function(p0, p1) {
    const $res = natives.taskStandStill(p0, p1);
    return $res;
}
hashes['0x0AE4086104E067B1'] = function(p0, p1, p2, p3) {
    const $res = natives.taskJump(p0, p1, p2, p3);
    return $res;
}
hashes['0x3EB1FE9E8E908E15'] = function(p0, p1) {
    const $res = natives.taskCower(p0, p1);
    return $res;
}
hashes['0xF2EAB31979A7F910'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskHandsUp(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xA98FCAFD7893C834'] = function(p0, p1) {
    const $res = natives.updateTaskHandsUpDuration(p0, p1);
    return $res;
}
hashes['0x965791A9A488A062'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskOpenVehicleDoor(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC20E50AA46D09CA8'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskEnterVehicle(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xD3DBCE61A490BE02'] = function(p0, p1, p2) {
    const $res = natives.taskLeaveVehicle(p0, p1, p2);
    return $res;
}
hashes['0x9C00E77AF14B2DFF'] = function(p0, p1) {
    const $res = natives.taskGetOffBoat(p0, p1);
    return $res;
}
hashes['0x601736CFE536B0A0'] = function(p0, p1) {
    const $res = natives.taskSkyDive(p0, p1);
    return $res;
}
hashes['0xD2F1C53C97EE81AB'] = function(p0, p1, p2) {
    const $res = natives.taskParachute(p0, p1, p2);
    return $res;
}
hashes['0xB33E291AFA6BD03A'] = function(p0, p1, p2, p3) {
    const $res = natives.taskParachuteToTarget(p0, p1, p2, p3);
    return $res;
}
hashes['0xC313379AF0FCEDA7'] = function(p0, p1, p2, p3) {
    const $res = natives.setParachuteTaskTarget(p0, p1, p2, p3);
    return $res;
}
hashes['0x0729BAC1B8C64317'] = function(p0, p1) {
    const $res = natives.setParachuteTaskThrust(p0, p1);
    return $res;
}
hashes['0x09693B0312F91649'] = function(p0, p1) {
    const $res = natives.taskRappelFromHeli(p0, p1);
    return $res;
}
hashes['0xE2A2AA2F659D77A7'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.taskVehicleDriveToCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x158BB33F920D360C'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.taskVehicleDriveToCoordLongrange(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x480142959D337D00'] = function(p0, p1, p2, p3) {
    const $res = natives.taskVehicleDriveWander(p0, p1, p2, p3);
    return $res;
}
hashes['0x304AE42E357B8C7E'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.taskFollowToOffsetOfEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xD76B57B44F1E6F8B'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.taskGoStraightToCoord(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x61E360B7E040D12E'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskGoStraightToCoordRelativeToEntity(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x93B93A37987F1F3D'] = function(p0, p1, p2) {
    const $res = natives.taskAchieveHeading(p0, p1, p2);
    return $res;
}
hashes['0x841142A1376E9006'] = function() {
    const $res = natives.taskFlushRoute();
    return $res;
}
hashes['0x1E7889778264843A'] = function(p0, p1, p2) {
    const $res = natives.taskExtendRoute(p0, p1, p2);
    return $res;
}
hashes['0x595583281858626E'] = function(p0, p1, p2) {
    const $res = natives.taskFollowPointRoute(p0, p1, p2);
    return $res;
}
hashes['0x6A071245EB0D1882'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskGoToEntity(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x94587F17E9C365D5'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.taskSmartFleeCoord(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x22B0D0E37CCB840D'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskSmartFleePed(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x72C896464915D1B1'] = function(p0, p1) {
    const $res = natives.taskReactAndFleePed(p0, p1);
    return $res;
}
hashes['0x452419CBD838065B'] = function(p0, p1) {
    const $res = natives.taskShockingEventReact(p0, p1);
    return $res;
}
hashes['0xE054346CA3A0F315'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskWanderInArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xBB9CE077274F6A1B'] = function(p0, p1, p2) {
    const $res = natives.taskWanderStandard(p0, p1, p2);
    return $res;
}
hashes['0x6919A2F136426098'] = function(p0, p1, p2, p3) {
    const $res = natives.taskWanderSpecific(p0, p1, p2, p3);
    return $res;
}
hashes['0x0F3E34E968EA374E'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.taskVehiclePark(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xAA5DC05579D60BD9'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskStealthKill(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x965FEC691D55E9BF'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskPlantBomb(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x15D3A79D4E44B913'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.taskFollowNavMeshToCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x17F58B88D085DBAC'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.taskFollowNavMeshToCoordAdvanced(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x8E06A6FE76C9EFF4'] = function(p0, p1) {
    const $res = natives.setPedPathCanUseClimbovers(p0, p1);
    return $res;
}
hashes['0x77A5B103C87F476E'] = function(p0, p1) {
    const $res = natives.setPedPathCanUseLadders(p0, p1);
    return $res;
}
hashes['0xE361C5C71C431A4F'] = function(p0, p1) {
    const $res = natives.setPedPathCanDropFromHeight(p0, p1);
    return $res;
}
hashes['0x88E32DB8C1A4AA4B'] = function(p0, p1) {
    const $res = natives.setPedPathClimbCostModifier(p0, p1);
    return $res;
}
hashes['0xF35425A4204367EC'] = function(p0, p1) {
    const $res = natives.setPedPathMayEnterWater(p0, p1);
    return $res;
}
hashes['0x38FE1EC73743793C'] = function(p0, p1) {
    const $res = natives.setPedPathPreferToAvoidWater(p0, p1);
    return $res;
}
hashes['0x4455517B28441E60'] = function(p0, p1) {
    const $res = natives.setPedPathAvoidFire(p0, p1);
    return $res;
}
hashes['0x6C6B148586F934F7'] = function(p0) {
    const $res = natives.setGlobalMinBirdFlightHeight(p0);
    return $res;
}
hashes['0xC6F5C0BCDC74D62D'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument distanceRemaining should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument isPathReady should be an array');
    const $res = natives.getNavmeshRouteDistanceRemaining(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    return $res[0];
}
hashes['0x632E831F382A0FA8'] = function(p0) {
    const $res = natives.getNavmeshRouteResult(p0);
    return $res;
}
hashes['0x3E38E28A1D80DDF6'] = function(p0) {
    const $res = natives.isControlledVehicleUnableToGetToRoad(p0);
    return $res;
}
hashes['0x5BC448CB78FA3E88'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.taskGoToCoordAnyMeans(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x1DD45F9ECFDB1BC9'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.taskGoToCoordAnyMeansExtraParams(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0xB8ECD61F531A7B02'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0xEA47FE3719165B94'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.taskPlayAnim(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x83CDB10EA29B370B'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
    const $res = natives.taskPlayAnimAdvanced(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
    return $res;
}
hashes['0x97FF36A1D40EA00A'] = function(p0, p1, p2, p3) {
    const $res = natives.stopAnimTask(p0, p1, p2, p3);
    return $res;
}
hashes['0x126EF75F1E17ABE5'] = function(p0, p1, p2, p3, p4, p5) {
    if (!Array.isArray(p1)) throw new Error('Argument priorityLowData should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument priorityMidData should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument priorityHighData should be an array');
    const $res = natives.taskScriptedAnimation(p0, p4, p5);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0x77A1EEC547E7FCF1'] = function(p0, p1, p2, p3, p4, p5) {
    if (!Array.isArray(p1)) throw new Error('Argument priorityLowData should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument priorityMidData should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument priorityHighData should be an array');
    const $res = natives.playEntityScriptedAnim(p0, p4, p5);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0xEE08C992D238C5D1'] = function(p0, p1, p2) {
    const $res = natives.stopAnimPlayback(p0, p1, p2);
    return $res;
}
hashes['0x207F1A47C0342F48'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setAnimWeight(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xDDF3CB5A0A4C0B49'] = function(p0, p1, p2, p3) {
    const $res = natives.setAnimPhase(p0, p1, p2, p3);
    return $res;
}
hashes['0x032D49C5E359C847'] = function(p0, p1, p2, p3) {
    const $res = natives.setAnimRate(p0, p1, p2, p3);
    return $res;
}
hashes['0x70033C3CC29A1FF4'] = function(p0, p1, p2, p3) {
    const $res = natives.setAnimLooped(p0, p1, p2, p3);
    return $res;
}
hashes['0x8FBB6758B3B3E9EC'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.taskPlayPhoneGestureAnimation(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x3FA00D4F4641BFAE'] = function(p0, p1) {
    const $res = natives.taskStopPhoneGestureAnimation(p0, p1);
    return $res;
}
hashes['0xB8EBB1E9D3588C10'] = function(p0) {
    const $res = natives.isPlayingPhoneGestureAnim(p0);
    return $res;
}
hashes['0x47619ABE8B268C60'] = function(p0) {
    const $res = natives.getPhoneGestureAnimCurrentTime(p0);
    return $res;
}
hashes['0x1EE0F68A7C25DEC6'] = function(p0) {
    const $res = natives.getPhoneGestureAnimTotalTime(p0);
    return $res;
}
hashes['0x69F5C3BD0F3EBD89'] = function(p0, p1, p2) {
    const $res = natives.taskVehiclePlayAnim(p0, p1, p2);
    return $res;
}
hashes['0x6FA46612594F7973'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskLookAtCoord(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x69F4BE8C8CC4796C'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskLookAtEntity(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x0F804F1DB19B9689'] = function(p0) {
    const $res = natives.taskClearLookAt(p0);
    return $res;
}
hashes['0xE8854A4326B9E12B'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument taskSequenceId should be an array');
    const $res = natives.openSequenceTask();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x39E72BC99E6360CB'] = function(p0) {
    const $res = natives.closeSequenceTask(p0);
    return $res;
}
hashes['0x5ABA3986D90D8A3B'] = function(p0, p1) {
    const $res = natives.taskPerformSequence(p0, p1);
    return $res;
}
hashes['0x8C33220C8D78CA0D'] = function(p0, p1) {
    const $res = natives.taskPerformSequenceLocally(p0, p1);
    return $res;
}
hashes['0x3841422E9C488D8C'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument taskSequenceId should be an array');
    const $res = natives.clearSequenceTask();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x58C70CF3A41E4AE7'] = function(p0, p1) {
    const $res = natives.setSequenceToRepeat(p0, p1);
    return $res;
}
hashes['0x00A9010CFE1E3533'] = function(p0) {
    const $res = natives.getSequenceProgress(p0);
    return $res;
}
hashes['0xB0760331C7AA4155'] = function(p0, p1) {
    const $res = natives.getIsTaskActive(p0, p1);
    return $res;
}
hashes['0x77F1BEB8863288D5'] = function(p0, p1) {
    const $res = natives.getScriptTaskStatus(p0, p1);
    return $res;
}
hashes['0x534AEBA6E5ED4CAB'] = function(p0) {
    const $res = natives.getActiveVehicleMissionType(p0);
    return $res;
}
hashes['0x504D54DF3F6F2247'] = function(p0, p1, p2) {
    const $res = natives.taskLeaveAnyVehicle(p0, p1, p2);
    return $res;
}
hashes['0x7A192BE16D373D00'] = function(p0, p1, p2, p3) {
    const $res = natives.taskAimGunScripted(p0, p1, p2, p3);
    return $res;
}
hashes['0x8605AF0DE8B3A5AC'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.taskAimGunScriptedWithTarget(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x9724FB59A3E72AD0'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.updateTaskAimGunScriptedTarget(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x3A8CADC7D37AACC5'] = function(p0) {
    const $res = natives.getClipSetForScriptedGunTask(p0);
    return $res;
}
hashes['0x9B53BB6E8943AF53'] = function(p0, p1, p2, p3) {
    const $res = natives.taskAimGunAtEntity(p0, p1, p2, p3);
    return $res;
}
hashes['0x5AD23D40115353AC'] = function(p0, p1, p2) {
    const $res = natives.taskTurnPedToFaceEntity(p0, p1, p2);
    return $res;
}
hashes['0x6671F3EEC681BDA1'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskAimGunAtCoord(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x46A6CC01E0826106'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskShootAtCoord(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x7AA80209BDA643EB'] = function(p0, p1, p2) {
    const $res = natives.taskShuffleToNextVehicleSeat(p0, p1, p2);
    return $res;
}
hashes['0xE1EF3C1216AFF2CD'] = function(p0) {
    const $res = natives.clearPedTasks(p0);
    return $res;
}
hashes['0x176CECF6F920D707'] = function(p0) {
    const $res = natives.clearPedSecondaryTask(p0);
    return $res;
}
hashes['0x7F93691AB4B92272'] = function(p0) {
    const $res = natives.taskEveryoneLeaveVehicle(p0);
    return $res;
}
hashes['0xE39B4FF4FDEBDE27'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskGotoEntityOffset(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x338E7EF52B6095A9'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.taskGotoEntityOffsetXy(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x1DDA930A0AC38571'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskTurnPedToFaceCoord(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC429DCEEB339E129'] = function(p0, p1, p2, p3) {
    const $res = natives.taskVehicleTempAction(p0, p1, p2, p3);
    return $res;
}
hashes['0x659427E0EF36BCDE'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.taskVehicleMission(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x9454528DF15D657A'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.taskVehicleMissionPedTarget(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xF0AF20AA7731F8C3'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.taskVehicleMissionCoorsTarget(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x0FA6E4B75F302400'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.taskVehicleEscort(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xFC545A9F0626E3B6'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskVehicleFollow(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x3C08A8E30363B353'] = function(p0, p1) {
    const $res = natives.taskVehicleChase(p0, p1);
    return $res;
}
hashes['0x1E09C32048FEFD1C'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.taskVehicleHeliProtect(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xCC665AAC360D31E7'] = function(p0, p1, p2) {
    const $res = natives.setTaskVehicleChaseBehaviorFlag(p0, p1, p2);
    return $res;
}
hashes['0x639B642FACBE4EDD'] = function(p0, p1) {
    const $res = natives.setTaskVehicleChaseIdealPursuitDistance(p0, p1);
    return $res;
}
hashes['0xAC83B1DB38D0ADA0'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskHeliChase(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x2D2386F273FF7A25'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskPlaneChase(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xBF19721FA34D32C0'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.taskPlaneLand(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x6100B3CEFD43452E'] = function(p0) {
    const $res = natives.clearDefaultPrimaryTask(p0);
    return $res;
}
hashes['0xDBBC7A2432524127'] = function(p0) {
    const $res = natives.clearPrimaryVehicleTask(p0);
    return $res;
}
hashes['0x53DDC75BC3AC0A90'] = function(p0) {
    const $res = natives.clearVehicleCrashTask(p0);
    return $res;
}
hashes['0xF7F9DCCA89E7505B'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.taskPlaneGotoPreciseVtol(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xC22B40579A498CA4'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskSubmarineGotoAndStop(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xDAD029E187A2BEB4'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
    const $res = natives.taskHeliMission(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
    return $res;
}
hashes['0xB385523325077210'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskHeliEscortHeli(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x23703CD154E83B88'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.taskPlaneMission(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0x92C360B5F15D2302'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskPlaneTaxi(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x15C86013127CE63F'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.taskBoatMission(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x2F8AF0E82773A171'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.taskDriveBy(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xE5B302114D8162EE'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setDrivebyTaskTarget(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xC35B5CDB2824CF69'] = function(p0) {
    const $res = natives.clearDrivebyTaskUnderneathDrivingTask(p0);
    return $res;
}
hashes['0x8785E6E40C7A8818'] = function(p0) {
    const $res = natives.isDrivebyTaskUnderneathDrivingTask(p0);
    return $res;
}
hashes['0xDCFE42068FE0135A'] = function(p0) {
    const $res = natives.controlMountedWeapon(p0);
    return $res;
}
hashes['0xCCD892192C6D2BB9'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setMountedWeaponTarget(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xA320EF046186FA3B'] = function(p0) {
    const $res = natives.isMountedWeaponTaskUnderneathDrivingTask(p0);
    return $res;
}
hashes['0xBD2A8EC3AF4DE7DB'] = function(p0, p1, p2) {
    const $res = natives.taskUseMobilePhone(p0, p1, p2);
    return $res;
}
hashes['0x5EE02954A14C69DB'] = function(p0, p1) {
    const $res = natives.taskUseMobilePhoneTimed(p0, p1);
    return $res;
}
hashes['0x8C338E0263E4FD19'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.taskChatToPed(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x9A7D091411C5F684'] = function(p0, p1, p2) {
    const $res = natives.taskWarpPedIntoVehicle(p0, p1, p2);
    return $res;
}
hashes['0x08DA95E8298AE772'] = function(p0, p1, p2, p3) {
    const $res = natives.taskShootAtEntity(p0, p1, p2, p3);
    return $res;
}
hashes['0x89D9FCC2435112F1'] = function(p0, p1) {
    const $res = natives.taskClimb(p0, p1);
    return $res;
}
hashes['0xB6C987F9285A3814'] = function(p0, p1) {
    const $res = natives.taskClimbLadder(p0, p1);
    return $res;
}
hashes['0xEAF66ACDDC794793'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.taskRappelDownWallUsingClipsetOverride(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x9D252648778160DF'] = function(p0) {
    const $res = natives.getTaskRappelDownWallState(p0);
    return $res;
}
hashes['0xAAA34F8A7CB32098'] = function(p0) {
    const $res = natives.clearPedTasksImmediately(p0);
    return $res;
}
hashes['0x89221B16730234F0'] = function(p0, p1, p2, p3) {
    const $res = natives.taskPerformSequenceFromProgress(p0, p1, p2, p3);
    return $res;
}
hashes['0xF1B9F16E89E2C93A'] = function(p0) {
    const $res = natives.setNextDesiredMoveState(p0);
    return $res;
}
hashes['0x1E982AC8716912C5'] = function(p0, p1) {
    const $res = natives.setPedDesiredMoveBlendRatio(p0, p1);
    return $res;
}
hashes['0x8517D4A6CA8513ED'] = function(p0) {
    const $res = natives.getPedDesiredMoveBlendRatio(p0);
    return $res;
}
hashes['0xA9DA48FAB8A76C12'] = function(p0, p1, p2, p3) {
    const $res = natives.taskGotoEntityAiming(p0, p1, p2, p3);
    return $res;
}
hashes['0xEB8517DDA73720DA'] = function(p0, p1) {
    const $res = natives.taskSetDecisionMaker(p0, p1);
    return $res;
}
hashes['0x933C06518B52A9A4'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskSetSphereDefensiveArea(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x95A6C46A31D1917D'] = function(p0) {
    const $res = natives.taskClearDefensiveArea(p0);
    return $res;
}
hashes['0xD04FE6765D990A06'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskPedSlideToCoord(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x5A4A6A6D3DC64F52'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskPedSlideToCoordHdgRate(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xD5C12A75C7B9497F'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.addCoverPoint(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xAE287C923D891715'] = function(p0) {
    const $res = natives.removeCoverPoint(p0);
    return $res;
}
hashes['0xA98B8E3C088E5A31'] = function(p0, p1, p2) {
    const $res = natives.doesScriptedCoverPointExistAtCoords(p0, p1, p2);
    return $res;
}
hashes['0x594A1028FC2A3E85'] = function(p0) {
    const $res = natives.getScriptedCoverPointCoords(p0);
    return new mp.Vector3($res);
}
hashes['0x28B7B9BFDAF274AA'] = function(p0, p1, p2, p3) {
    const $res = natives.addScriptedCoverArea(p0, p1, p2, p3);
    return $res;
}
hashes['0xF166E48407BAC484'] = function(p0, p1, p2, p3) {
    const $res = natives.taskCombatPed(p0, p1, p2, p3);
    return $res;
}
hashes['0x944F30DCB7096BDE'] = function(p0, p1, p2, p3) {
    const $res = natives.taskCombatPedTimed(p0, p1, p2, p3);
    return $res;
}
hashes['0x75AC2B60386D89F2'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskSeekCoverFromPos(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x84D32B3BEC531324'] = function(p0, p1, p2, p3) {
    const $res = natives.taskSeekCoverFromPed(p0, p1, p2, p3);
    return $res;
}
hashes['0xD43D95C7A869447F'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskSeekCoverToCoverPoint(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x39246A6958EF072C'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.taskSeekCoverToCoords(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x4172393E6BE1FECE'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.taskPutPedDirectlyIntoCover(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x6E01E9E8D89F8276'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskWarpPedDirectlyIntoCover(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x79B258E397854D29'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskExitCover(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x1C6CD14A876FFE39'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskPutPedDirectlyIntoMelee(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xAC96609B9995EDF8'] = function(p0, p1) {
    const $res = natives.taskToggleDuck(p0, p1);
    return $res;
}
hashes['0x4A58A47A72E3FCB4'] = function(p0, p1, p2, p3) {
    const $res = natives.taskGuardCurrentPosition(p0, p1, p2, p3);
    return $res;
}
hashes['0xD2A207EEBDF9889B'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.taskGuardAssignedDefensiveArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xC946FE14BE0EB5E2'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.taskGuardSphereDefensiveArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0xAE032F8BBA959E90'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskStandGuard(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x5C9B84BD7D31D908'] = function(p0, p1) {
    const $res = natives.setDriveTaskCruiseSpeed(p0, p1);
    return $res;
}
hashes['0x404A5AA9B9F0B746'] = function(p0, p1) {
    const $res = natives.setDriveTaskMaxCruiseSpeed(p0, p1);
    return $res;
}
hashes['0xDACE1BE37D88AF67'] = function(p0, p1) {
    const $res = natives.setDriveTaskDrivingStyle(p0, p1);
    return $res;
}
hashes['0x45C597097DD7CB81'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.addCoverBlockingArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xDB6708C0B46F56D8'] = function() {
    const $res = natives.removeAllCoverBlockingAreas();
    return $res;
}
hashes['0xFA83CA6776038F64'] = function(p0, p1, p2) {
    const $res = natives.removeCoverBlockingAreasAtPosition(p0, p1, p2);
    return $res;
}
hashes['0x1F351CF1C6475734'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.removeSpecificCoverBlockingAreas(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x142A02425FF02BD9'] = function(p0, p1, p2, p3) {
    const $res = natives.taskStartScenarioInPlace(p0, p1, p2, p3);
    return $res;
}
hashes['0xFA4EFC79F69D4F07'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.taskStartScenarioAtPosition(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x277F471BA9DB000B'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskUseNearestScenarioToCoord(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x58E2E0F23F6B76C3'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskUseNearestScenarioToCoordWarp(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x9FDA1B3D7E7028B3'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskUseNearestScenarioChainToCoord(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x97A28E63F0BA5631'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskUseNearestScenarioChainToCoordWarp(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x5A59271FFADD33C1'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.doesScenarioExistInArea(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x0A9D0C2A3BBC86C1'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.doesScenarioOfTypeExistInArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x788756D73AC2E07C'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isScenarioOccupied(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x295E3CCEC879CCD7'] = function(p0) {
    const $res = natives.pedHasUseScenarioTask(p0);
    return $res;
}
hashes['0x748040460F8DF5DC'] = function(p0, p1, p2) {
    const $res = natives.playAnimOnRunningScenario(p0, p1, p2);
    return $res;
}
hashes['0xF9034C136C9E00D3'] = function(p0) {
    const $res = natives.doesScenarioGroupExist(p0);
    return $res;
}
hashes['0x367A09DED4E05B99'] = function(p0) {
    const $res = natives.isScenarioGroupEnabled(p0);
    return $res;
}
hashes['0x02C8E5B49848664E'] = function(p0, p1) {
    const $res = natives.setScenarioGroupEnabled(p0, p1);
    return $res;
}
hashes['0xDD902D0349AFAD3A'] = function() {
    const $res = natives.resetScenarioGroupsEnabled();
    return $res;
}
hashes['0x535E97E1F7FC0C6A'] = function(p0) {
    const $res = natives.setExclusiveScenarioGroup(p0);
    return $res;
}
hashes['0x4202BBCB8684563D'] = function() {
    const $res = natives.resetExclusiveScenarioGroup();
    return $res;
}
hashes['0x3A815DB3EA088722'] = function(p0) {
    const $res = natives.isScenarioTypeEnabled(p0);
    return $res;
}
hashes['0xEB47EC4E34FB7EE1'] = function(p0, p1) {
    const $res = natives.setScenarioTypeEnabled(p0, p1);
    return $res;
}
hashes['0x0D40EE2A7F2B2D6D'] = function() {
    const $res = natives.resetScenarioTypesEnabled();
    return $res;
}
hashes['0xAA135F9482C82CC3'] = function(p0) {
    const $res = natives.isPedActiveInScenario(p0);
    return $res;
}
hashes['0x621C6E4729388E41'] = function(p0) {
    const $res = natives.isPedPlayingBaseClipInScenario(p0);
    return $res;
}
hashes['0x8FD89A6240813FD0'] = function(p0, p1, p2) {
    const $res = natives.setPedCanPlayAmbientIdles(p0, p1, p2);
    return $res;
}
hashes['0x4CF5F55DAC3280A0'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskCombatHatedTargetsInArea(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x7BF835BB9E2698C8'] = function(p0, p1, p2) {
    const $res = natives.taskCombatHatedTargetsAroundPed(p0, p1, p2);
    return $res;
}
hashes['0x2BBA30B854534A0C'] = function(p0, p1, p2, p3) {
    const $res = natives.taskCombatHatedTargetsAroundPedTimed(p0, p1, p2, p3);
    return $res;
}
hashes['0x7285951DBF6B5A51'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskThrowProjectile(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xA21C51255B205245'] = function(p0, p1) {
    const $res = natives.taskSwapWeapon(p0, p1);
    return $res;
}
hashes['0x62D2916F56B9CD2D'] = function(p0, p1) {
    const $res = natives.taskReloadWeapon(p0, p1);
    return $res;
}
hashes['0x2A74E1D5F2F00EEC'] = function(p0) {
    const $res = natives.isPedGettingUp(p0);
    return $res;
}
hashes['0xCDDC2B77CE54AC6E'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskWrithe(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xDEB6D52126E7D640'] = function(p0) {
    const $res = natives.isPedInWrithe(p0);
    return $res;
}
hashes['0xA36BFB5EE89F3D82'] = function(p0) {
    const $res = natives.openPatrolRoute(p0);
    return $res;
}
hashes['0xB043ECA801B8CBC1'] = function() {
    const $res = natives.closePatrolRoute();
    return $res;
}
hashes['0x8EDF950167586B7C'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.addPatrolRouteNode(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x23083260DEC3A551'] = function(p0, p1) {
    const $res = natives.addPatrolRouteLink(p0, p1);
    return $res;
}
hashes['0xAF8A443CCC8018DC'] = function() {
    const $res = natives.createPatrolRoute();
    return $res;
}
hashes['0x7767DD9D65E91319'] = function(p0) {
    const $res = natives.deletePatrolRoute(p0);
    return $res;
}
hashes['0x52F734CEBE20DFBA'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument timeLeftAtNode should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument nodeId should be an array');
    const $res = natives.getPatrolTaskInfo(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    return $res[0];
}
hashes['0xBDA5DF49D080FE4E'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskPatrol(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xE5DA8615A6180789'] = function(p0) {
    const $res = natives.taskStayInCover(p0);
    return $res;
}
hashes['0x5CF0D8F9BBA0DD75'] = function(p0, p1, p2, p3) {
    const $res = natives.addVehicleSubtaskAttackCoord(p0, p1, p2, p3);
    return $res;
}
hashes['0x85F462BADC7DA47F'] = function(p0, p1) {
    const $res = natives.addVehicleSubtaskAttackPed(p0, p1);
    return $res;
}
hashes['0x10AB107B887214D8'] = function(p0, p1, p2) {
    const $res = natives.taskVehicleShootAtPed(p0, p1, p2);
    return $res;
}
hashes['0xE41885592B08B097'] = function(p0, p1) {
    const $res = natives.taskVehicleAimAtPed(p0, p1);
    return $res;
}
hashes['0x5190796ED39C9B6D'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskVehicleShootAtCoord(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x447C1E9EF844BC0F'] = function(p0, p1, p2, p3) {
    const $res = natives.taskVehicleAimAtCoord(p0, p1, p2, p3);
    return $res;
}
hashes['0x195AEEB13CEFE2EE'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.taskVehicleGotoNavmesh(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x11315AB3385B8AC0'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
    const $res = natives.taskGoToCoordWhileAimingAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
    return $res;
}
hashes['0xB2A16444EAD9AE47'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    const $res = natives.taskGoToCoordWhileAimingAtEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    return $res;
}
hashes['0xA55547801EB331FC'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
    const $res = natives.taskGoToCoordAndAimAtHatedEntitiesNearCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
    return $res;
}
hashes['0x04701832B739DCE5'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.taskGoToEntityWhileAimingAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x97465886D35210E9'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.taskGoToEntityWhileAimingAtEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x8C825BDC7741D37C'] = function(p0, p1, p2, p3) {
    const $res = natives.setHighFallTask(p0, p1, p2, p3);
    return $res;
}
hashes['0x9EEFB62EB27B5792'] = function(p0) {
    const $res = natives.requestWaypointRecording(p0);
    return $res;
}
hashes['0xCB4E8BE8A0063C5D'] = function(p0) {
    const $res = natives.getIsWaypointRecordingLoaded(p0);
    return $res;
}
hashes['0xFF1B8B4AA1C25DC8'] = function(p0) {
    const $res = natives.removeWaypointRecording(p0);
    return $res;
}
hashes['0x5343532C01A07234'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument points should be an array');
    const $res = natives.waypointRecordingGetNumPoints(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x2FB897405C90B361'] = function(p0, p1, p2) {
    if (typeof p2 != 'object') throw new Error('Argument coord should be a Vector3 or an array');
    const $res = natives.waypointRecordingGetCoord(p0, p1, Array.isArray(p2[0]) ? new alt.Vector3(p2[0][0], p2[0][1], p2[0][2]) : new alt.Vector3(p2[0].x, p2[0].y, p2[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p2[0])) { p2[0][0] = $res[1].x; p2[0][1] = $res[1].y; p2[0][2] = $res[1].z }
    else { p2[0].x = $res[1].x; p2[0].y = $res[1].y; p2[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x005622AEBC33ACA9'] = function(p0, p1) {
    const $res = natives.waypointRecordingGetSpeedAtPoint(p0, p1);
    return $res;
}
hashes['0xB629A298081F876F'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p4)) throw new Error('Argument point should be an array');
    const $res = natives.waypointRecordingGetClosestWaypoint(p0, p1, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p4[0] = $res[1];
    return $res[0];
}
hashes['0x0759591819534F7B'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.taskFollowWaypointRecording(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xE03B3F2D3DC59B64'] = function(p0) {
    const $res = natives.isWaypointPlaybackGoingOnForPed(p0);
    return $res;
}
hashes['0x2720AAA75001E094'] = function(p0) {
    const $res = natives.getPedWaypointProgress(p0);
    return $res;
}
hashes['0xE6A877C64CAF1BC5'] = function(p0) {
    const $res = natives.getPedWaypointDistance(p0);
    return $res;
}
hashes['0xED98E10B0AFCE4B4'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedWaypointRouteOffset(p0, p1, p2, p3);
    return $res;
}
hashes['0xA5B769058763E497'] = function(p0, p1) {
    const $res = natives.getWaypointDistanceAlongRoute(p0, p1);
    return $res;
}
hashes['0x701375A7D43F01CB'] = function(p0) {
    const $res = natives.waypointPlaybackGetIsPaused(p0);
    return $res;
}
hashes['0x0F342546AA06FED5'] = function(p0, p1, p2) {
    const $res = natives.waypointPlaybackPause(p0, p1, p2);
    return $res;
}
hashes['0x244F70C84C547D2D'] = function(p0, p1, p2, p3) {
    const $res = natives.waypointPlaybackResume(p0, p1, p2, p3);
    return $res;
}
hashes['0x7D7D2B47FA788E85'] = function(p0, p1, p2) {
    const $res = natives.waypointPlaybackOverrideSpeed(p0, p1, p2);
    return $res;
}
hashes['0x6599D834B12D0800'] = function(p0) {
    const $res = natives.waypointPlaybackUseDefaultSpeed(p0);
    return $res;
}
hashes['0x5A353B8E6B1095B5'] = function(p0, p1, p2, p3) {
    const $res = natives.useWaypointRecordingAsAssistedMovementRoute(p0, p1, p2, p3);
    return $res;
}
hashes['0x20E330937C399D29'] = function(p0, p1, p2) {
    const $res = natives.waypointPlaybackStartAimingAtPed(p0, p1, p2);
    return $res;
}
hashes['0x8968400D900ED8B3'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.waypointPlaybackStartAimingAtCoord(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xE70BA7B90F8390DC'] = function(p0, p1, p2, p3) {
    const $res = natives.waypointPlaybackStartShootingAtPed(p0, p1, p2, p3);
    return $res;
}
hashes['0x057A25CFCC9DB671'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.waypointPlaybackStartShootingAtCoord(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x47EFA040EBB8E2EA'] = function(p0) {
    const $res = natives.waypointPlaybackStopAimingOrShooting(p0);
    return $res;
}
hashes['0x817268968605947A'] = function(p0) {
    const $res = natives.assistedMovementRequestRoute(p0);
    return $res;
}
hashes['0x3548536485DD792B'] = function(p0) {
    const $res = natives.assistedMovementRemoveRoute(p0);
    return $res;
}
hashes['0x60F9A4393A21F741'] = function(p0) {
    const $res = natives.assistedMovementIsRouteLoaded(p0);
    return $res;
}
hashes['0xD5002D78B7162E1B'] = function(p0, p1) {
    const $res = natives.assistedMovementSetRouteProperties(p0, p1);
    return $res;
}
hashes['0x13945951E16EF912'] = function(p0) {
    const $res = natives.assistedMovementOverrideLoadDistanceThisFrame(p0);
    return $res;
}
hashes['0x3123FAA6DB1CF7ED'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.taskVehicleFollowWaypointRecording(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0xF5134943EA29868C'] = function(p0) {
    const $res = natives.isWaypointPlaybackGoingOnForVehicle(p0);
    return $res;
}
hashes['0x9824CFF8FC66E159'] = function(p0) {
    const $res = natives.getVehicleWaypointProgress(p0);
    return $res;
}
hashes['0x416B62AC8B9E5BBD'] = function(p0) {
    const $res = natives.getVehicleWaypointTargetPoint(p0);
    return $res;
}
hashes['0x8A4E6AC373666BC5'] = function(p0) {
    const $res = natives.vehicleWaypointPlaybackPause(p0);
    return $res;
}
hashes['0xDC04FCAA7839D492'] = function(p0) {
    const $res = natives.vehicleWaypointPlaybackResume(p0);
    return $res;
}
hashes['0x5CEB25A7D2848963'] = function(p0) {
    const $res = natives.vehicleWaypointPlaybackUseDefaultSpeed(p0);
    return $res;
}
hashes['0x121F0593E0A431D7'] = function(p0, p1) {
    const $res = natives.vehicleWaypointPlaybackOverrideSpeed(p0, p1);
    return $res;
}
hashes['0x90D2156198831D69'] = function(p0, p1) {
    const $res = natives.taskSetBlockingOfNonTemporaryEvents(p0, p1);
    return $res;
}
hashes['0x4F056E1AFFEF17AB'] = function(p0, p1, p2) {
    const $res = natives.taskForceMotionState(p0, p1, p2);
    return $res;
}
hashes['0x2D537BA194896636'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.taskMoveNetworkByName(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xD5B35BEA41919ACB'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    const $res = natives.taskMoveNetworkAdvancedByName(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
    return $res;
}
hashes['0x3D45B0B355C5E0C9'] = function(p0, p1, p2, p3, p4, p5, p6) {
    if (!Array.isArray(p2)) throw new Error('Argument initialParameters should be an array');
    const $res = natives.taskMoveNetworkByNameWithInitParams(p0, p1, p3, p4, p5, p6);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x29682E2CCF21E9B5'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    if (!Array.isArray(p2)) throw new Error('Argument initialParameters should be an array');
    const $res = natives.taskMoveNetworkAdvancedByNameWithInitParams(p0, p1, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x921CE12C489C4C41'] = function(p0) {
    const $res = natives.isTaskMoveNetworkActive(p0);
    return $res;
}
hashes['0x30ED88D5E0C56A37'] = function(p0) {
    const $res = natives.isTaskMoveNetworkReadyForTransition(p0);
    return $res;
}
hashes['0xD01015C7316AE176'] = function(p0, p1) {
    const $res = natives.requestTaskMoveNetworkStateTransition(p0, p1);
    return $res;
}
hashes['0xAB13A5565480B6D9'] = function(p0, p1) {
    const $res = natives.setExpectedCloneNextTaskMoveNetworkState(p0, p1);
    return $res;
}
hashes['0x717E4D1F2048376D'] = function(p0) {
    const $res = natives.getTaskMoveNetworkState(p0);
    return $res;
}
hashes['0x8423541E8B3A1589'] = function(p0, p1, p2) {
    const $res = natives.setTaskMoveNetworkAnimSet(p0, p1, p2);
    return $res;
}
hashes['0xD5BB4025AE449A4E'] = function(p0, p1, p2) {
    const $res = natives.setTaskMoveNetworkSignalFloat(p0, p1, p2);
    return $res;
}
hashes['0x373EF409B82697A3'] = function(p0, p1, p2) {
    const $res = natives.setTaskMoveNetworkSignalLocalFloat(p0, p1, p2);
    return $res;
}
hashes['0x8634CEF2522D987B'] = function(p0, p1, p2) {
    const $res = natives.setTaskMoveNetworkSignalFloatLerpRate(p0, p1, p2);
    return $res;
}
hashes['0xB0A6CFD2C69C1088'] = function(p0, p1, p2) {
    const $res = natives.setTaskMoveNetworkSignalBool(p0, p1, p2);
    return $res;
}
hashes['0x44AB0B3AFECCE242'] = function(p0, p1) {
    const $res = natives.getTaskMoveNetworkSignalFloat(p0, p1);
    return $res;
}
hashes['0xA7FFBA498E4AAF67'] = function(p0, p1) {
    const $res = natives.getTaskMoveNetworkSignalBool(p0, p1);
    return $res;
}
hashes['0xB4F47213DF45A64C'] = function(p0, p1) {
    const $res = natives.getTaskMoveNetworkEvent(p0, p1);
    return $res;
}
hashes['0x0FFB3C758E8C07B9'] = function(p0, p1) {
    const $res = natives.setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed(p0, p1);
    return $res;
}
hashes['0x349CE7B56DAFD95C'] = function(p0) {
    const $res = natives.isMoveBlendRatioStill(p0);
    return $res;
}
hashes['0xF133BBBE91E1691F'] = function(p0) {
    const $res = natives.isMoveBlendRatioWalking(p0);
    return $res;
}
hashes['0xD4D8636C0199A939'] = function(p0) {
    const $res = natives.isMoveBlendRatioRunning(p0);
    return $res;
}
hashes['0x24A2AD74FA9814E2'] = function(p0) {
    const $res = natives.isMoveBlendRatioSprinting(p0);
    return $res;
}
hashes['0xAC29253EEF8F0180'] = function(p0) {
    const $res = natives.isPedStill(p0);
    return $res;
}
hashes['0xDE4C184B2B9B071A'] = function(p0) {
    const $res = natives.isPedWalking(p0);
    return $res;
}
hashes['0xC5286FFC176F28A2'] = function(p0) {
    const $res = natives.isPedRunning(p0);
    return $res;
}
hashes['0x57E457CD2C0FC168'] = function(p0) {
    const $res = natives.isPedSprinting(p0);
    return $res;
}
hashes['0xE45B7F222DE47E09'] = function(p0) {
    const $res = natives.isPedStrafing(p0);
    return $res;
}
hashes['0xEEA929141F699854'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.taskSynchronizedScene(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x19D1B791CB3670FE'] = function(p0, p1) {
    const $res = natives.taskAgitatedActionConfrontResponse(p0, p1);
    return $res;
}
hashes['0x2047C02158D6405A'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.taskSweepAimEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0xE4973DBDBE6E44B3'] = function(p0, p1) {
    const $res = natives.updateTaskSweepAimEntity(p0, p1);
    return $res;
}
hashes['0x7AFE8FDC10BC07D2'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.taskSweepAimPosition(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0xBB106883F5201FC4'] = function(p0, p1, p2, p3) {
    const $res = natives.updateTaskSweepAimPosition(p0, p1, p2, p3);
    return $res;
}
hashes['0xF3B9A78A178572B1'] = function(p0, p1) {
    const $res = natives.taskArrestPed(p0, p1);
    return $res;
}
hashes['0x3DC52677769B4AE0'] = function(p0) {
    const $res = natives.isPedRunningArrestTask(p0);
    return $res;
}
hashes['0x90A09F3A45FED688'] = function(p0) {
    const $res = natives.isPedBeingArrested(p0);
    return $res;
}
hashes['0x67406F2C8F87FC4F'] = function(p0) {
    const $res = natives.uncuffPed(p0);
    return $res;
}
hashes['0x74E559B3BC910685'] = function(p0) {
    const $res = natives.isPedCuffed(p0);
    return $res;
}
hashes['0xAF35D0D2583051B0'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.createVehicle(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0xEA386986E786A54F'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument vehicle should be an array');
    const $res = natives.deleteVehicle();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x7D6F9A3EF26136A0'] = function(p0, p1, p2) {
    const $res = natives.setVehicleAllowHomingMissleLockon(p0, p1, p2);
    return $res;
}
hashes['0x1DDA078D12879EEE'] = function(p0, p1, p2) {
    const $res = natives.setVehicleAllowHomingMissleLockonSynced(p0, p1, p2);
    return $res;
}
hashes['0x5D14D4154BFE7B2C'] = function(p0, p1) {
    const $res = natives.setVehicleAllowNoPassengersLockon(p0, p1);
    return $res;
}
hashes['0xE6B0E8CFC3633BF0'] = function(p0) {
    const $res = natives.getVehicleHomingLockonState(p0);
    return $res;
}
hashes['0x6EAAEFC76ACC311F'] = function(p0) {
    const $res = natives.getVehicleHomingLockedontoState(p0);
    return $res;
}
hashes['0x407DC5E97DB1A4D3'] = function(p0, p1) {
    const $res = natives.setVehicleHomingLockedontoState(p0, p1);
    return $res;
}
hashes['0x423E8DE37D934D89'] = function(p0, p1) {
    const $res = natives.isVehicleModel(p0, p1);
    return $res;
}
hashes['0xF6086BC836400876'] = function(p0) {
    const $res = natives.doesScriptVehicleGeneratorExist(p0);
    return $res;
}
hashes['0x9DEF883114668116'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16) {
    const $res = natives.createScriptVehicleGenerator(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);
    return $res;
}
hashes['0x22102C9ABFCF125D'] = function(p0) {
    const $res = natives.deleteScriptVehicleGenerator(p0);
    return $res;
}
hashes['0xD9D620E0AC6DC4B0'] = function(p0, p1) {
    const $res = natives.setScriptVehicleGenerator(p0, p1);
    return $res;
}
hashes['0xC12321827687FE4D'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.setAllVehicleGeneratorsActiveInArea(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x34AD89078831A4BC'] = function() {
    const $res = natives.setAllVehicleGeneratorsActive();
    return $res;
}
hashes['0x608207E7A8FB787C'] = function(p0) {
    const $res = natives.setAllLowPriorityVehicleGeneratorsActive(p0);
    return $res;
}
hashes['0x9A75585FB2E54FAD'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleGeneratorAreaOfInterest(p0, p1, p2, p3);
    return $res;
}
hashes['0x0A436B8643716D14'] = function() {
    const $res = natives.clearVehicleGeneratorAreaOfInterest();
    return $res;
}
hashes['0x49733E92263139D1'] = function(p0, p1) {
    const $res = natives.setVehicleOnGroundProperly(p0, p1);
    return $res;
}
hashes['0xE023E8AC4EF7C117'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleUseCutsceneWheelCompression(p0, p1, p2, p3);
    return $res;
}
hashes['0xB497F06B288DCFDF'] = function(p0) {
    const $res = natives.isVehicleStuckOnRoof(p0);
    return $res;
}
hashes['0xB72E26D81006005B'] = function(p0) {
    const $res = natives.addVehicleUpsidedownCheck(p0);
    return $res;
}
hashes['0xC53EB42A499A7E90'] = function(p0) {
    const $res = natives.removeVehicleUpsidedownCheck(p0);
    return $res;
}
hashes['0x5721B434AD84D57A'] = function(p0) {
    const $res = natives.isVehicleStopped(p0);
    return $res;
}
hashes['0x24CB2137731FFE89'] = function(p0, p1, p2) {
    const $res = natives.getVehicleNumberOfPassengers(p0, p1, p2);
    return $res;
}
hashes['0xA7C4F2C6E744A550'] = function(p0) {
    const $res = natives.getVehicleMaxNumberOfPassengers(p0);
    return $res;
}
hashes['0x2AD93716F184EDA4'] = function(p0) {
    const $res = natives.getVehicleModelNumberOfSeats(p0);
    return $res;
}
hashes['0xF7F203E31F96F6A1'] = function(p0, p1) {
    const $res = natives.isSeatWarpOnly(p0, p1);
    return $res;
}
hashes['0xE33FFA906CE74880'] = function(p0, p1) {
    const $res = natives.isTurretSeat(p0, p1);
    return $res;
}
hashes['0x4E417C547182C84D'] = function(p0) {
    const $res = natives.doesVehicleAllowRappel(p0);
    return $res;
}
hashes['0x245A6883D966D537'] = function(p0) {
    const $res = natives.setVehicleDensityMultiplierThisFrame(p0);
    return $res;
}
hashes['0xB3B3359379FE77D3'] = function(p0) {
    const $res = natives.setRandomVehicleDensityMultiplierThisFrame(p0);
    return $res;
}
hashes['0xEAE6DCC7EEE3DB1D'] = function(p0) {
    const $res = natives.setParkedVehicleDensityMultiplierThisFrame(p0);
    return $res;
}
hashes['0xD4B8E3D1917BC86B'] = function(p0) {
    const $res = natives.setDisableRandomTrainsThisFrame(p0);
    return $res;
}
hashes['0x90B6DA738A9A25DA'] = function(p0) {
    const $res = natives.setAmbientVehicleRangeMultiplierThisFrame(p0);
    return $res;
}
hashes['0x26324F33423F3CC3'] = function(p0) {
    const $res = natives.setFarDrawVehicles(p0);
    return $res;
}
hashes['0xCAA15F13EBD417FF'] = function(p0) {
    const $res = natives.setNumberOfParkedVehicles(p0);
    return $res;
}
hashes['0xB664292EAECF7FA6'] = function(p0, p1) {
    const $res = natives.setVehicleDoorsLocked(p0, p1);
    return $res;
}
hashes['0xBE70724027F85BCD'] = function(p0, p1, p2) {
    const $res = natives.setVehicleIndividualDoorsLocked(p0, p1, p2);
    return $res;
}
hashes['0xD8050E0EB60CF274'] = function(p0, p1) {
    const $res = natives.setVehicleHasMutedSirens(p0, p1);
    return $res;
}
hashes['0x517AAF684BB50CD1'] = function(p0, p1, p2) {
    const $res = natives.setVehicleDoorsLockedForPlayer(p0, p1, p2);
    return $res;
}
hashes['0xF6AF6CB341349015'] = function(p0, p1) {
    const $res = natives.getVehicleDoorsLockedForPlayer(p0, p1);
    return $res;
}
hashes['0xA2F80B8D040727CC'] = function(p0, p1) {
    const $res = natives.setVehicleDoorsLockedForAllPlayers(p0, p1);
    return $res;
}
hashes['0x9737A37136F07E75'] = function(p0, p1) {
    const $res = natives.setVehicleDoorsLockedForNonScriptPlayers(p0, p1);
    return $res;
}
hashes['0xB81F6D4A8F5EEBA8'] = function(p0, p1, p2) {
    const $res = natives.setVehicleDoorsLockedForTeam(p0, p1, p2);
    return $res;
}
hashes['0x203B527D1B77904C'] = function(p0, p1) {
    const $res = natives.setVehicleDoorsLockedForAllTeams(p0, p1);
    return $res;
}
hashes['0x76D26A22750E849E'] = function(p0) {
    const $res = natives.setVehicleDontTerminateTaskWhenAchieved(p0);
    return $res;
}
hashes['0xBA71116ADF5B514C'] = function(p0, p1, p2) {
    const $res = natives.explodeVehicle(p0, p1, p2);
    return $res;
}
hashes['0xF19D095E42D430CC'] = function(p0, p1, p2) {
    const $res = natives.setVehicleOutOfControl(p0, p1, p2);
    return $res;
}
hashes['0x2E0A74E1002380B1'] = function(p0, p1, p2) {
    const $res = natives.setVehicleTimedExplosion(p0, p1, p2);
    return $res;
}
hashes['0x99AD4CCCB128CBC9'] = function(p0) {
    const $res = natives.addVehiclePhoneExplosiveDevice(p0);
    return $res;
}
hashes['0xAA3F739ABDDCF21F'] = function() {
    const $res = natives.clearVehiclePhoneExplosiveDevice();
    return $res;
}
hashes['0x6ADAABD3068C5235'] = function() {
    const $res = natives.hasVehiclePhoneExplosiveDevice();
    return $res;
}
hashes['0xEF49CF0270307CBE'] = function() {
    const $res = natives.detonateVehiclePhoneExplosiveDevice();
    return $res;
}
hashes['0x598803E85E8448D9'] = function(p0, p1) {
    const $res = natives.setTaxiLights(p0, p1);
    return $res;
}
hashes['0x7504C0F113AB50FC'] = function(p0) {
    const $res = natives.isTaxiLightOn(p0);
    return $res;
}
hashes['0xCEE4490CD57BB3C2'] = function(p0, p1) {
    const $res = natives.isVehicleInGarageArea(p0, p1);
    return $res;
}
hashes['0x4F1D4BE3A7F24601'] = function(p0, p1, p2) {
    const $res = natives.setVehicleColours(p0, p1, p2);
    return $res;
}
hashes['0x8B7FD87F0DDB421E'] = function(p0, p1) {
    const $res = natives.setVehicleFullbeam(p0, p1);
    return $res;
}
hashes['0x07116E24E9D1929D'] = function(p0, p1) {
    const $res = natives.setVehicleIsRacing(p0, p1);
    return $res;
}
hashes['0x7141766F91D15BEA'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleCustomPrimaryColour(p0, p1, p2, p3);
    return $res;
}
hashes['0xB64CF2CCA9D95F52'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument r should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument g should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument b should be an array');
    const $res = natives.getVehicleCustomPrimaryColour(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0x55E1D2758F34E437'] = function(p0) {
    const $res = natives.clearVehicleCustomPrimaryColour(p0);
    return $res;
}
hashes['0xF095C0405307B21B'] = function(p0) {
    const $res = natives.getIsVehiclePrimaryColourCustom(p0);
    return $res;
}
hashes['0x36CED73BFED89754'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleCustomSecondaryColour(p0, p1, p2, p3);
    return $res;
}
hashes['0x8389CD56CA8072DC'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument r should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument g should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument b should be an array');
    const $res = natives.getVehicleCustomSecondaryColour(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0x5FFBDEEC3E8E2009'] = function(p0) {
    const $res = natives.clearVehicleCustomSecondaryColour(p0);
    return $res;
}
hashes['0x910A32E7AAD2656C'] = function(p0) {
    const $res = natives.getIsVehicleSecondaryColourCustom(p0);
    return $res;
}
hashes['0x3AFDC536C3D01674'] = function(p0, p1) {
    const $res = natives.setVehicleEnveffScale(p0, p1);
    return $res;
}
hashes['0xA82819CAC9C4C403'] = function(p0) {
    const $res = natives.getVehicleEnveffScale(p0);
    return $res;
}
hashes['0x52BBA29D5EC69356'] = function(p0, p1) {
    const $res = natives.setCanResprayVehicle(p0, p1);
    return $res;
}
hashes['0xAB31EF4DE6800CE9'] = function(p0, p1) {
    const $res = natives.setGoonBossVehicle(p0, p1);
    return $res;
}
hashes['0x1B212B26DD3C04DF'] = function(p0, p1) {
    const $res = natives.setOpenRearDoorsOnExplosion(p0, p1);
    return $res;
}
hashes['0x33506883545AC0DF'] = function(p0, p1) {
    const $res = natives.forceSubmarineSurfaceMode(p0, p1);
    return $res;
}
hashes['0xC67DB108A9ADE3BE'] = function(p0, p1) {
    const $res = natives.forceSubmarineNeurtalBuoyancy(p0, p1);
    return $res;
}
hashes['0xC59872A5134879C7'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setSubmarineCrushDepths(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x3E71D0B300B7AA79'] = function(p0) {
    const $res = natives.getSubmarineIsUnderDesignDepth(p0);
    return $res;
}
hashes['0x093D6DDCA5B8FBAE'] = function(p0) {
    const $res = natives.getSubmarineNumberOfAirLeaks(p0);
    return $res;
}
hashes['0xED5EDE9E676643C9'] = function(p0, p1) {
    const $res = natives.setBoatIgnoreLandProbes(p0, p1);
    return $res;
}
hashes['0x85FC953F6C6CBDE1'] = function(p0, p1) {
    const $res = natives.setBoundsAffectWaterProbes(p0, p1);
    return $res;
}
hashes['0x75DBEC174AEEAD10'] = function(p0, p1) {
    const $res = natives.setBoatAnchor(p0, p1);
    return $res;
}
hashes['0x26C10ECBDA5D043B'] = function(p0) {
    const $res = natives.canAnchorBoatHere(p0);
    return $res;
}
hashes['0x24F4121D07579880'] = function(p0) {
    const $res = natives.canAnchorBoatHereIgnorePlayers(p0);
    return $res;
}
hashes['0xE3EBAAE484798530'] = function(p0, p1) {
    const $res = natives.setBoatRemainsAnchoredWhilePlayerIsDriver(p0, p1);
    return $res;
}
hashes['0xB28B1FE5BFADD7F5'] = function(p0, p1) {
    const $res = natives.setForceLowLodAnchorMode(p0, p1);
    return $res;
}
hashes['0xE842A9398079BD82'] = function(p0, p1) {
    const $res = natives.setBoatLowLodAnchorDistance(p0, p1);
    return $res;
}
hashes['0xB0AD1238A709B1A2'] = function(p0) {
    const $res = natives.isBoatAnchored(p0);
    return $res;
}
hashes['0x8F719973E1445BA2'] = function(p0, p1) {
    const $res = natives.setBoatSinksWhenWrecked(p0, p1);
    return $res;
}
hashes['0xBD32E46AA95C1DD2'] = function(p0) {
    const $res = natives.setBoatWrecked(p0);
    return $res;
}
hashes['0xF4924635A19EB37D'] = function(p0, p1) {
    const $res = natives.setVehicleSiren(p0, p1);
    return $res;
}
hashes['0x4C9BF537BE2634B2'] = function(p0) {
    const $res = natives.isVehicleSirenOn(p0);
    return $res;
}
hashes['0xB5CC40FBCB586380'] = function(p0) {
    const $res = natives.isVehicleSirenAudioOn(p0);
    return $res;
}
hashes['0x3E8C8727991A8A0B'] = function(p0, p1) {
    const $res = natives.setVehicleStrong(p0, p1);
    return $res;
}
hashes['0x8386BFB614D06749'] = function(p0) {
    const $res = natives.removeVehicleStuckCheck(p0);
    return $res;
}
hashes['0xA19435F193E081AC'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument colorPrimary should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument colorSecondary should be an array');
    const $res = natives.getVehicleColours(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    return $res[0];
}
hashes['0x22AC59A870E6A669'] = function(p0, p1, p2) {
    const $res = natives.isVehicleSeatFree(p0, p1, p2);
    return $res;
}
hashes['0xBB40DD2270B65366'] = function(p0, p1, p2) {
    const $res = natives.getPedInVehicleSeat(p0, p1, p2);
    return $res;
}
hashes['0x83F969AA1EE2A664'] = function(p0, p1) {
    const $res = natives.getLastPedInVehicleSeat(p0, p1);
    return $res;
}
hashes['0xB91B4C20085BD12F'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument lightsOn should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument highbeamsOn should be an array');
    const $res = natives.getVehicleLightsState(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    return $res[0];
}
hashes['0xBA291848A0815CA9'] = function(p0, p1, p2) {
    const $res = natives.isVehicleTyreBurst(p0, p1, p2);
    return $res;
}
hashes['0xAB54A438726D25D5'] = function(p0, p1) {
    const $res = natives.setVehicleForwardSpeed(p0, p1);
    return $res;
}
hashes['0x6501129C9E0FFA05'] = function(p0, p1) {
    const $res = natives.setVehicleForwardSpeedXy(p0, p1);
    return $res;
}
hashes['0x260BE8F09E326A20'] = function(p0, p1, p2, p3) {
    const $res = natives.bringVehicleToHalt(p0, p1, p2, p3);
    return $res;
}
hashes['0xDCE97BDF8A0EABC8'] = function(p0, p1) {
    const $res = natives.setVehicleSteerForBuildings(p0, p1);
    return $res;
}
hashes['0x9849DE24FCF23CCC'] = function(p0, p1) {
    const $res = natives.setVehicleCausesSwerving(p0, p1);
    return $res;
}
hashes['0x8664170EF165C4A6'] = function(p0, p1) {
    const $res = natives.setIgnorePlanesSmallPitchChange(p0, p1);
    return $res;
}
hashes['0x7C06330BFDDA182E'] = function(p0) {
    const $res = natives.stopBringingVehicleToHalt(p0);
    return $res;
}
hashes['0xC69BB1D832A710EF'] = function(p0) {
    const $res = natives.isVehicleBeingBroughtToHalt(p0);
    return $res;
}
hashes['0x923A293361DF44E5'] = function(p0) {
    const $res = natives.lowerForkliftForks(p0);
    return $res;
}
hashes['0x37EBBF3117BD6A25'] = function(p0, p1) {
    const $res = natives.setForkliftForkHeight(p0, p1);
    return $res;
}
hashes['0x57715966069157AD'] = function(p0, p1) {
    const $res = natives.isEntityAttachedToHandlerFrame(p0, p1);
    return $res;
}
hashes['0x62CA17B74C435651'] = function(p0) {
    const $res = natives.isAnyEntityAttachedToHandlerFrame(p0);
    return $res;
}
hashes['0x375E7FC44F21C8AB'] = function(p0) {
    const $res = natives.findHandlerVehicleContainerIsAttachedTo(p0);
    return $res;
}
hashes['0x89D630CF5EA96D23'] = function(p0, p1) {
    const $res = natives.isHandlerFrameLinedUpWithContainer(p0, p1);
    return $res;
}
hashes['0x6A98C2ECF57FA5D4'] = function(p0, p1) {
    const $res = natives.attachContainerToHandlerFrameWhenLinedUp(p0, p1);
    return $res;
}
hashes['0x7C0043FDFF6436BC'] = function(p0) {
    const $res = natives.detachContainerFromHandlerFrame(p0);
    return $res;
}
hashes['0x8AA9180DE2FEDD45'] = function(p0, p1) {
    const $res = natives.setVehicleDisableHeightMapAvoidance(p0, p1);
    return $res;
}
hashes['0x0A6A279F3AA4FD70'] = function(p0, p1) {
    const $res = natives.setBoatDisableAvoidance(p0, p1);
    return $res;
}
hashes['0x634148744F385576'] = function(p0) {
    const $res = natives.isHeliLandingAreaBlocked(p0);
    return $res;
}
hashes['0x107A473D7A6647A9'] = function(p0) {
    const $res = natives.setShortSlowdownForLanding(p0);
    return $res;
}
hashes['0xE6F13851780394DA'] = function(p0, p1) {
    const $res = natives.setHeliTurbulenceScalar(p0, p1);
    return $res;
}
hashes['0xFC40CBF7B90CA77C'] = function(p0) {
    const $res = natives.setCarBootOpen(p0);
    return $res;
}
hashes['0xEC6A202EE4960385'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleTyreBurst(p0, p1, p2, p3);
    return $res;
}
hashes['0x781B3D62BB013EF5'] = function(p0, p1) {
    const $res = natives.setVehicleDoorsShut(p0, p1);
    return $res;
}
hashes['0xEB9DC3C7D8596C46'] = function(p0, p1) {
    const $res = natives.setVehicleTyresCanBurst(p0, p1);
    return $res;
}
hashes['0x678B9BB8C3F58FEB'] = function(p0) {
    const $res = natives.getVehicleTyresCanBurst(p0);
    return $res;
}
hashes['0x29B18B4FD460CA8F'] = function(p0, p1) {
    const $res = natives.setVehicleWheelsCanBreak(p0, p1);
    return $res;
}
hashes['0x7C65DAC73C35C862'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleDoorOpen(p0, p1, p2, p3);
    return $res;
}
hashes['0x3B458DDB57038F08'] = function(p0, p1, p2) {
    const $res = natives.setVehicleDoorAutoLock(p0, p1, p2);
    return $res;
}
hashes['0xA247F9EF01D8082E'] = function(p0) {
    const $res = natives.setFleeingVehiclesUseSwitchedOffNodes(p0);
    return $res;
}
hashes['0xA711568EEDB43069'] = function(p0, p1) {
    const $res = natives.removeVehicleWindow(p0, p1);
    return $res;
}
hashes['0x85796B0549DDE156'] = function(p0) {
    const $res = natives.rollDownWindows(p0);
    return $res;
}
hashes['0x7AD9E6CE657D69E3'] = function(p0, p1) {
    const $res = natives.rollDownWindow(p0, p1);
    return $res;
}
hashes['0x602E548F46E24D59'] = function(p0, p1) {
    const $res = natives.rollUpWindow(p0, p1);
    return $res;
}
hashes['0x9E5B5E4D2CCD2259'] = function(p0, p1) {
    const $res = natives.smashVehicleWindow(p0, p1);
    return $res;
}
hashes['0x772282EBEB95E682'] = function(p0, p1) {
    const $res = natives.fixVehicleWindow(p0, p1);
    return $res;
}
hashes['0x6D645D59FB5F5AD3'] = function(p0) {
    const $res = natives.popOutVehicleWindscreen(p0);
    return $res;
}
hashes['0xE38CB9D7D39FDBCC'] = function(p0, p1, p2, p3) {
    const $res = natives.popOffVehicleRoofWithImpulse(p0, p1, p2, p3);
    return $res;
}
hashes['0x34E710FF01247C5A'] = function(p0, p1) {
    const $res = natives.setVehicleLights(p0, p1);
    return $res;
}
hashes['0xC45C27EF50F36ADC'] = function(p0, p1) {
    const $res = natives.setVehicleUsePlayerLightSettings(p0, p1);
    return $res;
}
hashes['0x1FD09E7390A74D54'] = function(p0, p1) {
    const $res = natives.setVehicleHeadlightShadows(p0, p1);
    return $res;
}
hashes['0xCDE5E70C1DDB954C'] = function(p0, p1) {
    const $res = natives.setVehicleAlarm(p0, p1);
    return $res;
}
hashes['0xB8FF7AB45305C345'] = function(p0) {
    const $res = natives.startVehicleAlarm(p0);
    return $res;
}
hashes['0x4319E335B71FFF34'] = function(p0) {
    const $res = natives.isVehicleAlarmActivated(p0);
    return $res;
}
hashes['0xBC2042F090AF6AD3'] = function(p0, p1) {
    const $res = natives.setVehicleInteriorlight(p0, p1);
    return $res;
}
hashes['0x8821196D91FA2DE5'] = function(p0, p1) {
    const $res = natives.setVehicleForceInteriorlight(p0, p1);
    return $res;
}
hashes['0xB385454F8791F57C'] = function(p0, p1) {
    const $res = natives.setVehicleLightMultiplier(p0, p1);
    return $res;
}
hashes['0x3C7D42D58F770B54'] = function(p0, p1, p2) {
    const $res = natives.attachVehicleToTrailer(p0, p1, p2);
    return $res;
}
hashes['0x16B5E274BDE402F8'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    const $res = natives.attachVehicleOnToTrailer(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
    return $res;
}
hashes['0x374706271354CB18'] = function(p0, p1, p2) {
    const $res = natives.stabiliseEntityAttachedToHeli(p0, p1, p2);
    return $res;
}
hashes['0x90532EDF0D2BDD86'] = function(p0) {
    const $res = natives.detachVehicleFromTrailer(p0);
    return $res;
}
hashes['0xE7CF3C4F9F489F0C'] = function(p0) {
    const $res = natives.isVehicleAttachedToTrailer(p0);
    return $res;
}
hashes['0x2A8F319B392E7B3F'] = function(p0, p1) {
    const $res = natives.setTrailerInverseMassScale(p0, p1);
    return $res;
}
hashes['0x95CF53B3D687F9FA'] = function(p0) {
    const $res = natives.setTrailerLegsRaised(p0);
    return $res;
}
hashes['0x878C75C09FBDB942'] = function(p0) {
    const $res = natives.setTrailerLegsLowered(p0);
    return $res;
}
hashes['0x6E13FC662B882D1D'] = function(p0, p1) {
    const $res = natives.setVehicleTyreFixed(p0, p1);
    return $res;
}
hashes['0x95A88F0B409CDA47'] = function(p0, p1) {
    const $res = natives.setVehicleNumberPlateText(p0, p1);
    return $res;
}
hashes['0x7CE1CCB9B293020E'] = function(p0) {
    const $res = natives.getVehicleNumberPlateText(p0);
    return $res;
}
hashes['0x4C4D6B2644F458CB'] = function() {
    const $res = natives.getNumberOfVehicleNumberPlates();
    return $res;
}
hashes['0x9088EB5A43FFB0A1'] = function(p0, p1) {
    const $res = natives.setVehicleNumberPlateTextIndex(p0, p1);
    return $res;
}
hashes['0xF11BC2DD9A3E7195'] = function(p0) {
    const $res = natives.getVehicleNumberPlateTextIndex(p0);
    return $res;
}
hashes['0x80D9F74197EA47D9'] = function(p0) {
    const $res = natives.setRandomTrains(p0);
    return $res;
}
hashes['0x63C6CCA8E68AE8C8'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.createMissionTrain(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xFD813BB7DB977F20'] = function(p0, p1) {
    const $res = natives.switchTrainTrack(p0, p1);
    return $res;
}
hashes['0x21973BBF8D17EDFA'] = function(p0, p1) {
    const $res = natives.setTrainTrackSpawnFrequency(p0, p1);
    return $res;
}
hashes['0x2310A8F9421EBF43'] = function(p0) {
    const $res = natives.allowTrainToBeRemovedByPopulation(p0);
    return $res;
}
hashes['0x736A718577F39C7D'] = function() {
    const $res = natives.deleteAllTrains();
    return $res;
}
hashes['0xAA0BC91BE0B796E3'] = function(p0, p1) {
    const $res = natives.setTrainSpeed(p0, p1);
    return $res;
}
hashes['0x16469284DB8C62B5'] = function(p0, p1) {
    const $res = natives.setTrainCruiseSpeed(p0, p1);
    return $res;
}
hashes['0x84436EC293B1415F'] = function(p0) {
    const $res = natives.setRandomBoats(p0);
    return $res;
}
hashes['0xDA5E12F728DB30CA'] = function(p0) {
    const $res = natives.setRandomBoatsMp(p0);
    return $res;
}
hashes['0x2AFD795EEAC8D30D'] = function(p0) {
    const $res = natives.setGarbageTrucks(p0);
    return $res;
}
hashes['0x57E4C39DE5EE8470'] = function(p0) {
    const $res = natives.doesVehicleHaveStuckVehicleCheck(p0);
    return $res;
}
hashes['0x21543C612379DB3C'] = function(p0, p1) {
    const $res = natives.getVehicleRecordingId(p0, p1);
    return $res;
}
hashes['0xAF514CABE74CBF15'] = function(p0, p1) {
    const $res = natives.requestVehicleRecording(p0, p1);
    return $res;
}
hashes['0x300D614A4C785FC4'] = function(p0, p1) {
    const $res = natives.hasVehicleRecordingBeenLoaded(p0, p1);
    return $res;
}
hashes['0xF1160ACCF98A3FC8'] = function(p0, p1) {
    const $res = natives.removeVehicleRecording(p0, p1);
    return $res;
}
hashes['0x92523B76657A517D'] = function(p0, p1) {
    const $res = natives.getPositionOfVehicleRecordingIdAtTime(p0, p1);
    return new mp.Vector3($res);
}
hashes['0xD242728AA6F0FBA2'] = function(p0, p1, p2) {
    const $res = natives.getPositionOfVehicleRecordingAtTime(p0, p1, p2);
    return new mp.Vector3($res);
}
hashes['0xF0F2103EFAF8CBA7'] = function(p0, p1) {
    const $res = natives.getRotationOfVehicleRecordingIdAtTime(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x2058206FBE79A8AD'] = function(p0, p1, p2) {
    const $res = natives.getRotationOfVehicleRecordingAtTime(p0, p1, p2);
    return new mp.Vector3($res);
}
hashes['0x102D125411A7B6E6'] = function(p0) {
    const $res = natives.getTotalDurationOfVehicleRecordingId(p0);
    return $res;
}
hashes['0x0E48D1C262390950'] = function(p0, p1) {
    const $res = natives.getTotalDurationOfVehicleRecording(p0, p1);
    return $res;
}
hashes['0x2DACD605FC681475'] = function(p0) {
    const $res = natives.getPositionInRecording(p0);
    return $res;
}
hashes['0x5746F3A7AB7FE544'] = function(p0) {
    const $res = natives.getTimePositionInRecording(p0);
    return $res;
}
hashes['0x3F878F92B3A7A071'] = function(p0, p1, p2, p3) {
    const $res = natives.startPlaybackRecordedVehicle(p0, p1, p2, p3);
    return $res;
}
hashes['0x7D80FD645D4DA346'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.startPlaybackRecordedVehicleWithFlags(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x1F2E4E06DEA8992B'] = function(p0, p1) {
    const $res = natives.forcePlaybackRecordedVehicleUpdate(p0, p1);
    return $res;
}
hashes['0x54833611C17ABDEA'] = function(p0) {
    const $res = natives.stopPlaybackRecordedVehicle(p0);
    return $res;
}
hashes['0x632A689BF42301B1'] = function(p0) {
    const $res = natives.pausePlaybackRecordedVehicle(p0);
    return $res;
}
hashes['0x8879EE09268305D5'] = function(p0) {
    const $res = natives.unpausePlaybackRecordedVehicle(p0);
    return $res;
}
hashes['0x1C8A4C2C19E68EEC'] = function(p0) {
    const $res = natives.isPlaybackGoingOnForVehicle(p0);
    return $res;
}
hashes['0xAEA8FD591FAD4106'] = function(p0) {
    const $res = natives.isPlaybackUsingAiGoingOnForVehicle(p0);
    return $res;
}
hashes['0x42BC05C27A946054'] = function(p0) {
    const $res = natives.getCurrentPlaybackForVehicle(p0);
    return $res;
}
hashes['0xAB8E2EDA0C0A5883'] = function(p0) {
    const $res = natives.skipToEndAndStopPlaybackRecordedVehicle(p0);
    return $res;
}
hashes['0x6683AB880E427778'] = function(p0, p1) {
    const $res = natives.setPlaybackSpeed(p0, p1);
    return $res;
}
hashes['0x29DE5FA52D00428C'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.startPlaybackRecordedVehicleUsingAi(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x9438F7AD68771A20'] = function(p0, p1) {
    const $res = natives.skipTimeInPlaybackRecordedVehicle(p0, p1);
    return $res;
}
hashes['0xA549C3B37EA28131'] = function(p0, p1) {
    const $res = natives.setPlaybackToUseAi(p0, p1);
    return $res;
}
hashes['0x6E63860BBB190730'] = function(p0, p1, p2, p3) {
    const $res = natives.setPlaybackToUseAiTryToRevertBackLater(p0, p1, p2, p3);
    return $res;
}
hashes['0x5845066D8A1EA7F7'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setAdditionalRotationForRecordedVehiclePlayback(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x796A877E459B99EA'] = function(p0, p1, p2, p3) {
    const $res = natives.setPositionOffsetForRecordedVehiclePlayback(p0, p1, p2, p3);
    return $res;
}
hashes['0xFAF2A78061FD9EF4'] = function(p0, p1, p2, p3) {
    const $res = natives.setGlobalPositionOffsetForRecordedVehiclePlayback(p0, p1, p2, p3);
    return $res;
}
hashes['0x063AE2B2CC273588'] = function(p0, p1) {
    const $res = natives.setShouldLerpFromAiToFullRecording(p0, p1);
    return $res;
}
hashes['0x786A4EB67B01BF0B'] = function(p0, p1) {
    const $res = natives.explodeVehicleInCutscene(p0, p1);
    return $res;
}
hashes['0x2FA9923062DD396C'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.addVehicleStuckCheckWithWarp(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x0FC2D89AC25A5814'] = function(p0, p1) {
    const $res = natives.setVehicleModelIsSuppressed(p0, p1);
    return $res;
}
hashes['0x386F6CE5BAF6091C'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.getRandomVehicleInSphere(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xC5574E0AEB86BA68'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.getRandomVehicleFrontBumperInSphere(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xB50807EABE20A8DC'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.getRandomVehicleBackBumperInSphere(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xF73EB622C4F1689B'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.getClosestVehicle(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x08AAFD0814722BC3'] = function(p0, p1) {
    const $res = natives.getTrainCarriage(p0, p1);
    return $res;
}
hashes['0xAD464F2E18836BFC'] = function(p0) {
    const $res = natives.isMissionTrain(p0);
    return $res;
}
hashes['0x5B76B14AE875C795'] = function(p0) {
    if (!Array.isArray(p0)) throw new Error('Argument train should be an array');
    const $res = natives.deleteMissionTrain();
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0xBBE7648349B49BE8'] = function(p0, p1) {
    if (!Array.isArray(p0)) throw new Error('Argument train should be an array');
    const $res = natives.setMissionTrainAsNoLongerNeeded(p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p0[0] = $res[1];
    return $res[0];
}
hashes['0x591CA673AA6AB736'] = function(p0, p1, p2, p3) {
    const $res = natives.setMissionTrainCoords(p0, p1, p2, p3);
    return $res;
}
hashes['0x45A9187928F4B9E3'] = function(p0) {
    const $res = natives.isThisModelABoat(p0);
    return $res;
}
hashes['0x9537097412CF75FE'] = function(p0) {
    const $res = natives.isThisModelAJetski(p0);
    return $res;
}
hashes['0xA0948AB42D7BA0DE'] = function(p0) {
    const $res = natives.isThisModelAPlane(p0);
    return $res;
}
hashes['0xDCE4334788AF94EA'] = function(p0) {
    const $res = natives.isThisModelAHeli(p0);
    return $res;
}
hashes['0x7F6DB52EEFC96DF8'] = function(p0) {
    const $res = natives.isThisModelACar(p0);
    return $res;
}
hashes['0xAB935175B22E822B'] = function(p0) {
    const $res = natives.isThisModelATrain(p0);
    return $res;
}
hashes['0xB50C0B0CEDC6CE84'] = function(p0) {
    const $res = natives.isThisModelABike(p0);
    return $res;
}
hashes['0xBF94DD42F63BDED2'] = function(p0) {
    const $res = natives.isThisModelABicycle(p0);
    return $res;
}
hashes['0x39DAC362EE65FA28'] = function(p0) {
    const $res = natives.isThisModelAQuadbike(p0);
    return $res;
}
hashes['0x633F6F44A537EBB6'] = function(p0) {
    const $res = natives.isThisModelAnAmphibiousCar(p0);
    return $res;
}
hashes['0xA1A9FC1C76A6730D'] = function(p0) {
    const $res = natives.isThisModelAnAmphibiousQuadbike(p0);
    return $res;
}
hashes['0xA178472EBB8AE60D'] = function(p0) {
    const $res = natives.setHeliBladesFullSpeed(p0);
    return $res;
}
hashes['0xFD280B4D7F3ABC4D'] = function(p0, p1) {
    const $res = natives.setHeliBladesSpeed(p0, p1);
    return $res;
}
hashes['0x99CAD8E7AFDB60FA'] = function(p0, p1, p2) {
    const $res = natives.forceSubThrottleForTime(p0, p1, p2);
    return $res;
}
hashes['0x3750146A28097A82'] = function(p0, p1) {
    const $res = natives.setVehicleCanBeTargetted(p0, p1);
    return $res;
}
hashes['0xDBC631F109350B8C'] = function(p0, p1) {
    const $res = natives.setDontAllowPlayerToEnterVehicleIfLockedForPlayer(p0, p1);
    return $res;
}
hashes['0x4C7028F78FFD3681'] = function(p0, p1) {
    const $res = natives.setVehicleCanBeVisiblyDamaged(p0, p1);
    return $res;
}
hashes['0x1AA8A837D2169D94'] = function(p0, p1) {
    const $res = natives.setVehicleHasUnbreakableLights(p0, p1);
    return $res;
}
hashes['0x2311DD7159F00582'] = function(p0, p1) {
    const $res = natives.setVehicleRespectsLocksWhenHasDriver(p0, p1);
    return $res;
}
hashes['0x065D03A9D6B2C6B5'] = function(p0, p1) {
    const $res = natives.setVehicleCanEjectPassengersIfLocked(p0, p1);
    return $res;
}
hashes['0x8F17BC8BA08DA62B'] = function(p0) {
    const $res = natives.getVehicleDirtLevel(p0);
    return $res;
}
hashes['0x79D3B596FE44EE8B'] = function(p0, p1) {
    const $res = natives.setVehicleDirtLevel(p0, p1);
    return $res;
}
hashes['0xBCDC5017D3CE1E9E'] = function(p0) {
    const $res = natives.getDoesVehicleHaveDamageDecals(p0);
    return $res;
}
hashes['0x3E933CFF7B111C22'] = function(p0, p1) {
    const $res = natives.isVehicleDoorFullyOpen(p0, p1);
    return $res;
}
hashes['0x2497C4717C8B881E'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleEngineOn(p0, p1, p2, p3);
    return $res;
}
hashes['0x8ABA6AF54B942B95'] = function(p0, p1) {
    const $res = natives.setVehicleUndriveable(p0, p1);
    return $res;
}
hashes['0x5AFEEDD9BB2899D7'] = function(p0, p1) {
    const $res = natives.setVehicleProvidesCover(p0, p1);
    return $res;
}
hashes['0xF2BFA0430F0A0FCB'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleDoorControl(p0, p1, p2, p3);
    return $res;
}
hashes['0xA5A9653A8D2CAF48'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setVehicleDoorLatched(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xFE3F9C29F7B32BD5'] = function(p0, p1) {
    const $res = natives.getVehicleDoorAngleRatio(p0, p1);
    return $res;
}
hashes['0x218297BF0CFD853B'] = function(p0, p1) {
    const $res = natives.getPedUsingVehicleDoor(p0, p1);
    return $res;
}
hashes['0x93D9BD300D7789E5'] = function(p0, p1, p2) {
    const $res = natives.setVehicleDoorShut(p0, p1, p2);
    return $res;
}
hashes['0xD4D4F6A4AB575A33'] = function(p0, p1, p2) {
    const $res = natives.setVehicleDoorBroken(p0, p1, p2);
    return $res;
}
hashes['0x59BF8C3D52C92F66'] = function(p0, p1) {
    const $res = natives.setVehicleCanBreak(p0, p1);
    return $res;
}
hashes['0x8AC862B0B32C5B80'] = function(p0) {
    const $res = natives.doesVehicleHaveRoof(p0);
    return $res;
}
hashes['0xC4B3347BD68BD609'] = function(p0) {
    const $res = natives.setVehicleRemoveAggressiveCarjackMission(p0);
    return $res;
}
hashes['0xD3301660A57C9272'] = function(p0) {
    const $res = natives.setVehicleAvoidPlayerVehicleRiotVanMission(p0);
    return $res;
}
hashes['0xB9562064627FF9DB'] = function(p0, p1) {
    const $res = natives.setCarjackMissionRemovalParameters(p0, p1);
    return $res;
}
hashes['0x9F243D3919F442FE'] = function(p0) {
    const $res = natives.isBigVehicle(p0);
    return $res;
}
hashes['0x3B963160CD65D41E'] = function(p0) {
    const $res = natives.getNumberOfVehicleColours(p0);
    return $res;
}
hashes['0x33E8CD3322E2FE31'] = function(p0, p1) {
    const $res = natives.setVehicleColourCombination(p0, p1);
    return $res;
}
hashes['0x6A842D197F845D56'] = function(p0) {
    const $res = natives.getVehicleColourCombination(p0);
    return $res;
}
hashes['0xE41033B25D003A07'] = function(p0, p1) {
    const $res = natives.setVehicleXenonLightColorIndex(p0, p1);
    return $res;
}
hashes['0x3DFF319A831E0CDB'] = function(p0) {
    const $res = natives.getVehicleXenonLightColorIndex(p0);
    return $res;
}
hashes['0x31B927BBC44156CD'] = function(p0, p1) {
    const $res = natives.setVehicleIsConsideredByPlayer(p0, p1);
    return $res;
}
hashes['0xBE5C1255A1830FF5'] = function(p0, p1) {
    const $res = natives.setVehicleWillForceOtherVehiclesToStop(p0, p1);
    return $res;
}
hashes['0x9BECD4B9FEF3F8A6'] = function(p0, p1) {
    const $res = natives.setVehicleActAsIfHasSirenOn(p0, p1);
    return $res;
}
hashes['0x88BC673CA9E0AE99'] = function(p0, p1) {
    const $res = natives.setVehicleUseMoreRestrictiveSpawnChecks(p0, p1);
    return $res;
}
hashes['0xE851E480B814D4BA'] = function(p0, p1) {
    const $res = natives.setVehicleMayBeUsedByGotoPointAnyMeans(p0, p1);
    return $res;
}
hashes['0x055BF0AC0C34F4FD'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument modelHash should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument successIndicator should be an array');
    const $res = natives.getRandomVehicleModelInMemory(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    return $res[0];
}
hashes['0x25BC98A59C2EA962'] = function(p0) {
    const $res = natives.getVehicleDoorLockStatus(p0);
    return $res;
}
hashes['0xCA4AC3EAAE46EC7B'] = function(p0, p1) {
    const $res = natives.getVehicleIndividualDoorLockStatus(p0, p1);
    return $res;
}
hashes['0xB8E181E559464527'] = function(p0, p1) {
    const $res = natives.isVehicleDoorDamaged(p0, p1);
    return $res;
}
hashes['0x2FA133A4A9D37ED8'] = function(p0, p1, p2) {
    const $res = natives.setDoorAllowedToBeBrokenOff(p0, p1, p2);
    return $res;
}
hashes['0x27B926779DEB502D'] = function(p0, p1) {
    const $res = natives.isVehicleBumperBouncing(p0, p1);
    return $res;
}
hashes['0x468056A6BB6F3846'] = function(p0, p1) {
    const $res = natives.isVehicleBumperBrokenOff(p0, p1);
    return $res;
}
hashes['0x7EEF65D5F153E26A'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.isCopVehicleInArea3d(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xB104CD1BABF302E2'] = function(p0) {
    const $res = natives.isVehicleOnAllWheels(p0);
    return $res;
}
hashes['0x5873C14A52D74236'] = function(p0) {
    const $res = natives.getVehicleModelValue(p0);
    return $res;
}
hashes['0x28D37D4F71AC5C58'] = function(p0) {
    const $res = natives.getVehicleLayoutHash(p0);
    return $res;
}
hashes['0xA01BC64DD4BFBBAC'] = function(p0, p1) {
    const $res = natives.getInVehicleClipsetHashForSeat(p0, p1);
    return $res;
}
hashes['0x317B11A312DF5534'] = function(p0, p1) {
    const $res = natives.setRenderTrainAsDerailed(p0, p1);
    return $res;
}
hashes['0x2036F561ADD12E33'] = function(p0, p1, p2) {
    const $res = natives.setVehicleExtraColours(p0, p1, p2);
    return $res;
}
hashes['0x3BC4245933A166F7'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument pearlescentColor should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument wheelColor should be an array');
    const $res = natives.getVehicleExtraColours(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    return $res[0];
}
hashes['0xF40DD601A65F7F19'] = function(p0, p1) {
    const $res = natives.setVehicleExtraColour5(p0, p1);
    return $res;
}
hashes['0x7D1464D472D32136'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument color should be an array');
    const $res = natives.getVehicleExtraColour5(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x6089CDF6A57F326C'] = function(p0, p1) {
    const $res = natives.setVehicleExtraColour6(p0, p1);
    return $res;
}
hashes['0xB7635E80A5C31BFF'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument color should be an array');
    const $res = natives.getVehicleExtraColour6(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x0F87E938BDF29D66'] = function() {
    const $res = natives.stopAllGarageActivity();
    return $res;
}
hashes['0x115722B1B9C14C1C'] = function(p0) {
    const $res = natives.setVehicleFixed(p0);
    return $res;
}
hashes['0x953DA1E1B12C0491'] = function(p0) {
    const $res = natives.setVehicleDeformationFixed(p0);
    return $res;
}
hashes['0x206BC5DC9D1AC70A'] = function(p0, p1) {
    const $res = natives.setVehicleCanEngineMissfire(p0, p1);
    return $res;
}
hashes['0x51BB2D88D31A914B'] = function(p0, p1) {
    const $res = natives.setVehicleCanLeakOil(p0, p1);
    return $res;
}
hashes['0x192547247864DFDD'] = function(p0, p1) {
    const $res = natives.setVehicleCanLeakPetrol(p0, p1);
    return $res;
}
hashes['0x465BF26AB9684352'] = function(p0, p1) {
    const $res = natives.setDisableVehiclePetrolTankFires(p0, p1);
    return $res;
}
hashes['0x37C8252A7C92D017'] = function(p0, p1) {
    const $res = natives.setDisableVehiclePetrolTankDamage(p0, p1);
    return $res;
}
hashes['0x91A0BD635321F145'] = function(p0, p1) {
    const $res = natives.setDisableVehicleEngineFires(p0, p1);
    return $res;
}
hashes['0xC50CE861B55EAB8B'] = function(p0, p1) {
    const $res = natives.setVehicleLimitSpeedWhenPlayerInactive(p0, p1);
    return $res;
}
hashes['0x6EBFB22D646FFC18'] = function(p0, p1) {
    const $res = natives.setVehicleStopInstantlyWhenPlayerInactive(p0, p1);
    return $res;
}
hashes['0x25367DE49D64CF16'] = function(p0, p1) {
    const $res = natives.setDisablePretendOccupants(p0, p1);
    return $res;
}
hashes['0x46A1E1A299EC4BBA'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.removeVehiclesFromGeneratorsInArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x42A8EC77D5150CBE'] = function(p0, p1) {
    const $res = natives.setVehicleSteerBias(p0, p1);
    return $res;
}
hashes['0xD2E6822DBFD6C8BD'] = function(p0, p1) {
    const $res = natives.isVehicleExtraTurnedOn(p0, p1);
    return $res;
}
hashes['0x7EE3A3C5E4A40CC9'] = function(p0, p1, p2) {
    const $res = natives.setVehicleExtra(p0, p1, p2);
    return $res;
}
hashes['0x1262D55792428154'] = function(p0, p1) {
    const $res = natives.doesExtraExist(p0, p1);
    return $res;
}
hashes['0x534E36D4DB9ECC5D'] = function(p0, p1) {
    const $res = natives.isExtraBrokenOff(p0, p1);
    return $res;
}
hashes['0xF39C4F538B5124C2'] = function(p0, p1) {
    const $res = natives.setConvertibleRoof(p0, p1);
    return $res;
}
hashes['0xDED51F703D0FA83D'] = function(p0, p1) {
    const $res = natives.lowerConvertibleRoof(p0, p1);
    return $res;
}
hashes['0x8F5FB35D7E88FC70'] = function(p0, p1) {
    const $res = natives.raiseConvertibleRoof(p0, p1);
    return $res;
}
hashes['0xF8C397922FC03F41'] = function(p0) {
    const $res = natives.getConvertibleRoofState(p0);
    return $res;
}
hashes['0x52F357A30698BCCE'] = function(p0, p1) {
    const $res = natives.isVehicleAConvertible(p0, p1);
    return $res;
}
hashes['0xBE4C854FFDB6EEBE'] = function(p0, p1) {
    const $res = natives.transformToSubmarine(p0, p1);
    return $res;
}
hashes['0x2A69FFD1B42BFF9E'] = function(p0, p1) {
    const $res = natives.transformToCar(p0, p1);
    return $res;
}
hashes['0xA77DC70BD689A1E5'] = function(p0) {
    const $res = natives.isVehicleInSubmarineMode(p0);
    return $res;
}
hashes['0x2959F696AE390A99'] = function(p0) {
    const $res = natives.isVehicleStoppedAtTrafficLights(p0);
    return $res;
}
hashes['0xA1DD317EA8FD4F29'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.setVehicleDamage(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0x35BB21DE06784373'] = function(p0, p1) {
    const $res = natives.setVehicleOccupantsTakeExplosiveDamage(p0, p1);
    return $res;
}
hashes['0xC45D23BAF168AAB8'] = function(p0) {
    const $res = natives.getVehicleEngineHealth(p0);
    return $res;
}
hashes['0x45F6D8EEF34ABEF1'] = function(p0, p1) {
    const $res = natives.setVehicleEngineHealth(p0, p1);
    return $res;
}
hashes['0x2A86A0475B6A1434'] = function(p0, p1) {
    const $res = natives.setPlaneEngineHealth(p0, p1);
    return $res;
}
hashes['0x7D5DABE888D2D074'] = function(p0) {
    const $res = natives.getVehiclePetrolTankHealth(p0);
    return $res;
}
hashes['0x70DB57649FA8D0D8'] = function(p0, p1) {
    const $res = natives.setVehiclePetrolTankHealth(p0, p1);
    return $res;
}
hashes['0x679BE1DAF71DA874'] = function(p0, p1, p2) {
    const $res = natives.isVehicleStuckTimerUp(p0, p1, p2);
    return $res;
}
hashes['0xD7591B0065AFAA7A'] = function(p0, p1) {
    const $res = natives.resetVehicleStuckTimer(p0, p1);
    return $res;
}
hashes['0x4C241E39B23DF959'] = function(p0, p1) {
    const $res = natives.isVehicleDriveable(p0, p1);
    return $res;
}
hashes['0x2B5F9D2AF1F1722D'] = function(p0, p1) {
    const $res = natives.setVehicleHasBeenOwnedByPlayer(p0, p1);
    return $res;
}
hashes['0xFBA550EA44404EE6'] = function(p0, p1) {
    const $res = natives.setVehicleNeedsToBeHotwired(p0, p1);
    return $res;
}
hashes['0x9F3F689B814F2599'] = function(p0, p1) {
    const $res = natives.setVehicleBlipThrottleRandomly(p0, p1);
    return $res;
}
hashes['0x4E74E62E0A97E901'] = function(p0, p1) {
    const $res = natives.setPoliceFocusWillTrackVehicle(p0, p1);
    return $res;
}
hashes['0x9C8C6504B5B63D2C'] = function(p0, p1, p2, p3) {
    const $res = natives.startVehicleHorn(p0, p1, p2, p3);
    return $res;
}
hashes['0x9D44FCCE98450843'] = function(p0, p1) {
    const $res = natives.setVehicleInCarModShop(p0, p1);
    return $res;
}
hashes['0x92F0CF722BC4202F'] = function(p0, p1) {
    const $res = natives.setVehicleHasStrongAxles(p0, p1);
    return $res;
}
hashes['0xB215AAC32D25D019'] = function(p0) {
    const $res = natives.getDisplayNameFromVehicleModel(p0);
    return $res;
}
hashes['0xF7AF4F159FF99F97'] = function(p0) {
    const $res = natives.getMakeNameFromVehicleModel(p0);
    return $res;
}
hashes['0x4EC6CFBC7B2E9536'] = function(p0, p1, p2, p3) {
    const $res = natives.getVehicleDeformationAtPos(p0, p1, p2, p3);
    return new mp.Vector3($res);
}
hashes['0x60BF608F1B8CD1B6'] = function(p0, p1) {
    const $res = natives.setVehicleLivery(p0, p1);
    return $res;
}
hashes['0x2BB9230590DA5E8A'] = function(p0) {
    const $res = natives.getVehicleLivery(p0);
    return $res;
}
hashes['0x87B63E25A529D526'] = function(p0) {
    const $res = natives.getVehicleLiveryCount(p0);
    return $res;
}
hashes['0xA6D3A8750DC73270'] = function(p0, p1) {
    const $res = natives.setVehicleLivery2(p0, p1);
    return $res;
}
hashes['0x60190048C0764A26'] = function(p0) {
    const $res = natives.getVehicleLivery2(p0);
    return $res;
}
hashes['0x5ECB40269053C0D4'] = function(p0) {
    const $res = natives.getVehicleLivery2Count(p0);
    return $res;
}
hashes['0x46E571A0E20D01F1'] = function(p0, p1) {
    const $res = natives.isVehicleWindowIntact(p0, p1);
    return $res;
}
hashes['0x11D862A3E977A9EF'] = function(p0) {
    const $res = natives.areAllVehicleWindowsIntact(p0);
    return $res;
}
hashes['0x2D34FC3BC4ADB780'] = function(p0) {
    const $res = natives.areAnyVehicleSeatsFree(p0);
    return $res;
}
hashes['0x21D2E5662C1F6FED'] = function(p0, p1) {
    const $res = natives.resetVehicleWheels(p0, p1);
    return $res;
}
hashes['0xBC74B4BE25EB6C8A'] = function(p0, p1, p2, p3) {
    const $res = natives.isHeliPartBroken(p0, p1, p2, p3);
    return $res;
}
hashes['0xE4CB7541F413D2C5'] = function(p0) {
    const $res = natives.getHeliMainRotorHealth(p0);
    return $res;
}
hashes['0xAE8CE82A4219AC8C'] = function(p0) {
    const $res = natives.getHeliTailRotorHealth(p0);
    return $res;
}
hashes['0xAC51915D27E4A5F7'] = function(p0) {
    const $res = natives.getHeliTailBoomHealth(p0);
    return $res;
}
hashes['0x4056EA1105F5ABD7'] = function(p0, p1) {
    const $res = natives.setHeliMainRotorHealth(p0, p1);
    return $res;
}
hashes['0xFE205F38AAA58E5B'] = function(p0, p1) {
    const $res = natives.setHeliTailRotorHealth(p0, p1);
    return $res;
}
hashes['0x3EC8BF18AA453FE9'] = function(p0, p1) {
    const $res = natives.setHeliTailBoomCanBreakOff(p0, p1);
    return $res;
}
hashes['0xBFDF984E2C22B94F'] = function(p0, p1) {
    const $res = natives.setVehicleNameDebug(p0, p1);
    return $res;
}
hashes['0x71B0892EC081D60A'] = function(p0, p1) {
    const $res = natives.setVehicleExplodesOnHighExplosionDamage(p0, p1);
    return $res;
}
hashes['0xD565F438137F0E10'] = function(p0, p1) {
    const $res = natives.setVehicleExplodesOnExplosionDamageAtZeroBodyHealth(p0, p1);
    return $res;
}
hashes['0x3441CAD2F2231923'] = function(p0, p1) {
    const $res = natives.setAllowVehicleExplodesOnContact(p0, p1);
    return $res;
}
hashes['0x2B6747FAA9DB9D6B'] = function(p0, p1) {
    const $res = natives.setVehicleDisableTowing(p0, p1);
    return $res;
}
hashes['0xE43701C36CAFF1A4'] = function(p0) {
    const $res = natives.getVehicleHasLandingGear(p0);
    return $res;
}
hashes['0xCFC8BE9A5E1FE575'] = function(p0, p1) {
    const $res = natives.controlLandingGear(p0, p1);
    return $res;
}
hashes['0x9B0F3DCA3DB0F4CD'] = function(p0) {
    const $res = natives.getLandingGearState(p0);
    return $res;
}
hashes['0x61E1DD6125A3EEE6'] = function(p0, p1, p2, p3) {
    const $res = natives.isAnyVehicleNearPoint(p0, p1, p2, p3);
    return $res;
}
hashes['0xA6E9FDCB2C76785E'] = function(p0) {
    const $res = natives.requestVehicleHighDetailModel(p0);
    return $res;
}
hashes['0x00689CDE5F7C6787'] = function(p0) {
    const $res = natives.removeVehicleHighDetailModel(p0);
    return $res;
}
hashes['0x1F25887F3C104278'] = function(p0) {
    const $res = natives.isVehicleHighDetail(p0);
    return $res;
}
hashes['0x81A15811460FAB3A'] = function(p0, p1) {
    const $res = natives.requestVehicleAsset(p0, p1);
    return $res;
}
hashes['0x1BBE0523B8DB9A21'] = function(p0) {
    const $res = natives.hasVehicleAssetLoaded(p0);
    return $res;
}
hashes['0xACE699C71AB9DEB5'] = function(p0) {
    const $res = natives.removeVehicleAsset(p0);
    return $res;
}
hashes['0xFE54B92A344583CA'] = function(p0, p1) {
    const $res = natives.setVehicleTowTruckArmPosition(p0, p1);
    return $res;
}
hashes['0x29A16F8D621C4508'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.attachVehicleToTowTruck(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xC2DB6B6708350ED8'] = function(p0, p1) {
    const $res = natives.detachVehicleFromTowTruck(p0, p1);
    return $res;
}
hashes['0xD0E9CE05A1E68CD8'] = function(p0) {
    const $res = natives.detachVehicleFromAnyTowTruck(p0);
    return $res;
}
hashes['0x146DF9EC4C4B9FD4'] = function(p0, p1) {
    const $res = natives.isVehicleAttachedToTowTruck(p0, p1);
    return $res;
}
hashes['0xEFEA18DCF10F8F75'] = function(p0) {
    const $res = natives.getEntityAttachedToTowTruck(p0);
    return $res;
}
hashes['0x8BA6F76BC53A1493'] = function(p0, p1, p2) {
    const $res = natives.setVehicleAutomaticallyAttaches(p0, p1, p2);
    return $res;
}
hashes['0xF8EBCCC96ADB9FB7'] = function(p0, p1, p2) {
    const $res = natives.setVehicleBulldozerArmPosition(p0, p1, p2);
    return $res;
}
hashes['0x56B94C6D7127DFBA'] = function(p0, p1, p2) {
    const $res = natives.setVehicleTankTurretPosition(p0, p1, p2);
    return $res;
}
hashes['0x0581730AB9380412'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setVehicleTurretTarget(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x737E398138550FFF'] = function(p0, p1) {
    const $res = natives.setVehicleTankStationary(p0, p1);
    return $res;
}
hashes['0x1093408B4B9D1146'] = function(p0, p1) {
    const $res = natives.setVehicleTurretSpeedThisFrame(p0, p1);
    return $res;
}
hashes['0x32CAEDF24A583345'] = function(p0) {
    const $res = natives.disableVehicleTurretMovementThisFrame(p0);
    return $res;
}
hashes['0x30D779DE7C4F6DD3'] = function(p0, p1) {
    const $res = natives.setVehicleFlightNozzlePosition(p0, p1);
    return $res;
}
hashes['0x9AA47FFF660CB932'] = function(p0, p1) {
    const $res = natives.setVehicleFlightNozzlePositionImmediate(p0, p1);
    return $res;
}
hashes['0xDA62027C8BDB326E'] = function(p0) {
    const $res = natives.getVehicleFlightNozzlePosition(p0);
    return $res;
}
hashes['0xCE2B43770B655F8F'] = function(p0, p1) {
    const $res = natives.setDisableVerticalFlightModeTransition(p0, p1);
    return $res;
}
hashes['0xA4822F1CF23F4810'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    if (typeof p0 != 'object') throw new Error('Argument outVec should be a Vector3 or an array');
    if (typeof p2 != 'object') throw new Error('Argument outVec1 should be a Vector3 or an array');
    const $res = natives.generateVehicleCreationPosFromPaths(Array.isArray(p0[0]) ? new alt.Vector3(p0[0][0], p0[0][1], p0[0][2]) : new alt.Vector3(p0[0].x, p0[0].y, p0[0].z), p1, Array.isArray(p2[0]) ? new alt.Vector3(p2[0][0], p2[0][1], p2[0][2]) : new alt.Vector3(p2[0].x, p2[0].y, p2[0].z), p3, p4, p5, p6, p7, p8);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p0[0])) { p0[0][0] = $res[1].x; p0[0][1] = $res[1].y; p0[0][2] = $res[1].z }
    else { p0[0].x = $res[1].x; p0[0].y = $res[1].y; p0[0].z = $res[1].z; }
    if (Array.isArray(p2[0])) { p2[0][0] = $res[2].x; p2[0][1] = $res[2].y; p2[0][2] = $res[2].z }
    else { p2[0].x = $res[2].x; p2[0].y = $res[2].y; p2[0].z = $res[2].z; }
    return $res[0];
}
hashes['0xFB8794444A7D60FB'] = function(p0, p1) {
    const $res = natives.setVehicleBurnout(p0, p1);
    return $res;
}
hashes['0x1297A88E081430EB'] = function(p0) {
    const $res = natives.isVehicleInBurnout(p0);
    return $res;
}
hashes['0x222FF6A823D122E2'] = function(p0, p1) {
    const $res = natives.setVehicleReduceGrip(p0, p1);
    return $res;
}
hashes['0x6DEE944E1EE90CFB'] = function(p0, p1) {
    const $res = natives.setVehicleReduceGripLevel(p0, p1);
    return $res;
}
hashes['0xB5D45264751B7DF0'] = function(p0, p1, p2) {
    const $res = natives.setVehicleIndicatorLights(p0, p1, p2);
    return $res;
}
hashes['0x92B35082E0B42F66'] = function(p0, p1) {
    const $res = natives.setVehicleBrakeLights(p0, p1);
    return $res;
}
hashes['0x5815BD2763178DF4'] = function(p0, p1) {
    const $res = natives.setVehicleTailLights(p0, p1);
    return $res;
}
hashes['0x684785568EF26A22'] = function(p0, p1) {
    const $res = natives.setVehicleHandbrake(p0, p1);
    return $res;
}
hashes['0xE4E2FD323574965C'] = function(p0, p1) {
    const $res = natives.setVehicleBrake(p0, p1);
    return $res;
}
hashes['0x48ADC8A773564670'] = function() {
    const $res = natives.instantlyFillVehiclePopulation();
    return $res;
}
hashes['0x91D6DD290888CBAB'] = function() {
    const $res = natives.hasInstantFillVehiclePopulationFinished();
    return $res;
}
hashes['0x51DB102F4A3BA5E0'] = function(p0) {
    const $res = natives.networkEnableEmptyCrowdingVehiclesRemoval(p0);
    return $res;
}
hashes['0xA4A9A4C40E615885'] = function(p0) {
    const $res = natives.networkCapEmptyCrowdingVehiclesRemoval(p0);
    return $res;
}
hashes['0x1CDD6BADC297830D'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument trailer should be an array');
    const $res = natives.getVehicleTrailerVehicle(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x80D9D32636369C92'] = function(p0) {
    const $res = natives.getVehicleTrailerParentVehicle(p0);
    return $res;
}
hashes['0xCAC66558B944DA67'] = function(p0, p1) {
    const $res = natives.setVehicleUsesLargeRearRamp(p0, p1);
    return $res;
}
hashes['0x09606148B6C71DEF'] = function(p0, p1) {
    const $res = natives.setVehicleRudderBroken(p0, p1);
    return $res;
}
hashes['0x1A78AD3D8240536F'] = function(p0, p1) {
    const $res = natives.setConvertibleRoofLatchState(p0, p1);
    return $res;
}
hashes['0x53AF99BAA671CA47'] = function(p0) {
    const $res = natives.getVehicleEstimatedMaxSpeed(p0);
    return $res;
}
hashes['0xAD7E85FC227197C4'] = function(p0) {
    const $res = natives.getVehicleMaxBraking(p0);
    return $res;
}
hashes['0xA132FB5370554DB0'] = function(p0) {
    const $res = natives.getVehicleMaxTraction(p0);
    return $res;
}
hashes['0x5DD35C8D074E57AE'] = function(p0) {
    const $res = natives.getVehicleAcceleration(p0);
    return $res;
}
hashes['0xF417C2502FFFED43'] = function(p0) {
    const $res = natives.getVehicleModelEstimatedMaxSpeed(p0);
    return $res;
}
hashes['0xDC53FD41B4ED944C'] = function(p0) {
    const $res = natives.getVehicleModelMaxBraking(p0);
    return $res;
}
hashes['0xBFBA3BA79CFF7EBF'] = function(p0) {
    const $res = natives.getVehicleModelMaxBrakingMaxMods(p0);
    return $res;
}
hashes['0x539DE94D44FDFD0D'] = function(p0) {
    const $res = natives.getVehicleModelMaxTraction(p0);
    return $res;
}
hashes['0x8C044C5C84505B6A'] = function(p0) {
    const $res = natives.getVehicleModelAcceleration(p0);
    return $res;
}
hashes['0x53409B5163D5B846'] = function(p0) {
    const $res = natives.getVehicleModelAccelerationMaxMods(p0);
    return $res;
}
hashes['0xC6AD107DDC9054CC'] = function(p0) {
    const $res = natives.getFlyingVehicleModelAgility(p0);
    return $res;
}
hashes['0x5AA3F878A178C4FC'] = function(p0) {
    const $res = natives.getBoatVehicleModelAgility(p0);
    return $res;
}
hashes['0x00C09F246ABEDD82'] = function(p0) {
    const $res = natives.getVehicleClassEstimatedMaxSpeed(p0);
    return $res;
}
hashes['0xDBC86D85C5059461'] = function(p0) {
    const $res = natives.getVehicleClassMaxTraction(p0);
    return $res;
}
hashes['0x4F930AD022D6DE3B'] = function(p0) {
    const $res = natives.getVehicleClassMaxAgility(p0);
    return $res;
}
hashes['0x2F83E7E45D9EA7AE'] = function(p0) {
    const $res = natives.getVehicleClassMaxAcceleration(p0);
    return $res;
}
hashes['0x4BF54C16EC8FEC03'] = function(p0) {
    const $res = natives.getVehicleClassMaxBraking(p0);
    return $res;
}
hashes['0x2CE544C68FB812A0'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.addRoadNodeSpeedZone(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x1033371FC8E842A7'] = function(p0) {
    const $res = natives.removeRoadNodeSpeedZone(p0);
    return $res;
}
hashes['0x87E7F24270732CB1'] = function(p0) {
    const $res = natives.openBombBayDoors(p0);
    return $res;
}
hashes['0x3556041742A0DC74'] = function(p0) {
    const $res = natives.closeBombBayDoors(p0);
    return $res;
}
hashes['0xD0917A423314BBA8'] = function(p0) {
    const $res = natives.getAreBombBayDoorsOpen(p0);
    return $res;
}
hashes['0xC0F97FCE55094987'] = function(p0) {
    const $res = natives.isVehicleSearchlightOn(p0);
    return $res;
}
hashes['0x14E85C5EE7A4D542'] = function(p0, p1, p2) {
    const $res = natives.setVehicleSearchlight(p0, p1, p2);
    return $res;
}
hashes['0x99015ED7DBEA5113'] = function(p0) {
    const $res = natives.doesVehicleHaveSearchlight(p0);
    return $res;
}
hashes['0x639431E895B9AA57'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.isEntryPointForSeatClear(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xC0572928C0ABFDA3'] = function(p0, p1) {
    const $res = natives.getEntryPointPosition(p0, p1);
    return new mp.Vector3($res);
}
hashes['0x30785D90C956BF35'] = function(p0, p1) {
    const $res = natives.canShuffleSeat(p0, p1);
    return $res;
}
hashes['0x33F2E3FE70EAAE1D'] = function(p0) {
    const $res = natives.getNumModKits(p0);
    return $res;
}
hashes['0x1F2AA07F00B3217A'] = function(p0, p1) {
    const $res = natives.setVehicleModKit(p0, p1);
    return $res;
}
hashes['0x6325D1A044AE510D'] = function(p0) {
    const $res = natives.getVehicleModKit(p0);
    return $res;
}
hashes['0xFC058F5121E54C32'] = function(p0) {
    const $res = natives.getVehicleModKitType(p0);
    return $res;
}
hashes['0xB3ED1BFB4BE636DC'] = function(p0) {
    const $res = natives.getVehicleWheelType(p0);
    return $res;
}
hashes['0x487EB21CC7295BA1'] = function(p0, p1) {
    const $res = natives.setVehicleWheelType(p0, p1);
    return $res;
}
hashes['0xA551BE18C11A476D'] = function(p0, p1) {
    const $res = natives.getNumModColors(p0, p1);
    return $res;
}
hashes['0x43FEB945EE7F85B8'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleModColor1(p0, p1, p2, p3);
    return $res;
}
hashes['0x816562BADFDEC83E'] = function(p0, p1, p2) {
    const $res = natives.setVehicleModColor2(p0, p1, p2);
    return $res;
}
hashes['0xE8D65CA700C9A693'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument paintType should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument color should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument pearlescentColor should be an array');
    const $res = natives.getVehicleModColor1(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0x81592BE4E3878728'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument paintType should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument color should be an array');
    const $res = natives.getVehicleModColor2(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    return $res[0];
}
hashes['0xB45085B721EFD38C'] = function(p0, p1) {
    const $res = natives.getVehicleModColor1Name(p0, p1);
    return $res;
}
hashes['0x4967A516ED23A5A1'] = function(p0) {
    const $res = natives.getVehicleModColor2Name(p0);
    return $res;
}
hashes['0x9A83F5F9963775EF'] = function(p0) {
    const $res = natives.haveVehicleModsStreamedIn(p0);
    return $res;
}
hashes['0x00834EAC4A96E010'] = function(p0, p1, p2) {
    const $res = natives.isVehicleModGen9Exclusive(p0, p1, p2);
    return $res;
}
hashes['0x6AF0636DDEDCB6DD'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleMod(p0, p1, p2, p3);
    return $res;
}
hashes['0x772960298DA26FDB'] = function(p0, p1) {
    const $res = natives.getVehicleMod(p0, p1);
    return $res;
}
hashes['0xB3924ECD70E095DC'] = function(p0, p1) {
    const $res = natives.getVehicleModVariation(p0, p1);
    return $res;
}
hashes['0xE38E9162A2500646'] = function(p0, p1) {
    const $res = natives.getNumVehicleMods(p0, p1);
    return $res;
}
hashes['0x92D619E420858204'] = function(p0, p1) {
    const $res = natives.removeVehicleMod(p0, p1);
    return $res;
}
hashes['0x2A1F4F37F95BAD08'] = function(p0, p1, p2) {
    const $res = natives.toggleVehicleMod(p0, p1, p2);
    return $res;
}
hashes['0x84B233A8C8FC8AE7'] = function(p0, p1) {
    const $res = natives.isToggleModOn(p0, p1);
    return $res;
}
hashes['0x8935624F8C5592CC'] = function(p0, p1, p2) {
    const $res = natives.getModTextLabel(p0, p1, p2);
    return $res;
}
hashes['0x51F0FEB9F6AE98C0'] = function(p0, p1) {
    const $res = natives.getModSlotName(p0, p1);
    return $res;
}
hashes['0xB4C7A93837C91A1F'] = function(p0, p1) {
    const $res = natives.getLiveryName(p0, p1);
    return $res;
}
hashes['0x90A38E9838E0A8C1'] = function(p0, p1, p2) {
    const $res = natives.getVehicleModModifierValue(p0, p1, p2);
    return $res;
}
hashes['0x4593CF82AA179706'] = function(p0, p1, p2) {
    const $res = natives.getVehicleModIdentifierHash(p0, p1, p2);
    return $res;
}
hashes['0x758F49C24925568A'] = function(p0, p1, p2) {
    const $res = natives.preloadVehicleMod(p0, p1, p2);
    return $res;
}
hashes['0x06F43E5175EB6D96'] = function(p0) {
    const $res = natives.hasPreloadModsFinished(p0);
    return $res;
}
hashes['0x445D79F995508307'] = function(p0) {
    const $res = natives.releasePreloadMods(p0);
    return $res;
}
hashes['0xB5BA80F839791C0F'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleTyreSmokeColor(p0, p1, p2, p3);
    return $res;
}
hashes['0xB635392A4938B3C3'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument r should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument g should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument b should be an array');
    const $res = natives.getVehicleTyreSmokeColor(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0x57C51E6BAD752696'] = function(p0, p1) {
    const $res = natives.setVehicleWindowTint(p0, p1);
    return $res;
}
hashes['0x0EE21293DAD47C95'] = function(p0) {
    const $res = natives.getVehicleWindowTint(p0);
    return $res;
}
hashes['0x9D1224004B3A6707'] = function() {
    const $res = natives.getNumVehicleWindowTints();
    return $res;
}
hashes['0xF3CC740D36221548'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument r should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument g should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument b should be an array');
    const $res = natives.getVehicleColor(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0xEEBFC7A7EFDC35B4'] = function(p0) {
    const $res = natives.getVehicleColoursWhichCanBeSet(p0);
    return $res;
}
hashes['0xE495D1EF4C91FD20'] = function(p0) {
    const $res = natives.getVehicleCauseOfDestruction(p0);
    return $res;
}
hashes['0x5EE5632F47AE9695'] = function(p0, p1) {
    const $res = natives.overridePlaneDamageThrehsold(p0, p1);
    return $res;
}
hashes['0x5EF77C9ADD3B11A3'] = function(p0) {
    const $res = natives.getIsLeftVehicleHeadlightDamaged(p0);
    return $res;
}
hashes['0xA7ECB73355EB2F20'] = function(p0) {
    const $res = natives.getIsRightVehicleHeadlightDamaged(p0);
    return $res;
}
hashes['0xEC69ADF931AAE0C3'] = function(p0) {
    const $res = natives.getBothVehicleHeadlightsDamaged(p0);
    return $res;
}
hashes['0x93A3996368C94158'] = function(p0, p1) {
    const $res = natives.modifyVehicleTopSpeed(p0, p1);
    return $res;
}
hashes['0xBAA045B4E42F3C06'] = function(p0, p1) {
    const $res = natives.setVehicleMaxSpeed(p0, p1);
    return $res;
}
hashes['0x1CF38D529D7441D9'] = function(p0, p1) {
    const $res = natives.setVehicleStaysFrozenWhenCleanedUp(p0, p1);
    return $res;
}
hashes['0x1F9FB66F3A3842D2'] = function(p0, p1) {
    const $res = natives.setVehicleActAsIfHighSpeedForFragSmashing(p0, p1);
    return $res;
}
hashes['0x59C3757B3B7408E8'] = function(p0, p1, p2) {
    const $res = natives.setPedsCanFallOffThisVehicleFromLargeFallDamage(p0, p1, p2);
    return $res;
}
hashes['0x54B0F614960F4A5F'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.addVehicleCombatAngledAvoidanceArea(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xE30524E1871F481D'] = function(p0) {
    const $res = natives.removeVehicleCombatAvoidanceArea(p0);
    return $res;
}
hashes['0x291E373D483E7EE7'] = function(p0) {
    const $res = natives.isAnyPedRappellingFromHeli(p0);
    return $res;
}
hashes['0xB59E4BD37AE292DB'] = function(p0, p1) {
    const $res = natives.setVehicleCheatPowerIncrease(p0, p1);
    return $res;
}
hashes['0x0AD9E8F87FF7C16F'] = function(p0, p1) {
    const $res = natives.setVehicleInfluencesWantedLevel(p0, p1);
    return $res;
}
hashes['0xF7EC25A3EBEEC726'] = function(p0, p1) {
    const $res = natives.setVehicleIsWanted(p0, p1);
    return $res;
}
hashes['0xF488C566413B4232'] = function(p0, p1) {
    const $res = natives.swingBoatBoomToRatio(p0, p1);
    return $res;
}
hashes['0xC1F981A6F74F0C23'] = function(p0, p1) {
    const $res = natives.swingBoatBoomFreely(p0, p1);
    return $res;
}
hashes['0x0F3B4D4E43177236'] = function(p0, p1) {
    const $res = natives.allowBoatBoomToAnimate(p0, p1);
    return $res;
}
hashes['0x6636C535F6CC2725'] = function(p0) {
    const $res = natives.getBoatBoomPositionRatio(p0);
    return $res;
}
hashes['0x23428FC53C60919C'] = function(p0, p1, p2) {
    const $res = natives.disablePlaneAileron(p0, p1, p2);
    return $res;
}
hashes['0xAE31E7DF9B5B132E'] = function(p0) {
    const $res = natives.getIsVehicleEngineRunning(p0);
    return $res;
}
hashes['0x1D97D1E3A70A649F'] = function(p0, p1) {
    const $res = natives.setVehicleUseAlternateHandling(p0, p1);
    return $res;
}
hashes['0x9CFA4896C3A53CBB'] = function(p0, p1, p2) {
    const $res = natives.setBikeOnStand(p0, p1, p2);
    return $res;
}
hashes['0xAB04325045427AAE'] = function(p0, p1) {
    const $res = natives.setVehicleNotStealableAmbiently(p0, p1);
    return $res;
}
hashes['0xCFD778E7904C255E'] = function(p0) {
    const $res = natives.lockDoorsWhenNoLongerNeeded(p0);
    return $res;
}
hashes['0xACFB2463CC22BED2'] = function(p0) {
    const $res = natives.setLastDrivenVehicle(p0);
    return $res;
}
hashes['0xB2D06FAEDE65B577'] = function() {
    const $res = natives.getLastDrivenVehicle();
    return $res;
}
hashes['0xE01903C47C7AC89E'] = function() {
    const $res = natives.clearLastDrivenVehicle();
    return $res;
}
hashes['0x02398B627547189C'] = function(p0, p1) {
    const $res = natives.setVehicleHasBeenDrivenFlag(p0, p1);
    return $res;
}
hashes['0xB893215D8D4C015B'] = function(p0, p1) {
    const $res = natives.setTaskVehicleGotoPlaneMinHeightAboveTerrain(p0, p1);
    return $res;
}
hashes['0x93AE6A61BE015BF1'] = function(p0, p1) {
    const $res = natives.setVehicleLodMultiplier(p0, p1);
    return $res;
}
hashes['0x428BACCDF5E26EAD'] = function(p0, p1) {
    const $res = natives.setVehicleCanSaveInGarage(p0, p1);
    return $res;
}
hashes['0x42A4BEB35D372407'] = function(p0) {
    const $res = natives.getVehicleNumOfBrokenOffParts(p0);
    return $res;
}
hashes['0x2C8CBFE1EA5FC631'] = function(p0) {
    const $res = natives.getVehicleNumOfBrokenLoosenParts(p0);
    return $res;
}
hashes['0x4D9D109F63FEE1D4'] = function(p0, p1) {
    const $res = natives.setForceVehicleEngineDamageByBullet(p0, p1);
    return $res;
}
hashes['0x279D50DE5652D935'] = function(p0, p1) {
    const $res = natives.setVehicleGeneratesEngineShockingEvents(p0, p1);
    return $res;
}
hashes['0xE44A982368A4AF23'] = function(p0, p1) {
    const $res = natives.copyVehicleDamages(p0, p1);
    return $res;
}
hashes['0xF25E02CB9C5818F8'] = function() {
    const $res = natives.disableVehicleExplosionBreakOffParts();
    return $res;
}
hashes['0xBC3CCA5844452B06'] = function(p0) {
    const $res = natives.setLightsCutoffDistanceTweak(p0);
    return $res;
}
hashes['0x74CD9A9327A282EA'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setVehicleShootAtTarget(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x8F5EBAB1F260CFCE'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument entity should be an array');
    const $res = natives.getVehicleLockOnTarget(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x97CE68CB032583F0'] = function(p0, p1) {
    const $res = natives.setForceHdVehicle(p0, p1);
    return $res;
}
hashes['0x182F266C2D9E2BEB'] = function(p0, p1) {
    const $res = natives.setVehicleCustomPathNodeStreamingRadius(p0, p1);
    return $res;
}
hashes['0x9CCC9525BF2408E0'] = function(p0) {
    const $res = natives.getVehiclePlateType(p0);
    return $res;
}
hashes['0x64473AEFDCF47DCA'] = function(p0) {
    const $res = natives.trackVehicleVisibility(p0);
    return $res;
}
hashes['0xAA0A52D24FB98293'] = function(p0) {
    const $res = natives.isVehicleVisible(p0);
    return $res;
}
hashes['0x89F149B6131E57DA'] = function(p0, p1) {
    const $res = natives.setVehicleGravity(p0, p1);
    return $res;
}
hashes['0xE6C0C80B8C867537'] = function(p0) {
    const $res = natives.setEnableVehicleSlipstreaming(p0);
    return $res;
}
hashes['0xF051D9BFB6BA39C0'] = function(p0) {
    const $res = natives.setVehicleSlipstreamingShouldTimeOut(p0);
    return $res;
}
hashes['0x36492C2F0D134C56'] = function(p0) {
    const $res = natives.getVehicleCurrentTimeInSlipStream(p0);
    return $res;
}
hashes['0x48C633E94A8142A7'] = function(p0) {
    const $res = natives.isVehicleProducingSlipStream(p0);
    return $res;
}
hashes['0x06582AFF74894C75'] = function(p0, p1) {
    const $res = natives.setVehicleInactiveDuringPlayback(p0, p1);
    return $res;
}
hashes['0xDFFCEF48E511DB48'] = function(p0, p1) {
    const $res = natives.setVehicleActiveDuringPlayback(p0, p1);
    return $res;
}
hashes['0x8D474C8FAEFF6CDE'] = function(p0) {
    const $res = natives.isVehicleSprayable(p0);
    return $res;
}
hashes['0x983765856F2564F9'] = function(p0, p1) {
    const $res = natives.setVehicleEngineCanDegrade(p0, p1);
    return $res;
}
hashes['0xF0E4BA16D1DB546C'] = function(p0, p1, p2) {
    const $res = natives.disableVehcileDynamicAmbientScales(p0, p1, p2);
    return $res;
}
hashes['0xF87D9F2301F7D206'] = function(p0) {
    const $res = natives.enableVehicleDynamicAmbientScales(p0);
    return $res;
}
hashes['0x4198AB0022B15F87'] = function(p0) {
    const $res = natives.isPlaneLandingGearIntact(p0);
    return $res;
}
hashes['0x755D6D5267CBBD7E'] = function(p0) {
    const $res = natives.arePlanePropellersIntact(p0);
    return $res;
}
hashes['0x4C815EB175086F84'] = function(p0, p1) {
    const $res = natives.setPlanePropellerHealth(p0, p1);
    return $res;
}
hashes['0x0CDDA42F9E360CA6'] = function(p0, p1) {
    const $res = natives.setVehicleCanDeformWheels(p0, p1);
    return $res;
}
hashes['0x4AF9BD80EEBEB453'] = function(p0) {
    const $res = natives.isVehicleStolen(p0);
    return $res;
}
hashes['0x67B2C79AA7FF5738'] = function(p0, p1) {
    const $res = natives.setVehicleIsStolen(p0, p1);
    return $res;
}
hashes['0xAD2D28A1AFDFF131'] = function(p0, p1) {
    const $res = natives.setPlaneTurbulenceMultiplier(p0, p1);
    return $res;
}
hashes['0x5991A01434CE9677'] = function(p0) {
    const $res = natives.areWingsOfPlaneIntact(p0);
    return $res;
}
hashes['0xB264C4D2F2B0A78B'] = function(p0) {
    const $res = natives.allowAmbientVehiclesToAvoidAdverseConditions(p0);
    return $res;
}
hashes['0x0E21D3DF1051399D'] = function(p0, p1) {
    const $res = natives.detachVehicleFromCargobob(p0, p1);
    return $res;
}
hashes['0xADF7BE450512C12F'] = function(p0) {
    const $res = natives.detachVehicleFromAnyCargobob(p0);
    return $res;
}
hashes['0xAF03011701811146'] = function(p0, p1) {
    const $res = natives.detachEntityFromCargobob(p0, p1);
    return $res;
}
hashes['0xD40148F22E81A1D9'] = function(p0, p1) {
    const $res = natives.isVehicleAttachedToCargobob(p0, p1);
    return $res;
}
hashes['0x873B82D42AC2B9E5'] = function(p0) {
    const $res = natives.getVehicleAttachedToCargobob(p0);
    return $res;
}
hashes['0x99093F60746708CA'] = function(p0) {
    const $res = natives.getEntityAttachedToCargobob(p0);
    return $res;
}
hashes['0x4127F1D84E347769'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.attachVehicleToCargobob(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xA1DD82F3CCF9A01E'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.attachEntityToCargobob(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x571FEB383F629926'] = function(p0, p1) {
    const $res = natives.setCargobobForceDontDetachVehicle(p0, p1);
    return $res;
}
hashes['0x1F34B0626C594380'] = function(p0, p1) {
    const $res = natives.setCargobobExcludeFromPickupEntity(p0, p1);
    return $res;
}
hashes['0x2C1D8B3B19E517CC'] = function(p0, p1) {
    const $res = natives.canCargobobPickUpEntity(p0, p1);
    return $res;
}
hashes['0xCBDB9B923CACC92D'] = function(p0) {
    const $res = natives.getAttachedPickUpHookPosition(p0);
    return new mp.Vector3($res);
}
hashes['0x1821D91AD4B56108'] = function(p0) {
    const $res = natives.doesCargobobHavePickUpRope(p0);
    return $res;
}
hashes['0x7BEB0C7A235F6F3B'] = function(p0, p1) {
    const $res = natives.createPickUpRopeForCargobob(p0, p1);
    return $res;
}
hashes['0x9768CF648F54C804'] = function(p0) {
    const $res = natives.removePickUpRopeForCargobob(p0);
    return $res;
}
hashes['0x877C1EAEAC531023'] = function(p0, p1, p2, p3) {
    const $res = natives.setPickupRopeLengthForCargobob(p0, p1, p2, p3);
    return $res;
}
hashes['0xC0ED6438E6D39BA8'] = function(p0, p1, p2) {
    const $res = natives.setPickupRopeLengthWithoutCreatingRopeForCargobob(p0, p1, p2);
    return $res;
}
hashes['0xCF1182F682F65307'] = function(p0, p1) {
    const $res = natives.setCargobobPickupRopeDampingMultiplier(p0, p1);
    return $res;
}
hashes['0x0D5F65A8F4EBDAB5'] = function(p0, p1) {
    const $res = natives.setCargobobPickupRopeType(p0, p1);
    return $res;
}
hashes['0x6E08BF5B3722BAC9'] = function(p0) {
    const $res = natives.doesCargobobHavePickupMagnet(p0);
    return $res;
}
hashes['0x9A665550F8DA349B'] = function(p0, p1) {
    const $res = natives.setCargobobPickupMagnetActive(p0, p1);
    return $res;
}
hashes['0xBCBFCD9D1DAC19E2'] = function(p0, p1) {
    const $res = natives.setCargobobPickupMagnetStrength(p0, p1);
    return $res;
}
hashes['0xA17BAD153B51547E'] = function(p0, p1) {
    const $res = natives.setCargobobPickupMagnetFalloff(p0, p1);
    return $res;
}
hashes['0x66979ACF5102FD2F'] = function(p0, p1) {
    const $res = natives.setCargobobPickupMagnetReducedStrength(p0, p1);
    return $res;
}
hashes['0x6D8EAC07506291FB'] = function(p0, p1) {
    const $res = natives.setCargobobPickupMagnetReducedFalloff(p0, p1);
    return $res;
}
hashes['0xED8286F71A819BAA'] = function(p0, p1) {
    const $res = natives.setCargobobPickupMagnetPullStrength(p0, p1);
    return $res;
}
hashes['0x685D5561680D088B'] = function(p0, p1) {
    const $res = natives.setCargobobPickupMagnetPullRopeLength(p0, p1);
    return $res;
}
hashes['0xE301BD63E9E13CF0'] = function(p0, p1) {
    const $res = natives.setCargobobPickupMagnetSetTargetedMode(p0, p1);
    return $res;
}
hashes['0x9BDDC73CC6A115D4'] = function(p0, p1, p2) {
    const $res = natives.setCargobobPickupMagnetSetAmbientMode(p0, p1, p2);
    return $res;
}
hashes['0x56EB5E94318D3FB6'] = function(p0, p1) {
    const $res = natives.setCargobobPickupMagnetEnsurePickupEntityUpright(p0, p1);
    return $res;
}
hashes['0x25ECB9F8017D98E0'] = function(p0) {
    const $res = natives.doesVehicleHaveWeapons(p0);
    return $res;
}
hashes['0x2C4A1590ABF43E8B'] = function(p0, p1) {
    const $res = natives.setVehicleWillTellOthersToHurry(p0, p1);
    return $res;
}
hashes['0xF4FC6A6F67D8D856'] = function(p0, p1, p2, p3) {
    const $res = natives.disableVehicleWeapon(p0, p1, p2, p3);
    return $res;
}
hashes['0x563B65A643ED072E'] = function(p0, p1, p2) {
    const $res = natives.isVehicleWeaponDisabled(p0, p1, p2);
    return $res;
}
hashes['0xE05DD0E9707003A3'] = function(p0, p1) {
    const $res = natives.setVehicleUsedForPilotSchool(p0, p1);
    return $res;
}
hashes['0x21115BCD6E44656A'] = function(p0, p1) {
    const $res = natives.setVehicleActiveForPedNavigation(p0, p1);
    return $res;
}
hashes['0x29439776AAA00A62'] = function(p0) {
    const $res = natives.getVehicleClass(p0);
    return $res;
}
hashes['0xDEDF1C8BD47C2200'] = function(p0) {
    const $res = natives.getVehicleClassFromName(p0);
    return $res;
}
hashes['0xBCDF8BAF56C87B6A'] = function(p0) {
    const $res = natives.setPlayersLastVehicle(p0);
    return $res;
}
hashes['0x300504B23BD3B711'] = function(p0, p1) {
    const $res = natives.setVehicleCanBeUsedByFleeingPeds(p0, p1);
    return $res;
}
hashes['0xE5810AC70602F2F5'] = function(p0, p1) {
    const $res = natives.setAircraftPilotSkillNoiseScalar(p0, p1);
    return $res;
}
hashes['0x068F64F2470F9656'] = function(p0, p1) {
    const $res = natives.setVehicleDropsMoneyWhenBlownUp(p0, p1);
    return $res;
}
hashes['0xB8FBC8B1330CA9B4'] = function(p0, p1) {
    const $res = natives.setVehicleKeepEngineOnWhenAbandoned(p0, p1);
    return $res;
}
hashes['0x6A973569BA094650'] = function(p0, p1) {
    const $res = natives.setVehicleImpatienceTimer(p0, p1);
    return $res;
}
hashes['0x10655FAB9915623D'] = function(p0, p1) {
    const $res = natives.setVehicleHandlingOverride(p0, p1);
    return $res;
}
hashes['0x79DF7E806202CE01'] = function(p0, p1) {
    const $res = natives.setVehicleExtendedRemovalRange(p0, p1);
    return $res;
}
hashes['0x9007A2F21DC108D4'] = function(p0, p1) {
    const $res = natives.setVehicleSteeringBiasScalar(p0, p1);
    return $res;
}
hashes['0x6E0859B530A365CC'] = function(p0, p1) {
    const $res = natives.setHeliControlLaggingRateScalar(p0, p1);
    return $res;
}
hashes['0x1837AF7C627009BA'] = function(p0, p1) {
    const $res = natives.setVehicleFrictionOverride(p0, p1);
    return $res;
}
hashes['0xA37B9A517B133349'] = function(p0, p1) {
    const $res = natives.setVehicleWheelsCanBreakOffWhenBlowUp(p0, p1);
    return $res;
}
hashes['0xF78F94D60248C737'] = function(p0, p1) {
    const $res = natives.arePlaneControlPanelsIntact(p0, p1);
    return $res;
}
hashes['0xA46413066687A328'] = function(p0, p1) {
    const $res = natives.setVehicleCeilingHeight(p0, p1);
    return $res;
}
hashes['0x5E569EC46EC21CAE'] = function(p0, p1) {
    const $res = natives.setVehicleNoExplosionDamageFromDriver(p0, p1);
    return $res;
}
hashes['0x6D6AF961B72728AE'] = function(p0) {
    const $res = natives.clearVehicleRouteHistory(p0);
    return $res;
}
hashes['0x956B409B984D9BF7'] = function(p0) {
    const $res = natives.doesVehicleExistWithDecorator(p0);
    return $res;
}
hashes['0x41062318F23ED854'] = function(p0, p1) {
    const $res = natives.setVehicleAiCanUseExclusiveSeats(p0, p1);
    return $res;
}
hashes['0xB5C51B5502E85E83'] = function(p0, p1, p2) {
    const $res = natives.setVehicleExclusiveDriver(p0, p1, p2);
    return $res;
}
hashes['0xB09D25E77C33EB3F'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument outIndex should be an array');
    const $res = natives.isPedExclusiveDriverOfVehicle(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x500873A45724C863'] = function(p0, p1) {
    const $res = natives.disableIndividualPlanePropeller(p0, p1);
    return $res;
}
hashes['0xB055A34527CB8FD7'] = function(p0, p1) {
    const $res = natives.setVehicleForceAfterburner(p0, p1);
    return $res;
}
hashes['0x1087BC8EC540DAEB'] = function(p0, p1) {
    const $res = natives.setDontProcessVehicleGlass(p0, p1);
    return $res;
}
hashes['0x4AD280EB48B2D8E6'] = function(p0, p1) {
    const $res = natives.setDisableWantedConesResponse(p0, p1);
    return $res;
}
hashes['0xB68CFAF83A02768D'] = function(p0, p1) {
    const $res = natives.setUseDesiredZCruiseSpeedForLanding(p0, p1);
    return $res;
}
hashes['0x0205F5365292D2EB'] = function(p0, p1) {
    const $res = natives.setArriveDistanceOverrideForVehiclePersuitAttack(p0, p1);
    return $res;
}
hashes['0xCF9159024555488C'] = function(p0) {
    const $res = natives.setVehicleReadyForCleanup(p0);
    return $res;
}
hashes['0xF796359A959DF65D'] = function(p0) {
    const $res = natives.setDistantCarsEnabled(p0);
    return $res;
}
hashes['0x8E0A582209A62695'] = function(p0, p1, p2, p3) {
    const $res = natives.setVehicleNeonColour(p0, p1, p2, p3);
    return $res;
}
hashes['0xB93B2867F7B479D1'] = function(p0, p1) {
    const $res = natives.setVehicleNeonIndexColour(p0, p1);
    return $res;
}
hashes['0x7619EEE8C886757F'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p1)) throw new Error('Argument r should be an array');
    if (!Array.isArray(p2)) throw new Error('Argument g should be an array');
    if (!Array.isArray(p3)) throw new Error('Argument b should be an array');
    const $res = natives.getVehicleNeonColour(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    p2[0] = $res[2];
    p3[0] = $res[3];
    return $res[0];
}
hashes['0x2AA720E4287BF269'] = function(p0, p1, p2) {
    const $res = natives.setVehicleNeonEnabled(p0, p1, p2);
    return $res;
}
hashes['0x8C4B92553E4766A5'] = function(p0, p1) {
    const $res = natives.getVehicleNeonEnabled(p0, p1);
    return $res;
}
hashes['0x35E0654F4BAD7971'] = function(p0) {
    const $res = natives.setAmbientVehicleNeonEnabled(p0);
    return $res;
}
hashes['0x83F813570FF519DE'] = function(p0, p1) {
    const $res = natives.suppressNeonsOnVehicle(p0, p1);
    return $res;
}
hashes['0xB088E9A47AE6EDD5'] = function(p0, p1) {
    const $res = natives.setDisableSuperdummy(p0, p1);
    return $res;
}
hashes['0xDBA3C090E3D74690'] = function(p0) {
    const $res = natives.requestVehicleDial(p0);
    return $res;
}
hashes['0xF271147EB7B40F12'] = function(p0) {
    const $res = natives.getVehicleBodyHealth(p0);
    return $res;
}
hashes['0xB77D05AC8C78AADB'] = function(p0, p1) {
    const $res = natives.setVehicleBodyHealth(p0, p1);
    return $res;
}
hashes['0xDF7E3EEB29642C38'] = function(p0, p1, p2) {
    if (typeof p1 != 'object') throw new Error('Argument out1 should be a Vector3 or an array');
    if (typeof p2 != 'object') throw new Error('Argument out2 should be a Vector3 or an array');
    const $res = natives.getVehicleSize(p0, Array.isArray(p1[0]) ? new alt.Vector3(p1[0][0], p1[0][1], p1[0][2]) : new alt.Vector3(p1[0].x, p1[0].y, p1[0].z), Array.isArray(p2[0]) ? new alt.Vector3(p2[0][0], p2[0][1], p2[0][2]) : new alt.Vector3(p2[0].x, p2[0].y, p2[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p1[0])) { p1[0][0] = $res[1].x; p1[0][1] = $res[1].y; p1[0][2] = $res[1].z }
    else { p1[0].x = $res[1].x; p1[0].y = $res[1].y; p1[0].z = $res[1].z; }
    if (Array.isArray(p2[0])) { p2[0][0] = $res[2].x; p2[0][1] = $res[2].y; p2[0][2] = $res[2].z }
    else { p2[0].x = $res[2].x; p2[0].y = $res[2].y; p2[0].z = $res[2].z; }
    return $res[0];
}
hashes['0x53952FD2BAA19F17'] = function(p0) {
    const $res = natives.getFakeSuspensionLoweringAmount(p0);
    return $res;
}
hashes['0x84FD40F56075E816'] = function(p0) {
    const $res = natives.setCarHighSpeedBumpSeverityMultiplier(p0);
    return $res;
}
hashes['0x92922A607497B14D'] = function(p0) {
    const $res = natives.getNumberOfVehicleDoors(p0);
    return $res;
}
hashes['0x28B18377EB6E25F6'] = function(p0, p1) {
    const $res = natives.setHydraulicsControl(p0, p1);
    return $res;
}
hashes['0xA7DCDF4DED40A8F4'] = function(p0, p1) {
    const $res = natives.setCanAdjustGroundClearance(p0, p1);
    return $res;
}
hashes['0xB8EF61207C2393A9'] = function(p0, p1, p2, p3, p4, p5, p6) {
    const $res = natives.getVehicleHealthPercentage(p0, p1, p2, p3, p4, p5, p6);
    return $res;
}
hashes['0xD4C4642CB7F50B5D'] = function(p0) {
    const $res = natives.getVehicleIsMercenary(p0);
    return $res;
}
hashes['0xC361AA040D6637A8'] = function(p0, p1) {
    const $res = natives.setVehicleBrokenPartsDontAffectAiHandling(p0, p1);
    return $res;
}
hashes['0x99C82F8A139F3E4E'] = function(p0, p1) {
    const $res = natives.setVehicleKersAllowed(p0, p1);
    return $res;
}
hashes['0x50634E348C8D44EF'] = function(p0) {
    const $res = natives.getVehicleHasKers(p0);
    return $res;
}
hashes['0xE16142B94664DEFD'] = function(p0, p1) {
    const $res = natives.setPlaneResistToExplosion(p0, p1);
    return $res;
}
hashes['0x8074CC1886802912'] = function(p0, p1) {
    const $res = natives.setHeliResistToExplosion(p0, p1);
    return $res;
}
hashes['0x26D99D5A82FD18E8'] = function(p0) {
    const $res = natives.setDisableBmxExtraTrickForces(p0);
    return $res;
}
hashes['0x84EA99C62CB3EF0C'] = function(p0, p1, p2) {
    const $res = natives.setHydraulicSuspensionRaiseFactor(p0, p1, p2);
    return $res;
}
hashes['0x0BB5CBDDD0F25AE3'] = function(p0, p1) {
    const $res = natives.getHydraulicSuspensionRaiseFactor(p0, p1);
    return $res;
}
hashes['0x1201E8A3290A3B98'] = function(p0, p1) {
    const $res = natives.setCanUseHydraulics(p0, p1);
    return $res;
}
hashes['0x8EA86DF356801C7D'] = function(p0, p1) {
    const $res = natives.setHydraulicVehicleState(p0, p1);
    return $res;
}
hashes['0xC24075310A8B9CD1'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setHydraulicWheelState(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x5BA68A0840D546AC'] = function(p0, p1) {
    const $res = natives.hasVehiclePetroltankSetOnFireByEntity(p0, p1);
    return $res;
}
hashes['0x4419966C9936071A'] = function(p0) {
    const $res = natives.clearVehiclePetroltankFireCulprit(p0);
    return $res;
}
hashes['0x870B8B7A766615C8'] = function(p0, p1, p2) {
    const $res = natives.setVehicleBobbleheadVelocity(p0, p1, p2);
    return $res;
}
hashes['0x8533CAFDE1F0F336'] = function(p0) {
    const $res = natives.getVehicleIsDummy(p0);
    return $res;
}
hashes['0x4E20D2A627011E8E'] = function(p0, p1) {
    const $res = natives.setVehicleDamageScale(p0, p1);
    return $res;
}
hashes['0x45A561A9421AB6AD'] = function(p0, p1) {
    const $res = natives.setVehicleWeaponDamageScale(p0, p1);
    return $res;
}
hashes['0xD4196117AF7BB974'] = function(p0, p1) {
    const $res = natives.setDisableDamageWithPickedUpEntity(p0, p1);
    return $res;
}
hashes['0xBB2333BB87DDD87F'] = function(p0, p1) {
    const $res = natives.setVehicleUsesMpPlayerDamageMultiplier(p0, p1);
    return $res;
}
hashes['0x73561D4425A021A2'] = function(p0, p1) {
    const $res = natives.setBikeEasyToLand(p0, p1);
    return $res;
}
hashes['0x5B91B229243351A8'] = function(p0, p1) {
    const $res = natives.setInvertVehicleControls(p0, p1);
    return $res;
}
hashes['0x7BBE7FF626A591FE'] = function(p0) {
    const $res = natives.setSpeedBoostEffectDisabled(p0);
    return $res;
}
hashes['0x65B080555EA48149'] = function(p0) {
    const $res = natives.setSlowDownEffectDisabled(p0);
    return $res;
}
hashes['0x428AD3E26C8D9EB0'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setFormationLeader(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xE2F53F172B45EDE1'] = function() {
    const $res = natives.resetFormationLeader();
    return $res;
}
hashes['0xBA91D045575699AD'] = function(p0) {
    const $res = natives.getIsBoatCapsized(p0);
    return $res;
}
hashes['0x80E3357FDEF45C21'] = function(p0, p1) {
    const $res = natives.setAllowRammingSoopOrRamp(p0, p1);
    return $res;
}
hashes['0xEFC13B1CE30D755D'] = function(p0, p1) {
    const $res = natives.setScriptRampImpulseScale(p0, p1);
    return $res;
}
hashes['0x645F4B6E8499F632'] = function(p0, p1) {
    const $res = natives.getIsDoorValid(p0, p1);
    return $res;
}
hashes['0xE00F2AB100B76E89'] = function(p0, p1) {
    const $res = natives.setScriptRocketBoostRechargeTime(p0, p1);
    return $res;
}
hashes['0x36D782F68B309BDA'] = function(p0) {
    const $res = natives.getHasRocketBoost(p0);
    return $res;
}
hashes['0x3D34E80EED4AE3BE'] = function(p0) {
    const $res = natives.isRocketBoostActive(p0);
    return $res;
}
hashes['0x81E1552E35DC3839'] = function(p0, p1) {
    const $res = natives.setRocketBoostActive(p0, p1);
    return $res;
}
hashes['0xDCA174A42133F08C'] = function(p0) {
    const $res = natives.getHasRetractableWheels(p0);
    return $res;
}
hashes['0x1DA0DA9CB3F0C8BF'] = function(p0) {
    const $res = natives.getIsWheelsRetracted(p0);
    return $res;
}
hashes['0xF660602546D27BA8'] = function(p0) {
    const $res = natives.setWheelsExtendedInstantly(p0);
    return $res;
}
hashes['0x5335BE58C083E74E'] = function(p0) {
    const $res = natives.setWheelsRetractedInstantly(p0);
    return $res;
}
hashes['0x9078C0C5EF8C19E9'] = function(p0) {
    const $res = natives.getCarHasJump(p0);
    return $res;
}
hashes['0xF06A16CA55D138D8'] = function(p0, p1) {
    const $res = natives.setUseHigherCarJump(p0, p1);
    return $res;
}
hashes['0xB2E0C0D6922D31F2'] = function(p0, p1) {
    const $res = natives.setClearFreezeWaitingOnCollisionOncePlayerEnters(p0, p1);
    return $res;
}
hashes['0x44CD1F493DB2A0A6'] = function(p0, p1, p2) {
    const $res = natives.setVehicleWeaponRestrictedAmmo(p0, p1, p2);
    return $res;
}
hashes['0x8181CE2F25CB9BB7'] = function(p0, p1) {
    const $res = natives.getVehicleWeaponRestrictedAmmo(p0, p1);
    return $res;
}
hashes['0xBC9CFF381338CB4F'] = function(p0) {
    const $res = natives.getVehicleHasParachute(p0);
    return $res;
}
hashes['0xA916396DF4154EE3'] = function(p0) {
    const $res = natives.getVehicleCanDeployParachute(p0);
    return $res;
}
hashes['0x0BFFB028B3DD0A97'] = function(p0, p1) {
    const $res = natives.vehicleStartParachuting(p0, p1);
    return $res;
}
hashes['0x3DE51E9C80B116CF'] = function(p0) {
    const $res = natives.isVehicleParachuteDeployed(p0);
    return $res;
}
hashes['0x28D034A93FE31BF5'] = function(p0, p1) {
    const $res = natives.vehicleSetRampAndRammingCarsTakeDamage(p0, p1);
    return $res;
}
hashes['0x1BBAC99C0BC53656'] = function(p0, p1) {
    const $res = natives.vehicleSetEnableRampCarSideImpulse(p0, p1);
    return $res;
}
hashes['0x756AE6E962168A04'] = function(p0, p1) {
    const $res = natives.vehicleSetEnableNormaliseRampCarVerticalVeloctiy(p0, p1);
    return $res;
}
hashes['0x9D30687C57BAA0BB'] = function(p0) {
    const $res = natives.vehicleSetJetWashForceEnabled(p0);
    return $res;
}
hashes['0x86B4B6212CB8B627'] = function(p0, p1) {
    const $res = natives.setVehicleWeaponCanTargetObjects(p0, p1);
    return $res;
}
hashes['0x41290B40FA63E6DA'] = function(p0) {
    const $res = natives.setVehicleUseBoostButtonForWheelRetract(p0);
    return $res;
}
hashes['0x4D610C6B56031351'] = function(p0, p1) {
    const $res = natives.vehicleSetParachuteModelOverride(p0, p1);
    return $res;
}
hashes['0xA74AD2439468C883'] = function(p0, p1) {
    const $res = natives.vehicleSetParachuteModelTintIndex(p0, p1);
    return $res;
}
hashes['0x0419B167EE128F33'] = function(p0, p1) {
    const $res = natives.vehicleSetOverrideExtenableSideRatio(p0, p1);
    return $res;
}
hashes['0xF3B0E0AED097A3F5'] = function(p0, p1) {
    const $res = natives.vehicleSetExtenableSideTargetRatio(p0, p1);
    return $res;
}
hashes['0xD3E51C0AB8C26EEE'] = function(p0, p1) {
    const $res = natives.vehicleSetOverrideSideRatio(p0, p1);
    return $res;
}
hashes['0x9B8E1BF04B51F2E8'] = function(p0) {
    const $res = natives.getAllVehicles(p0);
    return $res;
}
hashes['0x72BECCF4B829522E'] = function(p0, p1) {
    const $res = natives.setCargobobExtaPickupRange(p0, p1);
    return $res;
}
hashes['0x66E3AAFACE2D1EB8'] = function(p0, p1, p2) {
    const $res = natives.setOverrideVehicleDoorTorque(p0, p1, p2);
    return $res;
}
hashes['0x1312DDD8385AEE4E'] = function(p0, p1) {
    const $res = natives.setWheelieEnabled(p0, p1);
    return $res;
}
hashes['0xEDBC8405B3895CC9'] = function(p0, p1) {
    const $res = natives.setDisableHeliExplodeFromBodyDamage(p0, p1);
    return $res;
}
hashes['0x26E13D440E7F6064'] = function(p0, p1) {
    const $res = natives.setDisableExplodeFromBodyDamageOnCollision(p0, p1);
    return $res;
}
hashes['0x2FA2494B47FDD009'] = function(p0, p1) {
    const $res = natives.setTrailerAttachmentEnabled(p0, p1);
    return $res;
}
hashes['0xFEB2DDED3509562E'] = function(p0, p1) {
    const $res = natives.setRocketBoostFill(p0, p1);
    return $res;
}
hashes['0x544996C0081ABDEB'] = function(p0, p1) {
    const $res = natives.setGliderActive(p0, p1);
    return $res;
}
hashes['0x78CEEE41F49F421F'] = function(p0, p1) {
    const $res = natives.setShouldResetTurretInScriptedCameras(p0, p1);
    return $res;
}
hashes['0xAF60E6A2936F982A'] = function(p0, p1) {
    const $res = natives.setVehicleDisableCollisionUponCreation(p0, p1);
    return $res;
}
hashes['0x430A7631A84C9BE7'] = function(p0) {
    const $res = natives.setGroundEffectReducesDrag(p0);
    return $res;
}
hashes['0x75627043C6AA90AD'] = function(p0) {
    const $res = natives.setDisableMapCollision(p0);
    return $res;
}
hashes['0x8235F1BEAD557629'] = function(p0, p1) {
    const $res = natives.setDisablePedStandOnTop(p0, p1);
    return $res;
}
hashes['0x9640E30A7F395E4B'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setVehicleDamageScales(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x0BBB9A7A8FFE931B'] = function(p0, p1, p2) {
    const $res = natives.setPlaneSectionDamageScale(p0, p1, p2);
    return $res;
}
hashes['0x94A68DA412C4007D'] = function(p0, p1) {
    const $res = natives.setHeliCanPickupEntityThatHasPickUpDisabled(p0, p1);
    return $res;
}
hashes['0xF4B2ED59DEB5D774'] = function(p0, p1) {
    const $res = natives.setVehicleBombAmmo(p0, p1);
    return $res;
}
hashes['0xEA12BD130D7569A1'] = function(p0) {
    const $res = natives.getVehicleBombAmmo(p0);
    return $res;
}
hashes['0x9BDA23BF666F0855'] = function(p0, p1) {
    const $res = natives.setVehicleCountermeasureAmmo(p0, p1);
    return $res;
}
hashes['0xF846AA63DF56B804'] = function(p0) {
    const $res = natives.getVehicleCountermeasureAmmo(p0);
    return $res;
}
hashes['0x0A3F820A9A9A9AC5'] = function(p0, p1, p2, p3) {
    const $res = natives.setHeliCombatOffset(p0, p1, p2, p3);
    return $res;
}
hashes['0x51F30DB60626A20E'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    const $res = natives.getCanVehicleBePlacedHere(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    return $res;
}
hashes['0x97841634EF7DF1D6'] = function(p0, p1) {
    const $res = natives.setDisableAutomaticCrashTask(p0, p1);
    return $res;
}
hashes['0xD138FA15C9776837'] = function(p0, p1) {
    const $res = natives.setSpecialFlightModeRatio(p0, p1);
    return $res;
}
hashes['0x438B3D7CA026FE91'] = function(p0, p1) {
    const $res = natives.setSpecialFlightModeTargetRatio(p0, p1);
    return $res;
}
hashes['0xF1211889DF15A763'] = function(p0, p1) {
    const $res = natives.setSpecialFlightModeAllowed(p0, p1);
    return $res;
}
hashes['0x2D55FE374D5FDB91'] = function(p0, p1) {
    const $res = natives.setDisableHoverModeFlight(p0, p1);
    return $res;
}
hashes['0x3A9128352EAC9E85'] = function(p0) {
    const $res = natives.getOutriggersDeployed(p0);
    return $res;
}
hashes['0x8DC9675797123522'] = function(p0) {
    const $res = natives.findSpawnCoordinatesForHeli(p0);
    return new mp.Vector3($res);
}
hashes['0xB251E0B33E58B424'] = function(p0, p1, p2) {
    const $res = natives.setDeployFoldingWings(p0, p1, p2);
    return $res;
}
hashes['0xAEF12960FA943792'] = function(p0) {
    const $res = natives.areFoldingWingsDeployed(p0);
    return $res;
}
hashes['0xAA653AE61924B0A0'] = function(p0, p1) {
    const $res = natives.setDipStraightDownWhenCrashingPlane(p0, p1);
    return $res;
}
hashes['0xC60060EB0D8AC7B1'] = function(p0, p1, p2) {
    const $res = natives.setTurretHidden(p0, p1, p2);
    return $res;
}
hashes['0x70A252F60A3E036B'] = function(p0, p1) {
    const $res = natives.setHoverModeWingRatio(p0, p1);
    return $res;
}
hashes['0xE615BB7A7752C76A'] = function(p0, p1) {
    const $res = natives.setDisableTurretMovement(p0, p1);
    return $res;
}
hashes['0x887FA38787DE8C72'] = function(p0) {
    const $res = natives.setForceFixLinkMatrices(p0);
    return $res;
}
hashes['0x498218259FB7C72D'] = function(p0, p1) {
    const $res = natives.setTransformRateForAnimation(p0, p1);
    return $res;
}
hashes['0x41B9FB92EDED32A6'] = function(p0, p1) {
    const $res = natives.setTransformToSubmarineUsesAlternateInput(p0, p1);
    return $res;
}
hashes['0x36DE109527A2C0C4'] = function(p0) {
    const $res = natives.setVehicleCombatMode(p0);
    return $res;
}
hashes['0x82E0AC411E41A5B4'] = function(p0) {
    const $res = natives.setVehicleDetonationMode(p0);
    return $res;
}
hashes['0x99A05839C46CE316'] = function(p0) {
    const $res = natives.setVehicleShuntOnStick(p0);
    return $res;
}
hashes['0xA2459F72C14E2E8D'] = function(p0) {
    const $res = natives.getIsVehicleShunting(p0);
    return $res;
}
hashes['0xE8718FAF591FD224'] = function(p0) {
    const $res = natives.getHasVehicleBeenHitByShunt(p0);
    return $res;
}
hashes['0x04F2FA6E234162F7'] = function(p0) {
    const $res = natives.getLastShuntVehicle(p0);
    return $res;
}
hashes['0x143921E45EC44D62'] = function(p0) {
    const $res = natives.setDisableVehicleExplosionsDamage(p0);
    return $res;
}
hashes['0xC8E9B6B71B8E660D'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setOverrideNitrousLevel(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0x2970EAA18FD5E42F'] = function(p0, p1) {
    const $res = natives.setIncreaseWheelCrushDamage(p0, p1);
    return $res;
}
hashes['0x211E95CE9903940C'] = function(p0) {
    const $res = natives.setDisableWeaponBladeForces(p0);
    return $res;
}
hashes['0x5BBCF35BF6E456F7'] = function(p0) {
    const $res = natives.setUseDoubleClickForCarJump(p0);
    return $res;
}
hashes['0x71AFB258CCED3A27'] = function(p0) {
    const $res = natives.getDoesVehicleHaveTombstone(p0);
    return $res;
}
hashes['0xAE71FB656C600587'] = function(p0, p1) {
    const $res = natives.hideTombstone(p0, p1);
    return $res;
}
hashes['0x0506ED94363AD905'] = function(p0) {
    const $res = natives.getIsVehicleDisabledByEmp(p0);
    return $res;
}
hashes['0x8F0D5BA1C2CC91D7'] = function(p0) {
    const $res = natives.setDisableRetractingWeaponBlades(p0);
    return $res;
}
hashes['0x55EAB010FAEE9380'] = function(p0, p1) {
    const $res = natives.getTyreHealth(p0, p1);
    return $res;
}
hashes['0x74C68EF97645E79D'] = function(p0, p1, p2) {
    const $res = natives.setTyreHealth(p0, p1, p2);
    return $res;
}
hashes['0x6E387895952F4F71'] = function(p0, p1) {
    const $res = natives.getTyreWearRate(p0, p1);
    return $res;
}
hashes['0x01894E2EDE923CA2'] = function(p0, p1, p2) {
    const $res = natives.setTyreWearRate(p0, p1, p2);
    return $res;
}
hashes['0x392183BB9EA57697'] = function(p0, p1, p2) {
    const $res = natives.setTyreWearRateScale(p0, p1, p2);
    return $res;
}
hashes['0xC970D0E0FC31D768'] = function(p0, p1, p2) {
    const $res = natives.setTyreMaximumGripDifferenceDueToWearRate(p0, p1, p2);
    return $res;
}
hashes['0xF8B49F5BA7F850E7'] = function(p0, p1) {
    const $res = natives.setAircraftIgnoreHightmapOptimisation(p0, p1);
    return $res;
}
hashes['0x3A375167F5782A65'] = function(p0, p1) {
    const $res = natives.setReducedSuspensionForce(p0, p1);
    return $res;
}
hashes['0x5AC79C98C5C17F05'] = function(p0, p1) {
    const $res = natives.setDriftTyres(p0, p1);
    return $res;
}
hashes['0x2F5A72430E78C8D3'] = function(p0) {
    const $res = natives.getDriftTyresSet(p0);
    return $res;
}
hashes['0xEC0C1D4922AF9754'] = function(p0, p1) {
    const $res = natives.networkUseHighPrecisionTrainBlending(p0, p1);
    return $res;
}
hashes['0xEF9D388F8D377F44'] = function(p0, p1) {
    const $res = natives.setCheckForEnoughRoomForPed(p0, p1);
    return $res;
}
hashes['0xF6829842C06AE524'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p3)) throw new Error('Argument height should be an array');
    const $res = natives.getWaterHeight(p0, p1, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p3[0] = $res[1];
    return $res[0];
}
hashes['0x8EE6B53CE13A9794'] = function(p0, p1, p2, p3) {
    if (!Array.isArray(p3)) throw new Error('Argument height should be an array');
    const $res = natives.getWaterHeightNoWaves(p0, p1, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p3[0] = $res[1];
    return $res[0];
}
hashes['0xFFA5D878809819DB'] = function(p0, p1, p2, p3, p4, p5, p6) {
    if (typeof p6 != 'object') throw new Error('Argument result should be a Vector3 or an array');
    const $res = natives.testProbeAgainstWater(p0, p1, p2, p3, p4, p5, Array.isArray(p6[0]) ? new alt.Vector3(p6[0][0], p6[0][1], p6[0][2]) : new alt.Vector3(p6[0].x, p6[0].y, p6[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p6[0])) { p6[0][0] = $res[1].x; p6[0][1] = $res[1].y; p6[0][2] = $res[1].z }
    else { p6[0].x = $res[1].x; p6[0].y = $res[1].y; p6[0].z = $res[1].z; }
    return $res[0];
}
hashes['0x8974647ED222EA5F'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    if (!Array.isArray(p7)) throw new Error('Argument waterHeight should be an array');
    const $res = natives.testProbeAgainstAllWater(p0, p1, p2, p3, p4, p5, p6);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p7[0] = $res[1];
    return $res[0];
}
hashes['0x2B3451FA1E3142E2'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p4)) throw new Error('Argument waterHeight should be an array');
    const $res = natives.testVerticalProbeAgainstAllWater(p0, p1, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p4[0] = $res[1];
    return $res[0];
}
hashes['0xC443FD757C3BA637'] = function(p0, p1, p2, p3) {
    const $res = natives.modifyWater(p0, p1, p2, p3);
    return $res;
}
hashes['0xFDBF4CDBC07E1706'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.addExtraCalmingQuad(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xB1252E3E59A82AAF'] = function(p0) {
    const $res = natives.removeExtraCalmingQuad(p0);
    return $res;
}
hashes['0xB96B00E976BE977F'] = function(p0) {
    const $res = natives.setDeepOceanScaler(p0);
    return $res;
}
hashes['0x2B2A2CC86778B619'] = function() {
    const $res = natives.getDeepOceanScaler();
    return $res;
}
hashes['0x547237AA71AB44DE'] = function(p0) {
    const $res = natives.setCalmedWaveHeightScaler(p0);
    return $res;
}
hashes['0x5E5E99285AE812DB'] = function() {
    const $res = natives.resetDeepOceanScaler();
    return $res;
}
hashes['0xC8B46D7727D864AA'] = function(p0) {
    const $res = natives.enableLaserSightRendering(p0);
    return $res;
}
hashes['0x0DB57B41EC1DB083'] = function(p0) {
    const $res = natives.getWeaponComponentTypeModel(p0);
    return $res;
}
hashes['0xF46CDC33180FDA94'] = function(p0) {
    const $res = natives.getWeapontypeModel(p0);
    return $res;
}
hashes['0x4215460B9B8B7FA0'] = function(p0) {
    const $res = natives.getWeapontypeSlot(p0);
    return $res;
}
hashes['0xC3287EE3050FB74C'] = function(p0) {
    const $res = natives.getWeapontypeGroup(p0);
    return $res;
}
hashes['0x6558AC7C17BFEF58'] = function(p0) {
    const $res = natives.getWeaponComponentVariantExtraCount(p0);
    return $res;
}
hashes['0x4D1CB8DC40208A17'] = function(p0, p1) {
    const $res = natives.getWeaponComponentVariantExtraModel(p0, p1);
    return $res;
}
hashes['0xADF692B254977C0C'] = function(p0, p1, p2) {
    const $res = natives.setCurrentPedWeapon(p0, p1, p2);
    return $res;
}
hashes['0x3A87E44BB9A01D54'] = function(p0, p1, p2) {
    if (!Array.isArray(p1)) throw new Error('Argument weaponHash should be an array');
    const $res = natives.getCurrentPedWeapon(p0, p2);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x3B390A939AF0B5FC'] = function(p0, p1) {
    const $res = natives.getCurrentPedWeaponEntityIndex(p0, p1);
    return $res;
}
hashes['0x8483E98E8B888AE2'] = function(p0, p1) {
    const $res = natives.getBestPedWeapon(p0, p1);
    return $res;
}
hashes['0x75C55983C2C39DAA'] = function(p0, p1) {
    const $res = natives.setCurrentPedVehicleWeapon(p0, p1);
    return $res;
}
hashes['0x1017582BCD3832DC'] = function(p0, p1) {
    if (!Array.isArray(p1)) throw new Error('Argument weaponHash should be an array');
    const $res = natives.getCurrentPedVehicleWeapon(p0);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p1[0] = $res[1];
    return $res[0];
}
hashes['0x50276EF8172F5F12'] = function(p0) {
    const $res = natives.setPedCycleVehicleWeaponsOnly(p0);
    return $res;
}
hashes['0x475768A975D5AD17'] = function(p0, p1) {
    const $res = natives.isPedArmed(p0, p1);
    return $res;
}
hashes['0x937C71165CF334B3'] = function(p0) {
    const $res = natives.isWeaponValid(p0);
    return $res;
}
hashes['0x8DECB02F88F428BC'] = function(p0, p1, p2) {
    const $res = natives.hasPedGotWeapon(p0, p1, p2);
    return $res;
}
hashes['0xB80CA294F2F26749'] = function(p0) {
    const $res = natives.isPedWeaponReadyToShoot(p0);
    return $res;
}
hashes['0xEFFED78E9011134D'] = function(p0, p1) {
    const $res = natives.getPedWeapontypeInSlot(p0, p1);
    return $res;
}
hashes['0x015A522136D7F951'] = function(p0, p1) {
    const $res = natives.getAmmoInPedWeapon(p0, p1);
    return $res;
}
hashes['0x78F0424C34306220'] = function(p0, p1, p2) {
    const $res = natives.addAmmoToPed(p0, p1, p2);
    return $res;
}
hashes['0x14E56BC5B5DB6A19'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedAmmo(p0, p1, p2, p3);
    return $res;
}
hashes['0x3EDCB0505123623B'] = function(p0, p1, p2) {
    const $res = natives.setPedInfiniteAmmo(p0, p1, p2);
    return $res;
}
hashes['0x183DADC6AA953186'] = function(p0, p1) {
    const $res = natives.setPedInfiniteAmmoClip(p0, p1);
    return $res;
}
hashes['0x24C024BA8379A70A'] = function(p0, p1) {
    const $res = natives.setPedStunGunFiniteAmmo(p0, p1);
    return $res;
}
hashes['0xBF0FD6E56C964FCB'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.giveWeaponToPed(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0xB282DC6EBD803C75'] = function(p0, p1, p2, p3) {
    const $res = natives.giveDelayedWeaponToPed(p0, p1, p2, p3);
    return $res;
}
hashes['0xF25DF915FA38C5F3'] = function(p0, p1) {
    const $res = natives.removeAllPedWeapons(p0, p1);
    return $res;
}
hashes['0x4899CB088EDF59B8'] = function(p0, p1) {
    const $res = natives.removeWeaponFromPed(p0, p1);
    return $res;
}
hashes['0x6F6981D2253C208F'] = function(p0, p1) {
    const $res = natives.hidePedWeaponForScriptedCutscene(p0, p1);
    return $res;
}
hashes['0x0725A4CCFDED9A70'] = function(p0, p1, p2, p3, p4) {
    const $res = natives.setPedCurrentWeaponVisible(p0, p1, p2, p3, p4);
    return $res;
}
hashes['0x476AE72C1D19D1A8'] = function(p0, p1) {
    const $res = natives.setPedDropsWeaponsWhenDead(p0, p1);
    return $res;
}
hashes['0x2D343D2219CD027A'] = function(p0, p1, p2) {
    const $res = natives.hasPedBeenDamagedByWeapon(p0, p1, p2);
    return $res;
}
hashes['0x0E98F88A24C5F4B8'] = function(p0) {
    const $res = natives.clearPedLastWeaponDamage(p0);
    return $res;
}
hashes['0x131D401334815E94'] = function(p0, p1, p2) {
    const $res = natives.hasEntityBeenDamagedByWeapon(p0, p1, p2);
    return $res;
}
hashes['0xAC678E40BE7C74D2'] = function(p0) {
    const $res = natives.clearEntityLastWeaponDamage(p0);
    return $res;
}
hashes['0x6B7513D9966FBEC0'] = function(p0) {
    const $res = natives.setPedDropsWeapon(p0);
    return $res;
}
hashes['0x208A1888007FC0E6'] = function(p0, p1, p2, p3, p4, p5) {
    const $res = natives.setPedDropsInventoryWeapon(p0, p1, p2, p3, p4, p5);
    return $res;
}
hashes['0xA38DCFFCEA8962FA'] = function(p0, p1, p2) {
    const $res = natives.getMaxAmmoInClip(p0, p1, p2);
    return $res;
}
hashes['0x2E1202248937775C'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument ammo should be an array');
    const $res = natives.getAmmoInClip(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0xDCD2A934D65CB497'] = function(p0, p1, p2) {
    const $res = natives.setAmmoInClip(p0, p1, p2);
    return $res;
}
hashes['0xDC16122C7A20C933'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument ammo should be an array');
    const $res = natives.getMaxAmmo(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x585847C5E4E11709'] = function(p0, p1, p2) {
    if (!Array.isArray(p2)) throw new Error('Argument ammo should be an array');
    const $res = natives.getMaxAmmoByType(p0, p1);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p2[0] = $res[1];
    return $res[0];
}
hashes['0x2472622CE1F2D45F'] = function(p0, p1, p2) {
    const $res = natives.addPedAmmoByType(p0, p1, p2);
    return $res;
}
hashes['0x5FD1E1F011E76D7E'] = function(p0, p1, p2) {
    const $res = natives.setPedAmmoByType(p0, p1, p2);
    return $res;
}
hashes['0x39D22031557946C1'] = function(p0, p1) {
    const $res = natives.getPedAmmoByType(p0, p1);
    return $res;
}
hashes['0xA4EFEF9440A5B0EF'] = function(p0, p1) {
    const $res = natives.setPedAmmoToDrop(p0, p1);
    return $res;
}
hashes['0xE620FD3512A04F18'] = function(p0) {
    const $res = natives.setPickupAmmoAmountScaler(p0);
    return $res;
}
hashes['0x7FEAD38B326B9F74'] = function(p0, p1) {
    const $res = natives.getPedAmmoTypeFromWeapon(p0, p1);
    return $res;
}
hashes['0xF489B44DD5AF4BD9'] = function(p0, p1) {
    const $res = natives.getPedOriginalAmmoTypeFromWeapon(p0, p1);
    return $res;
}
hashes['0x6C4D0409BA1A2BC2'] = function(p0, p1) {
    if (typeof p1 != 'object') throw new Error('Argument coords should be a Vector3 or an array');
    const $res = natives.getPedLastWeaponImpactCoord(p0, Array.isArray(p1[0]) ? new alt.Vector3(p1[0][0], p1[0][1], p1[0][2]) : new alt.Vector3(p1[0].x, p1[0].y, p1[0].z));
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    if (Array.isArray(p1[0])) { p1[0][0] = $res[1].x; p1[0][1] = $res[1].y; p1[0][2] = $res[1].z }
    else { p1[0].x = $res[1].x; p1[0].y = $res[1].y; p1[0].z = $res[1].z; }
    return $res[0];
}
hashes['0xD0D7B1E680ED4A1A'] = function(p0, p1, p2) {
    const $res = natives.setPedGadget(p0, p1, p2);
    return $res;
}
hashes['0xF731332072F5156C'] = function(p0, p1) {
    const $res = natives.getIsPedGadgetEquipped(p0, p1);
    return $res;
}
hashes['0x0A6DB4965674D243'] = function(p0) {
    const $res = natives.getSelectedPedWeapon(p0);
    return $res;
}
hashes['0xFC4BD125DE7611E4'] = function(p0, p1, p2) {
    const $res = natives.explodeProjectiles(p0, p1, p2);
    return $res;
}
hashes['0xFC52E0F37E446528'] = function(p0, p1) {
    const $res = natives.removeAllProjectilesOfType(p0, p1);
    return $res;
}
hashes['0x840F03E9041E2C9C'] = function(p0) {
    const $res = natives.getLockonDistanceOfCurrentPedWeapon(p0);
    return $res;
}
hashes['0x814C9D19DFD69679'] = function(p0) {
    const $res = natives.getMaxRangeOfCurrentPedWeapon(p0);
    return $res;
}
hashes['0x717C8481234E3B88'] = function(p0, p1, p2, p3) {
    const $res = natives.hasVehicleGotProjectileAttached(p0, p1, p2, p3);
    return $res;
}
hashes['0xD966D51AA5B28BB9'] = function(p0, p1, p2) {
    const $res = natives.giveWeaponComponentToPed(p0, p1, p2);
    return $res;
}
hashes['0x1E8BE90C74FB4C09'] = function(p0, p1, p2) {
    const $res = natives.removeWeaponComponentFromPed(p0, p1, p2);
    return $res;
}
hashes['0xC593212475FAE340'] = function(p0, p1, p2) {
    const $res = natives.hasPedGotWeaponComponent(p0, p1, p2);
    return $res;
}
hashes['0x0D78DE0572D3969E'] = function(p0, p1, p2) {
    const $res = natives.isPedWeaponComponentActive(p0, p1, p2);
    return $res;
}
hashes['0x8C0D57EA686FAD87'] = function(p0) {
    const $res = natives.refillAmmoInstantly(p0);
    return $res;
}
hashes['0x20AE33F3AC9C0033'] = function(p0) {
    const $res = natives.makePedReload(p0);
    return $res;
}
hashes['0x5443438F033E29C3'] = function(p0, p1, p2) {
    const $res = natives.requestWeaponAsset(p0, p1, p2);
    return $res;
}
hashes['0x36E353271F0E90EE'] = function(p0) {
    const $res = natives.hasWeaponAssetLoaded(p0);
    return $res;
}
hashes['0xAA08EF13F341C8FC'] = function(p0) {
    const $res = natives.removeWeaponAsset(p0);
    return $res;
}
hashes['0x9541D3CF0D398F36'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const $res = natives.createWeaponObject(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    return $res;
}
hashes['0x33E179436C0B31DB'] = function(p0, p1) {
    const $res = natives.giveWeaponComponentToWeaponObject(p0, p1);
    return $res;
}
hashes['0xF7D82B0D66777611'] = function(p0, p1) {
    const $res = natives.removeWeaponComponentFromWeaponObject(p0, p1);
    return $res;
}
hashes['0x76A18844E743BF91'] = function(p0, p1) {
    const $res = natives.hasWeaponGotWeaponComponent(p0, p1);
    return $res;
}
hashes['0xB1FA61371AF7C4B7'] = function(p0, p1) {
    const $res = natives.giveWeaponObjectToPed(p0, p1);
    return $res;
}
hashes['0x5CEE3DF569CECAB0'] = function(p0, p1) {
    const $res = natives.doesWeaponTakeWeaponComponent(p0, p1);
    return $res;
}
hashes['0xCAE1DC9A0E22A16D'] = function(p0, p1) {
    const $res = natives.getWeaponObjectFromPed(p0, p1);
    return $res;
}
hashes['0x68F8BE6AF5CDF8A6'] = function(p0, p1) {
    const $res = natives.giveLoadoutToPed(p0, p1);
    return $res;
}
hashes['0x50969B9B89ED5738'] = function(p0, p1, p2) {
    const $res = natives.setPedWeaponTintIndex(p0, p1, p2);
    return $res;
}
hashes['0x2B9EEDC07BD06B9F'] = function(p0, p1) {
    const $res = natives.getPedWeaponTintIndex(p0, p1);
    return $res;
}
hashes['0xF827589017D4E4A9'] = function(p0, p1) {
    const $res = natives.setWeaponObjectTintIndex(p0, p1);
    return $res;
}
hashes['0xCD183314F7CD2E57'] = function(p0) {
    const $res = natives.getWeaponObjectTintIndex(p0);
    return $res;
}
hashes['0x5DCF6C5CAB2E9BF7'] = function(p0) {
    const $res = natives.getWeaponTintCount(p0);
    return $res;
}
hashes['0x9FE5633880ECD8ED'] = function(p0, p1, p2, p3) {
    const $res = natives.setPedWeaponComponentTintIndex(p0, p1, p2, p3);
    return $res;
}
hashes['0xF0A60040BE558F2D'] = function(p0, p1, p2) {
    const $res = natives.getPedWeaponComponentTintIndex(p0, p1, p2);
    return $res;
}
hashes['0x5DA825A85D0EA6E6'] = function(p0, p1, p2) {
    const $res = natives.setWeaponObjectComponentTintIndex(p0, p1, p2);
    return $res;
}
hashes['0xB3EA4FEABF41464B'] = function(p0, p1) {
    const $res = natives.getWeaponObjectComponentTintIndex(p0, p1);
    return $res;
}
hashes['0xA2C9AC24B4061285'] = function(p0, p1) {
    const $res = natives.getPedWeaponCamoIndex(p0, p1);
    return $res;
}
hashes['0x977CA98939E82E4B'] = function(p0, p1) {
    const $res = natives.setWeaponObjectCamoIndex(p0, p1);
    return $res;
}
hashes['0xD92C739EE34C9EBA'] = function(p0, p1) {
    const $res = natives.getWeaponHudStats(p0, p1);
    return $res;
}
hashes['0xB3CAF387AE12E9F8'] = function(p0, p1) {
    const $res = natives.getWeaponComponentHudStats(p0, p1);
    return $res;
}
hashes['0x3133B907D8B32053'] = function(p0, p1) {
    const $res = natives.getWeaponDamage(p0, p1);
    return $res;
}
hashes['0x583BE370B1EC6EB4'] = function(p0) {
    const $res = natives.getWeaponClipSize(p0);
    return $res;
}
hashes['0x065D2AACAD8CF7A4'] = function(p0) {
    const $res = natives.getWeaponTimeBetweenShots(p0);
    return $res;
}
hashes['0x8378627201D5497D'] = function(p0, p1, p2) {
    const $res = natives.setPedChanceOfFiringBlanks(p0, p1, p2);
    return $res;
}
hashes['0xB4C8D77C80C0421E'] = function(p0, p1) {
    const $res = natives.setPedShootOrdnanceWeapon(p0, p1);
    return $res;
}
hashes['0x48164DBB970AC3F0'] = function(p0) {
    const $res = natives.requestWeaponHighDetailModel(p0);
    return $res;
}
hashes['0x4757F00BC6323CFE'] = function(p0, p1) {
    const $res = natives.setWeaponDamageModifier(p0, p1);
    return $res;
}
hashes['0x4AE5AC8B852D642C'] = function(p0, p1) {
    const $res = natives.setWeaponAoeModifier(p0, p1);
    return $res;
}
hashes['0xE6D2CEDD370FF98E'] = function(p0, p1) {
    const $res = natives.setWeaponEffectDurationModifier(p0, p1);
    return $res;
}
hashes['0x65F0C5AE05943EC7'] = function(p0) {
    const $res = natives.isPedCurrentWeaponSilenced(p0);
    return $res;
}
hashes['0x4B7620C47217126C'] = function(p0) {
    const $res = natives.isFlashLightOn(p0);
    return $res;
}
hashes['0xCEA66DAD478CD39B'] = function(p0) {
    const $res = natives.setFlashLightFadeDistance(p0);
    return $res;
}
hashes['0x988DB6FE9B3AC000'] = function(p0, p1) {
    const $res = natives.setFlashLightActiveHistory(p0, p1);
    return $res;
}
hashes['0x1055AC3A667F09D9'] = function(p0, p1) {
    const $res = natives.setWeaponAnimationOverride(p0, p1);
    return $res;
}
hashes['0x3BE0BB12D25FB305'] = function(p0) {
    const $res = natives.getWeaponDamageType(p0);
    return $res;
}
hashes['0xE4DCEC7FD5B739A5'] = function(p0) {
    const $res = natives.setEqippedWeaponStartSpinningAtFullSpeed(p0);
    return $res;
}
hashes['0xBC7BE5ABC0879F74'] = function(p0) {
    const $res = natives.canUseWeaponOnParachute(p0);
    return $res;
}
hashes['0x91EF34584710BE99'] = function(p0, p1, p2, p3, p4, p5, p6, p7) {
    const $res = natives.createAirDefenceSphere(p0, p1, p2, p3, p4, p5, p6, p7);
    return $res;
}
hashes['0x9DA58CDBF6BDBC08'] = function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const $res = natives.createAirDefenceAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
    return $res;
}
hashes['0x0ABF535877897560'] = function(p0) {
    const $res = natives.removeAirDefenceSphere(p0);
    return $res;
}
hashes['0x1E45B34ADEBEE48E'] = function() {
    const $res = natives.removeAllAirDefenceSpheres();
    return $res;
}
hashes['0xECDC202B25E5CF48'] = function(p0, p1, p2) {
    const $res = natives.setPlayerTargettableForAirDefenceSphere(p0, p1, p2);
    return $res;
}
hashes['0xDAB963831DBFD3F4'] = function(p0, p1, p2, p3, p4) {
    if (!Array.isArray(p4)) throw new Error('Argument outZoneId should be an array');
    const $res = natives.isAirDefenceSphereInArea(p0, p1, p2, p3);
    if (!Array.isArray($res)) return $res instanceof alt.Vector3 ? new mp.Vector3($res) : $res;
    p4[0] = $res[1];
    return $res[0];
}
hashes['0x44F1012B69313374'] = function(p0, p1, p2, p3) {
    const $res = natives.fireAirDefenceSphereWeaponAtPosition(p0, p1, p2, p3);
    return $res;
}
hashes['0xCD79A550999D7D4F'] = function(p0) {
    const $res = natives.doesAirDefenceSphereExist(p0);
    return $res;
}
hashes['0xB4771B9AAF4E68E4'] = function(p0, p1, p2) {
    const $res = natives.setCanPedSelectInventoryWeapon(p0, p1, p2);
    return $res;
}
hashes['0xEFF296097FF1E509'] = function(p0, p1) {
    const $res = natives.setCanPedSelectAllWeapons(p0, p1);
    return $res;
}
hashes['0x27040C25DE6CB2F4'] = function(p0, p1, p2) {
    const $res = natives.getZoneAtCoords(p0, p1, p2);
    return $res;
}
hashes['0x98CD1D2934B76CC1'] = function(p0) {
    const $res = natives.getZoneFromNameId(p0);
    return $res;
}
hashes['0x4334BC40AA0CB4BB'] = function(p0) {
    const $res = natives.getZonePopschedule(p0);
    return $res;
}
hashes['0xCD90657D4C30E1CA'] = function(p0, p1, p2) {
    const $res = natives.getNameOfZone(p0, p1, p2);
    return $res;
}
hashes['0xBA5ECEEA120E5611'] = function(p0, p1) {
    const $res = natives.setZoneEnabled(p0, p1);
    return $res;
}
hashes['0x5F7B268D15BA0739'] = function(p0) {
    const $res = natives.getZoneScumminess(p0);
    return $res;
}
hashes['0x5F7D596BAC2E7777'] = function(p0, p1) {
    const $res = natives.overridePopscheduleVehicleModel(p0, p1);
    return $res;
}
hashes['0x5C0DE367AA0D911C'] = function(p0) {
    const $res = natives.clearPopscheduleOverrideVehicleModel(p0);
    return $res;
}
hashes['0x7EE64D51E8498728'] = function(p0, p1, p2) {
    const $res = natives.getHashOfMapAreaAtCoords(p0, p1, p2);
    return $res;
}

mp.game2.invoke = mp.game2.invokeFloat = mp.game2.invokeString = mp.game2.invokeVector3 = function (hash, ...args) {
    if (typeof hash === 'number') hash = '0x' + hash.toString(16);
    else if (typeof hash != 'string') hash = String(hash);
    if (hashes[hash]) return hashes[hash](...args);
    throw new Error(`Native ${hash} not found`);
}

mp.game = mp.game2;
